[{"C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\src\\index.js":"1","C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\src\\App.js":"2","C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\src\\reportWebVitals.js":"3","C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\src\\components\\Recording.js":"4","C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\src\\components\\Stocks.js":"5","C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\src\\components\\S2t.js":"6","C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\src\\components\\Risk.js":"7","C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\src\\components\\SocketNavigation.js":"8","C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\src\\components\\Obligations.js":"9","C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\src\\components\\Dashboard.js":"10"},{"size":469,"mtime":1646670605956,"results":"11","hashOfConfig":"12"},{"size":1071,"mtime":1647696200946,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"12"},{"size":2463,"mtime":1647688411883,"results":"15","hashOfConfig":"12"},{"size":99,"mtime":1646607814622,"results":"16","hashOfConfig":"12"},{"size":1352,"mtime":1647691171066,"results":"17","hashOfConfig":"12"},{"size":92,"mtime":1646607784520,"results":"18","hashOfConfig":"12"},{"size":611,"mtime":1646677235117,"results":"19","hashOfConfig":"12"},{"size":90,"mtime":1647691200644,"results":"20","hashOfConfig":"12"},{"size":422,"mtime":1647696436964,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"12uxjlk",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"25"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"25"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\src\\index.js",[],[],["55","56"],"C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\src\\App.js",[],[],"C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\src\\reportWebVitals.js",[],[],"C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\src\\components\\Recording.js",["57"],[],"import { useCallback, useRef, useState } from \"react\";\r\n\r\nconst Recording = () => {\r\n  const mediaRecorder = useRef(null);\r\n  const mediaChunks = useRef([]);\r\n  const stream = useRef(null);\r\n  const [mediaBlobUrl, setMediaBlobUrl] = useState(null);\r\n  const blob = useRef(null);\r\n  const [audioArray, setAudioArray] = useState(null); // BufferArray of the sound is set, but so far unsued. Perhaps useful in future?\r\n\r\n  const getMediaStream = useCallback(async () => {\r\n    const audioStream = await window.navigator.mediaDevices.getUserMedia({\r\n      audio: true,\r\n    });\r\n    audioStream\r\n      .getAudioTracks()\r\n      .forEach((audioTrack) => audioStream.addTrack(audioTrack));\r\n    //console.log(audioStream.getAudioTracks());\r\n    stream.current = audioStream;\r\n  }, []);\r\n\r\n  const onRecordingStop = async () => {\r\n    const blobProperty = Object.assign(\r\n      { type: mediaChunks.current.type },\r\n      { type: \"audio/wav\" }\r\n    );\r\n    blob.current = new Blob(mediaChunks.current, blobProperty);\r\n    const url = URL.createObjectURL(blob.current);\r\n    setMediaBlobUrl(url);\r\n\r\n    const reader = new FileReader();\r\n    reader.onload = function (e) {\r\n      setAudioArray(e.target.result);\r\n    };\r\n    reader.readAsArrayBuffer(blob.current);\r\n  };\r\n\r\n  const pushChunk = ({ data }) => {\r\n    mediaChunks.current.push(data);\r\n  };\r\n\r\n  const startRecording = async () => {\r\n    if (!stream.current) {\r\n      await getMediaStream();\r\n    }\r\n    if (stream.current) {\r\n      const isStreamEnded = stream.current\r\n        .getTracks()\r\n        .some((track) => track.readyState === \"ended\");\r\n      if (isStreamEnded) {\r\n        await getMediaStream();\r\n      }\r\n\r\n      mediaRecorder.current = new MediaRecorder(stream.current);\r\n      mediaRecorder.current.ondataavailable = pushChunk;\r\n      mediaRecorder.current.onstop = onRecordingStop;\r\n      mediaRecorder.current.start();\r\n    }\r\n  };\r\n\r\n  const stopRecording = () => {\r\n    if (mediaRecorder.current) {\r\n      if (mediaRecorder.current.state !== \"inactive\") {\r\n        mediaRecorder.current.stop();\r\n        stream.current &&\r\n          stream.current.getTracks().forEach((track) => track.stop());\r\n        mediaChunks.current = [];\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={startRecording}>Start</button>\r\n      <button onClick={stopRecording}>Stop</button>\r\n      <audio src={mediaBlobUrl} controls autoPlay />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Recording;\r\n","C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\src\\components\\Stocks.js",[],[],"C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\src\\components\\S2t.js",["58"],[],"import { ResultReason } from \"microsoft-cognitiveservices-speech-sdk\";\r\nimport RecordIcon from \"../assets/mic.png\"; // Unused image for button\r\nimport \"./s2t.css\";\r\n\r\nconst S2t = () => {\r\n  const sdk = require(\"microsoft-cognitiveservices-speech-sdk\");\r\n\r\n  async function sttFromMic() {\r\n    const speechConfig = sdk.SpeechConfig.fromSubscription(\r\n      \"2ed0fc03d2e441388c4fd35cc91c23b3\",\r\n      \"eastus\"\r\n    );\r\n    speechConfig.speechRecognitionLanguage = \"de-CH\";\r\n\r\n    const audioConfig = sdk.AudioConfig.fromDefaultMicrophoneInput();\r\n    const recognizer = new sdk.SpeechRecognizer(speechConfig, audioConfig);\r\n\r\n    recognizer.recognizeOnceAsync((result) => {\r\n      if (result.reason === ResultReason.RecognizedSpeech) {\r\n        console.log(\r\n          result.text +\r\n            \"\\n Recording stopped. Press the streaming button to start again.\"\r\n        );\r\n      } else {\r\n        console.log(\r\n          \"ERROR: Speech was cancelled or could not be recognized. Ensure your microphone is working properly.\"\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  return (\r\n    sdk && (\r\n      <>\r\n        <div className=\"record-div\">\r\n          <h1>Speech to text</h1>\r\n          <button className=\"button-rec\" onClick={sttFromMic}>\r\n            Start streaming\r\n          </button>\r\n        </div>\r\n      </>\r\n    )\r\n  );\r\n};\r\n\r\nexport default S2t;\r\n","C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\src\\components\\Risk.js",[],[],"C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\src\\components\\SocketNavigation.js",[],[],"C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\src\\components\\Obligations.js",[],[],"C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\src\\components\\Dashboard.js",[],[],{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":9,"column":10,"nodeType":"65","messageId":"66","endLine":9,"endColumn":20},{"ruleId":"63","severity":1,"message":"67","line":2,"column":8,"nodeType":"65","messageId":"66","endLine":2,"endColumn":18},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"no-unused-vars","'audioArray' is assigned a value but never used.","Identifier","unusedVar","'RecordIcon' is defined but never used.","no-global-assign","no-unsafe-negation"]