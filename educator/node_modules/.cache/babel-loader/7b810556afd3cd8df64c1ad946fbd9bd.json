{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport { Animated, SafeAreaView, StyleSheet } from 'react-native';\nimport Button from './Button';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport { withTheme } from '../core/theming';\nconst DURATION_SHORT = 4000;\nconst DURATION_MEDIUM = 7000;\nconst DURATION_LONG = 10000;\n/**\n * Snackbars provide brief feedback about an operation through a message at the bottom of the screen.\n * Snackbar by default uses `onSurface` color from theme.\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/snackbar.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View, StyleSheet } from 'react-native';\n * import { Button, Snackbar } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(false);\n *\n *   const onToggleSnackBar = () => setVisible(!visible);\n *\n *   const onDismissSnackBar = () => setVisible(false);\n *\n *   return (\n *     <View style={styles.container}>\n *       <Button onPress={onToggleSnackBar}>{visible ? 'Hide' : 'Show'}</Button>\n *       <Snackbar\n *         visible={visible}\n *         onDismiss={onDismissSnackBar}\n *         action={{\n *           label: 'Undo',\n *           onPress: () => {\n *             // Do something\n *           },\n *         }}>\n *         Hey there! I'm a Snackbar.\n *       </Snackbar>\n *     </View>\n *   );\n * };\n *\n * const styles = StyleSheet.create({\n *   container: {\n *     flex: 1,\n *     justifyContent: 'space-between',\n *   },\n * });\n *\n * export default MyComponent;\n * ```\n */\n\nconst Snackbar = _ref => {\n  let {\n    visible,\n    action,\n    duration = DURATION_MEDIUM,\n    onDismiss,\n    children,\n    wrapperStyle,\n    style,\n    theme,\n    ...rest\n  } = _ref;\n  const {\n    current: opacity\n  } = React.useRef(new Animated.Value(0.0));\n  const [hidden, setHidden] = React.useState(!visible);\n  const hideTimeout = React.useRef(undefined);\n  const {\n    scale\n  } = theme.animation;\n  React.useEffect(() => {\n    return () => {\n      if (hideTimeout.current) clearTimeout(hideTimeout.current);\n    };\n  }, []);\n  React.useLayoutEffect(() => {\n    if (visible) {\n      // show\n      if (hideTimeout.current) clearTimeout(hideTimeout.current);\n      setHidden(false);\n      Animated.timing(opacity, {\n        toValue: 1,\n        duration: 200 * scale,\n        useNativeDriver: true\n      }).start(_ref2 => {\n        let {\n          finished\n        } = _ref2;\n\n        if (finished) {\n          const isInfinity = duration === Number.POSITIVE_INFINITY || duration === Number.NEGATIVE_INFINITY;\n\n          if (finished && !isInfinity) {\n            hideTimeout.current = setTimeout(onDismiss, duration);\n          }\n        }\n      });\n    } else {\n      // hide\n      if (hideTimeout.current) clearTimeout(hideTimeout.current);\n      Animated.timing(opacity, {\n        toValue: 0,\n        duration: 100 * scale,\n        useNativeDriver: true\n      }).start(_ref3 => {\n        let {\n          finished\n        } = _ref3;\n        if (finished) setHidden(true);\n      });\n    }\n  }, [visible, duration, opacity, scale, onDismiss]);\n  const {\n    colors,\n    roundness\n  } = theme;\n  if (hidden) return null;\n  const {\n    style: actionStyle,\n    label: actionLabel,\n    onPress: onPressAction,\n    ...actionProps\n  } = action || {};\n  return /*#__PURE__*/React.createElement(SafeAreaView, {\n    pointerEvents: \"box-none\",\n    style: [styles.wrapper, wrapperStyle]\n  }, /*#__PURE__*/React.createElement(Surface, _extends({\n    pointerEvents: \"box-none\",\n    accessibilityLiveRegion: \"polite\",\n    style: [styles.container, {\n      borderRadius: roundness,\n      opacity: opacity,\n      transform: [{\n        scale: visible ? opacity.interpolate({\n          inputRange: [0, 1],\n          outputRange: [0.9, 1]\n        }) : 1\n      }]\n    }, {\n      backgroundColor: colors.onSurface\n    }, style]\n  }, rest), /*#__PURE__*/React.createElement(Text, {\n    style: [styles.content, {\n      marginRight: action ? 0 : 16,\n      color: colors.surface\n    }]\n  }, children), action ? /*#__PURE__*/React.createElement(Button, _extends({\n    onPress: () => {\n      onPressAction === null || onPressAction === void 0 ? void 0 : onPressAction();\n      onDismiss();\n    },\n    style: [styles.button, actionStyle],\n    color: colors.accent,\n    compact: true,\n    mode: \"text\"\n  }, actionProps), actionLabel) : null));\n};\n/**\n * Show the Snackbar for a short duration.\n */\n\n\nSnackbar.DURATION_SHORT = DURATION_SHORT;\n/**\n * Show the Snackbar for a medium duration.\n */\n\nSnackbar.DURATION_MEDIUM = DURATION_MEDIUM;\n/**\n * Show the Snackbar for a long duration.\n */\n\nSnackbar.DURATION_LONG = DURATION_LONG;\nconst styles = StyleSheet.create({\n  wrapper: {\n    position: 'absolute',\n    bottom: 0,\n    width: '100%'\n  },\n  container: {\n    elevation: 6,\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    margin: 8,\n    borderRadius: 4\n  },\n  content: {\n    marginLeft: 16,\n    marginVertical: 14,\n    flexWrap: 'wrap',\n    flex: 1\n  },\n  button: {\n    marginHorizontal: 8,\n    marginVertical: 6\n  }\n});\nexport default withTheme(Snackbar);","map":{"version":3,"mappings":"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","names":["React","Animated","SafeAreaView","StyleSheet","Button","Surface","Text","withTheme","DURATION_SHORT","DURATION_MEDIUM","DURATION_LONG","Snackbar","visible","action","duration","onDismiss","children","wrapperStyle","style","theme","rest","current","opacity","useRef","Value","hidden","setHidden","useState","hideTimeout","undefined","scale","animation","useEffect","clearTimeout","useLayoutEffect","timing","toValue","useNativeDriver","start","finished","isInfinity","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","setTimeout","colors","roundness","actionStyle","label","actionLabel","onPress","onPressAction","actionProps","pointerEvents","styles","wrapper","accessibilityLiveRegion","container","borderRadius","transform","interpolate","inputRange","outputRange","backgroundColor","onSurface","content","marginRight","color","surface","button","accent","compact","mode","create","position","bottom","width","elevation","flexDirection","justifyContent","alignItems","margin","marginLeft","marginVertical","flexWrap","flex","marginHorizontal"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\node_modules\\react-native-paper\\lib\\module\\components\\Snackbar.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  SafeAreaView,\n  StyleProp,\n  StyleSheet,\n  ViewStyle,\n  View,\n} from 'react-native';\n\nimport Button from './Button';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport { withTheme } from '../core/theming';\n\nexport type SnackbarProps = React.ComponentProps<typeof Surface> & {\n  /**\n   * Whether the Snackbar is currently visible.\n   */\n  visible: boolean;\n  /**\n   * Label and press callback for the action button. It should contain the following properties:\n   * - `label` - Label of the action button\n   * - `onPress` - Callback that is called when action button is pressed.\n   */\n  action?: Omit<React.ComponentProps<typeof Button>, 'children'> & {\n    label: string;\n  };\n  /**\n   * The duration for which the Snackbar is shown.\n   */\n  duration?: number;\n  /**\n   * Callback called when Snackbar is dismissed. The `visible` prop needs to be updated when this is called.\n   */\n  onDismiss: () => void;\n  /**\n   * Text content of the Snackbar.\n   */\n  children: React.ReactNode;\n  /**\n   * Style for the wrapper of the snackbar\n   */\n  wrapperStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  ref?: React.RefObject<View>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\nconst DURATION_SHORT = 4000;\nconst DURATION_MEDIUM = 7000;\nconst DURATION_LONG = 10000;\n\n/**\n * Snackbars provide brief feedback about an operation through a message at the bottom of the screen.\n * Snackbar by default uses `onSurface` color from theme.\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/snackbar.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View, StyleSheet } from 'react-native';\n * import { Button, Snackbar } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(false);\n *\n *   const onToggleSnackBar = () => setVisible(!visible);\n *\n *   const onDismissSnackBar = () => setVisible(false);\n *\n *   return (\n *     <View style={styles.container}>\n *       <Button onPress={onToggleSnackBar}>{visible ? 'Hide' : 'Show'}</Button>\n *       <Snackbar\n *         visible={visible}\n *         onDismiss={onDismissSnackBar}\n *         action={{\n *           label: 'Undo',\n *           onPress: () => {\n *             // Do something\n *           },\n *         }}>\n *         Hey there! I'm a Snackbar.\n *       </Snackbar>\n *     </View>\n *   );\n * };\n *\n * const styles = StyleSheet.create({\n *   container: {\n *     flex: 1,\n *     justifyContent: 'space-between',\n *   },\n * });\n *\n * export default MyComponent;\n * ```\n */\nconst Snackbar = ({\n  visible,\n  action,\n  duration = DURATION_MEDIUM,\n  onDismiss,\n  children,\n  wrapperStyle,\n  style,\n  theme,\n  ...rest\n}: SnackbarProps) => {\n  const { current: opacity } = React.useRef<Animated.Value>(\n    new Animated.Value(0.0)\n  );\n  const [hidden, setHidden] = React.useState<boolean>(!visible);\n\n  const hideTimeout = React.useRef<NodeJS.Timeout | undefined>(undefined);\n\n  const { scale } = theme.animation;\n\n  React.useEffect(() => {\n    return () => {\n      if (hideTimeout.current) clearTimeout(hideTimeout.current);\n    };\n  }, []);\n\n  React.useLayoutEffect(() => {\n    if (visible) {\n      // show\n      if (hideTimeout.current) clearTimeout(hideTimeout.current);\n      setHidden(false);\n      Animated.timing(opacity, {\n        toValue: 1,\n        duration: 200 * scale,\n        useNativeDriver: true,\n      }).start(({ finished }) => {\n        if (finished) {\n          const isInfinity =\n            duration === Number.POSITIVE_INFINITY ||\n            duration === Number.NEGATIVE_INFINITY;\n\n          if (finished && !isInfinity) {\n            hideTimeout.current = (setTimeout(\n              onDismiss,\n              duration\n            ) as unknown) as NodeJS.Timeout;\n          }\n        }\n      });\n    } else {\n      // hide\n      if (hideTimeout.current) clearTimeout(hideTimeout.current);\n\n      Animated.timing(opacity, {\n        toValue: 0,\n        duration: 100 * scale,\n        useNativeDriver: true,\n      }).start(({ finished }) => {\n        if (finished) setHidden(true);\n      });\n    }\n  }, [visible, duration, opacity, scale, onDismiss]);\n\n  const { colors, roundness } = theme;\n\n  if (hidden) return null;\n\n  const {\n    style: actionStyle,\n    label: actionLabel,\n    onPress: onPressAction,\n    ...actionProps\n  } = action || {};\n\n  return (\n    <SafeAreaView\n      pointerEvents=\"box-none\"\n      style={[styles.wrapper, wrapperStyle]}\n    >\n      <Surface\n        pointerEvents=\"box-none\"\n        accessibilityLiveRegion=\"polite\"\n        style={\n          [\n            styles.container,\n            {\n              borderRadius: roundness,\n              opacity: opacity,\n              transform: [\n                {\n                  scale: visible\n                    ? opacity.interpolate({\n                        inputRange: [0, 1],\n                        outputRange: [0.9, 1],\n                      })\n                    : 1,\n                },\n              ],\n            },\n            { backgroundColor: colors.onSurface },\n            style,\n          ] as StyleProp<ViewStyle>\n        }\n        {...rest}\n      >\n        <Text\n          style={[\n            styles.content,\n            { marginRight: action ? 0 : 16, color: colors.surface },\n          ]}\n        >\n          {children}\n        </Text>\n        {action ? (\n          <Button\n            onPress={() => {\n              onPressAction?.();\n              onDismiss();\n            }}\n            style={[styles.button, actionStyle]}\n            color={colors.accent}\n            compact\n            mode=\"text\"\n            {...actionProps}\n          >\n            {actionLabel}\n          </Button>\n        ) : null}\n      </Surface>\n    </SafeAreaView>\n  );\n};\n\n/**\n * Show the Snackbar for a short duration.\n */\nSnackbar.DURATION_SHORT = DURATION_SHORT;\n\n/**\n * Show the Snackbar for a medium duration.\n */\nSnackbar.DURATION_MEDIUM = DURATION_MEDIUM;\n\n/**\n * Show the Snackbar for a long duration.\n */\nSnackbar.DURATION_LONG = DURATION_LONG;\n\nconst styles = StyleSheet.create({\n  wrapper: {\n    position: 'absolute',\n    bottom: 0,\n    width: '100%',\n  },\n  container: {\n    elevation: 6,\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    margin: 8,\n    borderRadius: 4,\n  },\n  content: {\n    marginLeft: 16,\n    marginVertical: 14,\n    flexWrap: 'wrap',\n    flex: 1,\n  },\n  button: {\n    marginHorizontal: 8,\n    marginVertical: 6,\n  },\n});\n\nexport default withTheme(Snackbar);\n"]},"metadata":{},"sourceType":"module"}