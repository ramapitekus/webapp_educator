{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { FileAudioSource, MicAudioSource, PcmRecorder } from \"../../common.browser/Exports\";\nimport { Contracts } from \"../Contracts\";\nimport { AudioInputStream, PullAudioInputStreamCallback, PullAudioOutputStream, PushAudioOutputStream, PushAudioOutputStreamCallback, SpeakerAudioDestination } from \"../Exports\";\nimport { AudioFileWriter } from \"./AudioFileWriter\";\nimport { PullAudioInputStreamImpl } from \"./AudioInputStream\";\nimport { PushAudioOutputStreamImpl } from \"./AudioOutputStream\";\n/**\r\n * Represents audio input configuration used for specifying what type of input to use (microphone, file, stream).\r\n * @class AudioConfig\r\n * Updated in version 1.11.0\r\n */\n\nexport class AudioConfig {\n  /**\r\n   * Creates an AudioConfig object representing the default microphone on the system.\r\n   * @member AudioConfig.fromDefaultMicrophoneInput\r\n   * @function\r\n   * @public\r\n   * @returns {AudioConfig} The audio input configuration being created.\r\n   */\n  static fromDefaultMicrophoneInput() {\n    const pcmRecorder = new PcmRecorder(true);\n    return new AudioConfigImpl(new MicAudioSource(pcmRecorder));\n  }\n  /**\r\n   * Creates an AudioConfig object representing a microphone with the specified device ID.\r\n   * @member AudioConfig.fromMicrophoneInput\r\n   * @function\r\n   * @public\r\n   * @param {string | undefined} deviceId - Specifies the device ID of the microphone to be used.\r\n   *        Default microphone is used the value is omitted.\r\n   * @returns {AudioConfig} The audio input configuration being created.\r\n   */\n\n\n  static fromMicrophoneInput(deviceId) {\n    const pcmRecorder = new PcmRecorder(true);\n    return new AudioConfigImpl(new MicAudioSource(pcmRecorder, deviceId));\n  }\n  /**\r\n   * Creates an AudioConfig object representing the specified file.\r\n   * @member AudioConfig.fromWavFileInput\r\n   * @function\r\n   * @public\r\n   * @param {File} fileName - Specifies the audio input file. Currently, only WAV / PCM is supported.\r\n   * @returns {AudioConfig} The audio input configuration being created.\r\n   */\n\n\n  static fromWavFileInput(file) {\n    let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"unnamedBuffer.wav\";\n    return new AudioConfigImpl(new FileAudioSource(file, name));\n  }\n  /**\r\n   * Creates an AudioConfig object representing the specified stream.\r\n   * @member AudioConfig.fromStreamInput\r\n   * @function\r\n   * @public\r\n   * @param {AudioInputStream | PullAudioInputStreamCallback | MediaStream} audioStream - Specifies the custom audio input\r\n   *        stream. Currently, only WAV / PCM is supported.\r\n   * @returns {AudioConfig} The audio input configuration being created.\r\n   */\n\n\n  static fromStreamInput(audioStream) {\n    if (audioStream instanceof PullAudioInputStreamCallback) {\n      return new AudioConfigImpl(new PullAudioInputStreamImpl(audioStream));\n    }\n\n    if (audioStream instanceof AudioInputStream) {\n      return new AudioConfigImpl(audioStream);\n    }\n\n    if (typeof MediaStream !== \"undefined\" && audioStream instanceof MediaStream) {\n      const pcmRecorder = new PcmRecorder(false);\n      return new AudioConfigImpl(new MicAudioSource(pcmRecorder, null, null, audioStream));\n    }\n\n    throw new Error(\"Not Supported Type\");\n  }\n  /**\r\n   * Creates an AudioConfig object representing the default speaker.\r\n   * @member AudioConfig.fromDefaultSpeakerOutput\r\n   * @function\r\n   * @public\r\n   * @returns {AudioConfig} The audio output configuration being created.\r\n   * Added in version 1.11.0\r\n   */\n\n\n  static fromDefaultSpeakerOutput() {\n    return new AudioOutputConfigImpl(new SpeakerAudioDestination());\n  }\n  /**\r\n   * Creates an AudioConfig object representing the custom IPlayer object.\r\n   * You can use the IPlayer object to control pause, resume, etc.\r\n   * @member AudioConfig.fromSpeakerOutput\r\n   * @function\r\n   * @public\r\n   * @param {IPlayer} player - the IPlayer object for playback.\r\n   * @returns {AudioConfig} The audio output configuration being created.\r\n   * Added in version 1.12.0\r\n   */\n\n\n  static fromSpeakerOutput(player) {\n    if (player === undefined) {\n      return AudioConfig.fromDefaultSpeakerOutput();\n    }\n\n    if (player instanceof SpeakerAudioDestination) {\n      return new AudioOutputConfigImpl(player);\n    }\n\n    throw new Error(\"Not Supported Type\");\n  }\n  /**\r\n   * Creates an AudioConfig object representing a specified output audio file\r\n   * @member AudioConfig.fromAudioFileOutput\r\n   * @function\r\n   * @public\r\n   * @param {PathLike} filename - the filename of the output audio file\r\n   * @returns {AudioConfig} The audio output configuration being created.\r\n   * Added in version 1.11.0\r\n   */\n\n\n  static fromAudioFileOutput(filename) {\n    return new AudioOutputConfigImpl(new AudioFileWriter(filename));\n  }\n  /**\r\n   * Creates an AudioConfig object representing a specified audio output stream\r\n   * @member AudioConfig.fromStreamOutput\r\n   * @function\r\n   * @public\r\n   * @param {AudioOutputStream | PushAudioOutputStreamCallback} audioStream - Specifies the custom audio output\r\n   *        stream.\r\n   * @returns {AudioConfig} The audio output configuration being created.\r\n   * Added in version 1.11.0\r\n   */\n\n\n  static fromStreamOutput(audioStream) {\n    if (audioStream instanceof PushAudioOutputStreamCallback) {\n      return new AudioOutputConfigImpl(new PushAudioOutputStreamImpl(audioStream));\n    }\n\n    if (audioStream instanceof PushAudioOutputStream) {\n      return new AudioOutputConfigImpl(audioStream);\n    }\n\n    if (audioStream instanceof PullAudioOutputStream) {\n      return new AudioOutputConfigImpl(audioStream);\n    }\n\n    throw new Error(\"Not Supported Type\");\n  }\n\n}\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class AudioConfigImpl\r\n */\n\nexport class AudioConfigImpl extends AudioConfig {\n  /**\r\n   * Creates and initializes an instance of this class.\r\n   * @constructor\r\n   * @param {IAudioSource} source - An audio source.\r\n   */\n  constructor(source) {\n    super();\n    this.privSource = source;\n  }\n  /**\r\n   * Format information for the audio\r\n   */\n\n\n  get format() {\n    return this.privSource.format;\n  }\n  /**\r\n   * @member AudioConfigImpl.prototype.close\r\n   * @function\r\n   * @public\r\n   */\n\n\n  close(cb, err) {\n    this.privSource.turnOff().then(() => {\n      if (!!cb) {\n        cb();\n      }\n    }, error => {\n      if (!!err) {\n        err(error);\n      }\n    });\n  }\n  /**\r\n   * @member AudioConfigImpl.prototype.id\r\n   * @function\r\n   * @public\r\n   */\n\n\n  id() {\n    return this.privSource.id();\n  }\n  /**\r\n   * @member AudioConfigImpl.prototype.blob\r\n   * @function\r\n   * @public\r\n   */\n\n\n  get blob() {\n    return this.privSource.blob;\n  }\n  /**\r\n   * @member AudioConfigImpl.prototype.turnOn\r\n   * @function\r\n   * @public\r\n   * @returns {Promise<void>} A promise.\r\n   */\n\n\n  turnOn() {\n    return this.privSource.turnOn();\n  }\n  /**\r\n   * @member AudioConfigImpl.prototype.attach\r\n   * @function\r\n   * @public\r\n   * @param {string} audioNodeId - The audio node id.\r\n   * @returns {Promise<IAudioStreamNode>} A promise.\r\n   */\n\n\n  attach(audioNodeId) {\n    return this.privSource.attach(audioNodeId);\n  }\n  /**\r\n   * @member AudioConfigImpl.prototype.detach\r\n   * @function\r\n   * @public\r\n   * @param {string} audioNodeId - The audio node id.\r\n   */\n\n\n  detach(audioNodeId) {\n    return this.privSource.detach(audioNodeId);\n  }\n  /**\r\n   * @member AudioConfigImpl.prototype.turnOff\r\n   * @function\r\n   * @public\r\n   * @returns {Promise<void>} A promise.\r\n   */\n\n\n  turnOff() {\n    return this.privSource.turnOff();\n  }\n  /**\r\n   * @member AudioConfigImpl.prototype.events\r\n   * @function\r\n   * @public\r\n   * @returns {EventSource<AudioSourceEvent>} An event source for audio events.\r\n   */\n\n\n  get events() {\n    return this.privSource.events;\n  }\n\n  setProperty(name, value) {\n    Contracts.throwIfNull(value, \"value\");\n\n    if (undefined !== this.privSource.setProperty) {\n      this.privSource.setProperty(name, value);\n    } else {\n      throw new Error(\"This AudioConfig instance does not support setting properties.\");\n    }\n  }\n\n  getProperty(name, def) {\n    if (undefined !== this.privSource.getProperty) {\n      return this.privSource.getProperty(name, def);\n    } else {\n      throw new Error(\"This AudioConfig instance does not support getting properties.\");\n    }\n\n    return def;\n  }\n\n  get deviceInfo() {\n    return this.privSource.deviceInfo;\n  }\n\n}\nexport class AudioOutputConfigImpl extends AudioConfig {\n  /**\r\n   * Creates and initializes an instance of this class.\r\n   * @constructor\r\n   * @param {IAudioDestination} destination - An audio destination.\r\n   */\n  constructor(destination) {\n    super();\n    this.privDestination = destination;\n  }\n\n  set format(format) {\n    this.privDestination.format = format;\n  }\n\n  write(buffer) {\n    this.privDestination.write(buffer);\n  }\n\n  close() {\n    this.privDestination.close();\n  }\n\n  id() {\n    return this.privDestination.id();\n  }\n\n  setProperty(name, value) {\n    throw new Error(\"This AudioConfig instance does not support setting properties.\");\n  }\n\n  getProperty(name, def) {\n    throw new Error(\"This AudioConfig instance does not support getting properties.\");\n  }\n\n}","map":{"version":3,"mappings":"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","names":["FileAudioSource","MicAudioSource","PcmRecorder","Contracts","AudioInputStream","PullAudioInputStreamCallback","PullAudioOutputStream","PushAudioOutputStream","PushAudioOutputStreamCallback","SpeakerAudioDestination","AudioFileWriter","PullAudioInputStreamImpl","PushAudioOutputStreamImpl","AudioConfig","fromDefaultMicrophoneInput","pcmRecorder","AudioConfigImpl","fromMicrophoneInput","deviceId","fromWavFileInput","file","name","fromStreamInput","audioStream","MediaStream","Error","fromDefaultSpeakerOutput","AudioOutputConfigImpl","fromSpeakerOutput","player","undefined","fromAudioFileOutput","filename","fromStreamOutput","constructor","source","privSource","format","close","cb","err","turnOff","then","error","id","blob","turnOn","attach","audioNodeId","detach","events","setProperty","value","throwIfNull","getProperty","def","deviceInfo","destination","privDestination","write","buffer"],"sources":["C:\\Users\\ozgur\\Documents\\VSCodeProjects\\webapp_educator\\educator\\node_modules\\microsoft-cognitiveservices-speech-sdk\\distrib\\es2015\\src\\sdk\\Audio\\src\\sdk\\Audio\\AudioConfig.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// tslint:disable:max-classes-per-file\r\n\r\nimport { PathLike } from \"fs\";\r\nimport {\r\n    FileAudioSource,\r\n    MicAudioSource,\r\n    PcmRecorder,\r\n} from \"../../common.browser/Exports\";\r\nimport { ISpeechConfigAudioDevice } from \"../../common.speech/Exports\";\r\nimport {\r\n    AudioSourceEvent,\r\n    Deferred,\r\n    EventSource,\r\n    IAudioDestination,\r\n    IAudioSource,\r\n    IAudioStreamNode\r\n} from \"../../common/Exports\";\r\nimport { Contracts } from \"../Contracts\";\r\nimport {\r\n    AudioInputStream,\r\n    AudioOutputStream,\r\n    AudioStreamFormat,\r\n    IPlayer,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    PullAudioInputStreamCallback,\r\n    PullAudioOutputStream,\r\n    PushAudioOutputStream,\r\n    PushAudioOutputStreamCallback,\r\n    SpeakerAudioDestination\r\n} from \"../Exports\";\r\nimport { AudioFileWriter } from \"./AudioFileWriter\";\r\nimport { PullAudioInputStreamImpl, PushAudioInputStreamImpl } from \"./AudioInputStream\";\r\nimport { PullAudioOutputStreamImpl, PushAudioOutputStreamImpl } from \"./AudioOutputStream\";\r\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat\";\r\n\r\n/**\r\n * Represents audio input configuration used for specifying what type of input to use (microphone, file, stream).\r\n * @class AudioConfig\r\n * Updated in version 1.11.0\r\n */\r\nexport abstract class AudioConfig {\r\n    /**\r\n     * Creates an AudioConfig object representing the default microphone on the system.\r\n     * @member AudioConfig.fromDefaultMicrophoneInput\r\n     * @function\r\n     * @public\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromDefaultMicrophoneInput(): AudioConfig {\r\n        const pcmRecorder = new PcmRecorder(true);\r\n        return new AudioConfigImpl(new MicAudioSource(pcmRecorder));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing a microphone with the specified device ID.\r\n     * @member AudioConfig.fromMicrophoneInput\r\n     * @function\r\n     * @public\r\n     * @param {string | undefined} deviceId - Specifies the device ID of the microphone to be used.\r\n     *        Default microphone is used the value is omitted.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromMicrophoneInput(deviceId?: string): AudioConfig {\r\n        const pcmRecorder = new PcmRecorder(true);\r\n        return new AudioConfigImpl(new MicAudioSource(pcmRecorder, deviceId));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the specified file.\r\n     * @member AudioConfig.fromWavFileInput\r\n     * @function\r\n     * @public\r\n     * @param {File} fileName - Specifies the audio input file. Currently, only WAV / PCM is supported.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromWavFileInput(file: File | Buffer, name: string = \"unnamedBuffer.wav\"): AudioConfig {\r\n        return new AudioConfigImpl(new FileAudioSource(file, name));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the specified stream.\r\n     * @member AudioConfig.fromStreamInput\r\n     * @function\r\n     * @public\r\n     * @param {AudioInputStream | PullAudioInputStreamCallback | MediaStream} audioStream - Specifies the custom audio input\r\n     *        stream. Currently, only WAV / PCM is supported.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromStreamInput(audioStream: AudioInputStream | PullAudioInputStreamCallback\r\n        | MediaStream): AudioConfig {\r\n        if (audioStream instanceof PullAudioInputStreamCallback) {\r\n            return new AudioConfigImpl(new PullAudioInputStreamImpl(audioStream as PullAudioInputStreamCallback));\r\n        }\r\n\r\n        if (audioStream instanceof AudioInputStream) {\r\n            return new AudioConfigImpl(audioStream as PushAudioInputStreamImpl);\r\n        }\r\n        if (typeof MediaStream !== \"undefined\" && audioStream instanceof MediaStream) {\r\n            const pcmRecorder = new PcmRecorder(false);\r\n            return new AudioConfigImpl(new MicAudioSource(pcmRecorder, null, null, audioStream));\r\n        }\r\n\r\n        throw new Error(\"Not Supported Type\");\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the default speaker.\r\n     * @member AudioConfig.fromDefaultSpeakerOutput\r\n     * @function\r\n     * @public\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.11.0\r\n     */\r\n    public static fromDefaultSpeakerOutput(): AudioConfig {\r\n        return new AudioOutputConfigImpl(new SpeakerAudioDestination());\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the custom IPlayer object.\r\n     * You can use the IPlayer object to control pause, resume, etc.\r\n     * @member AudioConfig.fromSpeakerOutput\r\n     * @function\r\n     * @public\r\n     * @param {IPlayer} player - the IPlayer object for playback.\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.12.0\r\n     */\r\n    public static fromSpeakerOutput(player?: IPlayer): AudioConfig {\r\n        if (player === undefined) {\r\n            return AudioConfig.fromDefaultSpeakerOutput();\r\n        }\r\n        if (player instanceof SpeakerAudioDestination) {\r\n            return new AudioOutputConfigImpl(player as SpeakerAudioDestination);\r\n        }\r\n\r\n        throw new Error(\"Not Supported Type\");\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing a specified output audio file\r\n     * @member AudioConfig.fromAudioFileOutput\r\n     * @function\r\n     * @public\r\n     * @param {PathLike} filename - the filename of the output audio file\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.11.0\r\n     */\r\n    public static fromAudioFileOutput(filename: PathLike): AudioConfig {\r\n        return new AudioOutputConfigImpl(new AudioFileWriter(filename));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing a specified audio output stream\r\n     * @member AudioConfig.fromStreamOutput\r\n     * @function\r\n     * @public\r\n     * @param {AudioOutputStream | PushAudioOutputStreamCallback} audioStream - Specifies the custom audio output\r\n     *        stream.\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.11.0\r\n     */\r\n    public static fromStreamOutput(audioStream: AudioOutputStream | PushAudioOutputStreamCallback): AudioConfig {\r\n        if (audioStream instanceof PushAudioOutputStreamCallback) {\r\n            return new AudioOutputConfigImpl(new PushAudioOutputStreamImpl(audioStream as PushAudioOutputStreamCallback));\r\n        }\r\n\r\n        if (audioStream instanceof PushAudioOutputStream) {\r\n            return new AudioOutputConfigImpl(audioStream as PushAudioOutputStreamImpl);\r\n        }\r\n\r\n        if (audioStream instanceof PullAudioOutputStream) {\r\n            return new AudioOutputConfigImpl(audioStream as PullAudioOutputStreamImpl);\r\n        }\r\n\r\n        throw new Error(\"Not Supported Type\");\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioConfig.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n\r\n    /**\r\n     * Sets an arbitrary property.\r\n     * @member SpeechConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to set.\r\n     * @param {string} value - The new value of the property.\r\n     */\r\n    public abstract setProperty(name: string, value: string): void;\r\n\r\n    /**\r\n     * Returns the current value of an arbitrary property.\r\n     * @member SpeechConfig.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to query.\r\n     * @param {string} def - The value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public abstract getProperty(name: string, def?: string): string;\r\n\r\n}\r\n\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class AudioConfigImpl\r\n */\r\nexport class AudioConfigImpl extends AudioConfig implements IAudioSource {\r\n    private privSource: IAudioSource;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {IAudioSource} source - An audio source.\r\n     */\r\n    public constructor(source: IAudioSource) {\r\n        super();\r\n        this.privSource = source;\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return this.privSource.format;\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, err?: (error: string) => void): void {\r\n        this.privSource.turnOff().then(() => {\r\n            if (!!cb) {\r\n                cb();\r\n            }\r\n        }, (error: string) => {\r\n            if (!!err) {\r\n                err(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.id\r\n     * @function\r\n     * @public\r\n     */\r\n    public id(): string {\r\n        return this.privSource.id();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.blob\r\n     * @function\r\n     * @public\r\n     */\r\n    public get blob(): Promise<Blob | Buffer> {\r\n        return this.privSource.blob;\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.turnOn\r\n     * @function\r\n     * @public\r\n     * @returns {Promise<void>} A promise.\r\n     */\r\n    public turnOn(): Promise<void> {\r\n        return this.privSource.turnOn();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.attach\r\n     * @function\r\n     * @public\r\n     * @param {string} audioNodeId - The audio node id.\r\n     * @returns {Promise<IAudioStreamNode>} A promise.\r\n     */\r\n    public attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        return this.privSource.attach(audioNodeId);\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.detach\r\n     * @function\r\n     * @public\r\n     * @param {string} audioNodeId - The audio node id.\r\n     */\r\n    public detach(audioNodeId: string): void {\r\n        return this.privSource.detach(audioNodeId);\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.turnOff\r\n     * @function\r\n     * @public\r\n     * @returns {Promise<void>} A promise.\r\n     */\r\n    public turnOff(): Promise<void> {\r\n        return this.privSource.turnOff();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.events\r\n     * @function\r\n     * @public\r\n     * @returns {EventSource<AudioSourceEvent>} An event source for audio events.\r\n     */\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privSource.events;\r\n    }\r\n\r\n    public setProperty(name: string, value: string): void {\r\n        Contracts.throwIfNull(value, \"value\");\r\n\r\n        if (undefined !== this.privSource.setProperty) {\r\n            this.privSource.setProperty(name, value);\r\n        } else {\r\n            throw new Error(\"This AudioConfig instance does not support setting properties.\");\r\n        }\r\n\r\n    }\r\n\r\n    public getProperty(name: string, def?: string): string {\r\n        if (undefined !== this.privSource.getProperty) {\r\n            return this.privSource.getProperty(name, def);\r\n        } else {\r\n            throw new Error(\"This AudioConfig instance does not support getting properties.\");\r\n        }\r\n\r\n        return def;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return this.privSource.deviceInfo;\r\n    }\r\n}\r\n\r\nexport class AudioOutputConfigImpl extends AudioConfig implements IAudioDestination {\r\n    private privDestination: IAudioDestination;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {IAudioDestination} destination - An audio destination.\r\n     */\r\n    public constructor(destination: IAudioDestination) {\r\n        super();\r\n        this.privDestination = destination;\r\n    }\r\n\r\n    public set format(format: AudioStreamFormat) {\r\n        this.privDestination.format = format;\r\n    }\r\n\r\n    public write(buffer: ArrayBuffer): void {\r\n        this.privDestination.write(buffer);\r\n    }\r\n\r\n    public close(): void {\r\n        this.privDestination.close();\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privDestination.id();\r\n    }\r\n\r\n    public setProperty(name: string, value: string): void {\r\n        throw new Error(\"This AudioConfig instance does not support setting properties.\");\r\n    }\r\n\r\n    public getProperty(name: string, def?: string): string {\r\n        throw new Error(\"This AudioConfig instance does not support getting properties.\");\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}