{"ast":null,"code":"import React from 'react';\nimport { Animated, StyleSheet } from 'react-native';\nimport AnimatedText from '../../Typography/AnimatedText';\n\nconst InputLabel = props => {\n  const {\n    parentState,\n    labelBackground\n  } = props;\n  const {\n    label,\n    error,\n    onLayoutAnimatedText,\n    hasActiveOutline,\n    activeColor,\n    placeholderStyle,\n    baseLabelTranslateX,\n    baseLabelTranslateY,\n    font,\n    fontSize,\n    fontWeight,\n    placeholderOpacity,\n    wiggleOffsetX,\n    labelScale,\n    topPosition,\n    paddingOffset,\n    placeholderColor,\n    errorColor,\n    labelTranslationXOffset\n  } = props.labelProps;\n  const labelTranslationX = {\n    transform: [{\n      // Offset label scale since RN doesn't support transform origin\n      translateX: parentState.labeled.interpolate({\n        inputRange: [0, 1],\n        outputRange: [baseLabelTranslateX, labelTranslationXOffset || 0]\n      })\n    }]\n  };\n  const labelStyle = { ...font,\n    fontSize,\n    fontWeight,\n    transform: [{\n      // Wiggle the label when there's an error\n      translateX: parentState.error.interpolate({\n        inputRange: [0, 0.5, 1],\n        outputRange: [0, parentState.value && error ? wiggleOffsetX : 0, 0]\n      })\n    }, {\n      // Move label to top\n      translateY: parentState.labeled.interpolate({\n        inputRange: [0, 1],\n        outputRange: [baseLabelTranslateY, 0]\n      })\n    }, {\n      // Make label smaller\n      scale: parentState.labeled.interpolate({\n        inputRange: [0, 1],\n        outputRange: [labelScale, 1]\n      })\n    }]\n  };\n  return label ?\n  /*#__PURE__*/\n  // Position colored placeholder and gray placeholder on top of each other and crossfade them\n  // This gives the effect of animating the color, but allows us to use native driver\n  React.createElement(Animated.View, {\n    pointerEvents: \"none\",\n    style: [StyleSheet.absoluteFill, styles.labelContainer, {\n      opacity: // Hide the label in minimized state until we measure it's width\n      parentState.value || parentState.focused ? parentState.labelLayout.measured ? 1 : 0 : 1\n    }, labelTranslationX]\n  }, labelBackground === null || labelBackground === void 0 ? void 0 : labelBackground({\n    parentState,\n    labelStyle,\n    labelProps: props.labelProps\n  }), /*#__PURE__*/React.createElement(AnimatedText, {\n    onLayout: onLayoutAnimatedText,\n    style: [placeholderStyle, {\n      top: topPosition\n    }, labelStyle, paddingOffset || {}, {\n      color: activeColor,\n      opacity: parentState.labeled.interpolate({\n        inputRange: [0, 1],\n        outputRange: [hasActiveOutline ? 1 : 0, 0]\n      })\n    }],\n    numberOfLines: 1\n  }, label), /*#__PURE__*/React.createElement(AnimatedText, {\n    style: [placeholderStyle, {\n      top: topPosition\n    }, labelStyle, paddingOffset, {\n      color: error && errorColor ? errorColor : placeholderColor,\n      opacity: placeholderOpacity\n    }],\n    numberOfLines: 1\n  }, label)) : null;\n};\n\nconst styles = StyleSheet.create({\n  labelContainer: {\n    zIndex: 3\n  }\n});\nexport default InputLabel;","map":{"version":3,"mappings":"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","names":["React","Animated","StyleSheet","AnimatedText","InputLabel","props","parentState","labelBackground","label","error","onLayoutAnimatedText","hasActiveOutline","activeColor","placeholderStyle","baseLabelTranslateX","baseLabelTranslateY","font","fontSize","fontWeight","placeholderOpacity","wiggleOffsetX","labelScale","topPosition","paddingOffset","placeholderColor","errorColor","labelTranslationXOffset","labelProps","labelTranslationX","transform","translateX","labeled","interpolate","inputRange","outputRange","labelStyle","value","translateY","scale","View","pointerEvents","style","absoluteFill","styles","labelContainer","opacity","focused","labelLayout","measured","onLayout","top","color","numberOfLines","create","zIndex"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\node_modules\\react-native-paper\\lib\\module\\components\\TextInput\\Label\\InputLabel.tsx"],"sourcesContent":["import React from 'react';\nimport { Animated, StyleSheet } from 'react-native';\nimport AnimatedText from '../../Typography/AnimatedText';\n\nimport type { InputLabelProps } from '../types';\n\nconst InputLabel = (props: InputLabelProps) => {\n  const { parentState, labelBackground } = props;\n\n  const {\n    label,\n    error,\n    onLayoutAnimatedText,\n    hasActiveOutline,\n    activeColor,\n    placeholderStyle,\n    baseLabelTranslateX,\n    baseLabelTranslateY,\n    font,\n    fontSize,\n    fontWeight,\n    placeholderOpacity,\n    wiggleOffsetX,\n    labelScale,\n    topPosition,\n    paddingOffset,\n    placeholderColor,\n    errorColor,\n    labelTranslationXOffset,\n  } = props.labelProps;\n\n  const labelTranslationX = {\n    transform: [\n      {\n        // Offset label scale since RN doesn't support transform origin\n        translateX: parentState.labeled.interpolate({\n          inputRange: [0, 1],\n          outputRange: [baseLabelTranslateX, labelTranslationXOffset || 0],\n        }),\n      },\n    ],\n  };\n\n  const labelStyle = {\n    ...font,\n    fontSize,\n    fontWeight,\n    transform: [\n      {\n        // Wiggle the label when there's an error\n        translateX: parentState.error.interpolate({\n          inputRange: [0, 0.5, 1],\n          outputRange: [0, parentState.value && error ? wiggleOffsetX : 0, 0],\n        }),\n      },\n      {\n        // Move label to top\n        translateY: parentState.labeled.interpolate({\n          inputRange: [0, 1],\n          outputRange: [baseLabelTranslateY, 0],\n        }),\n      },\n      {\n        // Make label smaller\n        scale: parentState.labeled.interpolate({\n          inputRange: [0, 1],\n          outputRange: [labelScale, 1],\n        }),\n      },\n    ],\n  };\n\n  return label ? (\n    // Position colored placeholder and gray placeholder on top of each other and crossfade them\n    // This gives the effect of animating the color, but allows us to use native driver\n    <Animated.View\n      pointerEvents=\"none\"\n      style={[\n        StyleSheet.absoluteFill,\n        styles.labelContainer,\n        {\n          opacity:\n            // Hide the label in minimized state until we measure it's width\n            parentState.value || parentState.focused\n              ? parentState.labelLayout.measured\n                ? 1\n                : 0\n              : 1,\n        },\n        labelTranslationX,\n      ]}\n    >\n      {labelBackground?.({\n        parentState,\n        labelStyle,\n        labelProps: props.labelProps,\n      })}\n      <AnimatedText\n        onLayout={onLayoutAnimatedText}\n        style={[\n          placeholderStyle,\n          {\n            top: topPosition,\n          },\n          labelStyle,\n          paddingOffset || {},\n          {\n            color: activeColor,\n            opacity: parentState.labeled.interpolate({\n              inputRange: [0, 1],\n              outputRange: [hasActiveOutline ? 1 : 0, 0],\n            }),\n          },\n        ]}\n        numberOfLines={1}\n      >\n        {label}\n      </AnimatedText>\n      <AnimatedText\n        style={[\n          placeholderStyle,\n          {\n            top: topPosition,\n          },\n          labelStyle,\n          paddingOffset,\n          {\n            color: error && errorColor ? errorColor : placeholderColor,\n            opacity: placeholderOpacity,\n          },\n        ]}\n        numberOfLines={1}\n      >\n        {label}\n      </AnimatedText>\n    </Animated.View>\n  ) : null;\n};\n\nconst styles = StyleSheet.create({\n  labelContainer: {\n    zIndex: 3,\n  },\n});\n\nexport default InputLabel;\n"]},"metadata":{},"sourceType":"module"}