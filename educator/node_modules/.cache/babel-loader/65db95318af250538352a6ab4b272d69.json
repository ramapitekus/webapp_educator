{"ast":null,"code":"import * as React from 'react';\nimport { StyleSheet, Platform } from 'react-native';\nimport Modal from '../Modal';\nimport DialogContent from './DialogContent';\nimport DialogActions from './DialogActions'; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nimport DialogTitle from './DialogTitle';\nimport DialogScrollArea from './DialogScrollArea';\nimport { withTheme } from '../../core/theming';\nimport overlay from '../../styles/overlay';\nconst DIALOG_ELEVATION = 24;\n/**\n * Dialogs inform users about a specific task and may contain critical information, require decisions, or involve multiple tasks.\n * To render the `Dialog` above other components, you'll need to wrap it with the [`Portal`](portal.html) component.\n *\n *  <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/dialog-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/dialog-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Button, Paragraph, Dialog, Portal, Provider } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(false);\n *\n *   const showDialog = () => setVisible(true);\n *\n *   const hideDialog = () => setVisible(false);\n *\n *   return (\n *     <Provider>\n *       <View>\n *         <Button onPress={showDialog}>Show Dialog</Button>\n *         <Portal>\n *           <Dialog visible={visible} onDismiss={hideDialog}>\n *             <Dialog.Title>Alert</Dialog.Title>\n *             <Dialog.Content>\n *               <Paragraph>This is simple dialog</Paragraph>\n *             </Dialog.Content>\n *             <Dialog.Actions>\n *               <Button onPress={hideDialog}>Done</Button>\n *             </Dialog.Actions>\n *           </Dialog>\n *         </Portal>\n *       </View>\n *     </Provider>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nconst Dialog = _ref => {\n  let {\n    children,\n    dismissable = true,\n    onDismiss,\n    visible = false,\n    style,\n    theme\n  } = _ref;\n  return /*#__PURE__*/React.createElement(Modal, {\n    dismissable: dismissable,\n    onDismiss: onDismiss,\n    visible: visible,\n    contentContainerStyle: [{\n      borderRadius: theme.roundness,\n      backgroundColor: theme.dark && theme.mode === 'adaptive' ? overlay(DIALOG_ELEVATION, theme.colors.surface) : theme.colors.surface\n    }, styles.container, style]\n  }, React.Children.toArray(children).filter(child => child != null && typeof child !== 'boolean').map((child, i) => {\n    if (i === 0 && /*#__PURE__*/React.isValidElement(child) && child.type === DialogContent) {\n      // Dialog content is the first item, so we add a top padding\n      return /*#__PURE__*/React.cloneElement(child, {\n        style: [{\n          paddingTop: 24\n        }, child.props.style]\n      });\n    }\n\n    return child;\n  }));\n}; // @component ./DialogContent.tsx\n\n\nDialog.Content = DialogContent; // @component ./DialogActions.tsx\n\nDialog.Actions = DialogActions; // @component ./DialogTitle.tsx\n\nDialog.Title = DialogTitle; // @component ./DialogScrollArea.tsx\n\nDialog.ScrollArea = DialogScrollArea;\nconst styles = StyleSheet.create({\n  container: {\n    /**\n     * This prevents the shadow from being clipped on Android since Android\n     * doesn't support `overflow: visible`.\n     * One downside for this fix is that it will disable clicks on the area\n     * of the shadow around the dialog, consequently, if you click around the\n     * dialog (44 pixel from the top and bottom) it won't be dismissed.\n     */\n    marginVertical: Platform.OS === 'android' ? 44 : 0,\n    marginHorizontal: 26,\n    elevation: DIALOG_ELEVATION,\n    justifyContent: 'flex-start'\n  }\n});\nexport default withTheme(Dialog);","map":{"version":3,"mappings":"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","names":["React","StyleSheet","Platform","Modal","DialogContent","DialogActions","DialogTitle","DialogScrollArea","withTheme","overlay","DIALOG_ELEVATION","Dialog","children","dismissable","onDismiss","visible","style","theme","contentContainerStyle","borderRadius","roundness","backgroundColor","dark","mode","colors","surface","styles","container","Children","toArray","filter","child","map","i","isValidElement","type","cloneElement","paddingTop","props","Content","Actions","Title","ScrollArea","create","marginVertical","OS","marginHorizontal","elevation","justifyContent"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\node_modules\\react-native-paper\\lib\\module\\components\\Dialog\\Dialog.tsx"],"sourcesContent":["import * as React from 'react';\nimport { StyleSheet, Platform, StyleProp, ViewStyle } from 'react-native';\nimport Modal from '../Modal';\nimport DialogContent from './DialogContent';\nimport DialogActions from './DialogActions';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport DialogTitle, { DialogTitle as _DialogTitle } from './DialogTitle';\nimport DialogScrollArea from './DialogScrollArea';\nimport { withTheme } from '../../core/theming';\nimport overlay from '../../styles/overlay';\n\ntype Props = {\n  /**\n   * Determines whether clicking outside the dialog dismiss it.\n   */\n  dismissable?: boolean;\n  /**\n   * Callback that is called when the user dismisses the dialog.\n   */\n  onDismiss?: () => void;\n  /**\n   * Determines Whether the dialog is visible.\n   */\n  visible: boolean;\n  /**\n   * Content of the `Dialog`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\nconst DIALOG_ELEVATION: number = 24;\n\n/**\n * Dialogs inform users about a specific task and may contain critical information, require decisions, or involve multiple tasks.\n * To render the `Dialog` above other components, you'll need to wrap it with the [`Portal`](portal.html) component.\n *\n *  <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/dialog-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/dialog-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Button, Paragraph, Dialog, Portal, Provider } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(false);\n *\n *   const showDialog = () => setVisible(true);\n *\n *   const hideDialog = () => setVisible(false);\n *\n *   return (\n *     <Provider>\n *       <View>\n *         <Button onPress={showDialog}>Show Dialog</Button>\n *         <Portal>\n *           <Dialog visible={visible} onDismiss={hideDialog}>\n *             <Dialog.Title>Alert</Dialog.Title>\n *             <Dialog.Content>\n *               <Paragraph>This is simple dialog</Paragraph>\n *             </Dialog.Content>\n *             <Dialog.Actions>\n *               <Button onPress={hideDialog}>Done</Button>\n *             </Dialog.Actions>\n *           </Dialog>\n *         </Portal>\n *       </View>\n *     </Provider>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst Dialog = ({\n  children,\n  dismissable = true,\n  onDismiss,\n  visible = false,\n  style,\n  theme,\n}: Props) => (\n  <Modal\n    dismissable={dismissable}\n    onDismiss={onDismiss}\n    visible={visible}\n    contentContainerStyle={[\n      {\n        borderRadius: theme.roundness,\n        backgroundColor:\n          theme.dark && theme.mode === 'adaptive'\n            ? overlay(DIALOG_ELEVATION, theme.colors.surface)\n            : theme.colors.surface,\n      },\n      styles.container,\n      style,\n    ]}\n  >\n    {React.Children.toArray(children)\n      .filter((child) => child != null && typeof child !== 'boolean')\n      .map((child, i) => {\n        if (\n          i === 0 &&\n          React.isValidElement(child) &&\n          child.type === DialogContent\n        ) {\n          // Dialog content is the first item, so we add a top padding\n          return React.cloneElement(child, {\n            style: [{ paddingTop: 24 }, child.props.style],\n          });\n        }\n\n        return child;\n      })}\n  </Modal>\n);\n\n// @component ./DialogContent.tsx\nDialog.Content = DialogContent;\n// @component ./DialogActions.tsx\nDialog.Actions = DialogActions;\n// @component ./DialogTitle.tsx\nDialog.Title = DialogTitle;\n// @component ./DialogScrollArea.tsx\nDialog.ScrollArea = DialogScrollArea;\n\nconst styles = StyleSheet.create({\n  container: {\n    /**\n     * This prevents the shadow from being clipped on Android since Android\n     * doesn't support `overflow: visible`.\n     * One downside for this fix is that it will disable clicks on the area\n     * of the shadow around the dialog, consequently, if you click around the\n     * dialog (44 pixel from the top and bottom) it won't be dismissed.\n     */\n    marginVertical: Platform.OS === 'android' ? 44 : 0,\n    marginHorizontal: 26,\n    elevation: DIALOG_ELEVATION,\n    justifyContent: 'flex-start',\n  },\n});\n\nexport default withTheme(Dialog);\n"]},"metadata":{},"sourceType":"module"}