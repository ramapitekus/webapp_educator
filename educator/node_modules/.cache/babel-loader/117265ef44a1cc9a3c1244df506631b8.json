{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport * as fs from \"fs\";\nimport { Contracts } from \"../Contracts\";\nexport class AudioFileWriter {\n  constructor(filename) {\n    this.id = () => {\n      return this.privId;\n    };\n\n    Contracts.throwIfNullOrUndefined(fs.openSync, \"\\nFile System access not available, please use Push or PullAudioOutputStream\");\n    this.privFd = fs.openSync(filename, \"w\");\n  }\n\n  set format(format) {\n    Contracts.throwIfNotUndefined(this.privAudioFormat, \"format is already set\");\n    this.privAudioFormat = format;\n    let headerOffset = 0;\n\n    if (this.privAudioFormat.hasHeader) {\n      headerOffset = this.privAudioFormat.header.byteLength;\n    }\n\n    if (this.privFd !== undefined) {\n      this.privWriteStream = fs.createWriteStream(\"\", {\n        fd: this.privFd,\n        start: headerOffset,\n        autoClose: false\n      });\n    }\n  }\n\n  write(buffer) {\n    Contracts.throwIfNullOrUndefined(this.privAudioFormat, \"must set format before writing.\");\n\n    if (this.privWriteStream !== undefined) {\n      this.privWriteStream.write(new Uint8Array(buffer.slice(0)));\n    }\n  }\n\n  close() {\n    if (this.privFd !== undefined) {\n      this.privWriteStream.on(\"finish\", () => {\n        if (this.privAudioFormat.hasHeader) {\n          this.privAudioFormat.updateHeader(this.privWriteStream.bytesWritten);\n          fs.writeSync(this.privFd, new Int8Array(this.privAudioFormat.header), 0, this.privAudioFormat.header.byteLength, 0);\n        }\n\n        fs.closeSync(this.privFd);\n        this.privFd = undefined;\n      });\n      this.privWriteStream.end();\n    }\n  }\n\n}","map":{"version":3,"mappings":"AAAA;AACA;AAEA,OAAO,KAAKA,EAAZ,MAAoB,IAApB;AAEA,SAASC,SAAT,QAA0B,cAA1B;AAIA,OAAM,MAAOC,eAAP,CAAsB;AAMxBC,cAAmBC,QAAnB,EAAwC;AA0CjC,cAAK,MAAa;AACrB,aAAO,KAAKC,MAAZ;AACH,KAFM;;AAzCHJ,aAAS,CAACK,sBAAV,CAAiCN,EAAE,CAACO,QAApC,EAA8C,8EAA9C;AACA,SAAKC,MAAL,GAAcR,EAAE,CAACO,QAAH,CAAYH,QAAZ,EAAsB,GAAtB,CAAd;AACH;;AAEgB,MAANK,MAAM,CAACA,MAAD,EAA0B;AACvCR,aAAS,CAACS,mBAAV,CAA8B,KAAKC,eAAnC,EAAoD,uBAApD;AACA,SAAKA,eAAL,GAAuBF,MAAvB;AACA,QAAIG,YAAY,GAAW,CAA3B;;AACA,QAAI,KAAKD,eAAL,CAAqBE,SAAzB,EAAoC;AAChCD,kBAAY,GAAG,KAAKD,eAAL,CAAqBG,MAArB,CAA4BC,UAA3C;AACH;;AACD,QAAI,KAAKP,MAAL,KAAgBQ,SAApB,EAA+B;AAC3B,WAAKC,eAAL,GAAuBjB,EAAE,CAACkB,iBAAH,CAAqB,EAArB,EAAyB;AAACC,UAAE,EAAE,KAAKX,MAAV;AAAkBY,aAAK,EAAER,YAAzB;AAAuCS,iBAAS,EAAE;AAAlD,OAAzB,CAAvB;AACH;AACJ;;AAEMC,OAAK,CAACC,MAAD,EAAoB;AAC5BtB,aAAS,CAACK,sBAAV,CAAiC,KAAKK,eAAtC,EAAuD,iCAAvD;;AACA,QAAI,KAAKM,eAAL,KAAyBD,SAA7B,EAAwC;AACpC,WAAKC,eAAL,CAAqBK,KAArB,CAA2B,IAAIE,UAAJ,CAAeD,MAAM,CAACE,KAAP,CAAa,CAAb,CAAf,CAA3B;AACH;AACJ;;AAEMC,OAAK;AACR,QAAI,KAAKlB,MAAL,KAAgBQ,SAApB,EAA+B;AAC3B,WAAKC,eAAL,CAAqBU,EAArB,CAAwB,QAAxB,EAAkC,MAAK;AACnC,YAAI,KAAKhB,eAAL,CAAqBE,SAAzB,EAAoC;AAChC,eAAKF,eAAL,CAAqBiB,YAArB,CAAkC,KAAKX,eAAL,CAAqBY,YAAvD;AACA7B,YAAE,CAAC8B,SAAH,CAAa,KAAKtB,MAAlB,EACI,IAAIuB,SAAJ,CAAc,KAAKpB,eAAL,CAAqBG,MAAnC,CADJ,EAEI,CAFJ,EAGI,KAAKH,eAAL,CAAqBG,MAArB,CAA4BC,UAHhC,EAII,CAJJ;AAKH;;AACDf,UAAE,CAACgC,SAAH,CAAa,KAAKxB,MAAlB;AACA,aAAKA,MAAL,GAAcQ,SAAd;AACH,OAXD;AAYA,WAAKC,eAAL,CAAqBgB,GAArB;AACH;AACJ;;AA9CuB","names":["fs","Contracts","AudioFileWriter","constructor","filename","privId","throwIfNullOrUndefined","openSync","privFd","format","throwIfNotUndefined","privAudioFormat","headerOffset","hasHeader","header","byteLength","undefined","privWriteStream","createWriteStream","fd","start","autoClose","write","buffer","Uint8Array","slice","close","on","updateHeader","bytesWritten","writeSync","Int8Array","closeSync","end"],"sources":["C:\\Users\\ozgur\\Documents\\VSCodeProjects\\webapp_educator\\educator\\node_modules\\microsoft-cognitiveservices-speech-sdk\\distrib\\es2015\\src\\sdk\\Audio\\src\\sdk\\Audio\\AudioFileWriter.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport * as fs from \"fs\";\r\nimport { IAudioDestination } from \"../../common/Exports\";\r\nimport { Contracts } from \"../Contracts\";\r\nimport { AudioStreamFormat } from \"../Exports\";\r\nimport { AudioOutputFormatImpl } from \"./AudioOutputFormat\";\r\n\r\nexport class AudioFileWriter implements IAudioDestination {\r\n    private privAudioFormat: AudioOutputFormatImpl;\r\n    private privFd: number;\r\n    private privId: string;\r\n    private privWriteStream: fs.WriteStream;\r\n\r\n    public constructor(filename: fs.PathLike) {\r\n        Contracts.throwIfNullOrUndefined(fs.openSync, \"\\nFile System access not available, please use Push or PullAudioOutputStream\");\r\n        this.privFd = fs.openSync(filename, \"w\");\r\n    }\r\n\r\n    public set format(format: AudioStreamFormat) {\r\n        Contracts.throwIfNotUndefined(this.privAudioFormat, \"format is already set\");\r\n        this.privAudioFormat = format as AudioOutputFormatImpl;\r\n        let headerOffset: number = 0;\r\n        if (this.privAudioFormat.hasHeader) {\r\n            headerOffset = this.privAudioFormat.header.byteLength;\r\n        }\r\n        if (this.privFd !== undefined) {\r\n            this.privWriteStream = fs.createWriteStream(\"\", {fd: this.privFd, start: headerOffset, autoClose: false});\r\n        }\r\n    }\r\n\r\n    public write(buffer: ArrayBuffer): void {\r\n        Contracts.throwIfNullOrUndefined(this.privAudioFormat, \"must set format before writing.\");\r\n        if (this.privWriteStream !== undefined) {\r\n            this.privWriteStream.write(new Uint8Array(buffer.slice(0)));\r\n        }\r\n    }\r\n\r\n    public close(): void {\r\n        if (this.privFd !== undefined) {\r\n            this.privWriteStream.on(\"finish\", () => {\r\n                if (this.privAudioFormat.hasHeader) {\r\n                    this.privAudioFormat.updateHeader(this.privWriteStream.bytesWritten);\r\n                    fs.writeSync(this.privFd,\r\n                        new Int8Array(this.privAudioFormat.header),\r\n                        0,\r\n                        this.privAudioFormat.header.byteLength,\r\n                        0);\r\n                }\r\n                fs.closeSync(this.privFd);\r\n                this.privFd = undefined;\r\n            });\r\n            this.privWriteStream.end();\r\n        }\r\n    }\r\n\r\n    public id = (): string => {\r\n        return this.privId;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}