{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { View, Animated, TextInput as NativeTextInput, StyleSheet, I18nManager, Platform } from 'react-native';\nimport color from 'color';\nimport InputLabel from './Label/InputLabel';\nimport TextInputAdornment from './Adornment/TextInputAdornment';\nimport { MAXIMIZED_LABEL_FONT_SIZE, MINIMIZED_LABEL_FONT_SIZE, LABEL_WIGGLE_X_OFFSET, ADORNMENT_SIZE, FLAT_INPUT_OFFSET } from './constants';\nimport { calculateLabelTopPosition, calculateInputHeight, calculatePadding, adjustPaddingFlat, interpolatePlaceholder, calculateFlatAffixTopPosition, calculateFlatInputHorizontalPadding } from './helpers';\nimport { getAdornmentConfig, getAdornmentStyleAdjustmentForNativeInput } from './Adornment/TextInputAdornment';\nimport { AdornmentSide, AdornmentType, InputMode } from './Adornment/enums';\nconst MINIMIZED_LABEL_Y_OFFSET = -18;\nconst LABEL_PADDING_TOP = 30;\nconst LABEL_PADDING_TOP_DENSE = 24;\nconst MIN_HEIGHT = 64;\nconst MIN_DENSE_HEIGHT_WL = 52;\nconst MIN_DENSE_HEIGHT = 40;\n\nclass TextInputFlat extends React.Component {\n  render() {\n    const {\n      disabled,\n      editable,\n      label,\n      error,\n      selectionColor,\n      underlineColor,\n      activeUnderlineColor,\n      dense,\n      style,\n      theme,\n      render,\n      multiline,\n      parentState,\n      innerRef,\n      onFocus,\n      forceFocus,\n      onBlur,\n      onChangeText,\n      onLayoutAnimatedText,\n      onLeftAffixLayoutChange,\n      onRightAffixLayoutChange,\n      left,\n      right,\n      placeholderTextColor,\n      ...rest\n    } = this.props;\n    const isAndroid = Platform.OS === 'android';\n    const {\n      colors,\n      fonts\n    } = theme;\n    const font = fonts.regular;\n    const hasActiveOutline = parentState.focused || error;\n    const {\n      fontSize: fontSizeStyle,\n      fontWeight,\n      height,\n      paddingHorizontal,\n      textAlign,\n      ...viewStyle\n    } = StyleSheet.flatten(style) || {};\n    const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n    const isPaddingHorizontalPassed = paddingHorizontal !== undefined && typeof paddingHorizontal === 'number';\n    const adornmentConfig = getAdornmentConfig({\n      left,\n      right\n    });\n    let {\n      paddingLeft,\n      paddingRight\n    } = calculateFlatInputHorizontalPadding({\n      adornmentConfig\n    });\n\n    if (isPaddingHorizontalPassed) {\n      paddingLeft = paddingHorizontal;\n      paddingRight = paddingHorizontal;\n    }\n\n    const {\n      leftLayout,\n      rightLayout\n    } = parentState;\n    const rightAffixWidth = right ? rightLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n    const leftAffixWidth = left ? leftLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n    const adornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput({\n      adornmentConfig,\n      rightAffixWidth,\n      leftAffixWidth,\n      paddingHorizontal,\n      inputOffset: FLAT_INPUT_OFFSET,\n      mode: InputMode.Flat\n    });\n    let inputTextColor, activeColor, underlineColorCustom, placeholderColor, errorColor;\n\n    if (disabled) {\n      inputTextColor = activeColor = color(colors.text).alpha(0.54).rgb().string();\n      placeholderColor = colors.disabled;\n      underlineColorCustom = 'transparent';\n    } else {\n      inputTextColor = colors.text;\n      activeColor = error ? colors.error : activeUnderlineColor || colors.primary;\n      placeholderColor = colors.placeholder;\n      errorColor = colors.error;\n      underlineColorCustom = underlineColor || colors.disabled;\n    }\n\n    const containerStyle = {\n      backgroundColor: theme.dark ? color(colors.background).lighten(0.24).rgb().string() : color(colors.background).darken(0.06).rgb().string(),\n      borderTopLeftRadius: theme.roundness,\n      borderTopRightRadius: theme.roundness\n    };\n    const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n    const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n    const labelWidth = parentState.labelLayout.width;\n    const labelHeight = parentState.labelLayout.height;\n    const labelHalfWidth = labelWidth / 2;\n    const labelHalfHeight = labelHeight / 2;\n    const baseLabelTranslateX = (I18nManager.isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2) + (1 - labelScale) * (I18nManager.isRTL ? -1 : 1) * paddingLeft;\n    const minInputHeight = dense ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) - LABEL_PADDING_TOP_DENSE : MIN_HEIGHT - LABEL_PADDING_TOP;\n    const inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n    const topPosition = calculateLabelTopPosition(labelHeight, inputHeight, multiline && height ? 0 : !height ? minInputHeight / 2 : 0);\n\n    if (height && typeof height !== 'number') {\n      // eslint-disable-next-line\n      console.warn('Currently we support only numbers in height prop');\n    }\n\n    const paddingSettings = {\n      height: height ? +height : null,\n      labelHalfHeight,\n      offset: FLAT_INPUT_OFFSET,\n      multiline: multiline ? multiline : null,\n      dense: dense ? dense : null,\n      topPosition,\n      fontSize,\n      label,\n      scale: fontScale,\n      isAndroid,\n      styles: StyleSheet.flatten(dense ? styles.inputFlatDense : styles.inputFlat)\n    };\n    const pad = calculatePadding(paddingSettings);\n    const paddingFlat = adjustPaddingFlat({ ...paddingSettings,\n      pad\n    });\n    const baseLabelTranslateY = -labelHalfHeight - (topPosition + MINIMIZED_LABEL_Y_OFFSET);\n    const placeholderOpacity = hasActiveOutline ? interpolatePlaceholder(parentState.labeled, hasActiveOutline) : parentState.labelLayout.measured ? 1 : 0;\n    const minHeight = height || (dense ? label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT : MIN_HEIGHT);\n    const flatHeight = inputHeight + (!height ? dense ? LABEL_PADDING_TOP_DENSE : LABEL_PADDING_TOP : 0);\n    const iconTopPosition = (flatHeight - ADORNMENT_SIZE) / 2;\n    const leftAffixTopPosition = leftLayout.height ? calculateFlatAffixTopPosition({\n      height: flatHeight,\n      ...paddingFlat,\n      affixHeight: leftLayout.height\n    }) : null;\n    const rightAffixTopPosition = rightLayout.height ? calculateFlatAffixTopPosition({\n      height: flatHeight,\n      ...paddingFlat,\n      affixHeight: rightLayout.height\n    }) : null;\n    const labelProps = {\n      label,\n      onLayoutAnimatedText,\n      placeholderOpacity,\n      error,\n      placeholderStyle: styles.placeholder,\n      baseLabelTranslateY,\n      baseLabelTranslateX,\n      font,\n      fontSize,\n      fontWeight,\n      labelScale,\n      wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n      topPosition,\n      paddingOffset: {\n        paddingLeft,\n        paddingRight\n      },\n      hasActiveOutline,\n      activeColor,\n      placeholderColor,\n      errorColor,\n      roundness: theme.roundness\n    };\n    const affixTopPosition = {\n      [AdornmentSide.Left]: leftAffixTopPosition,\n      [AdornmentSide.Right]: rightAffixTopPosition\n    };\n    const onAffixChange = {\n      [AdornmentSide.Left]: onLeftAffixLayoutChange,\n      [AdornmentSide.Right]: onRightAffixLayoutChange\n    };\n    let adornmentProps = {\n      paddingHorizontal,\n      adornmentConfig,\n      forceFocus,\n      topPosition: {\n        [AdornmentType.Affix]: affixTopPosition,\n        [AdornmentType.Icon]: iconTopPosition\n      },\n      onAffixChange,\n      isTextInputFocused: this.props.parentState.focused\n    };\n\n    if (adornmentConfig.length) {\n      adornmentProps = { ...adornmentProps,\n        left,\n        right,\n        textStyle: { ...font,\n          fontSize,\n          fontWeight\n        },\n        visible: this.props.parentState.labeled\n      };\n    }\n\n    return /*#__PURE__*/React.createElement(View, {\n      style: [containerStyle, viewStyle]\n    }, /*#__PURE__*/React.createElement(Underline, {\n      parentState: parentState,\n      underlineColorCustom: underlineColorCustom,\n      error: error,\n      colors: colors,\n      activeColor: activeColor\n    }), /*#__PURE__*/React.createElement(View, {\n      style: [styles.labelContainer, {\n        minHeight\n      }]\n    }, !isAndroid && multiline && label &&\n    /*#__PURE__*/\n    // Workaround for: https://github.com/callstack/react-native-paper/issues/2799\n    // Patch for a multiline TextInput with fixed height, which allow to avoid covering input label with its value.\n    React.createElement(View, {\n      testID: \"patch-container\",\n      pointerEvents: \"none\",\n      style: [StyleSheet.absoluteFill, dense ? styles.densePatchContainer : styles.patchContainer, {\n        backgroundColor: viewStyle.backgroundColor || containerStyle.backgroundColor,\n        left: paddingLeft,\n        right: paddingRight\n      }]\n    }), /*#__PURE__*/React.createElement(InputLabel, {\n      parentState: parentState,\n      labelProps: labelProps\n    }), render === null || render === void 0 ? void 0 : render({ ...rest,\n      ref: innerRef,\n      onChangeText,\n      placeholder: label ? parentState.placeholder : this.props.placeholder,\n      placeholderTextColor: placeholderTextColor !== null && placeholderTextColor !== void 0 ? placeholderTextColor : placeholderColor,\n      editable: !disabled && editable,\n      selectionColor: typeof selectionColor === 'undefined' ? activeColor : selectionColor,\n      onFocus,\n      onBlur,\n      underlineColorAndroid: 'transparent',\n      multiline,\n      style: [styles.input, {\n        paddingLeft,\n        paddingRight\n      }, !multiline || multiline && height ? {\n        height: flatHeight\n      } : {}, paddingFlat, { ...font,\n        fontSize,\n        fontWeight,\n        color: inputTextColor,\n        textAlignVertical: multiline ? 'top' : 'center',\n        textAlign: textAlign ? textAlign : I18nManager.isRTL ? 'right' : 'left'\n      }, Platform.OS === 'web' && {\n        outline: 'none'\n      }, adornmentStyleAdjustmentForNativeInput]\n    })), /*#__PURE__*/React.createElement(TextInputAdornment, adornmentProps));\n  }\n\n}\n\n_defineProperty(TextInputFlat, \"defaultProps\", {\n  disabled: false,\n  error: false,\n  multiline: false,\n  editable: true,\n  render: props => /*#__PURE__*/React.createElement(NativeTextInput, props)\n});\n\nexport default TextInputFlat;\n\nconst Underline = _ref => {\n  let {\n    parentState,\n    error,\n    colors,\n    activeColor,\n    underlineColorCustom\n  } = _ref;\n  let backgroundColor = parentState.focused ? activeColor : underlineColorCustom;\n  if (error) backgroundColor = colors.error;\n  return /*#__PURE__*/React.createElement(Animated.View, {\n    style: [styles.underline, {\n      backgroundColor,\n      // Underlines is thinner when input is not focused\n      transform: [{\n        scaleY: parentState.focused ? 1 : 0.5\n      }]\n    }]\n  });\n};\n\nconst styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0\n  },\n  underline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    bottom: 0,\n    height: 2,\n    zIndex: 1\n  },\n  labelContainer: {\n    paddingTop: 0,\n    paddingBottom: 0\n  },\n  input: {\n    flexGrow: 1,\n    margin: 0\n  },\n  inputFlat: {\n    paddingTop: 24,\n    paddingBottom: 4\n  },\n  inputFlatDense: {\n    paddingTop: 22,\n    paddingBottom: 2\n  },\n  patchContainer: {\n    height: 24,\n    zIndex: 2\n  },\n  densePatchContainer: {\n    height: 22,\n    zIndex: 2\n  }\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SACEC,IADF,EAEEC,QAFF,EAGEC,SAAS,IAAIC,eAHf,EAIEC,UAJF,EAKEC,WALF,EAMEC,QANF,QAQO,cARP;AASA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,oBAAvB;AACA,OAAOC,kBAAP,MAEO,gCAFP;AAKA,SACEC,yBADF,EAEEC,yBAFF,EAGEC,qBAHF,EAIEC,cAJF,EAKEC,iBALF,QAMO,aANP;AAQA,SACEC,yBADF,EAEEC,oBAFF,EAGEC,gBAHF,EAIEC,iBAJF,EAMEC,sBANF,EAOEC,6BAPF,EAQEC,mCARF,QASO,WATP;AAUA,SACEC,kBADF,EAEEC,yCAFF,QAGO,gCAHP;AAIA,SAASC,aAAT,EAAwBC,aAAxB,EAAuCC,SAAvC,QAAwD,mBAAxD;AAEA,MAAMC,wBAAwB,GAAG,CAAC,EAAlC;AAEA,MAAMC,iBAAiB,GAAG,EAA1B;AACA,MAAMC,uBAAuB,GAAG,EAAhC;AACA,MAAMC,UAAU,GAAG,EAAnB;AACA,MAAMC,mBAAmB,GAAG,EAA5B;AACA,MAAMC,gBAAgB,GAAG,EAAzB;;AAEA,MAAMC,aAAN,SAA4BlC,KAAK,CAACmC,SAAlC,CAAiE;AAS/DC,QAAM,GAAG;AACP,UAAM;AACJC,cADI;AAEJC,cAFI;AAGJC,WAHI;AAIJC,WAJI;AAKJC,oBALI;AAMJC,oBANI;AAOJC,0BAPI;AAQJC,WARI;AASJC,WATI;AAUJC,WAVI;AAWJV,YAXI;AAYJW,eAZI;AAaJC,iBAbI;AAcJC,cAdI;AAeJC,aAfI;AAgBJC,gBAhBI;AAiBJC,YAjBI;AAkBJC,kBAlBI;AAmBJC,0BAnBI;AAoBJC,6BApBI;AAqBJC,8BArBI;AAsBJC,UAtBI;AAuBJC,WAvBI;AAwBJC,0BAxBI;AAyBJ,SAAGC;AAzBC,QA0BF,KAAKC,KA1BT;AA4BA,UAAMC,SAAS,GAAGvD,QAAQ,CAACwD,EAATxD,KAAgB,SAAlC;AAEA,UAAM;AAAEyD,YAAF;AAAUC;AAAV,QAAoBnB,KAA1B;AACA,UAAMoB,IAAI,GAAGD,KAAK,CAACE,OAAnB;AACA,UAAMC,gBAAgB,GAAGpB,WAAW,CAACqB,OAAZrB,IAAuBR,KAAhD;AAEA,UAAM;AACJ8B,cAAQ,EAAEC,aADN;AAEJC,gBAFI;AAGJC,YAHI;AAIJC,uBAJI;AAKJC,eALI;AAMJ,SAAGC;AANC,QAODvE,UAAU,CAACwE,OAAXxE,CAAmBwC,KAAnBxC,KAA6B,EAPlC;AAQA,UAAMiE,QAAQ,GAAGC,aAAa,IAAI5D,yBAAlC;AAEA,UAAMmE,yBAAyB,GAC7BJ,iBAAiB,KAAKK,SAAtBL,IAAmC,OAAOA,iBAAP,KAA6B,QADlE;AAGA,UAAMM,eAAe,GAAGzD,kBAAkB,CAAC;AACzCkC,UADyC;AAEzCC;AAFyC,KAAD,CAA1C;AAKA,QAAI;AAAEuB,iBAAF;AAAeC;AAAf,QAAgC5D,mCAAmC,CAAC;AACtE0D;AADsE,KAAD,CAAvE;;AAIA,QAAIF,yBAAJ,EAA+B;AAC7BG,iBAAW,GAAGP,iBAAdO;AACAC,kBAAY,GAAGR,iBAAfQ;AACD;;AAED,UAAM;AAAEC,gBAAF;AAAcC;AAAd,QAA8BpC,WAApC;AAEA,UAAMqC,eAAe,GAAG3B,KAAK,GACzB0B,WAAW,CAACE,KAAZF,IAAqBtE,cADI,GAEzBA,cAFJ;AAIA,UAAMyE,cAAc,GAAG9B,IAAI,GACvB0B,UAAU,CAACG,KAAXH,IAAoBrE,cADG,GAEvBA,cAFJ;AAIA,UAAM0E,sCAAsC,GAAGhE,yCAAyC,CACtF;AACEwD,qBADF;AAEEK,qBAFF;AAGEE,oBAHF;AAIEb,uBAJF;AAKEe,iBAAW,EAAE1E,iBALf;AAME2E,UAAI,EAAE/D,SAAS,CAACgE;AANlB,KADsF,CAAxF;AAWA,QAAIC,cAAJ,EACEC,WADF,EAEEC,oBAFF,EAGEC,gBAHF,EAIEC,UAJF;;AAMA,QAAI3D,QAAJ,EAAc;AACZuD,oBAAc,GAAGC,WAAW,GAAGrF,KAAK,CAACwD,MAAM,CAACiC,IAAR,CAALzF,CAC5B0F,KAD4B1F,CACtB,IADsBA,EAE5B2F,GAF4B3F,GAG5B4F,MAH4B5F,EAA/BoF;AAIAG,sBAAgB,GAAG/B,MAAM,CAAC3B,QAA1B0D;AACAD,0BAAoB,GAAG,aAAvBA;AANF,WAOO;AACLF,oBAAc,GAAG5B,MAAM,CAACiC,IAAxBL;AACAC,iBAAW,GAAGrD,KAAK,GACfwB,MAAM,CAACxB,KADQ,GAEfG,oBAAoB,IAAIqB,MAAM,CAACqC,OAFnCR;AAGAE,sBAAgB,GAAG/B,MAAM,CAACsC,WAA1BP;AACAC,gBAAU,GAAGhC,MAAM,CAACxB,KAApBwD;AACAF,0BAAoB,GAAGpD,cAAc,IAAIsB,MAAM,CAAC3B,QAAhDyD;AACD;;AAED,UAAMS,cAAc,GAAG;AACrBC,qBAAe,EAAE1D,KAAK,CAAC2D,IAAN3D,GACbtC,KAAK,CAACwD,MAAM,CAAC0C,UAAR,CAALlG,CAAyBmG,OAAzBnG,CAAiC,IAAjCA,EAAuC2F,GAAvC3F,GAA6C4F,MAA7C5F,EADasC,GAEbtC,KAAK,CAACwD,MAAM,CAAC0C,UAAR,CAALlG,CAAyBoG,MAAzBpG,CAAgC,IAAhCA,EAAsC2F,GAAtC3F,GAA4C4F,MAA5C5F,EAHiB;AAIrBqG,yBAAmB,EAAE/D,KAAK,CAACgE,SAJN;AAKrBC,0BAAoB,EAAEjE,KAAK,CAACgE;AALP,KAAvB;AAQA,UAAME,UAAU,GAAGpG,yBAAyB,GAAG0D,QAA/C;AACA,UAAM2C,SAAS,GAAGtG,yBAAyB,GAAG2D,QAA9C;AAEA,UAAM4C,UAAU,GAAGlE,WAAW,CAACmE,WAAZnE,CAAwBsC,KAA3C;AACA,UAAM8B,WAAW,GAAGpE,WAAW,CAACmE,WAAZnE,CAAwByB,MAA5C;AACA,UAAM4C,cAAc,GAAGH,UAAU,GAAG,CAApC;AACA,UAAMI,eAAe,GAAGF,WAAW,GAAG,CAAtC;AAEA,UAAMG,mBAAmB,GACvB,CAACjH,WAAW,CAACkH,KAAZlH,GAAoB,CAApBA,GAAwB,CAAC,CAA1B,KACG+G,cAAc,GAAIL,UAAU,GAAGE,UAAbF,GAA2B,CADhD,IAEA,CAAC,IAAIA,UAAL,KAAoB1G,WAAW,CAACkH,KAAZlH,GAAoB,CAAC,CAArBA,GAAyB,CAA7C,IAAkD2E,WAHpD;AAKA,UAAMwC,cAAc,GAAG7E,KAAK,GACxB,CAACL,KAAK,GAAGP,mBAAH,GAAyBC,gBAA/B,IACAH,uBAFwB,GAGxBC,UAAU,GAAGF,iBAHjB;AAKA,UAAM6F,WAAW,GAAGzG,oBAAoB,CACtCmG,WADsC,EAEtC3C,MAFsC,EAGtCgD,cAHsC,CAAxC;AAMA,UAAME,WAAW,GAAG3G,yBAAyB,CAC3CoG,WAD2C,EAE3CM,WAF2C,EAG3C3E,SAAS,IAAI0B,MAAb1B,GAAsB,CAAtBA,GAA0B,CAAC0B,MAAD,GAAUgD,cAAc,GAAG,CAA3B,GAA+B,CAHd,CAA7C;;AAMA,QAAIhD,MAAM,IAAI,OAAOA,MAAP,KAAkB,QAAhC,EAA0C;AACxC;AACAmD,aAAO,CAACC,IAARD,CAAa,kDAAbA;AACD;;AAED,UAAME,eAAe,GAAG;AACtBrD,YAAM,EAAEA,MAAM,GAAG,CAACA,MAAJ,GAAa,IADL;AAEtB6C,qBAFsB;AAGtBS,YAAM,EAAEhH,iBAHc;AAItBgC,eAAS,EAAEA,SAAS,GAAGA,SAAH,GAAe,IAJb;AAKtBH,WAAK,EAAEA,KAAK,GAAGA,KAAH,GAAW,IALD;AAMtB+E,iBANsB;AAOtBrD,cAPsB;AAQtB/B,WARsB;AAStByF,WAAK,EAAEf,SATe;AAUtBnD,eAVsB;AAWtBmE,YAAM,EAAE5H,UAAU,CAACwE,OAAXxE,CACNuC,KAAK,GAAGqF,MAAM,CAACC,cAAV,GAA2BD,MAAM,CAACE,SADjC9H;AAXc,KAAxB;AAgBA,UAAM+H,GAAG,GAAGlH,gBAAgB,CAAC4G,eAAD,CAA5B;AAEA,UAAMO,WAAW,GAAGlH,iBAAiB,CAAC,EACpC,GAAG2G,eADiC;AAEpCM;AAFoC,KAAD,CAArC;AAKA,UAAME,mBAAmB,GACvB,CAAChB,eAAD,IAAoBK,WAAW,GAAG/F,wBAAlC,CADF;AAGA,UAAM2G,kBAAkB,GAAGnE,gBAAgB,GACvChD,sBAAsB,CAAC4B,WAAW,CAACwF,OAAb,EAAsBpE,gBAAtB,CADiB,GAEvCpB,WAAW,CAACmE,WAAZnE,CAAwByF,QAAxBzF,GACA,CADAA,GAEA,CAJJ;AAMA,UAAM0F,SAAS,GACbjE,MAAM,KACL7B,KAAK,GAAIL,KAAK,GAAGP,mBAAH,GAAyBC,gBAAlC,GAAsDF,UADtD,CADR;AAIA,UAAM4G,UAAU,GACdjB,WAAW,IACV,CAACjD,MAAD,GAAW7B,KAAK,GAAGd,uBAAH,GAA6BD,iBAA7C,GAAkE,CADxD,CADb;AAIA,UAAM+G,eAAe,GAAG,CAACD,UAAU,GAAG7H,cAAd,IAAgC,CAAxD;AAEA,UAAM+H,oBAAoB,GAAG1D,UAAU,CAACV,MAAXU,GACzB9D,6BAA6B,CAAC;AAC5BoD,YAAM,EAAEkE,UADoB;AAE5B,SAAGN,WAFyB;AAG5BS,iBAAW,EAAE3D,UAAU,CAACV;AAHI,KAAD,CADJU,GAMzB,IANJ;AAQA,UAAM4D,qBAAqB,GAAG3D,WAAW,CAACX,MAAZW,GAC1B/D,6BAA6B,CAAC;AAC5BoD,YAAM,EAAEkE,UADoB;AAE5B,SAAGN,WAFyB;AAG5BS,iBAAW,EAAE1D,WAAW,CAACX;AAHG,KAAD,CADHW,GAM1B,IANJ;AAQA,UAAM4D,UAAU,GAAG;AACjBzG,WADiB;AAEjBe,0BAFiB;AAGjBiF,wBAHiB;AAIjB/F,WAJiB;AAKjByG,sBAAgB,EAAEhB,MAAM,CAAC3B,WALR;AAMjBgC,yBANiB;AAOjBf,yBAPiB;AAQjBrD,UARiB;AASjBI,cATiB;AAUjBE,gBAViB;AAWjBwC,gBAXiB;AAYjBkC,mBAAa,EAAErI,qBAZE;AAajB8G,iBAbiB;AAcjBwB,mBAAa,EAAE;AAAElE,mBAAF;AAAeC;AAAf,OAdE;AAejBd,sBAfiB;AAgBjByB,iBAhBiB;AAiBjBE,sBAjBiB;AAkBjBC,gBAlBiB;AAmBjBc,eAAS,EAAEhE,KAAK,CAACgE;AAnBA,KAAnB;AAqBA,UAAMsC,gBAAgB,GAAG;AACvB,OAAC3H,aAAa,CAAC4H,IAAf,GAAsBR,oBADC;AAEvB,OAACpH,aAAa,CAAC6H,KAAf,GAAuBP;AAFA,KAAzB;AAIA,UAAMQ,aAAa,GAAG;AACpB,OAAC9H,aAAa,CAAC4H,IAAf,GAAsB9F,uBADF;AAEpB,OAAC9B,aAAa,CAAC6H,KAAf,GAAuB9F;AAFH,KAAtB;AAKA,QAAIgG,cAAuC,GAAG;AAC5C9E,uBAD4C;AAE5CM,qBAF4C;AAG5C7B,gBAH4C;AAI5CwE,iBAAW,EAAE;AACX,SAACjG,aAAa,CAAC+H,KAAf,GAAuBL,gBADZ;AAEX,SAAC1H,aAAa,CAACgI,IAAf,GAAsBd;AAFX,OAJ+B;AAQ5CW,mBAR4C;AAS5CI,wBAAkB,EAAE,KAAK9F,KAAL,CAAWb,WAAX,CAAuBqB;AATC,KAA9C;;AAWA,QAAIW,eAAe,CAAC4E,MAApB,EAA4B;AAC1BJ,oBAAc,GAAG,EACf,GAAGA,cADY;AAEf/F,YAFe;AAGfC,aAHe;AAIfmG,iBAAS,EAAE,EAAE,GAAG3F,IAAL;AAAWI,kBAAX;AAAqBE;AAArB,SAJI;AAKfsF,eAAO,EAAE,KAAKjG,KAAL,CAAWb,WAAX,CAAuBwF;AALjB,OAAjBgB;AAOD;;AAED,wBACExJ,oBAACC,IAAD;AAAM4C,WAAK,EAAE,CAAC0D,cAAD,EAAiB3B,SAAjB;AAAb,oBACE5E,oBAAC+J,SAAD;AACE/G,iBAAW,EAAEA,WADf;AAEE8C,0BAAoB,EAAEA,oBAFxB;AAGEtD,WAAK,EAAEA,KAHT;AAIEwB,YAAM,EAAEA,MAJV;AAKE6B,iBAAW,EAAEA;AALf,MADF,eAQE7F,oBAACC,IAAD;AACE4C,WAAK,EAAE,CACLoF,MAAM,CAAC+B,cADF,EAEL;AACEtB;AADF,OAFK;AADT,OAQG,CAAC5E,SAAD,IAAcf,SAAd,IAA2BR,KAA3B;AAAA;AACC;AACA;AACAvC,wBAACC,IAAD;AACEgK,YAAM,EAAC,iBADT;AAEEC,mBAAa,EAAC,MAFhB;AAGErH,WAAK,EAAE,CACLxC,UAAU,CAAC8J,YADN,EAELvH,KAAK,GAAGqF,MAAM,CAACmC,mBAAV,GAAgCnC,MAAM,CAACoC,cAFvC,EAGL;AACE7D,uBAAe,EACb5B,SAAS,CAAC4B,eAAV5B,IAA6B2B,cAAc,CAACC,eAFhD;AAGE/C,YAAI,EAAEwB,WAHR;AAIEvB,aAAK,EAAEwB;AAJT,OAHK;AAHT,MAXJ,eA0BElF,oBAACS,UAAD;AAAYuC,iBAAW,EAAEA,WAAzB;AAAsCgG,gBAAU,EAAEA;AAAlD,MA1BF,EA2BG5G,MA3BH,SA2BGA,UA3BH,WA2BGA,GA3BH,MA2BGA,SAAM,CAAG,EACR,GAAGwB,IADK;AAER0G,SAAG,EAAErH,QAFG;AAGRI,kBAHQ;AAIRiD,iBAAW,EAAE/D,KAAK,GACdS,WAAW,CAACsD,WADE,GAEd,KAAKzC,KAAL,CAAWyC,WANP;AAOR3C,0BAAoB,EAAEA,oBAAF,SAAEA,wBAAF,WAAEA,0BAAwBoC,gBAPtC;AAQRzD,cAAQ,EAAE,CAACD,QAAD,IAAaC,QARf;AASRG,oBAAc,EACZ,OAAOA,cAAP,KAA0B,WAA1B,GACIoD,WADJ,GAEIpD,cAZE;AAaRS,aAbQ;AAcRE,YAdQ;AAeRmH,2BAAqB,EAAE,aAff;AAgBRxH,eAhBQ;AAiBRF,WAAK,EAAE,CACLoF,MAAM,CAACuC,KADF,EAEL;AAAEvF,mBAAF;AAAeC;AAAf,OAFK,EAGL,CAACnC,SAAD,IAAeA,SAAS,IAAI0B,MAA5B,GAAsC;AAAEA,cAAM,EAAEkE;AAAV,OAAtC,GAA+D,EAH1D,EAILN,WAJK,EAKL,EACE,GAAGnE,IADL;AAEEI,gBAFF;AAGEE,kBAHF;AAIEhE,aAAK,EAAEoF,cAJT;AAKE6E,yBAAiB,EAAE1H,SAAS,GAAG,KAAH,GAAW,QALzC;AAME4B,iBAAS,EAAEA,SAAS,GAChBA,SADgB,GAEhBrE,WAAW,CAACkH,KAAZlH,GACA,OADAA,GAEA;AAVN,OALK,EAiBLC,QAAQ,CAACwD,EAATxD,KAAgB,KAAhBA,IAAyB;AAAEmK,eAAO,EAAE;AAAX,OAjBpB,EAkBLlF,sCAlBK;AAjBC,KAAH,CA3BT,CARF,eA0EExF,oBAACU,kBAAD,EAAwB8I,cAAxB,CA1EF,CADF;AA8ED;;AAzV8D;;gBAA3DtH,e,gBACkB;AACpBG,UAAQ,EAAE,KADU;AAEpBG,OAAK,EAAE,KAFa;AAGpBO,WAAS,EAAE,KAHS;AAIpBT,UAAQ,EAAE,IAJU;AAKpBF,QAAM,EAAGyB,KAAD,iBAAwB7D,oBAACI,eAAD,EAAqByD,KAArB;AALZ;;AA2VxB,eAAe3B,aAAf;;AAcA,MAAM6H,SAAS,GAAG,QAMI;AAAA,MANH;AACjB/G,eADiB;AAEjBR,SAFiB;AAGjBwB,UAHiB;AAIjB6B,eAJiB;AAKjBC;AALiB,GAMG;AACpB,MAAIU,eAAe,GAAGxD,WAAW,CAACqB,OAAZrB,GAClB6C,WADkB7C,GAElB8C,oBAFJ;AAGA,MAAItD,KAAJ,EAAWgE,eAAe,GAAGxC,MAAM,CAACxB,KAAzBgE;AACX,sBACExG,oBAACE,QAAD,CAAUD,IAAV;AACE4C,SAAK,EAAE,CACLoF,MAAM,CAAC0C,SADF,EAEL;AACEnE,qBADF;AAEE;AACAoE,eAAS,EAAE,CAAC;AAAEC,cAAM,EAAE7H,WAAW,CAACqB,OAAZrB,GAAsB,CAAtBA,GAA0B;AAApC,OAAD;AAHb,KAFK;AADT,IADF;AAXF;;AAyBA,MAAMiF,MAAM,GAAG5H,UAAU,CAACyK,MAAXzK,CAAkB;AAC/BiG,aAAW,EAAE;AACXyE,YAAQ,EAAE,UADC;AAEXtH,QAAI,EAAE;AAFK,GADkB;AAK/BkH,WAAS,EAAE;AACTI,YAAQ,EAAE,UADD;AAETtH,QAAI,EAAE,CAFG;AAGTC,SAAK,EAAE,CAHE;AAITsH,UAAM,EAAE,CAJC;AAKTvG,UAAM,EAAE,CALC;AAMTwG,UAAM,EAAE;AANC,GALoB;AAa/BjB,gBAAc,EAAE;AACdkB,cAAU,EAAE,CADE;AAEdC,iBAAa,EAAE;AAFD,GAbe;AAiB/BX,OAAK,EAAE;AACLY,YAAQ,EAAE,CADL;AAELC,UAAM,EAAE;AAFH,GAjBwB;AAqB/BlD,WAAS,EAAE;AACT+C,cAAU,EAAE,EADH;AAETC,iBAAa,EAAE;AAFN,GArBoB;AAyB/BjD,gBAAc,EAAE;AACdgD,cAAU,EAAE,EADE;AAEdC,iBAAa,EAAE;AAFD,GAzBe;AA6B/Bd,gBAAc,EAAE;AACd5F,UAAM,EAAE,EADM;AAEdwG,UAAM,EAAE;AAFM,GA7Be;AAiC/Bb,qBAAmB,EAAE;AACnB3F,UAAM,EAAE,EADW;AAEnBwG,UAAM,EAAE;AAFW;AAjCU,CAAlB5K,CAAf","names":["React","View","Animated","TextInput","NativeTextInput","StyleSheet","I18nManager","Platform","color","InputLabel","TextInputAdornment","MAXIMIZED_LABEL_FONT_SIZE","MINIMIZED_LABEL_FONT_SIZE","LABEL_WIGGLE_X_OFFSET","ADORNMENT_SIZE","FLAT_INPUT_OFFSET","calculateLabelTopPosition","calculateInputHeight","calculatePadding","adjustPaddingFlat","interpolatePlaceholder","calculateFlatAffixTopPosition","calculateFlatInputHorizontalPadding","getAdornmentConfig","getAdornmentStyleAdjustmentForNativeInput","AdornmentSide","AdornmentType","InputMode","MINIMIZED_LABEL_Y_OFFSET","LABEL_PADDING_TOP","LABEL_PADDING_TOP_DENSE","MIN_HEIGHT","MIN_DENSE_HEIGHT_WL","MIN_DENSE_HEIGHT","TextInputFlat","Component","render","disabled","editable","label","error","selectionColor","underlineColor","activeUnderlineColor","dense","style","theme","multiline","parentState","innerRef","onFocus","forceFocus","onBlur","onChangeText","onLayoutAnimatedText","onLeftAffixLayoutChange","onRightAffixLayoutChange","left","right","placeholderTextColor","rest","props","isAndroid","OS","colors","fonts","font","regular","hasActiveOutline","focused","fontSize","fontSizeStyle","fontWeight","height","paddingHorizontal","textAlign","viewStyle","flatten","isPaddingHorizontalPassed","undefined","adornmentConfig","paddingLeft","paddingRight","leftLayout","rightLayout","rightAffixWidth","width","leftAffixWidth","adornmentStyleAdjustmentForNativeInput","inputOffset","mode","Flat","inputTextColor","activeColor","underlineColorCustom","placeholderColor","errorColor","text","alpha","rgb","string","primary","placeholder","containerStyle","backgroundColor","dark","background","lighten","darken","borderTopLeftRadius","roundness","borderTopRightRadius","labelScale","fontScale","labelWidth","labelLayout","labelHeight","labelHalfWidth","labelHalfHeight","baseLabelTranslateX","isRTL","minInputHeight","inputHeight","topPosition","console","warn","paddingSettings","offset","scale","styles","inputFlatDense","inputFlat","pad","paddingFlat","baseLabelTranslateY","placeholderOpacity","labeled","measured","minHeight","flatHeight","iconTopPosition","leftAffixTopPosition","affixHeight","rightAffixTopPosition","labelProps","placeholderStyle","wiggleOffsetX","paddingOffset","affixTopPosition","Left","Right","onAffixChange","adornmentProps","Affix","Icon","isTextInputFocused","length","textStyle","visible","Underline","labelContainer","testID","pointerEvents","absoluteFill","densePatchContainer","patchContainer","ref","underlineColorAndroid","input","textAlignVertical","outline","underline","transform","scaleY","create","position","bottom","zIndex","paddingTop","paddingBottom","flexGrow","margin"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\node_modules\\react-native-paper\\lib\\module\\components\\TextInput\\TextInputFlat.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  Animated,\n  TextInput as NativeTextInput,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  TextStyle,\n} from 'react-native';\nimport color from 'color';\nimport InputLabel from './Label/InputLabel';\nimport TextInputAdornment, {\n  TextInputAdornmentProps,\n} from './Adornment/TextInputAdornment';\nimport type { RenderProps, ChildTextInputProps } from './types';\n\nimport {\n  MAXIMIZED_LABEL_FONT_SIZE,\n  MINIMIZED_LABEL_FONT_SIZE,\n  LABEL_WIGGLE_X_OFFSET,\n  ADORNMENT_SIZE,\n  FLAT_INPUT_OFFSET,\n} from './constants';\n\nimport {\n  calculateLabelTopPosition,\n  calculateInputHeight,\n  calculatePadding,\n  adjustPaddingFlat,\n  Padding,\n  interpolatePlaceholder,\n  calculateFlatAffixTopPosition,\n  calculateFlatInputHorizontalPadding,\n} from './helpers';\nimport {\n  getAdornmentConfig,\n  getAdornmentStyleAdjustmentForNativeInput,\n} from './Adornment/TextInputAdornment';\nimport { AdornmentSide, AdornmentType, InputMode } from './Adornment/enums';\n\nconst MINIMIZED_LABEL_Y_OFFSET = -18;\n\nconst LABEL_PADDING_TOP = 30;\nconst LABEL_PADDING_TOP_DENSE = 24;\nconst MIN_HEIGHT = 64;\nconst MIN_DENSE_HEIGHT_WL = 52;\nconst MIN_DENSE_HEIGHT = 40;\n\nclass TextInputFlat extends React.Component<ChildTextInputProps> {\n  static defaultProps = {\n    disabled: false,\n    error: false,\n    multiline: false,\n    editable: true,\n    render: (props: RenderProps) => <NativeTextInput {...props} />,\n  };\n\n  render() {\n    const {\n      disabled,\n      editable,\n      label,\n      error,\n      selectionColor,\n      underlineColor,\n      activeUnderlineColor,\n      dense,\n      style,\n      theme,\n      render,\n      multiline,\n      parentState,\n      innerRef,\n      onFocus,\n      forceFocus,\n      onBlur,\n      onChangeText,\n      onLayoutAnimatedText,\n      onLeftAffixLayoutChange,\n      onRightAffixLayoutChange,\n      left,\n      right,\n      placeholderTextColor,\n      ...rest\n    } = this.props;\n\n    const isAndroid = Platform.OS === 'android';\n\n    const { colors, fonts } = theme;\n    const font = fonts.regular;\n    const hasActiveOutline = parentState.focused || error;\n\n    const {\n      fontSize: fontSizeStyle,\n      fontWeight,\n      height,\n      paddingHorizontal,\n      textAlign,\n      ...viewStyle\n    } = (StyleSheet.flatten(style) || {}) as TextStyle;\n    const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n\n    const isPaddingHorizontalPassed =\n      paddingHorizontal !== undefined && typeof paddingHorizontal === 'number';\n\n    const adornmentConfig = getAdornmentConfig({\n      left,\n      right,\n    });\n\n    let { paddingLeft, paddingRight } = calculateFlatInputHorizontalPadding({\n      adornmentConfig,\n    });\n\n    if (isPaddingHorizontalPassed) {\n      paddingLeft = paddingHorizontal as number;\n      paddingRight = paddingHorizontal as number;\n    }\n\n    const { leftLayout, rightLayout } = parentState;\n\n    const rightAffixWidth = right\n      ? rightLayout.width || ADORNMENT_SIZE\n      : ADORNMENT_SIZE;\n\n    const leftAffixWidth = left\n      ? leftLayout.width || ADORNMENT_SIZE\n      : ADORNMENT_SIZE;\n\n    const adornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput(\n      {\n        adornmentConfig,\n        rightAffixWidth,\n        leftAffixWidth,\n        paddingHorizontal,\n        inputOffset: FLAT_INPUT_OFFSET,\n        mode: InputMode.Flat,\n      }\n    );\n\n    let inputTextColor,\n      activeColor,\n      underlineColorCustom,\n      placeholderColor,\n      errorColor;\n\n    if (disabled) {\n      inputTextColor = activeColor = color(colors.text)\n        .alpha(0.54)\n        .rgb()\n        .string();\n      placeholderColor = colors.disabled;\n      underlineColorCustom = 'transparent';\n    } else {\n      inputTextColor = colors.text;\n      activeColor = error\n        ? colors.error\n        : activeUnderlineColor || colors.primary;\n      placeholderColor = colors.placeholder;\n      errorColor = colors.error;\n      underlineColorCustom = underlineColor || colors.disabled;\n    }\n\n    const containerStyle = {\n      backgroundColor: theme.dark\n        ? color(colors.background).lighten(0.24).rgb().string()\n        : color(colors.background).darken(0.06).rgb().string(),\n      borderTopLeftRadius: theme.roundness,\n      borderTopRightRadius: theme.roundness,\n    };\n\n    const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n    const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n\n    const labelWidth = parentState.labelLayout.width;\n    const labelHeight = parentState.labelLayout.height;\n    const labelHalfWidth = labelWidth / 2;\n    const labelHalfHeight = labelHeight / 2;\n\n    const baseLabelTranslateX =\n      (I18nManager.isRTL ? 1 : -1) *\n        (labelHalfWidth - (labelScale * labelWidth) / 2) +\n      (1 - labelScale) * (I18nManager.isRTL ? -1 : 1) * paddingLeft;\n\n    const minInputHeight = dense\n      ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) -\n        LABEL_PADDING_TOP_DENSE\n      : MIN_HEIGHT - LABEL_PADDING_TOP;\n\n    const inputHeight = calculateInputHeight(\n      labelHeight,\n      height,\n      minInputHeight\n    );\n\n    const topPosition = calculateLabelTopPosition(\n      labelHeight,\n      inputHeight,\n      multiline && height ? 0 : !height ? minInputHeight / 2 : 0\n    );\n\n    if (height && typeof height !== 'number') {\n      // eslint-disable-next-line\n      console.warn('Currently we support only numbers in height prop');\n    }\n\n    const paddingSettings = {\n      height: height ? +height : null,\n      labelHalfHeight,\n      offset: FLAT_INPUT_OFFSET,\n      multiline: multiline ? multiline : null,\n      dense: dense ? dense : null,\n      topPosition,\n      fontSize,\n      label,\n      scale: fontScale,\n      isAndroid,\n      styles: StyleSheet.flatten(\n        dense ? styles.inputFlatDense : styles.inputFlat\n      ) as Padding,\n    };\n\n    const pad = calculatePadding(paddingSettings);\n\n    const paddingFlat = adjustPaddingFlat({\n      ...paddingSettings,\n      pad,\n    });\n\n    const baseLabelTranslateY =\n      -labelHalfHeight - (topPosition + MINIMIZED_LABEL_Y_OFFSET);\n\n    const placeholderOpacity = hasActiveOutline\n      ? interpolatePlaceholder(parentState.labeled, hasActiveOutline)\n      : parentState.labelLayout.measured\n      ? 1\n      : 0;\n\n    const minHeight =\n      height ||\n      (dense ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) : MIN_HEIGHT);\n\n    const flatHeight =\n      inputHeight +\n      (!height ? (dense ? LABEL_PADDING_TOP_DENSE : LABEL_PADDING_TOP) : 0);\n\n    const iconTopPosition = (flatHeight - ADORNMENT_SIZE) / 2;\n\n    const leftAffixTopPosition = leftLayout.height\n      ? calculateFlatAffixTopPosition({\n          height: flatHeight,\n          ...paddingFlat,\n          affixHeight: leftLayout.height,\n        })\n      : null;\n\n    const rightAffixTopPosition = rightLayout.height\n      ? calculateFlatAffixTopPosition({\n          height: flatHeight,\n          ...paddingFlat,\n          affixHeight: rightLayout.height,\n        })\n      : null;\n\n    const labelProps = {\n      label,\n      onLayoutAnimatedText,\n      placeholderOpacity,\n      error,\n      placeholderStyle: styles.placeholder,\n      baseLabelTranslateY,\n      baseLabelTranslateX,\n      font,\n      fontSize,\n      fontWeight,\n      labelScale,\n      wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n      topPosition,\n      paddingOffset: { paddingLeft, paddingRight },\n      hasActiveOutline,\n      activeColor,\n      placeholderColor,\n      errorColor,\n      roundness: theme.roundness,\n    };\n    const affixTopPosition = {\n      [AdornmentSide.Left]: leftAffixTopPosition,\n      [AdornmentSide.Right]: rightAffixTopPosition,\n    };\n    const onAffixChange = {\n      [AdornmentSide.Left]: onLeftAffixLayoutChange,\n      [AdornmentSide.Right]: onRightAffixLayoutChange,\n    };\n\n    let adornmentProps: TextInputAdornmentProps = {\n      paddingHorizontal,\n      adornmentConfig,\n      forceFocus,\n      topPosition: {\n        [AdornmentType.Affix]: affixTopPosition,\n        [AdornmentType.Icon]: iconTopPosition,\n      },\n      onAffixChange,\n      isTextInputFocused: this.props.parentState.focused,\n    };\n    if (adornmentConfig.length) {\n      adornmentProps = {\n        ...adornmentProps,\n        left,\n        right,\n        textStyle: { ...font, fontSize, fontWeight },\n        visible: this.props.parentState.labeled,\n      };\n    }\n\n    return (\n      <View style={[containerStyle, viewStyle]}>\n        <Underline\n          parentState={parentState}\n          underlineColorCustom={underlineColorCustom}\n          error={error}\n          colors={colors}\n          activeColor={activeColor}\n        />\n        <View\n          style={[\n            styles.labelContainer,\n            {\n              minHeight,\n            },\n          ]}\n        >\n          {!isAndroid && multiline && label && (\n            // Workaround for: https://github.com/callstack/react-native-paper/issues/2799\n            // Patch for a multiline TextInput with fixed height, which allow to avoid covering input label with its value.\n            <View\n              testID=\"patch-container\"\n              pointerEvents=\"none\"\n              style={[\n                StyleSheet.absoluteFill,\n                dense ? styles.densePatchContainer : styles.patchContainer,\n                {\n                  backgroundColor:\n                    viewStyle.backgroundColor || containerStyle.backgroundColor,\n                  left: paddingLeft,\n                  right: paddingRight,\n                },\n              ]}\n            />\n          )}\n          <InputLabel parentState={parentState} labelProps={labelProps} />\n          {render?.({\n            ...rest,\n            ref: innerRef,\n            onChangeText,\n            placeholder: label\n              ? parentState.placeholder\n              : this.props.placeholder,\n            placeholderTextColor: placeholderTextColor ?? placeholderColor,\n            editable: !disabled && editable,\n            selectionColor:\n              typeof selectionColor === 'undefined'\n                ? activeColor\n                : selectionColor,\n            onFocus,\n            onBlur,\n            underlineColorAndroid: 'transparent',\n            multiline,\n            style: [\n              styles.input,\n              { paddingLeft, paddingRight },\n              !multiline || (multiline && height) ? { height: flatHeight } : {},\n              paddingFlat,\n              {\n                ...font,\n                fontSize,\n                fontWeight,\n                color: inputTextColor,\n                textAlignVertical: multiline ? 'top' : 'center',\n                textAlign: textAlign\n                  ? textAlign\n                  : I18nManager.isRTL\n                  ? 'right'\n                  : 'left',\n              },\n              Platform.OS === 'web' && { outline: 'none' },\n              adornmentStyleAdjustmentForNativeInput,\n            ],\n          })}\n        </View>\n        <TextInputAdornment {...adornmentProps} />\n      </View>\n    );\n  }\n}\n\nexport default TextInputFlat;\n\ntype UnderlineProps = {\n  parentState: {\n    focused: boolean;\n  };\n  error?: boolean;\n  colors: {\n    error: string;\n  };\n  activeColor: string;\n  underlineColorCustom?: string;\n};\n\nconst Underline = ({\n  parentState,\n  error,\n  colors,\n  activeColor,\n  underlineColorCustom,\n}: UnderlineProps) => {\n  let backgroundColor = parentState.focused\n    ? activeColor\n    : underlineColorCustom;\n  if (error) backgroundColor = colors.error;\n  return (\n    <Animated.View\n      style={[\n        styles.underline,\n        {\n          backgroundColor,\n          // Underlines is thinner when input is not focused\n          transform: [{ scaleY: parentState.focused ? 1 : 0.5 }],\n        },\n      ]}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n  },\n  underline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    bottom: 0,\n    height: 2,\n    zIndex: 1,\n  },\n  labelContainer: {\n    paddingTop: 0,\n    paddingBottom: 0,\n  },\n  input: {\n    flexGrow: 1,\n    margin: 0,\n  },\n  inputFlat: {\n    paddingTop: 24,\n    paddingBottom: 4,\n  },\n  inputFlatDense: {\n    paddingTop: 22,\n    paddingBottom: 2,\n  },\n  patchContainer: {\n    height: 24,\n    zIndex: 2,\n  },\n  densePatchContainer: {\n    height: 22,\n    zIndex: 2,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}