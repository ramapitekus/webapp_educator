{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport color from 'color';\nimport IconButton from '../IconButton';\nimport { ToggleButtonGroupContext } from './ToggleButtonGroup';\nimport { black, white } from '../../styles/colors';\n/**\n * Toggle buttons can be used to group related options. To emphasize groups of related toggle buttons,\n * a group should share a common container.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/toggle-button.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const ToggleButtonExample = () => {\n *   const [status, setStatus] = React.useState('checked');\n *\n *   const onButtonToggle = value => {\n *     setStatus(status === 'checked' ? 'unchecked' : 'checked');\n *   };\n *\n *   return (\n *     <ToggleButton\n *       icon=\"bluetooth\"\n *       value=\"bluetooth\"\n *       status={status}\n *       onPress={onButtonToggle}\n *     />\n *   );\n * };\n *\n * export default ToggleButtonExample;\n *\n * ```\n */\n\nconst ToggleButton = _ref => {\n  let {\n    icon,\n    size,\n    theme,\n    accessibilityLabel,\n    disabled,\n    style,\n    value,\n    status,\n    onPress,\n    ...rest\n  } = _ref;\n  const borderRadius = theme.roundness;\n  return /*#__PURE__*/React.createElement(ToggleButtonGroupContext.Consumer, null, context => {\n    let backgroundColor;\n    const checked = context && context.value === value || status === 'checked';\n\n    if (checked) {\n      backgroundColor = theme.dark ? 'rgba(255, 255, 255, .12)' : 'rgba(0, 0, 0, .08)';\n    } else {\n      backgroundColor = 'transparent';\n    }\n\n    return /*#__PURE__*/React.createElement(IconButton, _extends({\n      borderless: false,\n      icon: icon,\n      onPress: e => {\n        if (onPress) {\n          onPress(e);\n        }\n\n        if (context) {\n          context.onValueChange(!checked ? value : null);\n        }\n      },\n      size: size,\n      accessibilityLabel: accessibilityLabel,\n      accessibilityState: {\n        disabled,\n        selected: checked\n      },\n      disabled: disabled,\n      style: [styles.content, {\n        backgroundColor,\n        borderRadius,\n        borderColor: color(theme.dark ? white : black).alpha(0.29).rgb().string()\n      }, style]\n    }, rest));\n  });\n};\n\nconst styles = StyleSheet.create({\n  content: {\n    width: 42,\n    height: 42,\n    margin: 0\n  }\n});\nexport default withTheme(ToggleButton); // @component-docs ignore-next-line\n\nconst ToggleButtonWithTheme = withTheme(ToggleButton); // @component-docs ignore-next-line\n\nexport { ToggleButtonWithTheme as ToggleButton };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SACEC,UADF,QAKO,cALP;AAMA,SAASC,SAAT,QAA0B,oBAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,SAASC,wBAAT,QAAyC,qBAAzC;AACA,SAASC,KAAT,EAAgBC,KAAhB,QAA6B,qBAA7B;AA2CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,YAAY,GAAG,QAWR;AAAA,MAXS;AACpBC,QADoB;AAEpBC,QAFoB;AAGpBC,SAHoB;AAIpBC,sBAJoB;AAKpBC,YALoB;AAMpBC,SANoB;AAOpBC,SAPoB;AAQpBC,UARoB;AASpBC,WAToB;AAUpB,OAAGC;AAViB,GAWT;AACX,QAAMC,YAAY,GAAGR,KAAK,CAACS,SAA3B;AAEA,sBACEpB,oBAACK,wBAAD,CAA0BgB,QAA1B,QACIC,OAAD,IAAuE;AACtE,QAAIC,eAAJ;AAEA,UAAMC,OAAuB,GAC1BF,OAAO,IAAIA,OAAO,CAACP,KAARO,KAAkBP,KAA7BO,IAAuCN,MAAM,KAAK,SADrD;;AAGA,QAAIQ,OAAJ,EAAa;AACXD,qBAAe,GAAGZ,KAAK,CAACc,IAANd,GACd,0BADcA,GAEd,oBAFJY;AADF,WAIO;AACLA,qBAAe,GAAG,aAAlBA;AACD;;AAED,wBACEvB,oBAACI,UAAD;AACEsB,gBAAU,EAAE,KADd;AAEEjB,UAAI,EAAEA,IAFR;AAGEQ,aAAO,EAAGU,CAAD,IAAwC;AAC/C,YAAIV,OAAJ,EAAa;AACXA,iBAAO,CAACU,CAAD,CAAPV;AACD;;AAED,YAAIK,OAAJ,EAAa;AACXA,iBAAO,CAACM,aAARN,CAAsB,CAACE,OAAD,GAAWT,KAAX,GAAmB,IAAzCO;AACD;AAVL;AAYEZ,UAAI,EAAEA,IAZR;AAaEE,wBAAkB,EAAEA,kBAbtB;AAcEiB,wBAAkB,EAAE;AAAEhB,gBAAF;AAAYiB,gBAAQ,EAAEN;AAAtB,OAdtB;AAeEX,cAAQ,EAAEA,QAfZ;AAgBEC,WAAK,EAAE,CACLiB,MAAM,CAACC,OADF,EAEL;AACET,uBADF;AAEEJ,oBAFF;AAGEc,mBAAW,EAAE9B,KAAK,CAACQ,KAAK,CAACc,IAANd,GAAaJ,KAAbI,GAAqBL,KAAtB,CAALH,CACV+B,KADU/B,CACJ,IADIA,EAEVgC,GAFUhC,GAGViC,MAHUjC;AAHf,OAFK,EAULW,KAVK;AAhBT,OA4BMI,IA5BN,EADF;AAfJ,IADF;AAdF;;AAmEA,MAAMa,MAAM,GAAG9B,UAAU,CAACoC,MAAXpC,CAAkB;AAC/B+B,SAAO,EAAE;AACPM,SAAK,EAAE,EADA;AAEPC,UAAM,EAAE,EAFD;AAGPC,UAAM,EAAE;AAHD;AADsB,CAAlBvC,CAAf;AAQA,eAAeC,SAAS,CAACM,YAAD,CAAxB,C,CAEA;;AACA,MAAMiC,qBAAqB,GAAGvC,SAAS,CAACM,YAAD,CAAvC,C,CACA;;AACA,SAASiC,qBAAqB,IAAIjC,YAAlC","names":["React","StyleSheet","withTheme","color","IconButton","ToggleButtonGroupContext","black","white","ToggleButton","icon","size","theme","accessibilityLabel","disabled","style","value","status","onPress","rest","borderRadius","roundness","Consumer","context","backgroundColor","checked","dark","borderless","e","onValueChange","accessibilityState","selected","styles","content","borderColor","alpha","rgb","string","create","width","height","margin","ToggleButtonWithTheme"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\node_modules\\react-native-paper\\lib\\module\\components\\ToggleButton\\ToggleButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  GestureResponderEvent,\n} from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport color from 'color';\nimport IconButton from '../IconButton';\nimport { ToggleButtonGroupContext } from './ToggleButtonGroup';\nimport { black, white } from '../../styles/colors';\nimport type { IconSource } from '../Icon';\n\ntype Props = {\n  /**\n   * Icon to display for the `ToggleButton`.\n   */\n  icon: IconSource;\n  /**\n   * Size of the icon.\n   */\n  size?: number;\n  /**\n   * Custom text color for button.\n   */\n  color?: string;\n  /**\n   * Whether the button is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the `ToggleButton`. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (value?: GestureResponderEvent | string) => void;\n  /**\n   * Value of button.\n   */\n  value?: string;\n  /**\n   * Status of button.\n   */\n  status?: 'checked' | 'unchecked';\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Toggle buttons can be used to group related options. To emphasize groups of related toggle buttons,\n * a group should share a common container.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/toggle-button.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const ToggleButtonExample = () => {\n *   const [status, setStatus] = React.useState('checked');\n *\n *   const onButtonToggle = value => {\n *     setStatus(status === 'checked' ? 'unchecked' : 'checked');\n *   };\n *\n *   return (\n *     <ToggleButton\n *       icon=\"bluetooth\"\n *       value=\"bluetooth\"\n *       status={status}\n *       onPress={onButtonToggle}\n *     />\n *   );\n * };\n *\n * export default ToggleButtonExample;\n *\n * ```\n */\nconst ToggleButton = ({\n  icon,\n  size,\n  theme,\n  accessibilityLabel,\n  disabled,\n  style,\n  value,\n  status,\n  onPress,\n  ...rest\n}: Props) => {\n  const borderRadius = theme.roundness;\n\n  return (\n    <ToggleButtonGroupContext.Consumer>\n      {(context: { value: string | null; onValueChange: Function } | null) => {\n        let backgroundColor;\n\n        const checked: boolean | null =\n          (context && context.value === value) || status === 'checked';\n\n        if (checked) {\n          backgroundColor = theme.dark\n            ? 'rgba(255, 255, 255, .12)'\n            : 'rgba(0, 0, 0, .08)';\n        } else {\n          backgroundColor = 'transparent';\n        }\n\n        return (\n          <IconButton\n            borderless={false}\n            icon={icon}\n            onPress={(e?: GestureResponderEvent | string) => {\n              if (onPress) {\n                onPress(e);\n              }\n\n              if (context) {\n                context.onValueChange(!checked ? value : null);\n              }\n            }}\n            size={size}\n            accessibilityLabel={accessibilityLabel}\n            accessibilityState={{ disabled, selected: checked }}\n            disabled={disabled}\n            style={[\n              styles.content,\n              {\n                backgroundColor,\n                borderRadius,\n                borderColor: color(theme.dark ? white : black)\n                  .alpha(0.29)\n                  .rgb()\n                  .string(),\n              },\n              style,\n            ]}\n            {...rest}\n          />\n        );\n      }}\n    </ToggleButtonGroupContext.Consumer>\n  );\n};\n\nconst styles = StyleSheet.create({\n  content: {\n    width: 42,\n    height: 42,\n    margin: 0,\n  },\n});\n\nexport default withTheme(ToggleButton);\n\n// @component-docs ignore-next-line\nconst ToggleButtonWithTheme = withTheme(ToggleButton);\n// @component-docs ignore-next-line\nexport { ToggleButtonWithTheme as ToggleButton };\n"]},"metadata":{},"sourceType":"module"}