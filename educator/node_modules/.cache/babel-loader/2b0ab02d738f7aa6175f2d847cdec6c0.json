{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { PropertyId } from \"./Exports\";\n/**\r\n * Represents collection of properties and their values.\r\n * @class PropertyCollection\r\n */\n\nexport class PropertyCollection {\n  constructor() {\n    this.privKeys = [];\n    this.privValues = [];\n  }\n  /**\r\n   * Returns the property value in type String. The parameter must have the same type as String.\r\n   * Currently only String, int and bool are allowed.\r\n   * If the name is not available, the specified defaultValue is returned.\r\n   * @member PropertyCollection.prototype.getProperty\r\n   * @function\r\n   * @public\r\n   * @param {string} key - The parameter name.\r\n   * @param {string} def - The default value which is returned if the parameter\r\n   *        is not available in the collection.\r\n   * @returns {string} value of the parameter.\r\n   */\n\n\n  getProperty(key, def) {\n    let keyToUse;\n\n    if (typeof key === \"string\") {\n      keyToUse = key;\n    } else {\n      keyToUse = PropertyId[key];\n    }\n\n    for (let n = 0; n < this.privKeys.length; n++) {\n      if (this.privKeys[n] === keyToUse) {\n        return this.privValues[n];\n      }\n    }\n\n    return def;\n  }\n  /**\r\n   * Sets the String value of the parameter specified by name.\r\n   * @member PropertyCollection.prototype.setProperty\r\n   * @function\r\n   * @public\r\n   * @param {string} key - The parameter name.\r\n   * @param {string} value - The value of the parameter.\r\n   */\n\n\n  setProperty(key, value) {\n    let keyToUse;\n\n    if (typeof key === \"string\") {\n      keyToUse = key;\n    } else {\n      keyToUse = PropertyId[key];\n    }\n\n    for (let n = 0; n < this.privKeys.length; n++) {\n      if (this.privKeys[n] === keyToUse) {\n        this.privValues[n] = value;\n        return;\n      }\n    }\n\n    this.privKeys.push(keyToUse);\n    this.privValues.push(value);\n  }\n  /**\r\n   * Clones the collection.\r\n   * @member PropertyCollection.prototype.clone\r\n   * @function\r\n   * @public\r\n   * @returns {PropertyCollection} A copy of the collection.\r\n   */\n\n\n  clone() {\n    const clonedMap = new PropertyCollection();\n\n    for (let n = 0; n < this.privKeys.length; n++) {\n      clonedMap.privKeys.push(this.privKeys[n]);\n      clonedMap.privValues.push(this.privValues[n]);\n    }\n\n    return clonedMap;\n  }\n  /**\r\n   * Merges this set of properties into another, no overwrites.\r\n   * @member PropertyCollection.prototype.mergeTo\r\n   * @function\r\n   * @public\r\n   * @param {PropertyCollection} The collection to merge into.\r\n   */\n\n\n  mergeTo(destinationCollection) {\n    this.privKeys.forEach(key => {\n      if (destinationCollection.getProperty(key, undefined) === undefined) {\n        const value = this.getProperty(key);\n        destinationCollection.setProperty(key, value);\n      }\n    });\n  }\n  /**\r\n   * Get the keys in Property Collection.\r\n   * @member PropertyCollection.prototype.keys\r\n   * @function\r\n   * @public\r\n   * @returns {string []} Keys in the collection.\r\n   */\n\n\n  get keys() {\n    return this.privKeys;\n  }\n\n}","map":{"version":3,"mappings":"AAAA;AACA;AAEA,SAASA,UAAT,QAA2B,WAA3B;AAEA;;;;;AAIA,OAAM,MAAOC,kBAAP,CAAyB;AAA/BC;AACY,oBAAqB,EAArB;AACA,sBAAuB,EAAvB;AAwGX;AAtGG;;;;;;;;;;;;;;AAYOC,aAAW,CAACC,GAAD,EAA2BC,GAA3B,EAAuC;AACrD,QAAIC,QAAJ;;AAEA,QAAI,OAAOF,GAAP,KAAe,QAAnB,EAA6B;AACzBE,cAAQ,GAAGF,GAAX;AACH,KAFD,MAEO;AACHE,cAAQ,GAAGN,UAAU,CAACI,GAAD,CAArB;AACH;;AAED,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,QAAL,CAAcC,MAAlC,EAA0CF,CAAC,EAA3C,EAA+C;AAC3C,UAAI,KAAKC,QAAL,CAAcD,CAAd,MAAqBD,QAAzB,EAAmC;AAC/B,eAAO,KAAKI,UAAL,CAAgBH,CAAhB,CAAP;AACH;AACJ;;AAED,WAAOF,GAAP;AACH;AAED;;;;;;;;;;AAQOM,aAAW,CAACP,GAAD,EAA2BQ,KAA3B,EAAwC;AACtD,QAAIN,QAAJ;;AAEA,QAAI,OAAOF,GAAP,KAAe,QAAnB,EAA6B;AACzBE,cAAQ,GAAGF,GAAX;AACH,KAFD,MAEO;AACHE,cAAQ,GAAGN,UAAU,CAACI,GAAD,CAArB;AACH;;AAED,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,QAAL,CAAcC,MAAlC,EAA0CF,CAAC,EAA3C,EAA+C;AAC3C,UAAI,KAAKC,QAAL,CAAcD,CAAd,MAAqBD,QAAzB,EAAmC;AAC/B,aAAKI,UAAL,CAAgBH,CAAhB,IAAqBK,KAArB;AACA;AACH;AACJ;;AAED,SAAKJ,QAAL,CAAcK,IAAd,CAAmBP,QAAnB;AACA,SAAKI,UAAL,CAAgBG,IAAhB,CAAqBD,KAArB;AACH;AAED;;;;;;;;;AAOOE,OAAK;AACR,UAAMC,SAAS,GAAG,IAAId,kBAAJ,EAAlB;;AAEA,SAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,QAAL,CAAcC,MAAlC,EAA0CF,CAAC,EAA3C,EAA+C;AAC3CQ,eAAS,CAACP,QAAV,CAAmBK,IAAnB,CAAwB,KAAKL,QAAL,CAAcD,CAAd,CAAxB;AACAQ,eAAS,CAACL,UAAV,CAAqBG,IAArB,CAA0B,KAAKH,UAAL,CAAgBH,CAAhB,CAA1B;AACH;;AAED,WAAOQ,SAAP;AACH;AAED;;;;;;;;;AAOOC,SAAO,CAACC,qBAAD,EAA0C;AACpD,SAAKT,QAAL,CAAcU,OAAd,CAAuBd,GAAD,IAA6B;AAC/C,UAAIa,qBAAqB,CAACd,WAAtB,CAAkCC,GAAlC,EAAuCe,SAAvC,MAAsDA,SAA1D,EAAqE;AACjE,cAAMP,KAAK,GAAG,KAAKT,WAAL,CAAiBC,GAAjB,CAAd;AACAa,6BAAqB,CAACN,WAAtB,CAAkCP,GAAlC,EAAuCQ,KAAvC;AACH;AACJ,KALD;AAMH;AAED;;;;;;;;;AAOe,MAAJQ,IAAI;AACX,WAAO,KAAKZ,QAAZ;AACH;;AAzG0B","names":["PropertyId","PropertyCollection","constructor","getProperty","key","def","keyToUse","n","privKeys","length","privValues","setProperty","value","push","clone","clonedMap","mergeTo","destinationCollection","forEach","undefined","keys"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\node_modules\\microsoft-cognitiveservices-speech-sdk\\distrib\\es2015\\src\\sdk\\src\\sdk\\PropertyCollection.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyId } from \"./Exports\";\r\n\r\n/**\r\n * Represents collection of properties and their values.\r\n * @class PropertyCollection\r\n */\r\nexport class PropertyCollection {\r\n    private privKeys: string[] = [] as string[];\r\n    private privValues: string[] = [] as string[];\r\n\r\n    /**\r\n     * Returns the property value in type String. The parameter must have the same type as String.\r\n     * Currently only String, int and bool are allowed.\r\n     * If the name is not available, the specified defaultValue is returned.\r\n     * @member PropertyCollection.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string} def - The default value which is returned if the parameter\r\n     *        is not available in the collection.\r\n     * @returns {string} value of the parameter.\r\n     */\r\n    public getProperty(key: PropertyId | string, def?: string): string {\r\n        let keyToUse: string;\r\n\r\n        if (typeof key === \"string\") {\r\n            keyToUse = key;\r\n        } else {\r\n            keyToUse = PropertyId[key];\r\n        }\r\n\r\n        for (let n = 0; n < this.privKeys.length; n++) {\r\n            if (this.privKeys[n] === keyToUse) {\r\n                return this.privValues[n];\r\n            }\r\n        }\r\n\r\n        return def;\r\n    }\r\n\r\n    /**\r\n     * Sets the String value of the parameter specified by name.\r\n     * @member PropertyCollection.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string} value - The value of the parameter.\r\n     */\r\n    public setProperty(key: string | PropertyId, value: string): void {\r\n        let keyToUse: string;\r\n\r\n        if (typeof key === \"string\") {\r\n            keyToUse = key;\r\n        } else {\r\n            keyToUse = PropertyId[key];\r\n        }\r\n\r\n        for (let n = 0; n < this.privKeys.length; n++) {\r\n            if (this.privKeys[n] === keyToUse) {\r\n                this.privValues[n] = value;\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.privKeys.push(keyToUse);\r\n        this.privValues.push(value);\r\n    }\r\n\r\n    /**\r\n     * Clones the collection.\r\n     * @member PropertyCollection.prototype.clone\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} A copy of the collection.\r\n     */\r\n    public clone(): PropertyCollection {\r\n        const clonedMap = new PropertyCollection();\r\n\r\n        for (let n = 0; n < this.privKeys.length; n++) {\r\n            clonedMap.privKeys.push(this.privKeys[n]);\r\n            clonedMap.privValues.push(this.privValues[n]);\r\n        }\r\n\r\n        return clonedMap;\r\n    }\r\n\r\n    /**\r\n     * Merges this set of properties into another, no overwrites.\r\n     * @member PropertyCollection.prototype.mergeTo\r\n     * @function\r\n     * @public\r\n     * @param {PropertyCollection} The collection to merge into.\r\n     */\r\n    public mergeTo(destinationCollection: PropertyCollection): void {\r\n        this.privKeys.forEach((key: string | PropertyId) => {\r\n            if (destinationCollection.getProperty(key, undefined) === undefined) {\r\n                const value = this.getProperty(key);\r\n                destinationCollection.setProperty(key, value);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the keys in Property Collection.\r\n     * @member PropertyCollection.prototype.keys\r\n     * @function\r\n     * @public\r\n     * @returns {string []} Keys in the collection.\r\n     */\r\n    public get keys(): string[] {\r\n        return this.privKeys;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}