{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { CancellationErrorCode, OutputFormat, PropertyCollection, PropertyId, ResultReason, SpeechRecognitionCanceledEventArgs, SpeechRecognitionEventArgs, SpeechRecognitionResult } from \"../sdk/Exports\";\nimport { CancellationErrorCodePropertyName, DetailedSpeechPhrase, EnumTranslation, OutputFormatPropertyName, RecognitionStatus, ServiceRecognizerBase, SimpleSpeechPhrase, SpeechHypothesis } from \"./Exports\"; // tslint:disable-next-line:max-classes-per-file\n\nexport class SpeechServiceRecognizer extends ServiceRecognizerBase {\n  constructor(authentication, connectionFactory, audioSource, recognizerConfig, speechRecognizer) {\n    super(authentication, connectionFactory, audioSource, recognizerConfig, speechRecognizer);\n    this.privSpeechRecognizer = speechRecognizer;\n\n    if (recognizerConfig.autoDetectSourceLanguages !== undefined) {\n      const sourceLanguages = recognizerConfig.autoDetectSourceLanguages.split(\",\");\n      this.privSpeechContext.setSection(\"languageId\", {\n        languages: sourceLanguages,\n        onSuccess: {\n          action: \"Recognize\"\n        },\n        onUnknown: {\n          action: \"None\"\n        }\n      });\n      this.privSpeechContext.setSection(\"phraseOutput\", {\n        interimResults: {\n          resultType: \"Auto\"\n        },\n        phraseResults: {\n          resultType: \"Always\"\n        }\n      });\n    }\n  }\n\n  processTypeSpecificMessages(connectionMessage) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let result;\n      const resultProps = new PropertyCollection();\n      resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\n      let processed = false;\n\n      switch (connectionMessage.path.toLowerCase()) {\n        case \"speech.hypothesis\":\n        case \"speech.fragment\":\n          const hypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\n          const offset = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\n          result = new SpeechRecognitionResult(this.privRequestSession.requestId, ResultReason.RecognizingSpeech, hypothesis.Text, hypothesis.Duration, offset, hypothesis.Language, hypothesis.LanguageDetectionConfidence, undefined, // Speaker Id\n          undefined, connectionMessage.textBody, resultProps);\n          this.privRequestSession.onHypothesis(offset);\n          const ev = new SpeechRecognitionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);\n\n          if (!!this.privSpeechRecognizer.recognizing) {\n            try {\n              this.privSpeechRecognizer.recognizing(this.privSpeechRecognizer, ev);\n              /* tslint:disable:no-empty */\n            } catch (error) {// Not going to let errors in the event handler\n              // trip things up.\n            }\n          }\n\n          processed = true;\n          break;\n\n        case \"speech.phrase\":\n          const simple = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\n          const resultReason = EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus);\n          this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + simple.Offset + simple.Duration);\n\n          if (ResultReason.Canceled === resultReason) {\n            const cancelReason = EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);\n            const cancellationErrorCode = EnumTranslation.implTranslateCancelErrorCode(simple.RecognitionStatus);\n            yield this.cancelRecognitionLocal(cancelReason, cancellationErrorCode, EnumTranslation.implTranslateErrorDetails(cancellationErrorCode));\n          } else {\n            if (!(this.privRequestSession.isSpeechEnded && resultReason === ResultReason.NoMatch && simple.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\n              if (this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName) === OutputFormat[OutputFormat.Simple]) {\n                result = new SpeechRecognitionResult(this.privRequestSession.requestId, resultReason, simple.DisplayText, simple.Duration, simple.Offset + this.privRequestSession.currentTurnAudioOffset, simple.Language, simple.LanguageDetectionConfidence, undefined, // Speaker Id\n                undefined, connectionMessage.textBody, resultProps);\n              } else {\n                const detailed = DetailedSpeechPhrase.fromJSON(connectionMessage.textBody);\n                const totalOffset = detailed.Offset + this.privRequestSession.currentTurnAudioOffset;\n                const offsetCorrectedJson = detailed.getJsonWithCorrectedOffsets(totalOffset);\n                result = new SpeechRecognitionResult(this.privRequestSession.requestId, resultReason, detailed.RecognitionStatus === RecognitionStatus.Success ? detailed.NBest[0].Display : undefined, detailed.Duration, totalOffset, detailed.Language, detailed.LanguageDetectionConfidence, undefined, // Speaker Id\n                undefined, offsetCorrectedJson, resultProps);\n              }\n\n              const event = new SpeechRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\n\n              if (!!this.privSpeechRecognizer.recognized) {\n                try {\n                  this.privSpeechRecognizer.recognized(this.privSpeechRecognizer, event);\n                  /* tslint:disable:no-empty */\n                } catch (error) {// Not going to let errors in the event handler\n                  // trip things up.\n                }\n              }\n            }\n\n            if (!!this.privSuccessCallback) {\n              try {\n                this.privSuccessCallback(result);\n              } catch (e) {\n                if (!!this.privErrorCallback) {\n                  this.privErrorCallback(e);\n                }\n              } // Only invoke the call back once.\n              // and if it's successful don't invoke the\n              // error after that.\n\n\n              this.privSuccessCallback = undefined;\n              this.privErrorCallback = undefined;\n            }\n          }\n\n          processed = true;\n          break;\n\n        default:\n          break;\n      }\n\n      return processed;\n    });\n  } // Cancels recognition.\n\n\n  cancelRecognition(sessionId, requestId, cancellationReason, errorCode, error) {\n    const properties = new PropertyCollection();\n    properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\n\n    if (!!this.privSpeechRecognizer.canceled) {\n      const cancelEvent = new SpeechRecognitionCanceledEventArgs(cancellationReason, error, errorCode, undefined, sessionId);\n\n      try {\n        this.privSpeechRecognizer.canceled(this.privSpeechRecognizer, cancelEvent);\n        /* tslint:disable:no-empty */\n      } catch (_a) {}\n    }\n\n    if (!!this.privSuccessCallback) {\n      const result = new SpeechRecognitionResult(requestId, ResultReason.Canceled, undefined, // Text\n      undefined, // Duration\n      undefined, // Offset\n      undefined, // Language\n      undefined, // Language Detection Confidence\n      undefined, // Speaker Id\n      error, undefined, // Json\n      properties);\n\n      try {\n        this.privSuccessCallback(result);\n        this.privSuccessCallback = undefined;\n        /* tslint:disable:no-empty */\n      } catch (_b) {}\n    }\n  }\n\n}","map":{"version":3,"mappings":"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","names":["CancellationErrorCode","OutputFormat","PropertyCollection","PropertyId","ResultReason","SpeechRecognitionCanceledEventArgs","SpeechRecognitionEventArgs","SpeechRecognitionResult","CancellationErrorCodePropertyName","DetailedSpeechPhrase","EnumTranslation","OutputFormatPropertyName","RecognitionStatus","ServiceRecognizerBase","SimpleSpeechPhrase","SpeechHypothesis","SpeechServiceRecognizer","constructor","authentication","connectionFactory","audioSource","recognizerConfig","speechRecognizer","privSpeechRecognizer","autoDetectSourceLanguages","undefined","sourceLanguages","split","privSpeechContext","setSection","languages","onSuccess","action","onUnknown","interimResults","resultType","phraseResults","processTypeSpecificMessages","connectionMessage","result","resultProps","setProperty","SpeechServiceResponse_JsonResult","textBody","processed","path","toLowerCase","hypothesis","fromJSON","offset","Offset","privRequestSession","currentTurnAudioOffset","requestId","RecognizingSpeech","Text","Duration","Language","LanguageDetectionConfidence","onHypothesis","ev","sessionId","recognizing","error","simple","resultReason","implTranslateRecognitionResult","onPhraseRecognized","Canceled","cancelReason","implTranslateCancelResult","cancellationErrorCode","implTranslateCancelErrorCode","cancelRecognitionLocal","implTranslateErrorDetails","isSpeechEnded","NoMatch","InitialSilenceTimeout","privRecognizerConfig","parameters","getProperty","Simple","DisplayText","detailed","totalOffset","offsetCorrectedJson","getJsonWithCorrectedOffsets","Success","NBest","Display","event","recognized","privSuccessCallback","e","privErrorCallback","cancelRecognition","cancellationReason","errorCode","properties","canceled","cancelEvent"],"sources":["C:\\Users\\ozgur\\Documents\\VSCodeProjects\\webapp_educator\\educator\\node_modules\\microsoft-cognitiveservices-speech-sdk\\distrib\\es2015\\src\\common.speech\\src\\common.speech\\SpeechServiceRecognizer.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IAudioSource } from \"../common/Exports\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n    SpeechRecognizer,\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    DetailedSpeechPhrase,\r\n    EnumTranslation,\r\n    OutputFormatPropertyName,\r\n    RecognitionStatus,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechHypothesis,\r\n} from \"./Exports\";\r\nimport { IAuthentication } from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class SpeechServiceRecognizer extends ServiceRecognizerBase {\r\n\r\n    private privSpeechRecognizer: SpeechRecognizer;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        speechRecognizer: SpeechRecognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, speechRecognizer);\r\n        this.privSpeechRecognizer = speechRecognizer;\r\n        if (recognizerConfig.autoDetectSourceLanguages !== undefined) {\r\n            const sourceLanguages: string[] = recognizerConfig.autoDetectSourceLanguages.split(\",\");\r\n            this.privSpeechContext.setSection(\"languageId\", {\r\n                languages: sourceLanguages,\r\n                onSuccess: { action: \"Recognize\" },\r\n                onUnknown: { action: \"None\" }\r\n            });\r\n            this.privSpeechContext.setSection(\"phraseOutput\", {\r\n                interimResults: {\r\n                    resultType: \"Auto\"\r\n                },\r\n                phraseResults: {\r\n                    resultType: \"Always\"\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    protected async processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        let result: SpeechRecognitionResult;\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        let processed: boolean = false;\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.hypothesis\":\r\n            case \"speech.fragment\":\r\n                const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\r\n                const offset: number = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n                result = new SpeechRecognitionResult(\r\n                    this.privRequestSession.requestId,\r\n                    ResultReason.RecognizingSpeech,\r\n                    hypothesis.Text,\r\n                    hypothesis.Duration,\r\n                    offset,\r\n                    hypothesis.Language,\r\n                    hypothesis.LanguageDetectionConfidence,\r\n                    undefined, // Speaker Id\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                this.privRequestSession.onHypothesis(offset);\r\n\r\n                const ev = new SpeechRecognitionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);\r\n\r\n                if (!!this.privSpeechRecognizer.recognizing) {\r\n                    try {\r\n                        this.privSpeechRecognizer.recognizing(this.privSpeechRecognizer, ev);\r\n                        /* tslint:disable:no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.phrase\":\r\n                const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus);\r\n\r\n                this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + simple.Offset + simple.Duration);\r\n\r\n                if (ResultReason.Canceled === resultReason) {\r\n                    const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);\r\n                    const cancellationErrorCode: CancellationErrorCode = EnumTranslation.implTranslateCancelErrorCode(simple.RecognitionStatus);\r\n\r\n                    await this.cancelRecognitionLocal(\r\n                        cancelReason,\r\n                        cancellationErrorCode,\r\n                        EnumTranslation.implTranslateErrorDetails(cancellationErrorCode));\r\n\r\n                } else {\r\n                    if (!(this.privRequestSession.isSpeechEnded && resultReason === ResultReason.NoMatch && simple.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\r\n                        if (this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName) === OutputFormat[OutputFormat.Simple]) {\r\n                            result = new SpeechRecognitionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                simple.DisplayText,\r\n                                simple.Duration,\r\n                                simple.Offset + this.privRequestSession.currentTurnAudioOffset,\r\n                                simple.Language,\r\n                                simple.LanguageDetectionConfidence,\r\n                                undefined, // Speaker Id\r\n                                undefined,\r\n                                connectionMessage.textBody,\r\n                                resultProps);\r\n                        } else {\r\n                            const detailed: DetailedSpeechPhrase = DetailedSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                            const totalOffset: number = detailed.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n                            const offsetCorrectedJson: string = detailed.getJsonWithCorrectedOffsets(totalOffset);\r\n\r\n                            result = new SpeechRecognitionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                detailed.RecognitionStatus === RecognitionStatus.Success ? detailed.NBest[0].Display : undefined,\r\n                                detailed.Duration,\r\n                                totalOffset,\r\n                                detailed.Language,\r\n                                detailed.LanguageDetectionConfidence,\r\n                                undefined, // Speaker Id\r\n                                undefined,\r\n                                offsetCorrectedJson,\r\n                                resultProps);\r\n                        }\r\n\r\n                        const event: SpeechRecognitionEventArgs = new SpeechRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privSpeechRecognizer.recognized) {\r\n                            try {\r\n                                this.privSpeechRecognizer.recognized(this.privSpeechRecognizer, event);\r\n                                /* tslint:disable:no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (!!this.privSuccessCallback) {\r\n                        try {\r\n                            this.privSuccessCallback(result);\r\n                        } catch (e) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(e);\r\n                            }\r\n                        }\r\n                        // Only invoke the call back once.\r\n                        // and if it's successful don't invoke the\r\n                        // error after that.\r\n                        this.privSuccessCallback = undefined;\r\n                        this.privErrorCallback = undefined;\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privSpeechRecognizer.canceled) {\r\n            const cancelEvent: SpeechRecognitionCanceledEventArgs = new SpeechRecognitionCanceledEventArgs(\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined,\r\n                sessionId);\r\n            try {\r\n                this.privSpeechRecognizer.canceled(this.privSpeechRecognizer, cancelEvent);\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            const result: SpeechRecognitionResult = new SpeechRecognitionResult(\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined, // Text\r\n                undefined, // Duration\r\n                undefined, // Offset\r\n                undefined, // Language\r\n                undefined, // Language Detection Confidence\r\n                undefined, // Speaker Id\r\n                error,\r\n                undefined, // Json\r\n                properties);\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                this.privSuccessCallback = undefined;\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}