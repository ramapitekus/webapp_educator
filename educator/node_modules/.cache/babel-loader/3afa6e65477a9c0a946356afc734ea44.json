{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { RecognitionStatus } from \"../Exports\";\nexport class DetailedSpeechPhrase {\n  constructor(json) {\n    this.privDetailedSpeechPhrase = JSON.parse(json);\n    this.privDetailedSpeechPhrase.RecognitionStatus = RecognitionStatus[this.privDetailedSpeechPhrase.RecognitionStatus];\n  }\n\n  static fromJSON(json) {\n    return new DetailedSpeechPhrase(json);\n  }\n\n  getJsonWithCorrectedOffsets(baseOffset) {\n    if (!!this.privDetailedSpeechPhrase.NBest) {\n      let firstWordOffset;\n\n      for (const phrase of this.privDetailedSpeechPhrase.NBest) {\n        if (!!phrase.Words && !!phrase.Words[0]) {\n          firstWordOffset = phrase.Words[0].Offset;\n          break;\n        }\n      }\n\n      if (!!firstWordOffset && firstWordOffset < baseOffset) {\n        const offset = baseOffset - firstWordOffset;\n\n        for (const details of this.privDetailedSpeechPhrase.NBest) {\n          if (!!details.Words) {\n            for (const word of details.Words) {\n              word.Offset += offset;\n            }\n          }\n        }\n      }\n    }\n\n    return JSON.stringify(this.privDetailedSpeechPhrase);\n  }\n\n  get RecognitionStatus() {\n    return this.privDetailedSpeechPhrase.RecognitionStatus;\n  }\n\n  get NBest() {\n    return this.privDetailedSpeechPhrase.NBest;\n  }\n\n  get Duration() {\n    return this.privDetailedSpeechPhrase.Duration;\n  }\n\n  get Offset() {\n    return this.privDetailedSpeechPhrase.Offset;\n  }\n\n  get Language() {\n    return this.privDetailedSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privDetailedSpeechPhrase.PrimaryLanguage.Language;\n  }\n\n  get LanguageDetectionConfidence() {\n    return this.privDetailedSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privDetailedSpeechPhrase.PrimaryLanguage.Confidence;\n  }\n\n  get Text() {\n    return !!this.privDetailedSpeechPhrase.NBest && this.privDetailedSpeechPhrase.NBest[0] ? this.privDetailedSpeechPhrase.NBest[0].Display : this.privDetailedSpeechPhrase.DisplayText;\n  }\n\n  get SpeakerId() {\n    return this.privDetailedSpeechPhrase.SpeakerId;\n  }\n\n}","map":{"version":3,"mappings":"AAAA;AACA;AAEA,SAA2BA,iBAA3B,QAAoD,YAApD;AA4BA,OAAM,MAAOC,oBAAP,CAA2B;AAG7BC,cAAoBC,IAApB,EAAgC;AAC5B,SAAKC,wBAAL,GAAgCC,IAAI,CAACC,KAAL,CAAWH,IAAX,CAAhC;AACA,SAAKC,wBAAL,CAA8BJ,iBAA9B,GAAmDA,iBAAyB,CAAC,KAAKI,wBAAL,CAA8BJ,iBAA/B,CAA5E;AACH;;AAEqB,SAARO,QAAQ,CAACJ,IAAD,EAAa;AAC/B,WAAO,IAAIF,oBAAJ,CAAyBE,IAAzB,CAAP;AACH;;AAEMK,6BAA2B,CAACC,UAAD,EAAmB;AACjD,QAAI,CAAC,CAAC,KAAKL,wBAAL,CAA8BM,KAApC,EAA2C;AACvC,UAAIC,eAAJ;;AACA,WAAK,MAAMC,MAAX,IAAqB,KAAKR,wBAAL,CAA8BM,KAAnD,EAA0D;AACtD,YAAI,CAAC,CAACE,MAAM,CAACC,KAAT,IAAkB,CAAC,CAACD,MAAM,CAACC,KAAP,CAAa,CAAb,CAAxB,EAAyC;AACrCF,yBAAe,GAAGC,MAAM,CAACC,KAAP,CAAa,CAAb,EAAgBC,MAAlC;AACA;AACH;AACJ;;AACD,UAAI,CAAC,CAACH,eAAF,IAAqBA,eAAe,GAAGF,UAA3C,EAAuD;AACnD,cAAMM,MAAM,GAAWN,UAAU,GAAGE,eAApC;;AACA,aAAK,MAAMK,OAAX,IAAsB,KAAKZ,wBAAL,CAA8BM,KAApD,EAA2D;AACvD,cAAI,CAAC,CAACM,OAAO,CAACH,KAAd,EAAqB;AACjB,iBAAK,MAAMI,IAAX,IAAmBD,OAAO,CAACH,KAA3B,EAAkC;AAC9BI,kBAAI,CAACH,MAAL,IAAeC,MAAf;AACH;AACJ;AACJ;AACJ;AACJ;;AACD,WAAOV,IAAI,CAACa,SAAL,CAAe,KAAKd,wBAApB,CAAP;AACH;;AAE2B,MAAjBJ,iBAAiB;AACxB,WAAO,KAAKI,wBAAL,CAA8BJ,iBAArC;AACH;;AACe,MAALU,KAAK;AACZ,WAAO,KAAKN,wBAAL,CAA8BM,KAArC;AACH;;AACkB,MAARS,QAAQ;AACf,WAAO,KAAKf,wBAAL,CAA8Be,QAArC;AACH;;AACgB,MAANL,MAAM;AACb,WAAO,KAAKV,wBAAL,CAA8BU,MAArC;AACH;;AACkB,MAARM,QAAQ;AACf,WAAO,KAAKhB,wBAAL,CAA8BiB,eAA9B,KAAkDC,SAAlD,GAA8DA,SAA9D,GAA0E,KAAKlB,wBAAL,CAA8BiB,eAA9B,CAA8CD,QAA/H;AACH;;AACqC,MAA3BG,2BAA2B;AAClC,WAAO,KAAKnB,wBAAL,CAA8BiB,eAA9B,KAAkDC,SAAlD,GAA8DA,SAA9D,GAA0E,KAAKlB,wBAAL,CAA8BiB,eAA9B,CAA8CG,UAA/H;AACH;;AACc,MAAJC,IAAI;AACX,WAAO,CAAC,CAAC,KAAKrB,wBAAL,CAA8BM,KAAhC,IAAyC,KAAKN,wBAAL,CAA8BM,KAA9B,CAAoC,CAApC,CAAzC,GAAkF,KAAKN,wBAAL,CAA8BM,KAA9B,CAAoC,CAApC,EAAuCgB,OAAzH,GAAmI,KAAKtB,wBAAL,CAA8BuB,WAAxK;AACH;;AACmB,MAATC,SAAS;AAChB,WAAO,KAAKxB,wBAAL,CAA8BwB,SAArC;AACH;;AA1D4B","names":["RecognitionStatus","DetailedSpeechPhrase","constructor","json","privDetailedSpeechPhrase","JSON","parse","fromJSON","getJsonWithCorrectedOffsets","baseOffset","NBest","firstWordOffset","phrase","Words","Offset","offset","details","word","stringify","Duration","Language","PrimaryLanguage","undefined","LanguageDetectionConfidence","Confidence","Text","Display","DisplayText","SpeakerId"],"sources":["C:\\Users\\ozgur\\Documents\\VSCodeProjects\\webapp_educator\\educator\\node_modules\\microsoft-cognitiveservices-speech-sdk\\distrib\\es2015\\src\\common.speech\\ServiceMessages\\src\\common.speech\\ServiceMessages\\DetailedSpeechPhrase.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IPrimaryLanguage, RecognitionStatus } from \"../Exports\";\r\n\r\n// speech.phrase for detailed\r\nexport interface IDetailedSpeechPhrase {\r\n    RecognitionStatus: RecognitionStatus;\r\n    NBest: IPhrase[];\r\n    Duration?: number;\r\n    Offset?: number;\r\n    PrimaryLanguage?: IPrimaryLanguage;\r\n    DisplayText?: string;\r\n    SpeakerId?: string;\r\n}\r\n\r\nexport interface IPhrase {\r\n    Confidence?: number;\r\n    Lexical: string;\r\n    ITN: string;\r\n    MaskedITN: string;\r\n    Display: string;\r\n    Words?: IWord[];\r\n}\r\n\r\nexport interface IWord {\r\n    Word: string;\r\n    Offset: number;\r\n    Duration: number;\r\n}\r\n\r\nexport class DetailedSpeechPhrase implements IDetailedSpeechPhrase {\r\n    private privDetailedSpeechPhrase: IDetailedSpeechPhrase;\r\n\r\n    private constructor(json: string) {\r\n        this.privDetailedSpeechPhrase = JSON.parse(json);\r\n        this.privDetailedSpeechPhrase.RecognitionStatus = (RecognitionStatus as any)[this.privDetailedSpeechPhrase.RecognitionStatus];\r\n    }\r\n\r\n    public static fromJSON(json: string): DetailedSpeechPhrase {\r\n        return new DetailedSpeechPhrase(json);\r\n    }\r\n\r\n    public getJsonWithCorrectedOffsets(baseOffset: number): string {\r\n        if (!!this.privDetailedSpeechPhrase.NBest) {\r\n            let firstWordOffset: number;\r\n            for (const phrase of this.privDetailedSpeechPhrase.NBest) {\r\n                if (!!phrase.Words && !!phrase.Words[0]) {\r\n                    firstWordOffset = phrase.Words[0].Offset;\r\n                    break;\r\n                }\r\n            }\r\n            if (!!firstWordOffset && firstWordOffset < baseOffset) {\r\n                const offset: number = baseOffset - firstWordOffset;\r\n                for (const details of this.privDetailedSpeechPhrase.NBest) {\r\n                    if (!!details.Words) {\r\n                        for (const word of details.Words) {\r\n                            word.Offset += offset;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return JSON.stringify(this.privDetailedSpeechPhrase);\r\n    }\r\n\r\n    public get RecognitionStatus(): RecognitionStatus {\r\n        return this.privDetailedSpeechPhrase.RecognitionStatus;\r\n    }\r\n    public get NBest(): IPhrase[] {\r\n        return this.privDetailedSpeechPhrase.NBest;\r\n    }\r\n    public get Duration(): number {\r\n        return this.privDetailedSpeechPhrase.Duration;\r\n    }\r\n    public get Offset(): number {\r\n        return this.privDetailedSpeechPhrase.Offset;\r\n    }\r\n    public get Language(): string {\r\n        return this.privDetailedSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privDetailedSpeechPhrase.PrimaryLanguage.Language;\r\n    }\r\n    public get LanguageDetectionConfidence(): string {\r\n        return this.privDetailedSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privDetailedSpeechPhrase.PrimaryLanguage.Confidence;\r\n    }\r\n    public get Text(): string {\r\n        return !!this.privDetailedSpeechPhrase.NBest && this.privDetailedSpeechPhrase.NBest[0] ? this.privDetailedSpeechPhrase.NBest[0].Display : this.privDetailedSpeechPhrase.DisplayText;\r\n    }\r\n    public get SpeakerId(): string {\r\n        return this.privDetailedSpeechPhrase.SpeakerId;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}