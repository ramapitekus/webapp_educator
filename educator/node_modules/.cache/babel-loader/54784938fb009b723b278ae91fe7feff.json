{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { Contracts } from \"./Contracts\";\n/**\r\n * Language understanding model\r\n * @class LanguageUnderstandingModel\r\n */\n\nexport class LanguageUnderstandingModel {\n  /**\r\n   * Creates and initializes a new instance\r\n   * @constructor\r\n   */\n  constructor() {}\n  /**\r\n   * Creates an language understanding model using the specified endpoint.\r\n   * @member LanguageUnderstandingModel.fromEndpoint\r\n   * @function\r\n   * @public\r\n   * @param {URL} uri - A String that represents the endpoint of the language understanding model.\r\n   * @returns {LanguageUnderstandingModel} The language understanding model being created.\r\n   */\n\n\n  static fromEndpoint(uri) {\n    Contracts.throwIfNull(uri, \"uri\");\n    Contracts.throwIfNullOrWhitespace(uri.hostname, \"uri\");\n    const langModelImp = new LanguageUnderstandingModelImpl(); // Need to extract the app ID from the URL.\n    // URL is in the format: https://<region>.api.cognitive.microsoft.com/luis/v2.0/apps/<Guid>?subscription-key=<key>&timezoneOffset=-360\n    // Start tearing the string apart.\n    // region can be extracted from the host name.\n\n    const firstDot = uri.host.indexOf(\".\");\n\n    if (-1 === firstDot) {\n      throw new Error(\"Could not determine region from endpoint\");\n    }\n\n    langModelImp.region = uri.host.substr(0, firstDot); // Now the app ID.\n\n    const lastSegment = uri.pathname.lastIndexOf(\"/\") + 1;\n\n    if (-1 === lastSegment) {\n      throw new Error(\"Could not determine appId from endpoint\");\n    }\n\n    langModelImp.appId = uri.pathname.substr(lastSegment); // And finally the key.\n\n    langModelImp.subscriptionKey = uri.searchParams.get(\"subscription-key\");\n\n    if (undefined === langModelImp.subscriptionKey) {\n      throw new Error(\"Could not determine subscription key from endpoint\");\n    }\n\n    return langModelImp;\n  }\n  /**\r\n   * Creates an language understanding model using the application id of Language Understanding service.\r\n   * @member LanguageUnderstandingModel.fromAppId\r\n   * @function\r\n   * @public\r\n   * @param {string} appId - A String that represents the application id of Language Understanding service.\r\n   * @returns {LanguageUnderstandingModel} The language understanding model being created.\r\n   */\n\n\n  static fromAppId(appId) {\n    Contracts.throwIfNullOrWhitespace(appId, \"appId\");\n    const langModelImp = new LanguageUnderstandingModelImpl();\n    langModelImp.appId = appId;\n    return langModelImp;\n  }\n  /**\r\n   * Creates a language understanding model using hostname, subscription key and application\r\n   * id of Language Understanding service.\r\n   * @member LanguageUnderstandingModel.fromSubscription\r\n   * @function\r\n   * @public\r\n   * @param {string} subscriptionKey - A String that represents the subscription key of\r\n   *        Language Understanding service.\r\n   * @param {string} appId - A String that represents the application id of Language\r\n   *        Understanding service.\r\n   * @param {LanguageUnderstandingModel} region - A String that represents the region\r\n   *        of the Language Understanding service (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n   * @returns {LanguageUnderstandingModel} The language understanding model being created.\r\n   */\n\n\n  static fromSubscription(subscriptionKey, appId, region) {\n    Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\n    Contracts.throwIfNullOrWhitespace(appId, \"appId\");\n    Contracts.throwIfNullOrWhitespace(region, \"region\");\n    const langModelImp = new LanguageUnderstandingModelImpl();\n    langModelImp.appId = appId;\n    langModelImp.region = region;\n    langModelImp.subscriptionKey = subscriptionKey;\n    return langModelImp;\n  }\n\n}\n/**\r\n * @private\r\n * @class LanguageUnderstandingModelImpl\r\n */\n// tslint:disable-next-line:max-classes-per-file\n\nexport class LanguageUnderstandingModelImpl extends LanguageUnderstandingModel {}","map":{"version":3,"mappings":"AAAA;AACA;AAEA,SAASA,SAAT,QAA0B,aAA1B;AAEA;;;;;AAIA,OAAM,MAAOC,0BAAP,CAAiC;AACnC;;;;AAIAC,iBACC;AAED;;;;;;;;;;AAQ0B,SAAZC,YAAY,CAACC,GAAD,EAAS;AAC/BJ,aAAS,CAACK,WAAV,CAAsBD,GAAtB,EAA2B,KAA3B;AACAJ,aAAS,CAACM,uBAAV,CAAkCF,GAAG,CAACG,QAAtC,EAAgD,KAAhD;AAEA,UAAMC,YAAY,GAAmC,IAAIC,8BAAJ,EAArD,CAJ+B,CAK/B;AACA;AAEA;AAEA;;AACA,UAAMC,QAAQ,GAAWN,GAAG,CAACO,IAAJ,CAASC,OAAT,CAAiB,GAAjB,CAAzB;;AACA,QAAI,CAAC,CAAD,KAAOF,QAAX,EAAqB;AACjB,YAAM,IAAIG,KAAJ,CAAU,0CAAV,CAAN;AACH;;AACDL,gBAAY,CAACM,MAAb,GAAsBV,GAAG,CAACO,IAAJ,CAASI,MAAT,CAAgB,CAAhB,EAAmBL,QAAnB,CAAtB,CAf+B,CAiB/B;;AAEA,UAAMM,WAAW,GAAWZ,GAAG,CAACa,QAAJ,CAAaC,WAAb,CAAyB,GAAzB,IAAgC,CAA5D;;AACA,QAAI,CAAC,CAAD,KAAOF,WAAX,EAAwB;AACpB,YAAM,IAAIH,KAAJ,CAAU,yCAAV,CAAN;AACH;;AAEDL,gBAAY,CAACW,KAAb,GAAqBf,GAAG,CAACa,QAAJ,CAAaF,MAAb,CAAoBC,WAApB,CAArB,CAxB+B,CA0B/B;;AACAR,gBAAY,CAACY,eAAb,GAA+BhB,GAAG,CAACiB,YAAJ,CAAiBC,GAAjB,CAAqB,kBAArB,CAA/B;;AACA,QAAIC,SAAS,KAAKf,YAAY,CAACY,eAA/B,EAAgD;AAC5C,YAAM,IAAIP,KAAJ,CAAU,oDAAV,CAAN;AACH;;AAED,WAAOL,YAAP;AACH;AAED;;;;;;;;;;AAQuB,SAATgB,SAAS,CAACL,KAAD,EAAc;AACjCnB,aAAS,CAACM,uBAAV,CAAkCa,KAAlC,EAAyC,OAAzC;AAEA,UAAMX,YAAY,GAAmC,IAAIC,8BAAJ,EAArD;AACAD,gBAAY,CAACW,KAAb,GAAqBA,KAArB;AACA,WAAOX,YAAP;AACH;AAED;;;;;;;;;;;;;;;;AAc8B,SAAhBiB,gBAAgB,CAACL,eAAD,EAA0BD,KAA1B,EAAyCL,MAAzC,EAAuD;AACjFd,aAAS,CAACM,uBAAV,CAAkCc,eAAlC,EAAmD,iBAAnD;AACApB,aAAS,CAACM,uBAAV,CAAkCa,KAAlC,EAAyC,OAAzC;AACAnB,aAAS,CAACM,uBAAV,CAAkCQ,MAAlC,EAA0C,QAA1C;AAEA,UAAMN,YAAY,GAAmC,IAAIC,8BAAJ,EAArD;AACAD,gBAAY,CAACW,KAAb,GAAqBA,KAArB;AACAX,gBAAY,CAACM,MAAb,GAAsBA,MAAtB;AACAN,gBAAY,CAACY,eAAb,GAA+BA,eAA/B;AACA,WAAOZ,YAAP;AACH;;AA3FkC;AA8FvC;;;;AAIA;;AACA,OAAM,MAAOC,8BAAP,SAA8CR,0BAA9C,CAAwE","names":["Contracts","LanguageUnderstandingModel","constructor","fromEndpoint","uri","throwIfNull","throwIfNullOrWhitespace","hostname","langModelImp","LanguageUnderstandingModelImpl","firstDot","host","indexOf","Error","region","substr","lastSegment","pathname","lastIndexOf","appId","subscriptionKey","searchParams","get","undefined","fromAppId","fromSubscription"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\node_modules\\microsoft-cognitiveservices-speech-sdk\\distrib\\es2015\\src\\sdk\\src\\sdk\\LanguageUnderstandingModel.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts\";\r\n\r\n/**\r\n * Language understanding model\r\n * @class LanguageUnderstandingModel\r\n */\r\nexport class LanguageUnderstandingModel {\r\n    /**\r\n     * Creates and initializes a new instance\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n    }\r\n\r\n    /**\r\n     * Creates an language understanding model using the specified endpoint.\r\n     * @member LanguageUnderstandingModel.fromEndpoint\r\n     * @function\r\n     * @public\r\n     * @param {URL} uri - A String that represents the endpoint of the language understanding model.\r\n     * @returns {LanguageUnderstandingModel} The language understanding model being created.\r\n     */\r\n    public static fromEndpoint(uri: URL): LanguageUnderstandingModel {\r\n        Contracts.throwIfNull(uri, \"uri\");\r\n        Contracts.throwIfNullOrWhitespace(uri.hostname, \"uri\");\r\n\r\n        const langModelImp: LanguageUnderstandingModelImpl = new LanguageUnderstandingModelImpl();\r\n        // Need to extract the app ID from the URL.\r\n        // URL is in the format: https://<region>.api.cognitive.microsoft.com/luis/v2.0/apps/<Guid>?subscription-key=<key>&timezoneOffset=-360\r\n\r\n        // Start tearing the string apart.\r\n\r\n        // region can be extracted from the host name.\r\n        const firstDot: number = uri.host.indexOf(\".\");\r\n        if (-1 === firstDot) {\r\n            throw new Error(\"Could not determine region from endpoint\");\r\n        }\r\n        langModelImp.region = uri.host.substr(0, firstDot);\r\n\r\n        // Now the app ID.\r\n\r\n        const lastSegment: number = uri.pathname.lastIndexOf(\"/\") + 1;\r\n        if (-1 === lastSegment) {\r\n            throw new Error(\"Could not determine appId from endpoint\");\r\n        }\r\n\r\n        langModelImp.appId = uri.pathname.substr(lastSegment);\r\n\r\n        // And finally the key.\r\n        langModelImp.subscriptionKey = uri.searchParams.get(\"subscription-key\");\r\n        if (undefined === langModelImp.subscriptionKey) {\r\n            throw new Error(\"Could not determine subscription key from endpoint\");\r\n        }\r\n\r\n        return langModelImp;\r\n    }\r\n\r\n    /**\r\n     * Creates an language understanding model using the application id of Language Understanding service.\r\n     * @member LanguageUnderstandingModel.fromAppId\r\n     * @function\r\n     * @public\r\n     * @param {string} appId - A String that represents the application id of Language Understanding service.\r\n     * @returns {LanguageUnderstandingModel} The language understanding model being created.\r\n     */\r\n    public static fromAppId(appId: string): LanguageUnderstandingModel {\r\n        Contracts.throwIfNullOrWhitespace(appId, \"appId\");\r\n\r\n        const langModelImp: LanguageUnderstandingModelImpl = new LanguageUnderstandingModelImpl();\r\n        langModelImp.appId = appId;\r\n        return langModelImp;\r\n    }\r\n\r\n    /**\r\n     * Creates a language understanding model using hostname, subscription key and application\r\n     * id of Language Understanding service.\r\n     * @member LanguageUnderstandingModel.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param {string} subscriptionKey - A String that represents the subscription key of\r\n     *        Language Understanding service.\r\n     * @param {string} appId - A String that represents the application id of Language\r\n     *        Understanding service.\r\n     * @param {LanguageUnderstandingModel} region - A String that represents the region\r\n     *        of the Language Understanding service (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {LanguageUnderstandingModel} The language understanding model being created.\r\n     */\r\n    public static fromSubscription(subscriptionKey: string, appId: string, region: string): LanguageUnderstandingModel {\r\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\r\n        Contracts.throwIfNullOrWhitespace(appId, \"appId\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const langModelImp: LanguageUnderstandingModelImpl = new LanguageUnderstandingModelImpl();\r\n        langModelImp.appId = appId;\r\n        langModelImp.region = region;\r\n        langModelImp.subscriptionKey = subscriptionKey;\r\n        return langModelImp;\r\n    }\r\n}\r\n\r\n/**\r\n * @private\r\n * @class LanguageUnderstandingModelImpl\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class LanguageUnderstandingModelImpl extends LanguageUnderstandingModel {\r\n    public appId: string;\r\n    public region: string;\r\n    public subscriptionKey: string;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}