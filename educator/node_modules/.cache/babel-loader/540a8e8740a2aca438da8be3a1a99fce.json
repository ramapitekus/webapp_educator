{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { MessageType, TranslationStatus } from \"../common/Exports\";\nimport { CancellationErrorCode, CancellationReason, PropertyCollection, PropertyId, ResultReason, TranslationRecognitionCanceledEventArgs, TranslationRecognitionEventArgs, TranslationRecognitionResult, Translations, TranslationSynthesisEventArgs, TranslationSynthesisResult } from \"../sdk/Exports\";\nimport { CancellationErrorCodePropertyName, EnumTranslation, RecognitionStatus, ServiceRecognizerBase, SynthesisStatus, TranslationHypothesis, TranslationPhrase, TranslationSynthesisEnd } from \"./Exports\"; // tslint:disable-next-line:max-classes-per-file\n\nexport class TranslationServiceRecognizer extends ServiceRecognizerBase {\n  constructor(authentication, connectionFactory, audioSource, recognizerConfig, translationRecognizer) {\n    super(authentication, connectionFactory, audioSource, recognizerConfig, translationRecognizer);\n    this.privTranslationRecognizer = translationRecognizer;\n    this.connectionEvents.attach(connectionEvent => __awaiter(this, void 0, void 0, function* () {\n      if (connectionEvent.name === \"ConnectionEstablishedEvent\") {\n        this.privTranslationRecognizer.onConnection();\n      } else if (connectionEvent.name === \"ConnectionClosedEvent\") {\n        yield this.privTranslationRecognizer.onDisconnection();\n      }\n    }));\n  }\n\n  processTypeSpecificMessages(connectionMessage) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const resultProps = new PropertyCollection();\n      let processed = false;\n\n      const handleTranslationPhrase = translatedPhrase => __awaiter(this, void 0, void 0, function* () {\n        this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + translatedPhrase.Offset + translatedPhrase.Duration);\n\n        if (translatedPhrase.RecognitionStatus === RecognitionStatus.Success) {\n          // OK, the recognition was successful. How'd the translation do?\n          const result = this.fireEventForResult(translatedPhrase, resultProps);\n\n          if (!!this.privTranslationRecognizer.recognized) {\n            try {\n              this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, result);\n              /* tslint:disable:no-empty */\n            } catch (error) {// Not going to let errors in the event handler\n              // trip things up.\n            }\n          } // report result to promise.\n\n\n          if (!!this.privSuccessCallback) {\n            try {\n              this.privSuccessCallback(result.result);\n            } catch (e) {\n              if (!!this.privErrorCallback) {\n                this.privErrorCallback(e);\n              }\n            } // Only invoke the call back once.\n            // and if it's successful don't invoke the\n            // error after that.\n\n\n            this.privSuccessCallback = undefined;\n            this.privErrorCallback = undefined;\n          }\n        } else {\n          const reason = EnumTranslation.implTranslateRecognitionResult(translatedPhrase.RecognitionStatus);\n          const result = new TranslationRecognitionResult(undefined, this.privRequestSession.requestId, reason, translatedPhrase.Text, translatedPhrase.Duration, this.privRequestSession.currentTurnAudioOffset + translatedPhrase.Offset, undefined, connectionMessage.textBody, resultProps);\n\n          if (reason === ResultReason.Canceled) {\n            const cancelReason = EnumTranslation.implTranslateCancelResult(translatedPhrase.RecognitionStatus);\n            const cancellationErrorCode = EnumTranslation.implTranslateCancelErrorCode(translatedPhrase.RecognitionStatus);\n            yield this.cancelRecognitionLocal(cancelReason, cancellationErrorCode, EnumTranslation.implTranslateErrorDetails(cancellationErrorCode));\n          } else {\n            if (!(this.privRequestSession.isSpeechEnded && reason === ResultReason.NoMatch && translatedPhrase.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\n              const ev = new TranslationRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\n\n              if (!!this.privTranslationRecognizer.recognized) {\n                try {\n                  this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, ev);\n                  /* tslint:disable:no-empty */\n                } catch (error) {// Not going to let errors in the event handler\n                  // trip things up.\n                }\n              }\n            } // report result to promise.\n\n\n            if (!!this.privSuccessCallback) {\n              try {\n                this.privSuccessCallback(result);\n              } catch (e) {\n                if (!!this.privErrorCallback) {\n                  this.privErrorCallback(e);\n                }\n              } // Only invoke the call back once.\n              // and if it's successful don't invoke the\n              // error after that.\n\n\n              this.privSuccessCallback = undefined;\n              this.privErrorCallback = undefined;\n            }\n          }\n\n          processed = true;\n        }\n      });\n\n      if (connectionMessage.messageType === MessageType.Text) {\n        resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\n      }\n\n      switch (connectionMessage.path.toLowerCase()) {\n        case \"translation.hypothesis\":\n          const result = this.fireEventForResult(TranslationHypothesis.fromJSON(connectionMessage.textBody), resultProps);\n          this.privRequestSession.onHypothesis(this.privRequestSession.currentTurnAudioOffset + result.offset);\n\n          if (!!this.privTranslationRecognizer.recognizing) {\n            try {\n              this.privTranslationRecognizer.recognizing(this.privTranslationRecognizer, result);\n              /* tslint:disable:no-empty */\n            } catch (error) {// Not going to let errors in the event handler\n              // trip things up.\n            }\n          }\n\n          processed = true;\n          break;\n\n        case \"translation.response\":\n          const phrase = JSON.parse(connectionMessage.textBody);\n\n          if (!!phrase.SpeechPhrase) {\n            yield handleTranslationPhrase(TranslationPhrase.fromTranslationResponse(phrase));\n          }\n\n          break;\n\n        case \"translation.phrase\":\n          yield handleTranslationPhrase(TranslationPhrase.fromJSON(connectionMessage.textBody));\n          break;\n\n        case \"translation.synthesis\":\n          this.sendSynthesisAudio(connectionMessage.binaryBody, this.privRequestSession.sessionId);\n          processed = true;\n          break;\n\n        case \"translation.synthesis.end\":\n          const synthEnd = TranslationSynthesisEnd.fromJSON(connectionMessage.textBody);\n\n          switch (synthEnd.SynthesisStatus) {\n            case SynthesisStatus.Error:\n              if (!!this.privTranslationRecognizer.synthesizing) {\n                const result = new TranslationSynthesisResult(ResultReason.Canceled, undefined);\n                const retEvent = new TranslationSynthesisEventArgs(result, this.privRequestSession.sessionId);\n\n                try {\n                  this.privTranslationRecognizer.synthesizing(this.privTranslationRecognizer, retEvent);\n                  /* tslint:disable:no-empty */\n                } catch (error) {// Not going to let errors in the event handler\n                  // trip things up.\n                }\n              }\n\n              if (!!this.privTranslationRecognizer.canceled) {\n                // And raise a canceled event to send the rich(er) error message back.\n                const canceledResult = new TranslationRecognitionCanceledEventArgs(this.privRequestSession.sessionId, CancellationReason.Error, synthEnd.FailureReason, CancellationErrorCode.ServiceError, null);\n\n                try {\n                  this.privTranslationRecognizer.canceled(this.privTranslationRecognizer, canceledResult);\n                  /* tslint:disable:no-empty */\n                } catch (error) {// Not going to let errors in the event handler\n                  // trip things up.\n                }\n              }\n\n              break;\n\n            case SynthesisStatus.Success:\n              this.sendSynthesisAudio(undefined, this.privRequestSession.sessionId);\n              break;\n\n            default:\n              break;\n          }\n\n          processed = true;\n          break;\n\n        default:\n          break;\n      }\n\n      return processed;\n    });\n  } // Cancels recognition.\n\n\n  cancelRecognition(sessionId, requestId, cancellationReason, errorCode, error) {\n    const properties = new PropertyCollection();\n    properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\n\n    if (!!this.privTranslationRecognizer.canceled) {\n      const cancelEvent = new TranslationRecognitionCanceledEventArgs(sessionId, cancellationReason, error, errorCode, undefined);\n\n      try {\n        this.privTranslationRecognizer.canceled(this.privTranslationRecognizer, cancelEvent);\n        /* tslint:disable:no-empty */\n      } catch (_a) {}\n    }\n\n    if (!!this.privSuccessCallback) {\n      const result = new TranslationRecognitionResult(undefined, // Translations\n      requestId, ResultReason.Canceled, undefined, // Text\n      undefined, // Druation\n      undefined, // Offset\n      error, undefined, // Json\n      properties);\n\n      try {\n        this.privSuccessCallback(result);\n        /* tslint:disable:no-empty */\n\n        this.privSuccessCallback = undefined;\n      } catch (_b) {}\n    }\n  }\n\n  fireEventForResult(serviceResult, properties) {\n    let translations;\n\n    if (undefined !== serviceResult.Translation.Translations) {\n      translations = new Translations();\n\n      for (const translation of serviceResult.Translation.Translations) {\n        translations.set(translation.Language, translation.Text || translation.DisplayText);\n      }\n    }\n\n    let resultReason;\n\n    if (serviceResult instanceof TranslationPhrase) {\n      if (serviceResult.Translation.TranslationStatus === TranslationStatus.Success) {\n        resultReason = ResultReason.TranslatedSpeech;\n      } else {\n        resultReason = ResultReason.RecognizedSpeech;\n      }\n    } else {\n      resultReason = ResultReason.TranslatingSpeech;\n    }\n\n    const offset = serviceResult.Offset + this.privRequestSession.currentTurnAudioOffset;\n    const result = new TranslationRecognitionResult(translations, this.privRequestSession.requestId, resultReason, serviceResult.Text, serviceResult.Duration, offset, serviceResult.Translation.FailureReason, JSON.stringify(serviceResult), properties);\n    const ev = new TranslationRecognitionEventArgs(result, offset, this.privRequestSession.sessionId);\n    return ev;\n  }\n\n  sendSynthesisAudio(audio, sessionId) {\n    const reason = undefined === audio ? ResultReason.SynthesizingAudioCompleted : ResultReason.SynthesizingAudio;\n    const result = new TranslationSynthesisResult(reason, audio);\n    const retEvent = new TranslationSynthesisEventArgs(result, sessionId);\n\n    if (!!this.privTranslationRecognizer.synthesizing) {\n      try {\n        this.privTranslationRecognizer.synthesizing(this.privTranslationRecognizer, retEvent);\n        /* tslint:disable:no-empty */\n      } catch (error) {// Not going to let errors in the event handler\n        // trip things up.\n      }\n    }\n  }\n\n}","map":{"version":3,"mappings":"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","names":["MessageType","TranslationStatus","CancellationErrorCode","CancellationReason","PropertyCollection","PropertyId","ResultReason","TranslationRecognitionCanceledEventArgs","TranslationRecognitionEventArgs","TranslationRecognitionResult","Translations","TranslationSynthesisEventArgs","TranslationSynthesisResult","CancellationErrorCodePropertyName","EnumTranslation","RecognitionStatus","ServiceRecognizerBase","SynthesisStatus","TranslationHypothesis","TranslationPhrase","TranslationSynthesisEnd","TranslationServiceRecognizer","constructor","authentication","connectionFactory","audioSource","recognizerConfig","translationRecognizer","privTranslationRecognizer","connectionEvents","attach","connectionEvent","__awaiter","name","onConnection","onDisconnection","processTypeSpecificMessages","connectionMessage","resultProps","processed","handleTranslationPhrase","translatedPhrase","privRequestSession","onPhraseRecognized","currentTurnAudioOffset","Offset","Duration","Success","result","fireEventForResult","recognized","error","privSuccessCallback","e","privErrorCallback","undefined","reason","implTranslateRecognitionResult","requestId","Text","textBody","Canceled","cancelReason","implTranslateCancelResult","cancellationErrorCode","implTranslateCancelErrorCode","cancelRecognitionLocal","implTranslateErrorDetails","isSpeechEnded","NoMatch","InitialSilenceTimeout","ev","offset","sessionId","messageType","setProperty","SpeechServiceResponse_JsonResult","path","toLowerCase","fromJSON","onHypothesis","recognizing","phrase","JSON","parse","SpeechPhrase","fromTranslationResponse","sendSynthesisAudio","binaryBody","synthEnd","Error","synthesizing","retEvent","canceled","canceledResult","FailureReason","ServiceError","cancelRecognition","cancellationReason","errorCode","properties","cancelEvent","serviceResult","translations","Translation","translation","set","Language","DisplayText","resultReason","TranslatedSpeech","RecognizedSpeech","TranslatingSpeech","stringify","audio","SynthesizingAudioCompleted","SynthesizingAudio"],"sources":["C:\\Users\\ozgur\\Documents\\VSCodeProjects\\webapp_educator\\educator\\node_modules\\microsoft-cognitiveservices-speech-sdk\\distrib\\es2015\\src\\common.speech\\src\\common.speech\\TranslationServiceRecognizer.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ConnectionEvent,\r\n    IAudioSource,\r\n    MessageType,\r\n    TranslationStatus,\r\n} from \"../common/Exports\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechRecognitionResult,\r\n    TranslationRecognitionCanceledEventArgs,\r\n    TranslationRecognitionEventArgs,\r\n    TranslationRecognitionResult,\r\n    TranslationRecognizer,\r\n    Translations,\r\n    TranslationSynthesisEventArgs,\r\n    TranslationSynthesisResult,\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    EnumTranslation,\r\n    RecognitionStatus,\r\n    ServiceRecognizerBase,\r\n    SynthesisStatus,\r\n    TranslationHypothesis,\r\n    TranslationPhrase,\r\n    TranslationSynthesisEnd,\r\n} from \"./Exports\";\r\nimport { IAuthentication } from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { ITranslationPhrase } from \"./ServiceMessages/TranslationPhrase\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class TranslationServiceRecognizer extends ServiceRecognizerBase {\r\n    private privTranslationRecognizer: TranslationRecognizer;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        translationRecognizer: TranslationRecognizer) {\r\n\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, translationRecognizer);\r\n        this.privTranslationRecognizer = translationRecognizer;\r\n        this.connectionEvents.attach(async (connectionEvent: ConnectionEvent): Promise<void> => {\r\n            if (connectionEvent.name === \"ConnectionEstablishedEvent\") {\r\n                this.privTranslationRecognizer.onConnection();\r\n            } else if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                await this.privTranslationRecognizer.onDisconnection();\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    protected async processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        let processed: boolean = false;\r\n\r\n        const handleTranslationPhrase = async (translatedPhrase: TranslationPhrase): Promise<void> => {\r\n            this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + translatedPhrase.Offset + translatedPhrase.Duration);\r\n\r\n            if (translatedPhrase.RecognitionStatus === RecognitionStatus.Success) {\r\n\r\n                // OK, the recognition was successful. How'd the translation do?\r\n                const result: TranslationRecognitionEventArgs = this.fireEventForResult(translatedPhrase, resultProps);\r\n                if (!!this.privTranslationRecognizer.recognized) {\r\n                    try {\r\n                        this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, result);\r\n                        /* tslint:disable:no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n\r\n                // report result to promise.\r\n                if (!!this.privSuccessCallback) {\r\n                    try {\r\n                        this.privSuccessCallback(result.result);\r\n                    } catch (e) {\r\n                        if (!!this.privErrorCallback) {\r\n                            this.privErrorCallback(e);\r\n                        }\r\n                    }\r\n                    // Only invoke the call back once.\r\n                    // and if it's successful don't invoke the\r\n                    // error after that.\r\n                    this.privSuccessCallback = undefined;\r\n                    this.privErrorCallback = undefined;\r\n                }\r\n            } else {\r\n                const reason: ResultReason = EnumTranslation.implTranslateRecognitionResult(translatedPhrase.RecognitionStatus);\r\n\r\n                const result = new TranslationRecognitionResult(\r\n                    undefined,\r\n                    this.privRequestSession.requestId,\r\n                    reason,\r\n                    translatedPhrase.Text,\r\n                    translatedPhrase.Duration,\r\n                    this.privRequestSession.currentTurnAudioOffset + translatedPhrase.Offset,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                if (reason === ResultReason.Canceled) {\r\n                    const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(translatedPhrase.RecognitionStatus);\r\n                    const cancellationErrorCode: CancellationErrorCode = EnumTranslation.implTranslateCancelErrorCode(translatedPhrase.RecognitionStatus);\r\n\r\n                    await this.cancelRecognitionLocal(\r\n                        cancelReason,\r\n                        cancellationErrorCode,\r\n                        EnumTranslation.implTranslateErrorDetails(cancellationErrorCode));\r\n\r\n                } else {\r\n                    if (!(this.privRequestSession.isSpeechEnded && reason === ResultReason.NoMatch && translatedPhrase.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\r\n                        const ev = new TranslationRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privTranslationRecognizer.recognized) {\r\n                            try {\r\n                                this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, ev);\r\n                                /* tslint:disable:no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // report result to promise.\r\n                    if (!!this.privSuccessCallback) {\r\n                        try {\r\n                            this.privSuccessCallback(result);\r\n                        } catch (e) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(e);\r\n                            }\r\n                        }\r\n                        // Only invoke the call back once.\r\n                        // and if it's successful don't invoke the\r\n                        // error after that.\r\n                        this.privSuccessCallback = undefined;\r\n                        this.privErrorCallback = undefined;\r\n                    }\r\n                }\r\n                processed = true;\r\n            }\r\n\r\n        };\r\n\r\n        if (connectionMessage.messageType === MessageType.Text) {\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        }\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"translation.hypothesis\":\r\n\r\n                const result: TranslationRecognitionEventArgs = this.fireEventForResult(TranslationHypothesis.fromJSON(connectionMessage.textBody), resultProps);\r\n                this.privRequestSession.onHypothesis(this.privRequestSession.currentTurnAudioOffset + result.offset);\r\n\r\n                if (!!this.privTranslationRecognizer.recognizing) {\r\n                    try {\r\n                        this.privTranslationRecognizer.recognizing(this.privTranslationRecognizer, result);\r\n                        /* tslint:disable:no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n\r\n            case \"translation.response\":\r\n                const phrase: { SpeechPhrase: ITranslationPhrase } = JSON.parse(connectionMessage.textBody);\r\n                if (!!phrase.SpeechPhrase) {\r\n                    await handleTranslationPhrase(TranslationPhrase.fromTranslationResponse(phrase));\r\n                }\r\n                break;\r\n            case \"translation.phrase\":\r\n                await handleTranslationPhrase(TranslationPhrase.fromJSON(connectionMessage.textBody));\r\n                break;\r\n\r\n            case \"translation.synthesis\":\r\n                this.sendSynthesisAudio(connectionMessage.binaryBody, this.privRequestSession.sessionId);\r\n                processed = true;\r\n                break;\r\n\r\n            case \"translation.synthesis.end\":\r\n                const synthEnd: TranslationSynthesisEnd = TranslationSynthesisEnd.fromJSON(connectionMessage.textBody);\r\n\r\n                switch (synthEnd.SynthesisStatus) {\r\n                    case SynthesisStatus.Error:\r\n                        if (!!this.privTranslationRecognizer.synthesizing) {\r\n                            const result = new TranslationSynthesisResult(ResultReason.Canceled, undefined);\r\n                            const retEvent: TranslationSynthesisEventArgs = new TranslationSynthesisEventArgs(result, this.privRequestSession.sessionId);\r\n\r\n                            try {\r\n                                this.privTranslationRecognizer.synthesizing(this.privTranslationRecognizer, retEvent);\r\n                                /* tslint:disable:no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n\r\n                        if (!!this.privTranslationRecognizer.canceled) {\r\n                            // And raise a canceled event to send the rich(er) error message back.\r\n                            const canceledResult: TranslationRecognitionCanceledEventArgs = new TranslationRecognitionCanceledEventArgs(\r\n                                this.privRequestSession.sessionId,\r\n                                CancellationReason.Error,\r\n                                synthEnd.FailureReason,\r\n                                CancellationErrorCode.ServiceError,\r\n                                null);\r\n\r\n                            try {\r\n                                this.privTranslationRecognizer.canceled(this.privTranslationRecognizer, canceledResult);\r\n                                /* tslint:disable:no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                        break;\r\n                    case SynthesisStatus.Success:\r\n                        this.sendSynthesisAudio(undefined, this.privRequestSession.sessionId);\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privTranslationRecognizer.canceled) {\r\n\r\n            const cancelEvent: TranslationRecognitionCanceledEventArgs = new TranslationRecognitionCanceledEventArgs(\r\n                sessionId,\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined);\r\n\r\n            try {\r\n                this.privTranslationRecognizer.canceled(this.privTranslationRecognizer, cancelEvent);\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            const result: TranslationRecognitionResult = new TranslationRecognitionResult(\r\n                undefined, // Translations\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined, // Text\r\n                undefined, // Druation\r\n                undefined, // Offset\r\n                error,\r\n                undefined, // Json\r\n                properties);\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                /* tslint:disable:no-empty */\r\n                this.privSuccessCallback = undefined;\r\n            } catch { }\r\n        }\r\n    }\r\n\r\n    private fireEventForResult(serviceResult: TranslationHypothesis | TranslationPhrase, properties: PropertyCollection): TranslationRecognitionEventArgs {\r\n        let translations: Translations;\r\n\r\n        if (undefined !== serviceResult.Translation.Translations) {\r\n            translations = new Translations();\r\n            for (const translation of serviceResult.Translation.Translations) {\r\n                translations.set(translation.Language, translation.Text || translation.DisplayText);\r\n            }\r\n        }\r\n\r\n        let resultReason: ResultReason;\r\n        if (serviceResult instanceof TranslationPhrase) {\r\n            if (serviceResult.Translation.TranslationStatus === TranslationStatus.Success) {\r\n                resultReason = ResultReason.TranslatedSpeech;\r\n            } else {\r\n                resultReason = ResultReason.RecognizedSpeech;\r\n            }\r\n        } else {\r\n            resultReason = ResultReason.TranslatingSpeech;\r\n        }\r\n\r\n        const offset: number = serviceResult.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n        const result = new TranslationRecognitionResult(\r\n            translations,\r\n            this.privRequestSession.requestId,\r\n            resultReason,\r\n            serviceResult.Text,\r\n            serviceResult.Duration,\r\n            offset,\r\n            serviceResult.Translation.FailureReason,\r\n            JSON.stringify(serviceResult),\r\n            properties);\r\n\r\n        const ev = new TranslationRecognitionEventArgs(result, offset, this.privRequestSession.sessionId);\r\n        return ev;\r\n    }\r\n\r\n    private sendSynthesisAudio(audio: ArrayBuffer, sessionId: string): void {\r\n        const reason = (undefined === audio) ? ResultReason.SynthesizingAudioCompleted : ResultReason.SynthesizingAudio;\r\n        const result = new TranslationSynthesisResult(reason, audio);\r\n        const retEvent: TranslationSynthesisEventArgs = new TranslationSynthesisEventArgs(result, sessionId);\r\n\r\n        if (!!this.privTranslationRecognizer.synthesizing) {\r\n            try {\r\n                this.privTranslationRecognizer.synthesizing(this.privTranslationRecognizer, retEvent);\r\n                /* tslint:disable:no-empty */\r\n            } catch (error) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}