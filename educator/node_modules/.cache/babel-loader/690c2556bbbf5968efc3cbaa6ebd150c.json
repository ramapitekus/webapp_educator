{"ast":null,"code":"import React__default, { useEffect } from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction useOnMount(callback) {\n  useEffect(callback, []);\n}\n\nfunction useSound(src, _ref) {\n  if (_ref === void 0) {\n    _ref = {};\n  }\n\n  var _ref2 = _ref,\n      _ref2$volume = _ref2.volume,\n      volume = _ref2$volume === void 0 ? 1 : _ref2$volume,\n      _ref2$playbackRate = _ref2.playbackRate,\n      playbackRate = _ref2$playbackRate === void 0 ? 1 : _ref2$playbackRate,\n      _ref2$soundEnabled = _ref2.soundEnabled,\n      soundEnabled = _ref2$soundEnabled === void 0 ? true : _ref2$soundEnabled,\n      _ref2$interrupt = _ref2.interrupt,\n      interrupt = _ref2$interrupt === void 0 ? false : _ref2$interrupt,\n      onload = _ref2.onload,\n      delegated = _objectWithoutPropertiesLoose(_ref2, [\"id\", \"volume\", \"playbackRate\", \"soundEnabled\", \"interrupt\", \"onload\"]);\n\n  var HowlConstructor = React__default.useRef(null);\n  var isMounted = React__default.useRef(false);\n\n  var _React$useState = React__default.useState(null),\n      duration = _React$useState[0],\n      setDuration = _React$useState[1];\n\n  var _React$useState2 = React__default.useState(null),\n      sound = _React$useState2[0],\n      setSound = _React$useState2[1];\n\n  var handleLoad = function handleLoad() {\n    if (typeof onload === 'function') {\n      // @ts-ignore\n      onload.call(this);\n    }\n\n    if (isMounted.current) {\n      // @ts-ignore\n      setDuration(this.duration() * 1000);\n    } // @ts-ignore\n\n\n    setSound(this);\n  }; // We want to lazy-load Howler, since sounds can't play on load anyway.\n\n\n  useOnMount(function () {\n    import('howler').then(function (mod) {\n      if (!isMounted.current) {\n        var _mod$Howl; // Depending on the module system used, `mod` might hold\n        // the export directly, or it might be under `default`.\n\n\n        HowlConstructor.current = (_mod$Howl = mod.Howl) !== null && _mod$Howl !== void 0 ? _mod$Howl : mod[\"default\"].Howl;\n        isMounted.current = true;\n        new HowlConstructor.current(_extends({\n          src: Array.isArray(src) ? src : [src],\n          volume: volume,\n          rate: playbackRate,\n          onload: handleLoad\n        }, delegated));\n      }\n    });\n    return function () {\n      isMounted.current = false;\n    };\n  }); // When the `src` changes, we have to do a whole thing where we recreate\n  // the Howl instance. This is because Howler doesn't expose a way to\n  // tweak the sound\n\n  React__default.useEffect(function () {\n    if (HowlConstructor.current && sound) {\n      setSound(new HowlConstructor.current(_extends({\n        src: Array.isArray(src) ? src : [src],\n        volume: volume,\n        onload: handleLoad\n      }, delegated)));\n    } // The linter wants to run this effect whenever ANYTHING changes,\n    // but very specifically I only want to recreate the Howl instance\n    // when the `src` changes. Other changes should have no effect.\n    // Passing array to the useEffect dependencies list will result in\n    // ifinite loop so we need to stringify it, for more details check\n    // https://github.com/facebook/react/issues/14476#issuecomment-471199055\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [JSON.stringify(src)]); // Whenever volume/playbackRate are changed, change those properties\n  // on the sound instance.\n\n  React__default.useEffect(function () {\n    if (sound) {\n      sound.volume(volume);\n      sound.rate(playbackRate);\n    } // A weird bug means that including the `sound` here can trigger an\n    // error on unmount, where the state loses track of the sprites??\n    // No idea, but anyway I don't need to re-run this if only the `sound`\n    // changes.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [volume, playbackRate]);\n  var play = React__default.useCallback(function (options) {\n    if (typeof options === 'undefined') {\n      options = {};\n    }\n\n    if (!sound || !soundEnabled && !options.forceSoundEnabled) {\n      return;\n    }\n\n    if (interrupt) {\n      sound.stop();\n    }\n\n    if (options.playbackRate) {\n      sound.rate(options.playbackRate);\n    }\n\n    sound.play(options.id);\n  }, [sound, soundEnabled, interrupt]);\n  var stop = React__default.useCallback(function (id) {\n    if (!sound) {\n      return;\n    }\n\n    sound.stop(id);\n  }, [sound]);\n  var pause = React__default.useCallback(function (id) {\n    if (!sound) {\n      return;\n    }\n\n    sound.pause(id);\n  }, [sound]);\n  var returnedValue = [play, {\n    sound: sound,\n    stop: stop,\n    pause: pause,\n    duration: duration\n  }];\n  return returnedValue;\n}\n\nexport default useSound;\nexport { useSound };","map":{"version":3,"mappings":"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","names":["useOnMount","callback","React","useSound","src","id","volume","_ref2$volume","playbackRate","_ref2$playbackRate","soundEnabled","_ref2$soundEnabled","interrupt","_ref2$interrupt","onload","delegated","HowlConstructor","useRef","isMounted","useState","duration","setDuration","sound","setSound","handleLoad","call","current","then","mod","Howl","Array","isArray","rate","useEffect","JSON","stringify","play","useCallback","options","forceSoundEnabled","stop","pause","returnedValue"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\node_modules\\use-sound\\src\\use-on-mount.ts","C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\node_modules\\use-sound\\src\\index.ts"],"sourcesContent":["import * as React from 'react';\n\nexport default function useOnMount(callback: React.EffectCallback) {\n  React.useEffect(callback, []);\n}\n","import React from 'react';\n\nimport useOnMount from './use-on-mount';\n\nimport { HookOptions, PlayOptions, PlayFunction, ReturnedValue } from './types';\n\nexport default function useSound<T = any>(\n  src: string | string[],\n  {\n    id,\n    volume = 1,\n    playbackRate = 1,\n    soundEnabled = true,\n    interrupt = false,\n    onload,\n    ...delegated\n  }: HookOptions<T> = {} as HookOptions\n) {\n  const HowlConstructor = React.useRef<HowlStatic | null>(null);\n  const isMounted = React.useRef(false);\n\n  const [duration, setDuration] = React.useState<number | null>(null);\n\n  const [sound, setSound] = React.useState<Howl | null>(null);\n\n  const handleLoad = function() {\n    if (typeof onload === 'function') {\n      // @ts-ignore\n      onload.call(this);\n    }\n\n    if (isMounted.current) {\n      // @ts-ignore\n      setDuration(this.duration() * 1000);\n    }\n\n    // @ts-ignore\n    setSound(this);\n  };\n\n  // We want to lazy-load Howler, since sounds can't play on load anyway.\n  useOnMount(() => {\n    import('howler').then(mod => {\n      if (!isMounted.current) {\n        // Depending on the module system used, `mod` might hold\n        // the export directly, or it might be under `default`.\n        HowlConstructor.current = mod.Howl ?? mod.default.Howl;\n\n        isMounted.current = true;\n\n        new HowlConstructor.current({\n          src: Array.isArray(src) ? src : [src],\n          volume,\n          rate: playbackRate,\n          onload: handleLoad,\n          ...delegated,\n        });\n      }\n    });\n\n    return () => {\n      isMounted.current = false;\n    };\n  });\n\n  // When the `src` changes, we have to do a whole thing where we recreate\n  // the Howl instance. This is because Howler doesn't expose a way to\n  // tweak the sound\n  React.useEffect(() => {\n    if (HowlConstructor.current && sound) {\n      setSound(\n        new HowlConstructor.current({\n          src: Array.isArray(src) ? src : [src],\n          volume,\n          onload: handleLoad,\n          ...delegated,\n        })\n      );\n    }\n    // The linter wants to run this effect whenever ANYTHING changes,\n    // but very specifically I only want to recreate the Howl instance\n    // when the `src` changes. Other changes should have no effect.\n    // Passing array to the useEffect dependencies list will result in\n    // ifinite loop so we need to stringify it, for more details check\n    // https://github.com/facebook/react/issues/14476#issuecomment-471199055\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [JSON.stringify(src)]);\n\n  // Whenever volume/playbackRate are changed, change those properties\n  // on the sound instance.\n  React.useEffect(() => {\n    if (sound) {\n      sound.volume(volume);\n      sound.rate(playbackRate);\n    }\n    // A weird bug means that including the `sound` here can trigger an\n    // error on unmount, where the state loses track of the sprites??\n    // No idea, but anyway I don't need to re-run this if only the `sound`\n    // changes.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [volume, playbackRate]);\n\n  const play: PlayFunction = React.useCallback(\n    (options?: PlayOptions) => {\n      if (typeof options === 'undefined') {\n        options = {};\n      }\n\n      if (!sound || (!soundEnabled && !options.forceSoundEnabled)) {\n        return;\n      }\n\n      if (interrupt) {\n        sound.stop();\n      }\n\n      if (options.playbackRate) {\n        sound.rate(options.playbackRate);\n      }\n\n      sound.play(options.id);\n    },\n    [sound, soundEnabled, interrupt]\n  );\n\n  const stop = React.useCallback(\n    id => {\n      if (!sound) {\n        return;\n      }\n      sound.stop(id);\n    },\n    [sound]\n  );\n\n  const pause = React.useCallback(\n    id => {\n      if (!sound) {\n        return;\n      }\n      sound.pause(id);\n    },\n    [sound]\n  );\n\n  const returnedValue: ReturnedValue = [\n    play,\n    {\n      sound,\n      stop,\n      pause,\n      duration,\n    },\n  ];\n\n  return returnedValue;\n}\n\nexport { useSound };\n"]},"metadata":{},"sourceType":"module"}