{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ConnectionMessage, Deferred, MessageType, RawWebsocketMessage } from \"../common/Exports\";\nconst CRLF = \"\\r\\n\";\nexport class WebsocketMessageFormatter {\n  constructor() {\n    this.toConnectionMessage = message => {\n      const deferral = new Deferred();\n\n      try {\n        if (message.messageType === MessageType.Text) {\n          const textMessage = message.textContent;\n          let headers = {};\n          let body = null;\n\n          if (textMessage) {\n            const headerBodySplit = textMessage.split(\"\\r\\n\\r\\n\");\n\n            if (headerBodySplit && headerBodySplit.length > 0) {\n              headers = this.parseHeaders(headerBodySplit[0]);\n\n              if (headerBodySplit.length > 1) {\n                body = headerBodySplit[1];\n              }\n            }\n          }\n\n          deferral.resolve(new ConnectionMessage(message.messageType, body, headers, message.id));\n        } else if (message.messageType === MessageType.Binary) {\n          const binaryMessage = message.binaryContent;\n          let headers = {};\n          let body = null;\n\n          if (!binaryMessage || binaryMessage.byteLength < 2) {\n            throw new Error(\"Invalid binary message format. Header length missing.\");\n          }\n\n          const dataView = new DataView(binaryMessage);\n          const headerLength = dataView.getInt16(0);\n\n          if (binaryMessage.byteLength < headerLength + 2) {\n            throw new Error(\"Invalid binary message format. Header content missing.\");\n          }\n\n          let headersString = \"\";\n\n          for (let i = 0; i < headerLength; i++) {\n            headersString += String.fromCharCode(dataView.getInt8(i + 2));\n          }\n\n          headers = this.parseHeaders(headersString);\n\n          if (binaryMessage.byteLength > headerLength + 2) {\n            body = binaryMessage.slice(2 + headerLength);\n          }\n\n          deferral.resolve(new ConnectionMessage(message.messageType, body, headers, message.id));\n        }\n      } catch (e) {\n        deferral.reject(`Error formatting the message. Error: ${e}`);\n      }\n\n      return deferral.promise;\n    };\n\n    this.fromConnectionMessage = message => {\n      const deferral = new Deferred();\n\n      try {\n        if (message.messageType === MessageType.Text) {\n          const payload = `${this.makeHeaders(message)}${CRLF}${message.textBody ? message.textBody : \"\"}`;\n          deferral.resolve(new RawWebsocketMessage(MessageType.Text, payload, message.id));\n        } else if (message.messageType === MessageType.Binary) {\n          const headersString = this.makeHeaders(message);\n          const content = message.binaryBody;\n          const headerBuffer = this.stringToArrayBuffer(headersString);\n          const headerInt8Array = new Int8Array(headerBuffer);\n          const headerLength = headerInt8Array.byteLength;\n          const payloadInt8Array = new Int8Array(2 + headerLength + (content ? content.byteLength : 0));\n          payloadInt8Array[0] = headerLength >> 8 & 0xff;\n          payloadInt8Array[1] = headerLength & 0xff;\n          payloadInt8Array.set(headerInt8Array, 2);\n\n          if (content) {\n            const bodyInt8Array = new Int8Array(content);\n            payloadInt8Array.set(bodyInt8Array, 2 + headerLength);\n          }\n\n          const payload = payloadInt8Array.buffer;\n          deferral.resolve(new RawWebsocketMessage(MessageType.Binary, payload, message.id));\n        }\n      } catch (e) {\n        deferral.reject(`Error formatting the message. ${e}`);\n      }\n\n      return deferral.promise;\n    };\n\n    this.makeHeaders = message => {\n      let headersString = \"\";\n\n      if (message.headers) {\n        for (const header in message.headers) {\n          if (header) {\n            headersString += `${header}: ${message.headers[header]}${CRLF}`;\n          }\n        }\n      }\n\n      return headersString;\n    };\n\n    this.parseHeaders = headersString => {\n      const headers = {};\n\n      if (headersString) {\n        const headerMatches = headersString.match(/[^\\r\\n]+/g);\n\n        if (headers) {\n          for (const header of headerMatches) {\n            if (header) {\n              const separatorIndex = header.indexOf(\":\");\n              const headerName = separatorIndex > 0 ? header.substr(0, separatorIndex).trim().toLowerCase() : header;\n              const headerValue = separatorIndex > 0 && header.length > separatorIndex + 1 ? header.substr(separatorIndex + 1).trim() : \"\";\n              headers[headerName] = headerValue;\n            }\n          }\n        }\n      }\n\n      return headers;\n    };\n\n    this.stringToArrayBuffer = str => {\n      const buffer = new ArrayBuffer(str.length);\n      const view = new DataView(buffer);\n\n      for (let i = 0; i < str.length; i++) {\n        view.setUint8(i, str.charCodeAt(i));\n      }\n\n      return buffer;\n    };\n  }\n\n}","map":{"version":3,"mappings":"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","names":["ConnectionMessage","Deferred","MessageType","RawWebsocketMessage","CRLF","WebsocketMessageFormatter","constructor","message","deferral","messageType","Text","textMessage","textContent","headers","body","headerBodySplit","split","length","parseHeaders","resolve","id","Binary","binaryMessage","binaryContent","byteLength","Error","dataView","DataView","headerLength","getInt16","headersString","i","String","fromCharCode","getInt8","slice","e","reject","promise","payload","makeHeaders","textBody","content","binaryBody","headerBuffer","stringToArrayBuffer","headerInt8Array","Int8Array","payloadInt8Array","set","bodyInt8Array","buffer","header","headerMatches","match","separatorIndex","indexOf","headerName","substr","trim","toLowerCase","headerValue","str","ArrayBuffer","view","setUint8","charCodeAt"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\node_modules\\microsoft-cognitiveservices-speech-sdk\\distrib\\es2015\\src\\common.speech\\src\\common.speech\\WebsocketMessageFormatter.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ConnectionMessage,\r\n    Deferred,\r\n    IStringDictionary,\r\n    IWebsocketMessageFormatter,\r\n    MessageType,\r\n    RawWebsocketMessage,\r\n} from \"../common/Exports\";\r\n\r\nconst CRLF: string = \"\\r\\n\";\r\n\r\nexport class WebsocketMessageFormatter implements IWebsocketMessageFormatter {\r\n\r\n    public toConnectionMessage = (message: RawWebsocketMessage): Promise<ConnectionMessage> => {\r\n        const deferral = new Deferred<ConnectionMessage>();\r\n\r\n        try {\r\n            if (message.messageType === MessageType.Text) {\r\n                const textMessage: string = message.textContent;\r\n                let headers: IStringDictionary<string> = {};\r\n                let body: string = null;\r\n\r\n                if (textMessage) {\r\n                    const headerBodySplit = textMessage.split(\"\\r\\n\\r\\n\");\r\n                    if (headerBodySplit && headerBodySplit.length > 0) {\r\n                        headers = this.parseHeaders(headerBodySplit[0]);\r\n                        if (headerBodySplit.length > 1) {\r\n                            body = headerBodySplit[1];\r\n                        }\r\n                    }\r\n                }\r\n\r\n                deferral.resolve(new ConnectionMessage(message.messageType, body, headers, message.id));\r\n            } else if (message.messageType === MessageType.Binary) {\r\n                const binaryMessage: ArrayBuffer = message.binaryContent;\r\n                let headers: IStringDictionary<string> = {};\r\n                let body: ArrayBuffer = null;\r\n\r\n                if (!binaryMessage || binaryMessage.byteLength < 2) {\r\n                    throw new Error(\"Invalid binary message format. Header length missing.\");\r\n                }\r\n\r\n                const dataView = new DataView(binaryMessage);\r\n                const headerLength = dataView.getInt16(0);\r\n\r\n                if (binaryMessage.byteLength < headerLength + 2) {\r\n                    throw new Error(\"Invalid binary message format. Header content missing.\");\r\n                }\r\n\r\n                let headersString = \"\";\r\n                for (let i = 0; i < headerLength; i++) {\r\n                    headersString += String.fromCharCode((dataView).getInt8(i + 2));\r\n                }\r\n\r\n                headers = this.parseHeaders(headersString);\r\n\r\n                if (binaryMessage.byteLength > headerLength + 2) {\r\n                    body = binaryMessage.slice(2 + headerLength);\r\n                }\r\n\r\n                deferral.resolve(new ConnectionMessage(message.messageType, body, headers, message.id));\r\n            }\r\n        } catch (e) {\r\n            deferral.reject(`Error formatting the message. Error: ${e}`);\r\n        }\r\n\r\n        return deferral.promise;\r\n    }\r\n\r\n    public fromConnectionMessage = (message: ConnectionMessage): Promise<RawWebsocketMessage> => {\r\n        const deferral = new Deferred<RawWebsocketMessage>();\r\n\r\n        try {\r\n            if (message.messageType === MessageType.Text) {\r\n                const payload = `${this.makeHeaders(message)}${CRLF}${message.textBody ? message.textBody : \"\"}`;\r\n\r\n                deferral.resolve(new RawWebsocketMessage(MessageType.Text, payload, message.id));\r\n\r\n            } else if (message.messageType === MessageType.Binary) {\r\n                const headersString = this.makeHeaders(message);\r\n                const content = message.binaryBody;\r\n\r\n                const headerBuffer = this.stringToArrayBuffer(headersString);\r\n                const headerInt8Array = new Int8Array(headerBuffer);\r\n                const headerLength = headerInt8Array.byteLength;\r\n\r\n                const payloadInt8Array = new Int8Array(2 + headerLength + (content ? content.byteLength : 0));\r\n                payloadInt8Array[0] = ((headerLength >> 8) & 0xff);\r\n                payloadInt8Array[1] = headerLength & 0xff;\r\n                payloadInt8Array.set(headerInt8Array, 2);\r\n\r\n                if (content) {\r\n                    const bodyInt8Array = new Int8Array(content);\r\n                    payloadInt8Array.set(bodyInt8Array, 2 + headerLength);\r\n                }\r\n\r\n                const payload: ArrayBuffer = payloadInt8Array.buffer;\r\n\r\n                deferral.resolve(new RawWebsocketMessage(MessageType.Binary, payload, message.id));\r\n            }\r\n        } catch (e) {\r\n            deferral.reject(`Error formatting the message. ${e}`);\r\n        }\r\n\r\n        return deferral.promise;\r\n    }\r\n\r\n    private makeHeaders = (message: ConnectionMessage): string => {\r\n        let headersString: string = \"\";\r\n\r\n        if (message.headers) {\r\n            for (const header in message.headers) {\r\n                if (header) {\r\n                    headersString += `${header}: ${message.headers[header]}${CRLF}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        return headersString;\r\n    }\r\n\r\n    private parseHeaders = (headersString: string): IStringDictionary<string> => {\r\n        const headers: IStringDictionary<string> = {};\r\n\r\n        if (headersString) {\r\n            const headerMatches = headersString.match(/[^\\r\\n]+/g);\r\n            if (headers) {\r\n                for (const header of headerMatches) {\r\n                    if (header) {\r\n                        const separatorIndex = header.indexOf(\":\");\r\n                        const headerName = separatorIndex > 0 ? header.substr(0, separatorIndex).trim().toLowerCase() : header;\r\n                        const headerValue =\r\n                            separatorIndex > 0 && header.length > (separatorIndex + 1) ?\r\n                                header.substr(separatorIndex + 1).trim() :\r\n                                \"\";\r\n\r\n                        headers[headerName] = headerValue;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return headers;\r\n    }\r\n\r\n    private stringToArrayBuffer = (str: string): ArrayBuffer => {\r\n        const buffer = new ArrayBuffer(str.length);\r\n        const view = new DataView(buffer);\r\n        for (let i = 0; i < str.length; i++) {\r\n            view.setUint8(i, str.charCodeAt(i));\r\n        }\r\n        return buffer;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}