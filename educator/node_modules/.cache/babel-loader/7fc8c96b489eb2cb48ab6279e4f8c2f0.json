{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { ArgumentNullError, Deferred } from \"../common/Exports\";\nimport bent from \"bent\";\nexport var RestRequestType;\n\n(function (RestRequestType) {\n  RestRequestType[\"Get\"] = \"GET\";\n  RestRequestType[\"Post\"] = \"POST\";\n  RestRequestType[\"Delete\"] = \"DELETE\";\n  RestRequestType[\"File\"] = \"file\";\n})(RestRequestType || (RestRequestType = {})); // accept rest operations via request method and return abstracted objects from server response\n\n\nexport class RestMessageAdapter {\n  constructor(configParams) {\n    if (!configParams) {\n      throw new ArgumentNullError(\"configParams\");\n    }\n\n    this.privHeaders = configParams.headers;\n    this.privIgnoreCache = configParams.ignoreCache;\n  }\n\n  static extractHeaderValue(headerKey, headers) {\n    let headerValue = \"\";\n\n    try {\n      const arr = headers.trim().split(/[\\r\\n]+/);\n      const headerMap = {};\n      arr.forEach(line => {\n        const parts = line.split(\": \");\n        const header = parts.shift().toLowerCase();\n        const value = parts.join(\": \");\n        headerMap[header] = value;\n      });\n      headerValue = headerMap[headerKey.toLowerCase()];\n    } catch (e) {// ignore the error\n    }\n\n    return headerValue;\n  }\n\n  set options(configParams) {\n    this.privHeaders = configParams.headers;\n    this.privIgnoreCache = configParams.ignoreCache;\n  }\n\n  setHeaders(key, value) {\n    this.privHeaders[key] = value;\n  }\n\n  request(method, uri) {\n    let queryParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let body = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    let binaryBody = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    const responseReceivedDeferral = new Deferred();\n    const requestCommand = method === RestRequestType.File ? \"POST\" : method;\n\n    const handleRestResponse = function (data) {\n      let j = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      const d = data;\n      return {\n        data: JSON.stringify(j),\n        headers: JSON.stringify(data.headers),\n        json: j,\n        ok: data.statusCode >= 200 && data.statusCode < 300,\n        status: data.statusCode,\n        statusText: j.error ? j.error.message : d.statusText ? d.statusText : d.statusMessage\n      };\n    };\n\n    const blobToArrayBuffer = blob => {\n      const reader = new FileReader();\n      reader.readAsArrayBuffer(blob);\n      return new Promise(resolve => {\n        reader.onloadend = () => {\n          resolve(reader.result);\n        };\n      });\n    };\n\n    const send = postData => {\n      const sendRequest = bent(uri, requestCommand, this.privHeaders, 200, 201, 202, 204, 400, 401, 402, 403, 404);\n      const params = this.queryParams(queryParams) === \"\" ? \"\" : \"?\" + this.queryParams(queryParams);\n      sendRequest(params, postData).then(data => __awaiter(this, void 0, void 0, function* () {\n        if (method === RestRequestType.Delete || data.statusCode === 204) {\n          // No JSON from Delete and reset (204) operations\n          responseReceivedDeferral.resolve(handleRestResponse(data));\n        } else {\n          try {\n            const j = yield data.json();\n            responseReceivedDeferral.resolve(handleRestResponse(data, j));\n          } catch (_a) {\n            responseReceivedDeferral.resolve(handleRestResponse(data));\n          }\n        }\n      })).catch(error => {\n        responseReceivedDeferral.reject(error);\n      });\n    };\n\n    if (this.privIgnoreCache) {\n      this.privHeaders[\"Cache-Control\"] = \"no-cache\";\n    }\n\n    if (method === RestRequestType.File && binaryBody) {\n      const contentType = \"multipart/form-data\";\n      this.privHeaders[\"content-type\"] = contentType;\n      this.privHeaders[\"Content-Type\"] = contentType;\n\n      if (typeof Blob !== \"undefined\" && binaryBody instanceof Blob) {\n        blobToArrayBuffer(binaryBody).then(res => {\n          send(res);\n        }).catch(error => {\n          responseReceivedDeferral.reject(error);\n        });\n      } else {\n        send(binaryBody);\n      }\n    } else {\n      if (method === RestRequestType.Post && body) {\n        this.privHeaders[\"content-type\"] = \"application/json\";\n        this.privHeaders[\"Content-Type\"] = \"application/json\";\n      }\n\n      send(body);\n    }\n\n    return responseReceivedDeferral.promise;\n  }\n\n  withQuery(url) {\n    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const queryString = this.queryParams(params);\n    return queryString ? url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + queryString : url;\n  }\n\n  queryParams() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return Object.keys(params).map(k => encodeURIComponent(k) + \"=\" + encodeURIComponent(params[k])).join(\"&\");\n  }\n\n}","map":{"version":3,"mappings":"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","names":["ArgumentNullError","Deferred","bent","RestRequestType","RestMessageAdapter","constructor","configParams","privHeaders","headers","privIgnoreCache","ignoreCache","extractHeaderValue","headerKey","headerValue","arr","trim","split","headerMap","forEach","line","parts","header","shift","toLowerCase","value","join","e","options","setHeaders","key","request","method","uri","queryParams","body","binaryBody","responseReceivedDeferral","requestCommand","File","handleRestResponse","data","j","d","JSON","stringify","json","ok","statusCode","status","statusText","error","message","statusMessage","blobToArrayBuffer","blob","reader","FileReader","readAsArrayBuffer","Promise","resolve","onloadend","result","send","postData","sendRequest","params","then","__awaiter","Delete","catch","reject","contentType","Blob","res","Post","promise","withQuery","url","queryString","indexOf","Object","keys","map","k","encodeURIComponent"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ_2\\educator\\node_modules\\microsoft-cognitiveservices-speech-sdk\\distrib\\es2015\\src\\common.browser\\src\\common.browser\\RestMessageAdapter.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ArgumentNullError,\r\n    Deferred\r\n} from \"../common/Exports\";\r\nimport { IRequestOptions } from \"./Exports\";\r\n\r\nimport bent, { BentResponse } from \"bent\";\r\n\r\nexport enum RestRequestType {\r\n    Get = \"GET\",\r\n    Post = \"POST\",\r\n    Delete = \"DELETE\",\r\n    File = \"file\",\r\n}\r\n\r\nexport interface IRestResponse {\r\n    ok: boolean;\r\n    status: number;\r\n    statusText: string;\r\n    data: string;\r\n    json: any;\r\n    headers: string;\r\n}\r\n\r\n// accept rest operations via request method and return abstracted objects from server response\r\nexport class RestMessageAdapter {\r\n\r\n    private privIgnoreCache: boolean;\r\n    private privHeaders: { [key: string]: string; };\r\n\r\n    public constructor(\r\n        configParams: IRequestOptions\r\n        ) {\r\n\r\n        if (!configParams) {\r\n            throw new ArgumentNullError(\"configParams\");\r\n        }\r\n\r\n        this.privHeaders = configParams.headers;\r\n        this.privIgnoreCache = configParams.ignoreCache;\r\n    }\r\n\r\n    public static extractHeaderValue(headerKey: string, headers: string): string {\r\n        let headerValue: string = \"\";\r\n\r\n        try {\r\n            const arr = headers.trim().split(/[\\r\\n]+/);\r\n            const headerMap: any = {};\r\n            arr.forEach((line: any) => {\r\n                const parts = line.split(\": \");\r\n                const header = parts.shift().toLowerCase();\r\n                const value = parts.join(\": \");\r\n                headerMap[header] = value;\r\n            });\r\n\r\n            headerValue = headerMap[headerKey.toLowerCase()];\r\n        } catch (e) {\r\n            // ignore the error\r\n        }\r\n\r\n        return headerValue;\r\n    }\r\n\r\n    public set options(configParams: IRequestOptions) {\r\n        this.privHeaders = configParams.headers;\r\n        this.privIgnoreCache = configParams.ignoreCache;\r\n    }\r\n\r\n    public setHeaders(key: string, value: string): void {\r\n        this.privHeaders[key] = value;\r\n    }\r\n\r\n    public request(\r\n        method: RestRequestType,\r\n        uri: string,\r\n        queryParams: any = {},\r\n        body: any = null,\r\n        binaryBody: Blob | Buffer = null,\r\n        ): Promise<IRestResponse> {\r\n\r\n        const responseReceivedDeferral = new Deferred<IRestResponse>();\r\n\r\n        const requestCommand = method === RestRequestType.File ? \"POST\" : method;\r\n        const handleRestResponse = (data: BentResponse, j: any = {}): IRestResponse => {\r\n            const d: { statusText?: string, statusMessage?: string } = data;\r\n            return {\r\n                data: JSON.stringify(j),\r\n                headers: JSON.stringify(data.headers),\r\n                json: j,\r\n                ok: data.statusCode >= 200 && data.statusCode < 300,\r\n                status: data.statusCode,\r\n                statusText: j.error ? j.error.message : d.statusText ? d.statusText : d.statusMessage\r\n            };\r\n        };\r\n\r\n        const blobToArrayBuffer = (blob: Blob) => {\r\n            const reader = new FileReader();\r\n            reader.readAsArrayBuffer(blob);\r\n            return new Promise((resolve: (value: unknown) => void) => {\r\n                reader.onloadend = () => {\r\n                resolve(reader.result);\r\n                };\r\n            });\r\n        };\r\n\r\n        const send = (postData: any): void => {\r\n            const sendRequest = bent(uri, requestCommand, this.privHeaders, 200, 201, 202, 204, 400, 401, 402, 403, 404);\r\n            const params = this.queryParams(queryParams) === \"\" ? \"\" : \"?\" + this.queryParams(queryParams);\r\n            sendRequest(params, postData).then( async (data: any) => {\r\n                if (method === RestRequestType.Delete || data.statusCode === 204) {\r\n                    // No JSON from Delete and reset (204) operations\r\n                    responseReceivedDeferral.resolve(handleRestResponse(data));\r\n                } else {\r\n                    try {\r\n                        const j: any = await data.json();\r\n                        responseReceivedDeferral.resolve(handleRestResponse(data, j));\r\n                    } catch {\r\n                        responseReceivedDeferral.resolve(handleRestResponse(data));\r\n                    }\r\n                }\r\n            }).catch((error: string) => {\r\n                responseReceivedDeferral.reject(error);\r\n            });\r\n        };\r\n\r\n        if (this.privIgnoreCache) {\r\n            this.privHeaders[\"Cache-Control\"] = \"no-cache\";\r\n        }\r\n\r\n        if (method === RestRequestType.File && binaryBody) {\r\n            const contentType = \"multipart/form-data\";\r\n            this.privHeaders[\"content-type\"] = contentType;\r\n            this.privHeaders[\"Content-Type\"] = contentType;\r\n            if (typeof (Blob) !== \"undefined\" && binaryBody instanceof Blob) {\r\n                blobToArrayBuffer(binaryBody as Blob).then( (res: any) => {\r\n                    send(res);\r\n                }).catch((error: any) => {\r\n                    responseReceivedDeferral.reject(error);\r\n                });\r\n            } else {\r\n                send(binaryBody as Buffer);\r\n            }\r\n        } else {\r\n            if (method === RestRequestType.Post && body) {\r\n                this.privHeaders[\"content-type\"] = \"application/json\";\r\n                this.privHeaders[\"Content-Type\"] = \"application/json\";\r\n            }\r\n            send(body);\r\n        }\r\n        return responseReceivedDeferral.promise;\r\n    }\r\n\r\n    private withQuery(url: string, params: any = {}): any {\r\n        const queryString = this.queryParams(params);\r\n        return queryString ? url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + queryString : url;\r\n    }\r\n\r\n    private queryParams(params: any = {}): any {\r\n        return Object.keys(params)\r\n            .map((k: any) => encodeURIComponent(k) + \"=\" + encodeURIComponent(params[k]))\r\n            .join(\"&\");\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}