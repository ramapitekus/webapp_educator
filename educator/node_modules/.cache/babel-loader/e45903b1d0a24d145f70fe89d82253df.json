{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n// tslint:disable:max-classes-per-file\nimport { PropertyId } from \"../sdk/Exports\";\nexport var RecognitionMode;\n\n(function (RecognitionMode) {\n  RecognitionMode[RecognitionMode[\"Interactive\"] = 0] = \"Interactive\";\n  RecognitionMode[RecognitionMode[\"Conversation\"] = 1] = \"Conversation\";\n  RecognitionMode[RecognitionMode[\"Dictation\"] = 2] = \"Dictation\";\n})(RecognitionMode || (RecognitionMode = {}));\n\nexport var SpeechResultFormat;\n\n(function (SpeechResultFormat) {\n  SpeechResultFormat[SpeechResultFormat[\"Simple\"] = 0] = \"Simple\";\n  SpeechResultFormat[SpeechResultFormat[\"Detailed\"] = 1] = \"Detailed\";\n})(SpeechResultFormat || (SpeechResultFormat = {}));\n\nexport class RecognizerConfig {\n  constructor(speechServiceConfig, parameters) {\n    this.privRecognitionMode = RecognitionMode.Interactive;\n    this.privSpeechServiceConfig = speechServiceConfig ? speechServiceConfig : new SpeechServiceConfig(new Context(null));\n    this.privParameters = parameters;\n    this.privMaxRetryCount = parseInt(parameters.getProperty(\"SPEECH-Error-MaxRetryCount\", \"4\"), 10);\n  }\n\n  get parameters() {\n    return this.privParameters;\n  }\n\n  get recognitionMode() {\n    return this.privRecognitionMode;\n  }\n\n  set recognitionMode(value) {\n    this.privRecognitionMode = value;\n    this.privRecognitionActivityTimeout = value === RecognitionMode.Interactive ? 8000 : 25000;\n    this.privSpeechServiceConfig.Recognition = RecognitionMode[value];\n  }\n\n  get SpeechServiceConfig() {\n    return this.privSpeechServiceConfig;\n  }\n\n  get recognitionActivityTimeout() {\n    return this.privRecognitionActivityTimeout;\n  }\n\n  get isContinuousRecognition() {\n    return this.privRecognitionMode !== RecognitionMode.Interactive;\n  }\n\n  get autoDetectSourceLanguages() {\n    return this.parameters.getProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, undefined);\n  }\n\n  get maxRetryCount() {\n    return this.privMaxRetryCount;\n  }\n\n} // The config is serialized and sent as the Speech.Config\n\nexport class SpeechServiceConfig {\n  constructor(context) {\n    this.serialize = () => {\n      return JSON.stringify(this, (key, value) => {\n        if (value && typeof value === \"object\") {\n          const replacement = {};\n\n          for (const k in value) {\n            if (Object.hasOwnProperty.call(value, k)) {\n              replacement[k && k.charAt(0).toLowerCase() + k.substring(1)] = value[k];\n            }\n          }\n\n          return replacement;\n        }\n\n        return value;\n      });\n    };\n\n    this.context = context;\n  }\n\n  get Context() {\n    return this.context;\n  }\n\n  get Recognition() {\n    return this.recognition;\n  }\n\n  set Recognition(value) {\n    this.recognition = value.toLowerCase();\n  }\n\n}\nexport class Context {\n  constructor(os) {\n    this.system = new System();\n    this.os = os;\n  }\n\n}\nexport class System {\n  constructor() {\n    // Note: below will be patched for official builds.\n    const SPEECHSDK_CLIENTSDK_VERSION = \"1.20.0\";\n    this.name = \"SpeechSDK\";\n    this.version = SPEECHSDK_CLIENTSDK_VERSION;\n    this.build = \"JavaScript\";\n    this.lang = \"JavaScript\";\n  }\n\n}\nexport class OS {\n  constructor(platform, name, version) {\n    this.platform = platform;\n    this.name = name;\n    this.version = version;\n  }\n\n}\nexport class Device {\n  constructor(manufacturer, model, version) {\n    this.manufacturer = manufacturer;\n    this.model = model;\n    this.version = version;\n  }\n\n}\nexport var connectivity;\n\n(function (connectivity) {\n  connectivity[\"Bluetooth\"] = \"Bluetooth\";\n  connectivity[\"Wired\"] = \"Wired\";\n  connectivity[\"WiFi\"] = \"WiFi\";\n  connectivity[\"Cellular\"] = \"Cellular\";\n  connectivity[\"InBuilt\"] = \"InBuilt\";\n  connectivity[\"Unknown\"] = \"Unknown\";\n})(connectivity || (connectivity = {}));\n\nexport var type;\n\n(function (type) {\n  type[\"Phone\"] = \"Phone\";\n  type[\"Speaker\"] = \"Speaker\";\n  type[\"Car\"] = \"Car\";\n  type[\"Headset\"] = \"Headset\";\n  type[\"Thermostat\"] = \"Thermostat\";\n  type[\"Microphones\"] = \"Microphones\";\n  type[\"Deskphone\"] = \"Deskphone\";\n  type[\"RemoteControl\"] = \"RemoteControl\";\n  type[\"Unknown\"] = \"Unknown\";\n  type[\"File\"] = \"File\";\n  type[\"Stream\"] = \"Stream\";\n})(type || (type = {}));","map":{"version":3,"mappings":"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","names":["PropertyId","RecognitionMode","SpeechResultFormat","RecognizerConfig","constructor","speechServiceConfig","parameters","Interactive","privSpeechServiceConfig","SpeechServiceConfig","Context","privParameters","privMaxRetryCount","parseInt","getProperty","recognitionMode","privRecognitionMode","value","privRecognitionActivityTimeout","Recognition","recognitionActivityTimeout","isContinuousRecognition","autoDetectSourceLanguages","SpeechServiceConnection_AutoDetectSourceLanguages","undefined","maxRetryCount","context","JSON","stringify","key","replacement","k","Object","hasOwnProperty","call","charAt","toLowerCase","substring","recognition","os","system","System","SPEECHSDK_CLIENTSDK_VERSION","name","version","build","lang","OS","platform","Device","manufacturer","model","connectivity","type"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\node_modules\\microsoft-cognitiveservices-speech-sdk\\distrib\\es2015\\src\\common.speech\\src\\common.speech\\RecognizerConfig.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// tslint:disable:max-classes-per-file\r\n\r\nimport { PropertyCollection, PropertyId } from \"../sdk/Exports\";\r\n\r\nexport enum RecognitionMode {\r\n    Interactive,\r\n    Conversation,\r\n    Dictation,\r\n}\r\n\r\nexport enum SpeechResultFormat {\r\n    Simple,\r\n    Detailed,\r\n}\r\n\r\nexport class RecognizerConfig {\r\n    private privRecognitionMode: RecognitionMode = RecognitionMode.Interactive;\r\n    private privSpeechServiceConfig: SpeechServiceConfig;\r\n    private privRecognitionActivityTimeout: number;\r\n    private privParameters: PropertyCollection;\r\n    private privMaxRetryCount: number;\r\n\r\n    constructor(\r\n        speechServiceConfig: SpeechServiceConfig,\r\n        parameters: PropertyCollection) {\r\n        this.privSpeechServiceConfig = speechServiceConfig ? speechServiceConfig : new SpeechServiceConfig(new Context(null));\r\n        this.privParameters = parameters;\r\n        this.privMaxRetryCount = parseInt(parameters.getProperty(\"SPEECH-Error-MaxRetryCount\", \"4\"), 10);\r\n    }\r\n\r\n    public get parameters(): PropertyCollection {\r\n        return this.privParameters;\r\n    }\r\n\r\n    public get recognitionMode(): RecognitionMode {\r\n        return this.privRecognitionMode;\r\n    }\r\n\r\n    public set recognitionMode(value: RecognitionMode) {\r\n        this.privRecognitionMode = value;\r\n        this.privRecognitionActivityTimeout = value === RecognitionMode.Interactive ? 8000 : 25000;\r\n        this.privSpeechServiceConfig.Recognition = RecognitionMode[value];\r\n    }\r\n\r\n    public get SpeechServiceConfig(): SpeechServiceConfig {\r\n        return this.privSpeechServiceConfig;\r\n    }\r\n\r\n    public get recognitionActivityTimeout(): number {\r\n        return this.privRecognitionActivityTimeout;\r\n    }\r\n\r\n    public get isContinuousRecognition(): boolean {\r\n        return this.privRecognitionMode !== RecognitionMode.Interactive;\r\n    }\r\n\r\n    public get autoDetectSourceLanguages(): string {\r\n        return this.parameters.getProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, undefined);\r\n    }\r\n\r\n    public get maxRetryCount(): number {\r\n        return this.privMaxRetryCount;\r\n    }\r\n}\r\n\r\n// The config is serialized and sent as the Speech.Config\r\nexport class SpeechServiceConfig {\r\n    private context: Context;\r\n    private recognition: string;\r\n\r\n    constructor(context: Context) {\r\n        this.context = context;\r\n    }\r\n\r\n    public serialize = (): string => {\r\n        return JSON.stringify(this, (key: any, value: any): any => {\r\n            if (value && typeof value === \"object\") {\r\n                const replacement: any = {};\r\n                for (const k in value) {\r\n                    if (Object.hasOwnProperty.call(value, k)) {\r\n                        replacement[k && k.charAt(0).toLowerCase() + k.substring(1)] = value[k];\r\n                    }\r\n                }\r\n                return replacement;\r\n            }\r\n            return value;\r\n        });\r\n    }\r\n\r\n    public get Context(): Context {\r\n        return this.context;\r\n    }\r\n\r\n    public get Recognition(): string {\r\n        return this.recognition;\r\n    }\r\n\r\n    public set Recognition(value: string) {\r\n        this.recognition = value.toLowerCase();\r\n    }\r\n}\r\n\r\nexport class Context {\r\n    public system: System;\r\n    public os: OS;\r\n    public audio: ISpeechConfigAudio;\r\n\r\n    constructor(os: OS) {\r\n        this.system = new System();\r\n        this.os = os;\r\n    }\r\n}\r\n\r\nexport class System {\r\n    public name: string;\r\n    public version: string;\r\n    public build: string;\r\n    public lang: string;\r\n\r\n    constructor() {\r\n        // Note: below will be patched for official builds.\r\n        const SPEECHSDK_CLIENTSDK_VERSION = \"1.20.0\";\r\n\r\n        this.name = \"SpeechSDK\";\r\n        this.version = SPEECHSDK_CLIENTSDK_VERSION;\r\n        this.build = \"JavaScript\";\r\n        this.lang = \"JavaScript\";\r\n    }\r\n}\r\n\r\nexport class OS {\r\n    public platform: string;\r\n    public name: string;\r\n    public version: string;\r\n\r\n    constructor(platform: string, name: string, version: string) {\r\n        this.platform = platform;\r\n        this.name = name;\r\n        this.version = version;\r\n    }\r\n}\r\n\r\nexport class Device {\r\n    public manufacturer: string;\r\n    public model: string;\r\n    public version: string;\r\n\r\n    constructor(manufacturer: string, model: string, version: string) {\r\n        this.manufacturer = manufacturer;\r\n        this.model = model;\r\n        this.version = version;\r\n    }\r\n}\r\n\r\nexport interface ISpeechConfigAudio {\r\n    source?: ISpeechConfigAudioDevice;\r\n    playback?: ISpeechConfigAudioDevice;\r\n}\r\n\r\nexport interface ISpeechConfigAudioDevice {\r\n    manufacturer: string;\r\n    model: string;\r\n    connectivity: connectivity;\r\n    type: type;\r\n    samplerate: number;\r\n    bitspersample: number;\r\n    channelcount: number;\r\n}\r\n\r\nexport enum connectivity {\r\n    Bluetooth = \"Bluetooth\",\r\n    Wired = \"Wired\",\r\n    WiFi = \"WiFi\",\r\n    Cellular = \"Cellular\",\r\n    InBuilt = \"InBuilt\",\r\n    Unknown = \"Unknown\",\r\n}\r\n\r\nexport enum type {\r\n    Phone = \"Phone\",\r\n    Speaker = \"Speaker\",\r\n    Car = \"Car\",\r\n    Headset = \"Headset\",\r\n    Thermostat = \"Thermostat\",\r\n    Microphones = \"Microphones\",\r\n    Deskphone = \"Deskphone\",\r\n    RemoteControl = \"RemoteControl\",\r\n    Unknown = \"Unknown\",\r\n    File = \"File\",\r\n    Stream = \"Stream\",\r\n}\r\n"]},"metadata":{},"sourceType":"module"}