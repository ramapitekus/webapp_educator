{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ConnectionMessage } from \"../../common/Exports\";\nexport class ConversationConnectionMessage extends ConnectionMessage {\n  constructor(messageType, body, headers, id) {\n    super(messageType, body, headers, id);\n    const json = JSON.parse(this.textBody);\n\n    if (json.type !== undefined) {\n      this.privConversationMessageType = json.type;\n    }\n  }\n\n  get conversationMessageType() {\n    return this.privConversationMessageType;\n  }\n\n}","map":{"version":3,"mappings":"AAAA;AACA;AAEA,SAASA,iBAAT,QAAkE,sBAAlE;AAEA,OAAM,MAAOC,6BAAP,SAA6CD,iBAA7C,CAA8D;AAGhEE,cACIC,WADJ,EAEIC,IAFJ,EAGIC,OAHJ,EAIIC,EAJJ,EAIe;AACP,UAAMH,WAAN,EAAmBC,IAAnB,EAAyBC,OAAzB,EAAkCC,EAAlC;AACA,UAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAW,KAAKC,QAAhB,CAAb;;AACA,QAAIH,IAAI,CAACI,IAAL,KAAcC,SAAlB,EAA6B;AACzB,WAAKC,2BAAL,GAAmCN,IAAI,CAACI,IAAxC;AACH;AACR;;AAEiC,MAAvBG,uBAAuB;AAC9B,WAAO,KAAKD,2BAAZ;AACH;;AAjB+D","names":["ConnectionMessage","ConversationConnectionMessage","constructor","messageType","body","headers","id","json","JSON","parse","textBody","type","undefined","privConversationMessageType","conversationMessageType"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ_2\\educator\\node_modules\\microsoft-cognitiveservices-speech-sdk\\distrib\\es2015\\src\\common.speech\\Transcription\\src\\common.speech\\Transcription\\ConversationConnectionMessage.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ConnectionMessage, IStringDictionary, MessageType } from \"../../common/Exports\";\r\n\r\nexport class ConversationConnectionMessage extends ConnectionMessage {\r\n    private privConversationMessageType: string;\r\n\r\n    public constructor(\r\n        messageType: MessageType,\r\n        body: any,\r\n        headers?: IStringDictionary<string>,\r\n        id?: string) {\r\n            super(messageType, body, headers, id);\r\n            const json = JSON.parse(this.textBody);\r\n            if (json.type !== undefined) {\r\n                this.privConversationMessageType = json.type;\r\n            }\r\n    }\r\n\r\n    public get conversationMessageType(): string {\r\n        return this.privConversationMessageType;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}