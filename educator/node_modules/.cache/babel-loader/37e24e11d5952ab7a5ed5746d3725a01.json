{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { Context, OS, SpeakerIdMessageAdapter, SpeakerRecognitionConfig } from \"../common.speech/Exports\";\nimport { Contracts } from \"./Contracts\";\nimport { PropertyId, ResultReason, VoiceProfile, VoiceProfileEnrollmentResult, VoiceProfilePhraseResult, VoiceProfileResult, VoiceProfileType } from \"./Exports\";\n/**\r\n * Defines VoiceProfileClient class for Speaker Recognition\r\n * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)\r\n * @class VoiceProfileClient\r\n */\n\nexport class VoiceProfileClient {\n  /**\r\n   * VoiceProfileClient constructor.\r\n   * @constructor\r\n   * @param {SpeechConfig} speechConfig - An set of initial properties for this synthesizer (authentication key, region, &c)\r\n   */\n  constructor(speechConfig) {\n    const speechConfigImpl = speechConfig;\n    Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\n    this.privProperties = speechConfigImpl.properties.clone();\n    this.implClientSetup();\n  }\n  /**\r\n   * Gets the authorization token used to communicate with the service.\r\n   * @member VoiceProfileClient.prototype.authorizationToken\r\n   * @function\r\n   * @public\r\n   * @returns {string} Authorization token.\r\n   */\n\n\n  get authorizationToken() {\n    return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n  }\n  /**\r\n   * Gets/Sets the authorization token used to communicate with the service.\r\n   * @member VoiceProfileClient.prototype.authorizationToken\r\n   * @function\r\n   * @public\r\n   * @param {string} token - Authorization token.\r\n   */\n\n\n  set authorizationToken(token) {\n    Contracts.throwIfNullOrWhitespace(token, \"token\");\n    this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\n  }\n  /**\r\n   * The collection of properties and their values defined for this VoiceProfileClient.\r\n   * @member VoiceProfileClient.prototype.properties\r\n   * @function\r\n   * @public\r\n   * @returns {PropertyCollection} The collection of properties and their values defined for this VoiceProfileClient.\r\n   */\n\n\n  get properties() {\n    return this.privProperties;\n  }\n  /**\r\n   * Create a speaker recognition voice profile\r\n   * @member VoiceProfileClient.prototype.createProfileAsync\r\n   * @function\r\n   * @public\r\n   * @async\r\n   * @param {VoiceProfileType} profileType Type of Voice Profile to be created\r\n   *        specifies the keyword to be recognized.\r\n   * @param {string} lang Language string (locale) for Voice Profile\r\n   * @return {Promise<VoiceProfile>} - Promise of a VoiceProfile.\r\n   */\n\n\n  createProfileAsync(profileType, lang) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = yield this.privAdapter.createProfile(profileType, lang);\n\n      if (!result.ok) {\n        throw new Error(`createProfileAsync failed with code: ${result.status}, message: ${result.statusText}`);\n      }\n\n      const response = result.json;\n      const profile = new VoiceProfile(response.profileId, profileType);\n      return profile;\n    });\n  }\n  /**\r\n   * Get current information of a voice profile\r\n   * @member VoiceProfileClient.prototype.retrieveEnrollmentResultAsync\r\n   * @function\r\n   * @public\r\n   * @async\r\n   * @param {VoiceProfile} profile Voice Profile to retrieve info for\r\n   * @return {Promise<VoiceProfileEnrollmentResult>} - Promise of a VoiceProfileEnrollmentResult.\r\n   */\n\n\n  retrieveEnrollmentResultAsync(profile) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = yield this.privAdapter.getProfileStatus(profile);\n      return new VoiceProfileEnrollmentResult(result.ok ? ResultReason.EnrolledVoiceProfile : ResultReason.Canceled, result.data, result.statusText);\n    });\n  }\n  /**\r\n   * Get all voice profiles on account with given voice profile type\r\n   * @member VoiceProfileClient.prototype.getAllProfilesAsync\r\n   * @function\r\n   * @public\r\n   * @async\r\n   * @param {VoiceProfileType} profileType profile type (identification/verification) for which to list profiles\r\n   * @return {Promise<VoiceProfileEnrollmentResult[]>} - Promise of an array of VoiceProfileEnrollmentResults.\r\n   */\n\n\n  getAllProfilesAsync(profileType) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = yield this.privAdapter.getProfiles(profileType);\n\n      if (profileType === VoiceProfileType.TextIndependentIdentification) {\n        return VoiceProfileEnrollmentResult.FromIdentificationProfileList(result.json);\n      }\n\n      return VoiceProfileEnrollmentResult.FromVerificationProfileList(result.json);\n    });\n  }\n  /**\r\n   * Get valid authorization phrases for voice profile enrollment\r\n   * @member VoiceProfileClient.prototype.getAuthorizationPhrasesAsync\r\n   * @function\r\n   * @public\r\n   * @async\r\n   * @param {VoiceProfileType} profileType Profile Type to get activation phrases for\r\n   * @param {string} lang Language string (locale) for Voice Profile\r\n   */\n\n\n  getActivationPhrasesAsync(profileType, lang) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = yield this.privAdapter.getPhrases(profileType, lang);\n      return new VoiceProfilePhraseResult(result.ok ? ResultReason.EnrollingVoiceProfile : ResultReason.Canceled, result.statusText, result.json);\n    });\n  }\n  /**\r\n   * Create a speaker recognition voice profile\r\n   * @member VoiceProfileClient.prototype.enrollProfileAsync\r\n   * @function\r\n   * @public\r\n   * @async\r\n   * @param {VoiceProfile} profile Voice Profile to create enrollment for\r\n   * @param {AudioConfig} audioConfig source info from which to create enrollment\r\n   * @return {Promise<VoiceProfileEnrollmentResult>} - Promise of a VoiceProfileEnrollmentResult.\r\n   */\n\n\n  enrollProfileAsync(profile, audioConfig) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const configImpl = audioConfig;\n      Contracts.throwIfNullOrUndefined(configImpl, \"audioConfig\");\n      const result = yield this.privAdapter.createEnrollment(profile, configImpl);\n      return new VoiceProfileEnrollmentResult(result.ok ? ResultReason.EnrolledVoiceProfile : ResultReason.Canceled, result.data, result.statusText);\n    });\n  }\n  /**\r\n   * Delete a speaker recognition voice profile\r\n   * @member VoiceProfileClient.prototype.deleteProfileAsync\r\n   * @function\r\n   * @public\r\n   * @async\r\n   * @param {VoiceProfile} profile Voice Profile to be deleted\r\n   * @return {Promise<VoiceProfileResult>} - Promise of a VoiceProfileResult.\r\n   */\n\n\n  deleteProfileAsync(profile) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = yield this.privAdapter.deleteProfile(profile);\n      return this.getResult(result, ResultReason.DeletedVoiceProfile);\n    });\n  }\n  /**\r\n   * Remove all enrollments for a speaker recognition voice profile\r\n   * @member VoiceProfileClient.prototype.resetProfileAsync\r\n   * @function\r\n   * @public\r\n   * @async\r\n   * @param {VoiceProfile} profile Voice Profile to be reset\r\n   * @return {Promise<VoiceProfileResult>} - Promise of a VoiceProfileResult.\r\n   */\n\n\n  resetProfileAsync(profile) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = yield this.privAdapter.resetProfile(profile);\n      return this.getResult(result, ResultReason.ResetVoiceProfile);\n    });\n  }\n  /**\r\n   * Included for compatibility\r\n   * @member VoiceProfileClient.prototype.close\r\n   * @function\r\n   * @public\r\n   */\n\n\n  close() {\n    return;\n  } // Does class setup, swiped from Recognizer.\n\n\n  implClientSetup() {\n    let osPlatform = typeof window !== \"undefined\" ? \"Browser\" : \"Node\";\n    let osName = \"unknown\";\n    let osVersion = \"unknown\";\n\n    if (typeof navigator !== \"undefined\") {\n      osPlatform = osPlatform + \"/\" + navigator.platform;\n      osName = navigator.userAgent;\n      osVersion = navigator.appVersion;\n    }\n\n    const recognizerConfig = new SpeakerRecognitionConfig(new Context(new OS(osPlatform, osName, osVersion)), this.privProperties);\n    this.privAdapter = new SpeakerIdMessageAdapter(recognizerConfig);\n  }\n\n  getResult(result, successReason, cb) {\n    const response = new VoiceProfileResult(result.ok ? successReason : ResultReason.Canceled, result.statusText);\n    return response;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Context","OS","SpeakerIdMessageAdapter","SpeakerRecognitionConfig","Contracts","PropertyId","ResultReason","VoiceProfile","VoiceProfileEnrollmentResult","VoiceProfilePhraseResult","VoiceProfileResult","VoiceProfileType","VoiceProfileClient","constructor","speechConfig","speechConfigImpl","throwIfNull","privProperties","properties","clone","implClientSetup","authorizationToken","getProperty","SpeechServiceAuthorization_Token","token","throwIfNullOrWhitespace","setProperty","createProfileAsync","profileType","lang","result","privAdapter","createProfile","ok","Error","status","statusText","response","json","profile","profileId","retrieveEnrollmentResultAsync","getProfileStatus","EnrolledVoiceProfile","Canceled","data","getAllProfilesAsync","getProfiles","TextIndependentIdentification","FromIdentificationProfileList","FromVerificationProfileList","getActivationPhrasesAsync","getPhrases","EnrollingVoiceProfile","enrollProfileAsync","audioConfig","configImpl","throwIfNullOrUndefined","createEnrollment","deleteProfileAsync","deleteProfile","getResult","DeletedVoiceProfile","resetProfileAsync","resetProfile","ResetVoiceProfile","close","osPlatform","window","osName","osVersion","navigator","platform","userAgent","appVersion","recognizerConfig","successReason","cb"],"sources":["C:\\Users\\ozgur\\Documents\\VSCodeProjects\\webapp_educator\\educator\\node_modules\\microsoft-cognitiveservices-speech-sdk\\distrib\\es2015\\src\\sdk\\src\\sdk\\VoiceProfileClient.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IRestResponse,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    Context,\r\n    OS,\r\n    SpeakerIdMessageAdapter,\r\n    SpeakerRecognitionConfig,\r\n} from \"../common.speech/Exports\";\r\nimport { marshalPromiseToCallbacks } from \"../common/Exports\";\r\nimport { AudioConfig, AudioConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    VoiceProfile,\r\n    VoiceProfileEnrollmentResult,\r\n    VoiceProfilePhraseResult,\r\n    VoiceProfileResult,\r\n    VoiceProfileType,\r\n} from \"./Exports\";\r\nimport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig\";\r\n\r\n/**\r\n * Defines VoiceProfileClient class for Speaker Recognition\r\n * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)\r\n * @class VoiceProfileClient\r\n */\r\nexport class VoiceProfileClient {\r\n    protected privProperties: PropertyCollection;\r\n    private privAdapter: SpeakerIdMessageAdapter;\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member VoiceProfileClient.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member VoiceProfileClient.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this VoiceProfileClient.\r\n     * @member VoiceProfileClient.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this VoiceProfileClient.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * VoiceProfileClient constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - An set of initial properties for this synthesizer (authentication key, region, &c)\r\n     */\r\n    public constructor(speechConfig: SpeechConfig) {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        this.privProperties = speechConfigImpl.properties.clone();\r\n        this.implClientSetup();\r\n    }\r\n\r\n    /**\r\n     * Create a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.createProfileAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfileType} profileType Type of Voice Profile to be created\r\n     *        specifies the keyword to be recognized.\r\n     * @param {string} lang Language string (locale) for Voice Profile\r\n     * @return {Promise<VoiceProfile>} - Promise of a VoiceProfile.\r\n     */\r\n    public async createProfileAsync(profileType: VoiceProfileType, lang: string): Promise<VoiceProfile> {\r\n        const result: IRestResponse = await this.privAdapter.createProfile(profileType, lang);\r\n        if (!result.ok) {\r\n            throw new Error(`createProfileAsync failed with code: ${result.status}, message: ${result.statusText}`);\r\n        }\r\n        const response: { profileId: string } = result.json;\r\n        const profile = new VoiceProfile(response.profileId, profileType);\r\n        return profile;\r\n    }\r\n    /**\r\n     * Get current information of a voice profile\r\n     * @member VoiceProfileClient.prototype.retrieveEnrollmentResultAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfile} profile Voice Profile to retrieve info for\r\n     * @return {Promise<VoiceProfileEnrollmentResult>} - Promise of a VoiceProfileEnrollmentResult.\r\n     */\r\n    public async retrieveEnrollmentResultAsync(profile: VoiceProfile): Promise<VoiceProfileEnrollmentResult> {\r\n        const result: IRestResponse = await this.privAdapter.getProfileStatus(profile);\r\n        return new VoiceProfileEnrollmentResult(\r\n            result.ok ? ResultReason.EnrolledVoiceProfile : ResultReason.Canceled,\r\n            result.data,\r\n            result.statusText,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Get all voice profiles on account with given voice profile type\r\n     * @member VoiceProfileClient.prototype.getAllProfilesAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfileType} profileType profile type (identification/verification) for which to list profiles\r\n     * @return {Promise<VoiceProfileEnrollmentResult[]>} - Promise of an array of VoiceProfileEnrollmentResults.\r\n     */\r\n    public async getAllProfilesAsync(profileType: VoiceProfileType): Promise<VoiceProfileEnrollmentResult[]> {\r\n        const result: IRestResponse = await this.privAdapter.getProfiles(profileType);\r\n        if (profileType === VoiceProfileType.TextIndependentIdentification) {\r\n            return VoiceProfileEnrollmentResult.FromIdentificationProfileList(result.json);\r\n        }\r\n        return VoiceProfileEnrollmentResult.FromVerificationProfileList(result.json);\r\n    }\r\n\r\n    /**\r\n     * Get valid authorization phrases for voice profile enrollment\r\n     * @member VoiceProfileClient.prototype.getAuthorizationPhrasesAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfileType} profileType Profile Type to get activation phrases for\r\n     * @param {string} lang Language string (locale) for Voice Profile\r\n     */\r\n    public async getActivationPhrasesAsync(profileType: VoiceProfileType, lang: string): Promise<VoiceProfilePhraseResult> {\r\n        const result: IRestResponse = await this.privAdapter.getPhrases(profileType, lang);\r\n        return new VoiceProfilePhraseResult(\r\n            result.ok ? ResultReason.EnrollingVoiceProfile : ResultReason.Canceled,\r\n            result.statusText,\r\n            result.json\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Create a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.enrollProfileAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfile} profile Voice Profile to create enrollment for\r\n     * @param {AudioConfig} audioConfig source info from which to create enrollment\r\n     * @return {Promise<VoiceProfileEnrollmentResult>} - Promise of a VoiceProfileEnrollmentResult.\r\n     */\r\n    public async enrollProfileAsync(profile: VoiceProfile, audioConfig: AudioConfig): Promise<VoiceProfileEnrollmentResult> {\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        Contracts.throwIfNullOrUndefined(configImpl, \"audioConfig\");\r\n\r\n        const result: IRestResponse = await this.privAdapter.createEnrollment(profile, configImpl);\r\n        return new VoiceProfileEnrollmentResult(\r\n            result.ok ? ResultReason.EnrolledVoiceProfile : ResultReason.Canceled,\r\n            result.data,\r\n            result.statusText,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Delete a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.deleteProfileAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfile} profile Voice Profile to be deleted\r\n     * @return {Promise<VoiceProfileResult>} - Promise of a VoiceProfileResult.\r\n     */\r\n    public async deleteProfileAsync(profile: VoiceProfile): Promise<VoiceProfileResult> {\r\n        const result: IRestResponse = await this.privAdapter.deleteProfile(profile);\r\n        return this.getResult(result, ResultReason.DeletedVoiceProfile);\r\n    }\r\n\r\n    /**\r\n     * Remove all enrollments for a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.resetProfileAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfile} profile Voice Profile to be reset\r\n     * @return {Promise<VoiceProfileResult>} - Promise of a VoiceProfileResult.\r\n     */\r\n    public async resetProfileAsync(profile: VoiceProfile): Promise<VoiceProfileResult> {\r\n        const result: IRestResponse = await this.privAdapter.resetProfile(profile);\r\n        return this.getResult(result, ResultReason.ResetVoiceProfile);\r\n    }\r\n\r\n    /**\r\n     * Included for compatibility\r\n     * @member VoiceProfileClient.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        return;\r\n    }\r\n\r\n    // Does class setup, swiped from Recognizer.\r\n    protected implClientSetup(): void {\r\n\r\n        let osPlatform = (typeof window !== \"undefined\") ? \"Browser\" : \"Node\";\r\n        let osName = \"unknown\";\r\n        let osVersion = \"unknown\";\r\n\r\n        if (typeof navigator !== \"undefined\") {\r\n            osPlatform = osPlatform + \"/\" + navigator.platform;\r\n            osName = navigator.userAgent;\r\n            osVersion = navigator.appVersion;\r\n        }\r\n\r\n        const recognizerConfig =\r\n            new SpeakerRecognitionConfig(\r\n                new Context(new OS(osPlatform, osName, osVersion)),\r\n                this.privProperties);\r\n\r\n        this.privAdapter = new SpeakerIdMessageAdapter(recognizerConfig);\r\n    }\r\n\r\n    private getResult(result: IRestResponse, successReason: ResultReason, cb?: (response: VoiceProfileResult) => void): VoiceProfileResult {\r\n        const response: VoiceProfileResult =\r\n            new VoiceProfileResult(\r\n                result.ok ? successReason : ResultReason.Canceled,\r\n                result.statusText\r\n            );\r\n        return (response);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}