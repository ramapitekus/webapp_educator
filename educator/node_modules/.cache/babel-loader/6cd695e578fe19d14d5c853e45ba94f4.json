{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { InvalidOperationError } from \"../../common/Error\";\nimport { marshalPromiseToCallbacks } from \"../../common/Promise\";\nimport { AudioStreamFormat } from \"../Exports\";\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat\";\n/**\n * Base audio player class\n * TODO: Plays only PCM for now.\n * @class\n */\n\nexport class BaseAudioPlayer {\n  /**\n   * Creates and initializes an instance of this class.\n   * @constructor\n   * @param {AudioStreamFormat} audioFormat audio stream format recognized by the player.\n   */\n  constructor(audioFormat) {\n    this.audioContext = null;\n    this.gainNode = null;\n    this.autoUpdateBufferTimer = 0;\n\n    if (audioFormat === undefined) {\n      audioFormat = AudioStreamFormat.getDefaultInputFormat();\n    }\n\n    this.init(audioFormat);\n  }\n  /**\n   * play Audio sample\n   * @param newAudioData audio data to be played.\n   */\n\n\n  playAudioSample(newAudioData, cb, err) {\n    marshalPromiseToCallbacks((() => __awaiter(this, void 0, void 0, function* () {\n      this.ensureInitializedContext();\n      const audioData = this.formatAudioData(newAudioData);\n      const newSamplesData = new Float32Array(this.samples.length + audioData.length);\n      newSamplesData.set(this.samples, 0);\n      newSamplesData.set(audioData, this.samples.length);\n      this.samples = newSamplesData;\n    }))(), cb, err);\n  }\n  /**\n   * stops audio and clears the buffers\n   */\n\n\n  stopAudio(cb, err) {\n    if (this.audioContext !== null) {\n      this.samples = new Float32Array();\n      clearInterval(this.autoUpdateBufferTimer);\n      this.audioContext.close().then(() => {\n        if (!!cb) {\n          cb();\n        }\n      }, error => {\n        if (!!err) {\n          err(error);\n        }\n      });\n      this.audioContext = null;\n    }\n  }\n\n  init(audioFormat) {\n    this.audioFormat = audioFormat;\n    this.samples = new Float32Array();\n  }\n\n  ensureInitializedContext() {\n    if (this.audioContext === null) {\n      this.createAudioContext();\n      const timerPeriod = 200;\n      this.autoUpdateBufferTimer = setInterval(() => {\n        this.updateAudioBuffer();\n      }, timerPeriod);\n    }\n  }\n\n  createAudioContext() {\n    // new ((window as any).AudioContext || (window as any).webkitAudioContext)();\n    this.audioContext = AudioStreamFormatImpl.getAudioContext(); // TODO: Various examples shows this gain node, it does not seem to be needed unless we plan\n    // to control the volume, not likely\n\n    this.gainNode = this.audioContext.createGain();\n    this.gainNode.gain.value = 1;\n    this.gainNode.connect(this.audioContext.destination);\n    this.startTime = this.audioContext.currentTime;\n  }\n\n  formatAudioData(audioData) {\n    switch (this.audioFormat.bitsPerSample) {\n      case 8:\n        return this.formatArrayBuffer(new Int8Array(audioData), 128);\n\n      case 16:\n        return this.formatArrayBuffer(new Int16Array(audioData), 32768);\n\n      case 32:\n        return this.formatArrayBuffer(new Int32Array(audioData), 2147483648);\n\n      default:\n        throw new InvalidOperationError(\"Only WAVE_FORMAT_PCM (8/16/32 bps) format supported at this time\");\n    }\n  }\n\n  formatArrayBuffer(audioData, maxValue) {\n    const float32Data = new Float32Array(audioData.length);\n\n    for (let i = 0; i < audioData.length; i++) {\n      float32Data[i] = audioData[i] / maxValue;\n    }\n\n    return float32Data;\n  }\n\n  updateAudioBuffer() {\n    if (this.samples.length === 0) {\n      return;\n    }\n\n    const channelCount = this.audioFormat.channels;\n    const bufferSource = this.audioContext.createBufferSource();\n    const frameCount = this.samples.length / channelCount;\n    const audioBuffer = this.audioContext.createBuffer(channelCount, frameCount, this.audioFormat.samplesPerSec); // TODO: Should we do the conversion in the pushAudioSample instead?\n\n    for (let channel = 0; channel < channelCount; channel++) {\n      // Fill in individual channel data\n      let channelOffset = channel;\n      const audioData = audioBuffer.getChannelData(channel);\n\n      for (let i = 0; i < this.samples.length; i++, channelOffset += channelCount) {\n        audioData[i] = this.samples[channelOffset];\n      }\n    }\n\n    if (this.startTime < this.audioContext.currentTime) {\n      this.startTime = this.audioContext.currentTime;\n    }\n\n    bufferSource.buffer = audioBuffer;\n    bufferSource.connect(this.gainNode);\n    bufferSource.start(this.startTime); // Make sure we play the next sample after the current one.\n\n    this.startTime += audioBuffer.duration; // Clear the samples for the next pushed data.\n\n    this.samples = new Float32Array();\n  }\n\n  playAudio(audioData) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.audioContext === null) {\n        this.createAudioContext();\n      }\n\n      const source = this.audioContext.createBufferSource();\n      const destination = this.audioContext.destination;\n      yield this.audioContext.decodeAudioData(audioData, newBuffer => {\n        source.buffer = newBuffer;\n        source.connect(destination);\n        source.start(0);\n      });\n    });\n  }\n\n}","map":{"version":3,"mappings":"AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,SAASA,qBAAT,QAAsC,oBAAtC;AACA,SAASC,yBAAT,QAA0C,sBAA1C;AACA,SAASC,iBAAT,QAAgE,YAAhE;AACA,SAASC,qBAAT,QAAsC,qBAAtC;AAGA;;;;;;AAKA,OAAM,MAAOC,eAAP,CAAsB;AASxB;;;;;AAKAC,cAAmBC,WAAnB,EAAkD;AAZ1C,wBAA6B,IAA7B;AACA,oBAAqB,IAArB;AAEA,iCAA6B,CAA7B;;AAUJ,QAAIA,WAAW,KAAKC,SAApB,EAA+B;AAC3BD,iBAAW,GAAGJ,iBAAiB,CAACM,qBAAlB,EAAd;AACH;;AACD,SAAKC,IAAL,CAAUH,WAAV;AACH;AAED;;;;;;AAIOI,iBAAe,CAACC,YAAD,EAA4BC,EAA5B,EAA6CC,GAA7C,EAA0E;AAC5FZ,6BAAyB,CAAC,CAAC,MAA0Ba;AAC7C,WAAKC,wBAAL;AACA,YAAMC,SAAS,GAAG,KAAKC,eAAL,CAAqBN,YAArB,CAAlB;AACA,YAAMO,cAAc,GAAG,IAAIC,YAAJ,CAAiB,KAAKC,OAAL,CAAaC,MAAb,GAAsBL,SAAS,CAACK,MAAjD,CAAvB;AACAH,oBAAc,CAACI,GAAf,CAAmB,KAAKF,OAAxB,EAAiC,CAAjC;AACAF,oBAAc,CAACI,GAAf,CAAmBN,SAAnB,EAA8B,KAAKI,OAAL,CAAaC,MAA3C;AACA,WAAKD,OAAL,GAAeF,cAAf;AACP,KAPoD,CAA3B,GAAD,EAOnBN,EAPmB,EAOfC,GAPe,CAAzB;AAQH;AAED;;;;;AAGOU,WAAS,CAACX,EAAD,EAAkBC,GAAlB,EAA+C;AAC3D,QAAI,KAAKW,YAAL,KAAsB,IAA1B,EAAgC;AAC5B,WAAKJ,OAAL,GAAe,IAAID,YAAJ,EAAf;AACAM,mBAAa,CAAC,KAAKC,qBAAN,CAAb;AACA,WAAKF,YAAL,CAAkBG,KAAlB,GAA0BC,IAA1B,CAA+B,MAAK;AAChC,YAAI,CAAC,CAAChB,EAAN,EAAU;AACNA,YAAE;AACL;AACJ,OAJD,EAIIiB,KAAD,IAAkB;AACjB,YAAI,CAAC,CAAChB,GAAN,EAAW;AACPA,aAAG,CAACgB,KAAD,CAAH;AACH;AACJ,OARD;AASA,WAAKL,YAAL,GAAoB,IAApB;AACH;AACJ;;AAEOf,MAAI,CAACH,WAAD,EAA+B;AACvC,SAAKA,WAAL,GAAmBA,WAAnB;AACA,SAAKc,OAAL,GAAe,IAAID,YAAJ,EAAf;AACH;;AAEOJ,0BAAwB;AAC5B,QAAI,KAAKS,YAAL,KAAsB,IAA1B,EAAgC;AAC5B,WAAKM,kBAAL;AACA,YAAMC,WAAW,GAAG,GAApB;AACA,WAAKL,qBAAL,GAA6BM,WAAW,CAAC,MAAK;AAC1C,aAAKC,iBAAL;AACH,OAFuC,EAErCF,WAFqC,CAAxC;AAGH;AACJ;;AAEOD,oBAAkB;AACtB;AACA,SAAKN,YAAL,GAAoBrB,qBAAqB,CAAC+B,eAAtB,EAApB,CAFsB,CAItB;AACA;;AACA,SAAKC,QAAL,GAAgB,KAAKX,YAAL,CAAkBY,UAAlB,EAAhB;AACA,SAAKD,QAAL,CAAcE,IAAd,CAAmBC,KAAnB,GAA2B,CAA3B;AACA,SAAKH,QAAL,CAAcI,OAAd,CAAsB,KAAKf,YAAL,CAAkBgB,WAAxC;AACA,SAAKC,SAAL,GAAiB,KAAKjB,YAAL,CAAkBkB,WAAnC;AACH;;AAEOzB,iBAAe,CAACD,SAAD,EAAuB;AAC1C,YAAQ,KAAKV,WAAL,CAAiBqC,aAAzB;AACI,WAAK,CAAL;AACI,eAAO,KAAKC,iBAAL,CAAuB,IAAIC,SAAJ,CAAc7B,SAAd,CAAvB,EAAiD,GAAjD,CAAP;;AACJ,WAAK,EAAL;AACI,eAAO,KAAK4B,iBAAL,CAAuB,IAAIE,UAAJ,CAAe9B,SAAf,CAAvB,EAAkD,KAAlD,CAAP;;AACJ,WAAK,EAAL;AACI,eAAO,KAAK4B,iBAAL,CAAuB,IAAIG,UAAJ,CAAe/B,SAAf,CAAvB,EAAkD,UAAlD,CAAP;;AACJ;AACI,cAAM,IAAIhB,qBAAJ,CAA0B,kEAA1B,CAAN;AARR;AAUH;;AAEO4C,mBAAiB,CAAC5B,SAAD,EAAiCgC,QAAjC,EAAiD;AACtE,UAAMC,WAAW,GAAG,IAAI9B,YAAJ,CAAiBH,SAAS,CAACK,MAA3B,CAApB;;AACA,SAAK,IAAI6B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGlC,SAAS,CAACK,MAA9B,EAAsC6B,CAAC,EAAvC,EAA2C;AACvCD,iBAAW,CAACC,CAAD,CAAX,GAAiBlC,SAAS,CAACkC,CAAD,CAAT,GAAeF,QAAhC;AACH;;AACD,WAAOC,WAAP;AACH;;AAEOhB,mBAAiB;AACrB,QAAI,KAAKb,OAAL,CAAaC,MAAb,KAAwB,CAA5B,EAA+B;AAC3B;AACH;;AAED,UAAM8B,YAAY,GAAG,KAAK7C,WAAL,CAAiB8C,QAAtC;AACA,UAAMC,YAAY,GAAG,KAAK7B,YAAL,CAAkB8B,kBAAlB,EAArB;AACA,UAAMC,UAAU,GAAG,KAAKnC,OAAL,CAAaC,MAAb,GAAsB8B,YAAzC;AACA,UAAMK,WAAW,GAAG,KAAKhC,YAAL,CAAkBiC,YAAlB,CAA+BN,YAA/B,EAA6CI,UAA7C,EAAyD,KAAKjD,WAAL,CAAiBoD,aAA1E,CAApB,CARqB,CAUrB;;AACA,SAAK,IAAIC,OAAO,GAAG,CAAnB,EAAsBA,OAAO,GAAGR,YAAhC,EAA8CQ,OAAO,EAArD,EAAyD;AACrD;AACA,UAAIC,aAAa,GAAGD,OAApB;AACA,YAAM3C,SAAS,GAAGwC,WAAW,CAACK,cAAZ,CAA2BF,OAA3B,CAAlB;;AACA,WAAK,IAAIT,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK9B,OAAL,CAAaC,MAAjC,EAAyC6B,CAAC,IAAIU,aAAa,IAAIT,YAA/D,EAA6E;AACzEnC,iBAAS,CAACkC,CAAD,CAAT,GAAe,KAAK9B,OAAL,CAAawC,aAAb,CAAf;AACH;AACJ;;AAED,QAAI,KAAKnB,SAAL,GAAiB,KAAKjB,YAAL,CAAkBkB,WAAvC,EAAoD;AAChD,WAAKD,SAAL,GAAiB,KAAKjB,YAAL,CAAkBkB,WAAnC;AACH;;AAEDW,gBAAY,CAACS,MAAb,GAAsBN,WAAtB;AACAH,gBAAY,CAACd,OAAb,CAAqB,KAAKJ,QAA1B;AACAkB,gBAAY,CAACU,KAAb,CAAmB,KAAKtB,SAAxB,EA1BqB,CA4BrB;;AACA,SAAKA,SAAL,IAAkBe,WAAW,CAACQ,QAA9B,CA7BqB,CA+BrB;;AACA,SAAK5C,OAAL,GAAe,IAAID,YAAJ,EAAf;AACH;;AAEa8C,WAAS,CAACjD,SAAD,EAAuB;;AAC1C,UAAI,KAAKQ,YAAL,KAAsB,IAA1B,EAAgC;AAC5B,aAAKM,kBAAL;AACH;;AACD,YAAMoC,MAAM,GAA0B,KAAK1C,YAAL,CAAkB8B,kBAAlB,EAAtC;AACA,YAAMd,WAAW,GAAyB,KAAKhB,YAAL,CAAkBgB,WAA5D;AACA,YAAM,KAAKhB,YAAL,CAAkB2C,eAAlB,CAAkCnD,SAAlC,EAA8CoD,SAAD,IAAiC;AAChFF,cAAM,CAACJ,MAAP,GAAgBM,SAAhB;AACAF,cAAM,CAAC3B,OAAP,CAAeC,WAAf;AACA0B,cAAM,CAACH,KAAP,CAAa,CAAb;AACH,OAJK,CAAN;AAKH;AAAA;;AAtJuB","names":["InvalidOperationError","marshalPromiseToCallbacks","AudioStreamFormat","AudioStreamFormatImpl","BaseAudioPlayer","constructor","audioFormat","undefined","getDefaultInputFormat","init","playAudioSample","newAudioData","cb","err","__awaiter","ensureInitializedContext","audioData","formatAudioData","newSamplesData","Float32Array","samples","length","set","stopAudio","audioContext","clearInterval","autoUpdateBufferTimer","close","then","error","createAudioContext","timerPeriod","setInterval","updateAudioBuffer","getAudioContext","gainNode","createGain","gain","value","connect","destination","startTime","currentTime","bitsPerSample","formatArrayBuffer","Int8Array","Int16Array","Int32Array","maxValue","float32Data","i","channelCount","channels","bufferSource","createBufferSource","frameCount","audioBuffer","createBuffer","samplesPerSec","channel","channelOffset","getChannelData","buffer","start","duration","playAudio","source","decodeAudioData","newBuffer"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\node_modules\\microsoft-cognitiveservices-speech-sdk\\distrib\\es2015\\src\\sdk\\Audio\\src\\sdk\\Audio\\BaseAudioPlayer.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError } from \"../../common/Error\";\r\nimport { marshalPromiseToCallbacks } from \"../../common/Promise\";\r\nimport { AudioStreamFormat, PullAudioInputStreamCallback } from \"../Exports\";\r\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat\";\r\n\r\ntype AudioDataTypedArray = Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array;\r\n/**\r\n * Base audio player class\r\n * TODO: Plays only PCM for now.\r\n * @class\r\n */\r\nexport class BaseAudioPlayer {\r\n\r\n    private audioContext: AudioContext = null;\r\n    private gainNode: GainNode = null;\r\n    private audioFormat: AudioStreamFormatImpl;\r\n    private autoUpdateBufferTimer: any = 0;\r\n    private samples: Float32Array;\r\n    private startTime: number;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {AudioStreamFormat} audioFormat audio stream format recognized by the player.\r\n     */\r\n    public constructor(audioFormat?: AudioStreamFormat) {\r\n        if (audioFormat === undefined) {\r\n            audioFormat = AudioStreamFormat.getDefaultInputFormat();\r\n        }\r\n        this.init(audioFormat);\r\n    }\r\n\r\n    /**\r\n     * play Audio sample\r\n     * @param newAudioData audio data to be played.\r\n     */\r\n    public playAudioSample(newAudioData: ArrayBuffer, cb?: () => void, err?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n                this.ensureInitializedContext();\r\n                const audioData = this.formatAudioData(newAudioData);\r\n                const newSamplesData = new Float32Array(this.samples.length + audioData.length);\r\n                newSamplesData.set(this.samples, 0);\r\n                newSamplesData.set(audioData, this.samples.length);\r\n                this.samples = newSamplesData;\r\n        })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * stops audio and clears the buffers\r\n     */\r\n    public stopAudio(cb?: () => void, err?: (error: string) => void): void {\r\n        if (this.audioContext !== null) {\r\n            this.samples = new Float32Array();\r\n            clearInterval(this.autoUpdateBufferTimer);\r\n            this.audioContext.close().then(() => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string) => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n            this.audioContext = null;\r\n        }\r\n    }\r\n\r\n    private init(audioFormat: AudioStreamFormat): void {\r\n        this.audioFormat = audioFormat as AudioStreamFormatImpl;\r\n        this.samples = new Float32Array();\r\n    }\r\n\r\n    private ensureInitializedContext(): void {\r\n        if (this.audioContext === null) {\r\n            this.createAudioContext();\r\n            const timerPeriod = 200;\r\n            this.autoUpdateBufferTimer = setInterval(() => {\r\n                this.updateAudioBuffer();\r\n            }, timerPeriod);\r\n        }\r\n    }\r\n\r\n    private createAudioContext(): void {\r\n        // new ((window as any).AudioContext || (window as any).webkitAudioContext)();\r\n        this.audioContext = AudioStreamFormatImpl.getAudioContext();\r\n\r\n        // TODO: Various examples shows this gain node, it does not seem to be needed unless we plan\r\n        // to control the volume, not likely\r\n        this.gainNode = this.audioContext.createGain();\r\n        this.gainNode.gain.value = 1;\r\n        this.gainNode.connect(this.audioContext.destination);\r\n        this.startTime = this.audioContext.currentTime;\r\n    }\r\n\r\n    private formatAudioData(audioData: ArrayBuffer): Float32Array {\r\n        switch (this.audioFormat.bitsPerSample) {\r\n            case 8:\r\n                return this.formatArrayBuffer(new Int8Array(audioData), 128);\r\n            case 16:\r\n                return this.formatArrayBuffer(new Int16Array(audioData), 32768);\r\n            case 32:\r\n                return this.formatArrayBuffer(new Int32Array(audioData), 2147483648);\r\n            default:\r\n                throw new InvalidOperationError(\"Only WAVE_FORMAT_PCM (8/16/32 bps) format supported at this time\");\r\n        }\r\n    }\r\n\r\n    private formatArrayBuffer(audioData: AudioDataTypedArray, maxValue: number): Float32Array {\r\n        const float32Data = new Float32Array(audioData.length);\r\n        for (let i = 0; i < audioData.length; i++) {\r\n            float32Data[i] = audioData[i] / maxValue;\r\n        }\r\n        return float32Data;\r\n    }\r\n\r\n    private updateAudioBuffer(): void {\r\n        if (this.samples.length === 0) {\r\n            return;\r\n        }\r\n\r\n        const channelCount = this.audioFormat.channels;\r\n        const bufferSource = this.audioContext.createBufferSource();\r\n        const frameCount = this.samples.length / channelCount;\r\n        const audioBuffer = this.audioContext.createBuffer(channelCount, frameCount, this.audioFormat.samplesPerSec);\r\n\r\n        // TODO: Should we do the conversion in the pushAudioSample instead?\r\n        for (let channel = 0; channel < channelCount; channel++) {\r\n            // Fill in individual channel data\r\n            let channelOffset = channel;\r\n            const audioData = audioBuffer.getChannelData(channel);\r\n            for (let i = 0; i < this.samples.length; i++, channelOffset += channelCount) {\r\n                audioData[i] = this.samples[channelOffset];\r\n            }\r\n        }\r\n\r\n        if (this.startTime < this.audioContext.currentTime) {\r\n            this.startTime = this.audioContext.currentTime;\r\n        }\r\n\r\n        bufferSource.buffer = audioBuffer;\r\n        bufferSource.connect(this.gainNode);\r\n        bufferSource.start(this.startTime);\r\n\r\n        // Make sure we play the next sample after the current one.\r\n        this.startTime += audioBuffer.duration;\r\n\r\n        // Clear the samples for the next pushed data.\r\n        this.samples = new Float32Array();\r\n    }\r\n\r\n    private async playAudio(audioData: ArrayBuffer): Promise<void> {\r\n        if (this.audioContext === null) {\r\n            this.createAudioContext();\r\n        }\r\n        const source: AudioBufferSourceNode = this.audioContext.createBufferSource();\r\n        const destination: AudioDestinationNode = this.audioContext.destination;\r\n        await this.audioContext.decodeAudioData(audioData, (newBuffer: AudioBuffer): void => {\r\n            source.buffer = newBuffer;\r\n            source.connect(destination);\r\n            source.start(0);\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}