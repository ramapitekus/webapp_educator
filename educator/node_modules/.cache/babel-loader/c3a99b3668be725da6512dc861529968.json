{"ast":null,"code":"import { RestConfigBase, RestMessageAdapter, RestRequestType } from \"../common.browser/Exports\";\nimport { PropertyId } from \"../sdk/Exports\";\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\nimport { HeaderNames } from \"./HeaderNames\";\n/**\r\n * Implements methods for speaker recognition classes, sending requests to endpoint\r\n * and parsing response into expected format\r\n * @class SynthesisRestAdapter\r\n */\n\nexport class SynthesisRestAdapter {\n  constructor(config) {\n    let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\n\n    if (!endpoint) {\n      const region = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"westus\");\n      const hostSuffix = ConnectionFactoryBase.getHostSuffix(region);\n      endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, `https://${region}.tts.speech${hostSuffix}`);\n    }\n\n    this.privUri = `${endpoint}/cognitiveservices/voices/list`;\n    const options = RestConfigBase.requestOptions;\n    options.headers[RestConfigBase.configParams.subscriptionKey] = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\n    this.privRestAdapter = new RestMessageAdapter(options);\n  }\n  /**\r\n   * Sends list voices request to endpoint.\r\n   * @function\r\n   * @public\r\n   * @param connectionId - guid for connectionId\r\n   * @returns {Promise<IRestResponse>} rest response to status request\r\n   */\n\n\n  getVoicesList(connectionId) {\n    this.privRestAdapter.setHeaders(HeaderNames.ConnectionId, connectionId);\n    return this.privRestAdapter.request(RestRequestType.Get, this.privUri);\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAGIA,cAHJ,EAIIC,kBAJJ,EAKIC,eALJ,QAMO,2BANP;AAOA,SACIC,UADJ,QAEO,gBAFP;AAGA,SAASC,qBAAT,QAAsC,yBAAtC;AAEA,SAASC,WAAT,QAA4B,eAA5B;AAEA;;;;;;AAKA,OAAM,MAAOC,oBAAP,CAA2B;AAI7BC,cAAmBC,MAAnB,EAA4C;AAExC,QAAIC,QAAQ,GAAGD,MAAM,CAACE,UAAP,CAAkBC,WAAlB,CAA8BR,UAAU,CAACS,gCAAzC,EAA2EC,SAA3E,CAAf;;AACA,QAAI,CAACJ,QAAL,EAAe;AACX,YAAMK,MAAM,GAAWN,MAAM,CAACE,UAAP,CAAkBC,WAAlB,CAA8BR,UAAU,CAACY,8BAAzC,EAAyE,QAAzE,CAAvB;AACA,YAAMC,UAAU,GAAWZ,qBAAqB,CAACa,aAAtB,CAAoCH,MAApC,CAA3B;AACAL,cAAQ,GAAGD,MAAM,CAACE,UAAP,CAAkBC,WAAlB,CAA8BR,UAAU,CAACe,4BAAzC,EAAuE,WAAWJ,MAAM,cAAcE,UAAU,EAAhH,CAAX;AACH;;AACD,SAAKG,OAAL,GAAe,GAAGV,QAAQ,gCAA1B;AAEA,UAAMW,OAAO,GAAoBpB,cAAc,CAACqB,cAAhD;AACAD,WAAO,CAACE,OAAR,CAAgBtB,cAAc,CAACuB,YAAf,CAA4BC,eAA5C,IAA+DhB,MAAM,CAACE,UAAP,CAAkBC,WAAlB,CAA8BR,UAAU,CAACsB,2BAAzC,EAAsEZ,SAAtE,CAA/D;AAEA,SAAKa,eAAL,GAAuB,IAAIzB,kBAAJ,CAAuBmB,OAAvB,CAAvB;AACH;AAED;;;;;;;;;AAOOO,eAAa,CAACC,YAAD,EAAqB;AACrC,SAAKF,eAAL,CAAqBG,UAArB,CAAgCxB,WAAW,CAACyB,YAA5C,EAA0DF,YAA1D;AACA,WAAO,KAAKF,eAAL,CAAqBK,OAArB,CAA6B7B,eAAe,CAAC8B,GAA7C,EAAkD,KAAKb,OAAvD,CAAP;AACH;;AA9B4B","names":["RestConfigBase","RestMessageAdapter","RestRequestType","PropertyId","ConnectionFactoryBase","HeaderNames","SynthesisRestAdapter","constructor","config","endpoint","parameters","getProperty","SpeechServiceConnection_Endpoint","undefined","region","SpeechServiceConnection_Region","hostSuffix","getHostSuffix","SpeechServiceConnection_Host","privUri","options","requestOptions","headers","configParams","subscriptionKey","SpeechServiceConnection_Key","privRestAdapter","getVoicesList","connectionId","setHeaders","ConnectionId","request","Get"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\node_modules\\microsoft-cognitiveservices-speech-sdk\\distrib\\es2015\\src\\common.speech\\src\\common.speech\\SynthesisRestAdapter.ts"],"sourcesContent":["import {\r\n    IRequestOptions,\r\n    IRestResponse,\r\n    RestConfigBase,\r\n    RestMessageAdapter,\r\n    RestRequestType,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    PropertyId,\r\n} from \"../sdk/Exports\";\r\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\r\nimport { SynthesizerConfig } from \"./Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\n\r\n/**\r\n * Implements methods for speaker recognition classes, sending requests to endpoint\r\n * and parsing response into expected format\r\n * @class SynthesisRestAdapter\r\n */\r\nexport class SynthesisRestAdapter {\r\n    private privRestAdapter: RestMessageAdapter;\r\n    private privUri: string;\r\n\r\n    public constructor(config: SynthesizerConfig) {\r\n\r\n        let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        if (!endpoint) {\r\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"westus\");\r\n            const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n            endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, `https://${region}.tts.speech${hostSuffix}`);\r\n        }\r\n        this.privUri = `${endpoint}/cognitiveservices/voices/list`;\r\n\r\n        const options: IRequestOptions = RestConfigBase.requestOptions;\r\n        options.headers[RestConfigBase.configParams.subscriptionKey] = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\r\n\r\n        this.privRestAdapter = new RestMessageAdapter(options);\r\n    }\r\n\r\n    /**\r\n     * Sends list voices request to endpoint.\r\n     * @function\r\n     * @public\r\n     * @param connectionId - guid for connectionId\r\n     * @returns {Promise<IRestResponse>} rest response to status request\r\n     */\r\n    public getVoicesList(connectionId: string): Promise<IRestResponse> {\r\n        this.privRestAdapter.setHeaders(HeaderNames.ConnectionId, connectionId);\r\n        return this.privRestAdapter.request(RestRequestType.Get, this.privUri);\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}