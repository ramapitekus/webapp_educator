{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ozgur\\\\Documents\\\\VSCodeProjects\\\\webapp_educator\\\\educator\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport { useMemo, useState, useEffect, useRef } from \"react\";\nimport ExplanationButtons from \"./components/ExplanationButtons\";\nimport sttFromMic from \"./components/S2t\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [recording, setRecording] = useState(false);\n  const [apiResponse, setapiResponse] = useState({\n    topic: null\n  });\n  const [explanations, setExplanations] = useState([]);\n  const latestButton = useRef(null);\n  const explRef = useRef(explanations);\n\n  const getResponse = apiData => {\n    // If utterance not recognized, ignore\n    if (apiData !== \"none\") {\n      setapiResponse({\n        topic: apiData\n      });\n    }\n  };\n\n  const setColorProp = explanations => {\n    // TODO: Remove hacky copying\n    var copyExplanations = JSON.parse(JSON.stringify(explanations));\n    copyExplanations.forEach(explanation => {\n      if (explanation.name === apiResponse.topic) {\n        explanation.colored = true;\n      }\n    });\n    setExplanations(copyExplanations);\n  };\n\n  const unsetColorProp = button => {\n    // TODO: Remove hacky copying\n    var copyExplanations = JSON.parse(JSON.stringify(explRef.current));\n    copyExplanations.forEach(explanation => {\n      if (explanation.name === button && explanation.colored === true) {\n        explanation.colored = false;\n        setExplanations(copyExplanations);\n      }\n    });\n  };\n\n  const existsInArr = updatedExplanations => {\n    return updatedExplanations.find(expl => {\n      return expl.name === apiResponse.topic;\n    });\n  };\n\n  const removeOldestButton = intermediateExplanations => {\n    return intermediateExplanations.filter(expl => explanations[0].name !== expl.name);\n  };\n\n  useEffect(() => {\n    explRef.current = explanations;\n  }, [explanations]);\n  useEffect(() => {\n    let intermediateExplanations = explanations;\n\n    if (apiResponse.topic) {\n      latestButton.current = apiResponse.topic; // Block which handles if button does not exist yet\n\n      if (!existsInArr(intermediateExplanations)) {\n        // If more than 5 buttons present, remove oldest one\n        if (intermediateExplanations.length >= 5) {\n          intermediateExplanations = removeOldestButton(intermediateExplanations);\n        }\n\n        setExplanations([...intermediateExplanations, {\n          name: apiResponse.topic,\n          colored: true\n        }]);\n      } // Change color property of button if already exists\n\n\n      if (existsInArr(intermediateExplanations)) {\n        setColorProp(intermediateExplanations);\n      }\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [apiResponse]); // 10s after mentioning the topic, return the color back to gray\n\n  useEffect(() => {\n    const button = latestButton.current; // assign the button associated with this instance of useEffect\n\n    setTimeout(() => {\n      unsetColorProp(button);\n    }, 10000);\n  }, [explanations]);\n  let [startRec, stopRec] = useMemo(() => {\n    return sttFromMic(getResponse);\n  }, []);\n  useEffect(() => {\n    recording ? startRec() : stopRec();\n  }, [recording]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: recording ? \"button buttonStop\" : \"button buttonStart\",\n      onClick: () => {\n        setRecording(!recording);\n      },\n      children: recording ? \"Educator stoppen\" : \"Educator starten\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ExplanationButtons, {\n      topics: explanations\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"Rw/hft9Y6ev4N00hgUoAQsXImCQ=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/ozgur/Documents/VSCodeProjects/webapp_educator/educator/src/App.js"],"names":["useMemo","useState","useEffect","useRef","ExplanationButtons","sttFromMic","App","recording","setRecording","apiResponse","setapiResponse","topic","explanations","setExplanations","latestButton","explRef","getResponse","apiData","setColorProp","copyExplanations","JSON","parse","stringify","forEach","explanation","name","colored","unsetColorProp","button","current","existsInArr","updatedExplanations","find","expl","removeOldestButton","intermediateExplanations","filter","length","setTimeout","startRec","stopRec"],"mappings":"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","sourcesContent":["import \"./App.css\";\r\nimport { useMemo, useState, useEffect, useRef } from \"react\";\r\nimport ExplanationButtons from \"./components/ExplanationButtons\";\r\nimport sttFromMic from \"./components/S2t\";\r\n\r\nfunction App() {\r\n  const [recording, setRecording] = useState(false);\r\n  const [apiResponse, setapiResponse] = useState({ topic: null });\r\n  const [explanations, setExplanations] = useState([]);\r\n  const latestButton = useRef(null);\r\n  const explRef = useRef(explanations);\r\n\r\n  const getResponse = (apiData) => {\r\n    // If utterance not recognized, ignore\r\n    if (apiData !== \"none\") {\r\n      setapiResponse({ topic: apiData });\r\n    }\r\n  };\r\n\r\n  const setColorProp = (explanations) => {\r\n    // TODO: Remove hacky copying\r\n    var copyExplanations = JSON.parse(JSON.stringify(explanations));\r\n    copyExplanations.forEach((explanation) => {\r\n      if (explanation.name === apiResponse.topic) {\r\n        explanation.colored = true;\r\n      }\r\n    });\r\n    setExplanations(copyExplanations);\r\n  };\r\n\r\n  const unsetColorProp = (button) => {\r\n    // TODO: Remove hacky copying\r\n    var copyExplanations = JSON.parse(JSON.stringify(explRef.current));\r\n    copyExplanations.forEach((explanation) => {\r\n      if (explanation.name === button && explanation.colored === true) {\r\n        explanation.colored = false;\r\n        setExplanations(copyExplanations);\r\n      }\r\n    });\r\n  };\r\n\r\n  const existsInArr = (updatedExplanations) => {\r\n    return updatedExplanations.find((expl) => {\r\n      return expl.name === apiResponse.topic;\r\n    });\r\n  };\r\n\r\n  const removeOldestButton = (intermediateExplanations) => {\r\n    return intermediateExplanations.filter(\r\n      (expl) => explanations[0].name !== expl.name\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    explRef.current = explanations;\r\n  }, [explanations]);\r\n\r\n  useEffect(() => {\r\n    let intermediateExplanations = explanations;\r\n    if (apiResponse.topic) {\r\n      latestButton.current = apiResponse.topic;\r\n\r\n      // Block which handles if button does not exist yet\r\n      if (!existsInArr(intermediateExplanations)) {\r\n        // If more than 5 buttons present, remove oldest one\r\n        if (intermediateExplanations.length >= 5) {\r\n          intermediateExplanations = removeOldestButton(\r\n            intermediateExplanations\r\n          );\r\n        }\r\n        setExplanations([\r\n          ...intermediateExplanations,\r\n          { name: apiResponse.topic, colored: true },\r\n        ]);\r\n      }\r\n      // Change color property of button if already exists\r\n      if (existsInArr(intermediateExplanations)) {\r\n        setColorProp(intermediateExplanations);\r\n      }\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [apiResponse]);\r\n\r\n  // 10s after mentioning the topic, return the color back to gray\r\n  useEffect(() => {\r\n    const button = latestButton.current; // assign the button associated with this instance of useEffect\r\n    setTimeout(() => {\r\n      unsetColorProp(button);\r\n    }, 10000);\r\n  }, [explanations]);\r\n\r\n  let [startRec, stopRec] = useMemo(() => {\r\n    return sttFromMic(getResponse);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    recording ? startRec() : stopRec();\r\n  }, [recording]);\r\n\r\n  return (\r\n    <>\r\n      <button\r\n        className={recording ? \"button buttonStop\" : \"button buttonStart\"}\r\n        onClick={() => {\r\n          setRecording(!recording);\r\n        }}\r\n      >\r\n        {recording ? \"Educator stoppen\" : \"Educator starten\"}\r\n      </button>\r\n      {<ExplanationButtons topics={explanations} />}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}