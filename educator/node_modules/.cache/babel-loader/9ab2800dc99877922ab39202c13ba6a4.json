{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { Animated, TextInput as NativeTextInput } from 'react-native';\nimport { areLabelsEqual } from './helpers';\nimport TextInputOutlined from './TextInputOutlined';\nimport TextInputFlat from './TextInputFlat';\nimport TextInputIcon from './Adornment/TextInputIcon';\nimport TextInputAffix from './Adornment/TextInputAffix';\nimport { withTheme } from '../../core/theming';\nconst BLUR_ANIMATION_DURATION = 180;\nconst FOCUS_ANIMATION_DURATION = 150;\n/**\n * A component to allow users to input text.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-flat.focused.png\" />\n *     <figcaption>Flat (focused)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-flat.disabled.png\" />\n *     <figcaption>Flat (disabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-outlined.focused.png\" />\n *     <figcaption>Outlined (focused)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-outlined.disabled.png\" />\n *     <figcaption>Outlined (disabled)</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *   return (\n *     <TextInput\n *       label=\"Email\"\n *       value={text}\n *       onChangeText={text => setText(text)}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n *\n * @extends TextInput props https://reactnative.dev/docs/textinput#props\n */\n\nclass TextInput extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"validInputValue\", this.props.value !== undefined ? this.props.value : this.props.defaultValue);\n\n    _defineProperty(this, \"state\", {\n      labeled: new Animated.Value(this.validInputValue ? 0 : 1),\n      error: new Animated.Value(this.props.error ? 1 : 0),\n      focused: false,\n      placeholder: '',\n      value: this.validInputValue,\n      labelLayout: {\n        measured: false,\n        width: 0,\n        height: 0\n      },\n      leftLayout: {\n        width: null,\n        height: null\n      },\n      rightLayout: {\n        width: null,\n        height: null\n      }\n    });\n\n    _defineProperty(this, \"ref\", void 0);\n\n    _defineProperty(this, \"showPlaceholder\", () => {\n      if (this.timer) {\n        clearTimeout(this.timer);\n      } // Set the placeholder in a delay to offset the label animation\n      // If we show it immediately, they'll overlap and look ugly\n\n\n      this.timer = setTimeout(() => this.setState({\n        placeholder: this.props.placeholder\n      }), 50);\n    });\n\n    _defineProperty(this, \"hidePlaceholder\", () => this.setState({\n      placeholder: ''\n    }));\n\n    _defineProperty(this, \"timer\", void 0);\n\n    _defineProperty(this, \"root\", void 0);\n\n    _defineProperty(this, \"showError\", () => {\n      const {\n        scale\n      } = this.props.theme.animation;\n      Animated.timing(this.state.error, {\n        toValue: 1,\n        duration: FOCUS_ANIMATION_DURATION * scale,\n        useNativeDriver: true\n      }).start();\n    });\n\n    _defineProperty(this, \"hideError\", () => {\n      const {\n        scale\n      } = this.props.theme.animation;\n      Animated.timing(this.state.error, {\n        toValue: 0,\n        duration: BLUR_ANIMATION_DURATION * scale,\n        useNativeDriver: true\n      }).start();\n    });\n\n    _defineProperty(this, \"restoreLabel\", () => {\n      const {\n        scale\n      } = this.props.theme.animation;\n      Animated.timing(this.state.labeled, {\n        toValue: 1,\n        duration: FOCUS_ANIMATION_DURATION * scale,\n        useNativeDriver: true\n      }).start();\n    });\n\n    _defineProperty(this, \"minimizeLabel\", () => {\n      const {\n        scale\n      } = this.props.theme.animation;\n      Animated.timing(this.state.labeled, {\n        toValue: 0,\n        duration: BLUR_ANIMATION_DURATION * scale,\n        useNativeDriver: true\n      }).start();\n    });\n\n    _defineProperty(this, \"onLeftAffixLayoutChange\", event => {\n      this.setState({\n        leftLayout: {\n          height: event.nativeEvent.layout.height,\n          width: event.nativeEvent.layout.width\n        }\n      });\n    });\n\n    _defineProperty(this, \"onRightAffixLayoutChange\", event => {\n      this.setState({\n        rightLayout: {\n          width: event.nativeEvent.layout.width,\n          height: event.nativeEvent.layout.height\n        }\n      });\n    });\n\n    _defineProperty(this, \"handleFocus\", args => {\n      if (this.props.disabled || !this.props.editable) {\n        return;\n      }\n\n      this.setState({\n        focused: true\n      });\n\n      if (this.props.onFocus) {\n        this.props.onFocus(args);\n      }\n    });\n\n    _defineProperty(this, \"handleBlur\", args => {\n      if (!this.props.editable) {\n        return;\n      }\n\n      this.setState({\n        focused: false\n      });\n\n      if (this.props.onBlur) {\n        this.props.onBlur(args);\n      }\n    });\n\n    _defineProperty(this, \"handleChangeText\", value => {\n      if (!this.props.editable) {\n        return;\n      }\n\n      this.setState({\n        value\n      });\n      this.props.onChangeText && this.props.onChangeText(value);\n    });\n\n    _defineProperty(this, \"handleLayoutAnimatedText\", e => {\n      this.setState({\n        labelLayout: {\n          width: e.nativeEvent.layout.width,\n          height: e.nativeEvent.layout.height,\n          measured: true\n        }\n      });\n    });\n\n    _defineProperty(this, \"forceFocus\", () => {\n      var _this$root;\n\n      return (_this$root = this.root) === null || _this$root === void 0 ? void 0 : _this$root.focus();\n    });\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    return {\n      value: typeof nextProps.value !== 'undefined' ? nextProps.value : prevState.value\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const isFocusChanged = prevState.focused !== this.state.focused;\n    const isValueChanged = prevState.value !== this.state.value;\n    const isLabelLayoutChanged = prevState.labelLayout !== this.state.labelLayout;\n    const isLabelChanged = !areLabelsEqual(prevProps.label, this.props.label);\n    const isErrorChanged = prevProps.error !== this.props.error;\n\n    if (isFocusChanged || isValueChanged || // workaround for animated regression for react native > 0.61\n    // https://github.com/callstack/react-native-paper/pull/1440\n    isLabelLayoutChanged) {\n      // The label should be minimized if the text input is focused, or has text\n      // In minimized mode, the label moves up and becomes small\n      if (this.state.value || this.state.focused) {\n        this.minimizeLabel();\n      } else {\n        this.restoreLabel();\n      }\n    }\n\n    if (isFocusChanged || isLabelChanged) {\n      // Show placeholder text only if the input is focused, or there's no label\n      // We don't show placeholder if there's a label because the label acts as placeholder\n      // When focused, the label moves up, so we can show a placeholder\n      if (this.state.focused || !this.props.label) {\n        this.showPlaceholder();\n      } else {\n        this.hidePlaceholder();\n      }\n    }\n\n    if (isErrorChanged) {\n      // When the input has an error, we wiggle the label and apply error styles\n      if (this.props.error) {\n        this.showError();\n      } else {\n        this.hideError();\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.timer) {\n      clearTimeout(this.timer);\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  setNativeProps(args) {\n    return this.root && this.root.setNativeProps(args);\n  }\n  /**\n   * Returns `true` if the input is currently focused, `false` otherwise.\n   */\n\n\n  isFocused() {\n    return this.root && this.root.isFocused();\n  }\n  /**\n   * Removes all text from the TextInput.\n   */\n\n\n  clear() {\n    return this.root && this.root.clear();\n  }\n  /**\n   * Focuses the input.\n   */\n\n\n  focus() {\n    return this.root && this.root.focus();\n  }\n  /**\n   * Removes focus from the input.\n   */\n\n\n  blur() {\n    return this.root && this.root.blur();\n  }\n\n  render() {\n    const {\n      mode,\n      ...rest\n    } = this.props;\n    return mode === 'outlined' ? /*#__PURE__*/React.createElement(TextInputOutlined, _extends({}, rest, {\n      value: this.state.value,\n      parentState: this.state,\n      innerRef: ref => {\n        this.root = ref;\n      },\n      onFocus: this.handleFocus,\n      forceFocus: this.forceFocus,\n      onBlur: this.handleBlur,\n      onChangeText: this.handleChangeText,\n      onLayoutAnimatedText: this.handleLayoutAnimatedText,\n      onLeftAffixLayoutChange: this.onLeftAffixLayoutChange,\n      onRightAffixLayoutChange: this.onRightAffixLayoutChange\n    })) : /*#__PURE__*/React.createElement(TextInputFlat, _extends({}, rest, {\n      value: this.state.value,\n      parentState: this.state,\n      innerRef: ref => {\n        this.root = ref;\n      },\n      onFocus: this.handleFocus,\n      forceFocus: this.forceFocus,\n      onBlur: this.handleBlur,\n      onChangeText: this.handleChangeText,\n      onLayoutAnimatedText: this.handleLayoutAnimatedText,\n      onLeftAffixLayoutChange: this.onLeftAffixLayoutChange,\n      onRightAffixLayoutChange: this.onRightAffixLayoutChange\n    }));\n  }\n\n}\n\n_defineProperty(TextInput, \"Icon\", TextInputIcon);\n\n_defineProperty(TextInput, \"Affix\", TextInputAffix);\n\n_defineProperty(TextInput, \"defaultProps\", {\n  mode: 'flat',\n  dense: false,\n  disabled: false,\n  error: false,\n  multiline: false,\n  editable: true,\n  render: props => /*#__PURE__*/React.createElement(NativeTextInput, props)\n});\n\nexport default withTheme(TextInput);","map":{"version":3,"mappings":"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","names":["React","Animated","TextInput","NativeTextInput","areLabelsEqual","TextInputOutlined","TextInputFlat","TextInputIcon","TextInputAffix","withTheme","BLUR_ANIMATION_DURATION","FOCUS_ANIMATION_DURATION","Component","constructor","_defineProperty","props","value","undefined","defaultValue","labeled","Value","validInputValue","error","focused","placeholder","labelLayout","measured","width","height","leftLayout","rightLayout","timer","clearTimeout","setTimeout","setState","scale","theme","animation","timing","state","toValue","duration","useNativeDriver","start","event","nativeEvent","layout","args","disabled","editable","onFocus","onBlur","onChangeText","e","root","_this$root","focus","getDerivedStateFromProps","nextProps","prevState","componentDidUpdate","prevProps","isFocusChanged","isValueChanged","isLabelLayoutChanged","isLabelChanged","label","isErrorChanged","minimizeLabel","restoreLabel","showPlaceholder","hidePlaceholder","showError","hideError","componentWillUnmount","setNativeProps","isFocused","clear","blur","render","mode","rest","parentState","innerRef","ref","handleFocus","forceFocus","handleBlur","handleChangeText","onLayoutAnimatedText","handleLayoutAnimatedText","onLeftAffixLayoutChange","onRightAffixLayoutChange","dense","multiline"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\node_modules\\react-native-paper\\lib\\module\\components\\TextInput\\TextInput.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  TextInput as NativeTextInput,\n  LayoutChangeEvent,\n  StyleProp,\n  TextStyle,\n} from 'react-native';\nimport { areLabelsEqual } from './helpers';\nimport TextInputOutlined from './TextInputOutlined';\nimport TextInputFlat from './TextInputFlat';\nimport TextInputIcon from './Adornment/TextInputIcon';\nimport TextInputAffix from './Adornment/TextInputAffix';\nimport { withTheme } from '../../core/theming';\nimport type { RenderProps, State, TextInputLabelProp } from './types';\nimport type { $Omit } from '../../types';\n\nconst BLUR_ANIMATION_DURATION = 180;\nconst FOCUS_ANIMATION_DURATION = 150;\n\nexport type TextInputProps = React.ComponentPropsWithRef<\n  typeof NativeTextInput\n> & {\n  /**\n   * Mode of the TextInput.\n   * - `flat` - flat input with an underline.\n   * - `outlined` - input with an outline.\n   *\n   * In `outlined` mode, the background color of the label is derived from `colors.background` in theme or the `backgroundColor` style.\n   * This component render TextInputOutlined or TextInputFlat based on that props\n   */\n  mode?: 'flat' | 'outlined';\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n  /**\n   * If true, user won't be able to interact with the component.\n   */\n  disabled?: boolean;\n  /**\n   * The text or component to use for the floating label.\n   */\n  label?: TextInputLabelProp;\n  /**\n   * Placeholder for the input.\n   */\n  placeholder?: string;\n  /**\n   * Whether to style the TextInput with error style.\n   */\n  error?: boolean;\n  /**\n   * Callback that is called when the text input's text changes. Changed text is passed as an argument to the callback handler.\n   */\n  onChangeText?: Function;\n  /**\n   * Selection color of the input\n   */\n  selectionColor?: string;\n  /**\n   * Inactive underline color of the input.\n   */\n  underlineColor?: string;\n  /**\n   * Active underline color of the input.\n   */\n  activeUnderlineColor?: string;\n  /**\n   * Inactive outline color of the input.\n   */\n  outlineColor?: string;\n  /**\n   * Active outline color of the input.\n   */\n  activeOutlineColor?: string;\n  /**\n   * Sets min height with densed layout. For `TextInput` in `flat` mode\n   * height is `64dp` or in dense layout - `52dp` with label or `40dp` without label.\n   * For `TextInput` in `outlined` mode\n   * height is `56dp` or in dense layout - `40dp` regardless of label.\n   * When you apply `height` prop in style the `dense` prop affects only `paddingVertical` inside `TextInput`\n   */\n  dense?: boolean;\n  /**\n   * Whether the input can have multiple lines.\n   */\n  multiline?: boolean;\n  /**\n   * The number of lines to show in the input (Android only).\n   */\n  numberOfLines?: number;\n  /**\n   * Callback that is called when the text input is focused.\n   */\n  onFocus?: (args: any) => void;\n  /**\n   * Callback that is called when the text input is blurred.\n   */\n  onBlur?: (args: any) => void;\n  /**\n   *\n   * Callback to render a custom input component such as `react-native-text-input-mask`\n   * instead of the default `TextInput` component from `react-native`.\n   *\n   * Example:\n   * ```js\n   * <TextInput\n   *   label=\"Phone number\"\n   *   render={props =>\n   *     <TextInputMask\n   *       {...props}\n   *       mask=\"+[00] [000] [000] [000]\"\n   *     />\n   *   }\n   * />\n   * ```\n   */\n  render?: (props: RenderProps) => React.ReactNode;\n  /**\n   * Value of the text input.\n   */\n  value?: string;\n  /**\n   * Pass `fontSize` prop to modify the font size inside `TextInput`.\n   * Pass `height` prop to set `TextInput` height. When `height` is passed,\n   * `dense` prop will affect only input's `paddingVertical`.\n   * Pass `paddingHorizontal` to modify horizontal padding.\n   * This can be used to get MD Guidelines v1 TextInput look.\n   */\n  style?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A component to allow users to input text.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-flat.focused.png\" />\n *     <figcaption>Flat (focused)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-flat.disabled.png\" />\n *     <figcaption>Flat (disabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-outlined.focused.png\" />\n *     <figcaption>Outlined (focused)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-outlined.disabled.png\" />\n *     <figcaption>Outlined (disabled)</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *   return (\n *     <TextInput\n *       label=\"Email\"\n *       value={text}\n *       onChangeText={text => setText(text)}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n *\n * @extends TextInput props https://reactnative.dev/docs/textinput#props\n */\n\nclass TextInput extends React.Component<TextInputProps, State> {\n  // @component ./Adornment/TextInputIcon.tsx\n  static Icon = TextInputIcon;\n\n  // @component ./Adornment/TextInputAffix.tsx\n  static Affix = TextInputAffix;\n\n  static defaultProps: Partial<TextInputProps> = {\n    mode: 'flat',\n    dense: false,\n    disabled: false,\n    error: false,\n    multiline: false,\n    editable: true,\n    render: (props: RenderProps) => <NativeTextInput {...props} />,\n  };\n\n  static getDerivedStateFromProps(nextProps: TextInputProps, prevState: State) {\n    return {\n      value:\n        typeof nextProps.value !== 'undefined'\n          ? nextProps.value\n          : prevState.value,\n    };\n  }\n  validInputValue =\n    this.props.value !== undefined ? this.props.value : this.props.defaultValue;\n\n  state = {\n    labeled: new Animated.Value(this.validInputValue ? 0 : 1),\n    error: new Animated.Value(this.props.error ? 1 : 0),\n    focused: false,\n    placeholder: '',\n    value: this.validInputValue,\n    labelLayout: {\n      measured: false,\n      width: 0,\n      height: 0,\n    },\n    leftLayout: {\n      width: null,\n      height: null,\n    },\n    rightLayout: {\n      width: null,\n      height: null,\n    },\n  };\n\n  ref: NativeTextInput | undefined | null;\n\n  componentDidUpdate(prevProps: TextInputProps, prevState: State) {\n    const isFocusChanged = prevState.focused !== this.state.focused;\n    const isValueChanged = prevState.value !== this.state.value;\n    const isLabelLayoutChanged =\n      prevState.labelLayout !== this.state.labelLayout;\n    const isLabelChanged = !areLabelsEqual(prevProps.label, this.props.label);\n    const isErrorChanged = prevProps.error !== this.props.error;\n    if (\n      isFocusChanged ||\n      isValueChanged ||\n      // workaround for animated regression for react native > 0.61\n      // https://github.com/callstack/react-native-paper/pull/1440\n      isLabelLayoutChanged\n    ) {\n      // The label should be minimized if the text input is focused, or has text\n      // In minimized mode, the label moves up and becomes small\n      if (this.state.value || this.state.focused) {\n        this.minimizeLabel();\n      } else {\n        this.restoreLabel();\n      }\n    }\n\n    if (isFocusChanged || isLabelChanged) {\n      // Show placeholder text only if the input is focused, or there's no label\n      // We don't show placeholder if there's a label because the label acts as placeholder\n      // When focused, the label moves up, so we can show a placeholder\n      if (this.state.focused || !this.props.label) {\n        this.showPlaceholder();\n      } else {\n        this.hidePlaceholder();\n      }\n    }\n\n    if (isErrorChanged) {\n      // When the input has an error, we wiggle the label and apply error styles\n      if (this.props.error) {\n        this.showError();\n      } else {\n        this.hideError();\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.timer) {\n      clearTimeout(this.timer);\n    }\n  }\n\n  private showPlaceholder = () => {\n    if (this.timer) {\n      clearTimeout(this.timer);\n    }\n\n    // Set the placeholder in a delay to offset the label animation\n    // If we show it immediately, they'll overlap and look ugly\n    this.timer = (setTimeout(\n      () =>\n        this.setState({\n          placeholder: this.props.placeholder,\n        }),\n      50\n    ) as unknown) as NodeJS.Timeout;\n  };\n\n  private hidePlaceholder = () =>\n    this.setState({\n      placeholder: '',\n    });\n\n  private timer?: NodeJS.Timeout;\n  private root: NativeTextInput | undefined | null;\n\n  private showError = () => {\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.error, {\n      toValue: 1,\n      duration: FOCUS_ANIMATION_DURATION * scale,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  private hideError = () => {\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.error, {\n      toValue: 0,\n      duration: BLUR_ANIMATION_DURATION * scale,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  private restoreLabel = () => {\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.labeled, {\n      toValue: 1,\n      duration: FOCUS_ANIMATION_DURATION * scale,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  private minimizeLabel = () => {\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.labeled, {\n      toValue: 0,\n      duration: BLUR_ANIMATION_DURATION * scale,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  private onLeftAffixLayoutChange = (event: LayoutChangeEvent) => {\n    this.setState({\n      leftLayout: {\n        height: event.nativeEvent.layout.height,\n        width: event.nativeEvent.layout.width,\n      },\n    });\n  };\n\n  private onRightAffixLayoutChange = (event: LayoutChangeEvent) => {\n    this.setState({\n      rightLayout: {\n        width: event.nativeEvent.layout.width,\n        height: event.nativeEvent.layout.height,\n      },\n    });\n  };\n\n  private handleFocus = (args: any) => {\n    if (this.props.disabled || !this.props.editable) {\n      return;\n    }\n\n    this.setState({ focused: true });\n\n    if (this.props.onFocus) {\n      this.props.onFocus(args);\n    }\n  };\n\n  private handleBlur = (args: Object) => {\n    if (!this.props.editable) {\n      return;\n    }\n\n    this.setState({ focused: false });\n\n    if (this.props.onBlur) {\n      this.props.onBlur(args);\n    }\n  };\n\n  private handleChangeText = (value: string) => {\n    if (!this.props.editable) {\n      return;\n    }\n\n    this.setState({ value });\n    this.props.onChangeText && this.props.onChangeText(value);\n  };\n\n  private handleLayoutAnimatedText = (e: LayoutChangeEvent) => {\n    this.setState({\n      labelLayout: {\n        width: e.nativeEvent.layout.width,\n        height: e.nativeEvent.layout.height,\n        measured: true,\n      },\n    });\n  };\n\n  forceFocus = () => {\n    return this.root?.focus();\n  };\n\n  /**\n   * @internal\n   */\n  setNativeProps(args: Object) {\n    return this.root && this.root.setNativeProps(args);\n  }\n\n  /**\n   * Returns `true` if the input is currently focused, `false` otherwise.\n   */\n  isFocused() {\n    return this.root && this.root.isFocused();\n  }\n\n  /**\n   * Removes all text from the TextInput.\n   */\n  clear() {\n    return this.root && this.root.clear();\n  }\n\n  /**\n   * Focuses the input.\n   */\n  focus() {\n    return this.root && this.root.focus();\n  }\n\n  /**\n   * Removes focus from the input.\n   */\n  blur() {\n    return this.root && this.root.blur();\n  }\n  render() {\n    const { mode, ...rest } = this.props as $Omit<TextInputProps, 'ref'>;\n\n    return mode === 'outlined' ? (\n      <TextInputOutlined\n        {...rest}\n        value={this.state.value}\n        parentState={this.state}\n        innerRef={(ref) => {\n          this.root = ref;\n        }}\n        onFocus={this.handleFocus}\n        forceFocus={this.forceFocus}\n        onBlur={this.handleBlur}\n        onChangeText={this.handleChangeText}\n        onLayoutAnimatedText={this.handleLayoutAnimatedText}\n        onLeftAffixLayoutChange={this.onLeftAffixLayoutChange}\n        onRightAffixLayoutChange={this.onRightAffixLayoutChange}\n      />\n    ) : (\n      <TextInputFlat\n        {...rest}\n        value={this.state.value}\n        parentState={this.state}\n        innerRef={(ref) => {\n          this.root = ref;\n        }}\n        onFocus={this.handleFocus}\n        forceFocus={this.forceFocus}\n        onBlur={this.handleBlur}\n        onChangeText={this.handleChangeText}\n        onLayoutAnimatedText={this.handleLayoutAnimatedText}\n        onLeftAffixLayoutChange={this.onLeftAffixLayoutChange}\n        onRightAffixLayoutChange={this.onRightAffixLayoutChange}\n      />\n    );\n  }\n}\n\nexport default withTheme(TextInput);\n"]},"metadata":{},"sourceType":"module"}