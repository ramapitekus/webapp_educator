{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport PortalManager from './PortalManager';\nexport const PortalContext = /*#__PURE__*/React.createContext(null);\n/**\n * Portal host renders all of its children `Portal` elements.\n * For example, you can wrap a screen in `Portal.Host` to render items above the screen.\n * If you're using the `Provider` component, it already includes `Portal.Host`.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Text } from 'react-native';\n * import { Portal } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Portal.Host>\n *     <Text>Content of the app</Text>\n *   </Portal.Host>\n * );\n *\n * export default MyComponent;\n * ```\n *\n * Here any `Portal` elements under `<App />` are rendered alongside `<App />` and will appear above `<App />` like a `Modal`.\n */\n\nexport default class PortalHost extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"setManager\", manager => {\n      this.manager = manager;\n    });\n\n    _defineProperty(this, \"mount\", children => {\n      const key = this.nextKey++;\n\n      if (this.manager) {\n        this.manager.mount(key, children);\n      } else {\n        this.queue.push({\n          type: 'mount',\n          key,\n          children\n        });\n      }\n\n      return key;\n    });\n\n    _defineProperty(this, \"update\", (key, children) => {\n      if (this.manager) {\n        this.manager.update(key, children);\n      } else {\n        const op = {\n          type: 'mount',\n          key,\n          children\n        };\n        const index = this.queue.findIndex(o => o.type === 'mount' || o.type === 'update' && o.key === key);\n\n        if (index > -1) {\n          this.queue[index] = op;\n        } else {\n          this.queue.push(op);\n        }\n      }\n    });\n\n    _defineProperty(this, \"unmount\", key => {\n      if (this.manager) {\n        this.manager.unmount(key);\n      } else {\n        this.queue.push({\n          type: 'unmount',\n          key\n        });\n      }\n    });\n\n    _defineProperty(this, \"nextKey\", 0);\n\n    _defineProperty(this, \"queue\", []);\n\n    _defineProperty(this, \"manager\", void 0);\n  }\n\n  componentDidMount() {\n    const manager = this.manager;\n    const queue = this.queue;\n\n    while (queue.length && manager) {\n      const action = queue.pop();\n\n      if (action) {\n        // eslint-disable-next-line default-case\n        switch (action.type) {\n          case 'mount':\n            manager.mount(action.key, action.children);\n            break;\n\n          case 'update':\n            manager.update(action.key, action.children);\n            break;\n\n          case 'unmount':\n            manager.unmount(action.key);\n            break;\n        }\n      }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(PortalContext.Provider, {\n      value: {\n        mount: this.mount,\n        update: this.update,\n        unmount: this.unmount\n      }\n    }, /*#__PURE__*/React.createElement(View, {\n      style: styles.container,\n      collapsable: false,\n      pointerEvents: \"box-none\"\n    }, this.props.children), /*#__PURE__*/React.createElement(PortalManager, {\n      ref: this.setManager\n    }));\n  }\n\n}\n\n_defineProperty(PortalHost, \"displayName\", 'Portal.Host');\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"mappings":"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","names":["React","View","StyleSheet","PortalManager","PortalContext","createContext","PortalHost","Component","constructor","_defineProperty","manager","children","key","nextKey","mount","queue","push","type","update","op","index","findIndex","o","unmount","componentDidMount","length","action","pop","render","Provider","value","style","styles","container","collapsable","pointerEvents","props","ref","setManager","create","flex"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\node_modules\\react-native-paper\\lib\\module\\components\\Portal\\PortalHost.tsx"],"sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport PortalManager from './PortalManager';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\ntype Operation =\n  | { type: 'mount'; key: number; children: React.ReactNode }\n  | { type: 'update'; key: number; children: React.ReactNode }\n  | { type: 'unmount'; key: number };\n\nexport type PortalMethods = {\n  mount: (children: React.ReactNode) => number;\n  update: (key: number, children: React.ReactNode) => void;\n  unmount: (key: number) => void;\n};\n\nexport const PortalContext = React.createContext<PortalMethods>(null as any);\n\n/**\n * Portal host renders all of its children `Portal` elements.\n * For example, you can wrap a screen in `Portal.Host` to render items above the screen.\n * If you're using the `Provider` component, it already includes `Portal.Host`.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Text } from 'react-native';\n * import { Portal } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Portal.Host>\n *     <Text>Content of the app</Text>\n *   </Portal.Host>\n * );\n *\n * export default MyComponent;\n * ```\n *\n * Here any `Portal` elements under `<App />` are rendered alongside `<App />` and will appear above `<App />` like a `Modal`.\n */\nexport default class PortalHost extends React.Component<Props> {\n  static displayName = 'Portal.Host';\n\n  componentDidMount() {\n    const manager = this.manager;\n    const queue = this.queue;\n\n    while (queue.length && manager) {\n      const action = queue.pop();\n      if (action) {\n        // eslint-disable-next-line default-case\n        switch (action.type) {\n          case 'mount':\n            manager.mount(action.key, action.children);\n            break;\n          case 'update':\n            manager.update(action.key, action.children);\n            break;\n          case 'unmount':\n            manager.unmount(action.key);\n            break;\n        }\n      }\n    }\n  }\n\n  private setManager = (manager: PortalManager | undefined | null) => {\n    this.manager = manager;\n  };\n\n  private mount = (children: React.ReactNode) => {\n    const key = this.nextKey++;\n\n    if (this.manager) {\n      this.manager.mount(key, children);\n    } else {\n      this.queue.push({ type: 'mount', key, children });\n    }\n\n    return key;\n  };\n\n  private update = (key: number, children: React.ReactNode) => {\n    if (this.manager) {\n      this.manager.update(key, children);\n    } else {\n      const op: Operation = { type: 'mount', key, children };\n      const index = this.queue.findIndex(\n        (o) => o.type === 'mount' || (o.type === 'update' && o.key === key)\n      );\n\n      if (index > -1) {\n        this.queue[index] = op;\n      } else {\n        this.queue.push(op as Operation);\n      }\n    }\n  };\n\n  private unmount = (key: number) => {\n    if (this.manager) {\n      this.manager.unmount(key);\n    } else {\n      this.queue.push({ type: 'unmount', key });\n    }\n  };\n\n  private nextKey = 0;\n  private queue: Operation[] = [];\n  private manager: PortalManager | null | undefined;\n\n  render() {\n    return (\n      <PortalContext.Provider\n        value={{\n          mount: this.mount,\n          update: this.update,\n          unmount: this.unmount,\n        }}\n      >\n        {/* Need collapsable=false here to clip the elevations, otherwise they appear above Portal components */}\n        <View\n          style={styles.container}\n          collapsable={false}\n          pointerEvents=\"box-none\"\n        >\n          {this.props.children}\n        </View>\n        <PortalManager ref={this.setManager} />\n      </PortalContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}