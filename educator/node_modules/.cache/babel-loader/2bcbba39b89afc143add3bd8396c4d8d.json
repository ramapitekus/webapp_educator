{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}; // tslint:disable:max-classes-per-file\n\n\nimport { connectivity, type } from \"../../common.speech/Exports\";\nimport { AudioSourceInitializingEvent, AudioSourceReadyEvent, AudioStreamNodeAttachedEvent, AudioStreamNodeAttachingEvent, AudioStreamNodeDetachedEvent, ChunkedArrayBufferStream, Events, EventSource } from \"../../common/Exports\";\nimport { createNoDashGuid } from \"../../common/Guid\";\nimport { AudioStreamFormat } from \"../Exports\";\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat\";\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @class AudioInputStream\r\n */\n\nexport class AudioInputStream {\n  /**\r\n   * Creates and initializes an instance.\r\n   * @constructor\r\n   */\n  constructor() {}\n  /**\r\n   * Creates a memory backed PushAudioInputStream with the specified audio format.\r\n   * @member AudioInputStream.createPushStream\r\n   * @function\r\n   * @public\r\n   * @param {AudioStreamFormat} format - The audio data format in which audio will be\r\n   *        written to the push audio stream's write() method (Required if format is not 16 kHz 16bit mono PCM).\r\n   * @returns {PushAudioInputStream} The audio input stream being created.\r\n   */\n\n\n  static createPushStream(format) {\n    return PushAudioInputStream.create(format);\n  }\n  /**\r\n   * Creates a PullAudioInputStream that delegates to the specified callback interface for read()\r\n   * and close() methods.\r\n   * @member AudioInputStream.createPullStream\r\n   * @function\r\n   * @public\r\n   * @param {PullAudioInputStreamCallback} callback - The custom audio input object, derived from\r\n   *        PullAudioInputStreamCallback\r\n   * @param {AudioStreamFormat} format - The audio data format in which audio will be returned from\r\n   *        the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\r\n   * @returns {PullAudioInputStream} The audio input stream being created.\r\n   */\n\n\n  static createPullStream(callback, format) {\n    return PullAudioInputStream.create(callback, format); // throw new Error(\"Oops\");\n  }\n\n}\n/**\r\n * Represents memory backed push audio input stream used for custom audio input configurations.\r\n * @class PushAudioInputStream\r\n */\n\nexport class PushAudioInputStream extends AudioInputStream {\n  /**\r\n   * Creates a memory backed PushAudioInputStream with the specified audio format.\r\n   * @member PushAudioInputStream.create\r\n   * @function\r\n   * @public\r\n   * @param {AudioStreamFormat} format - The audio data format in which audio will be written to the\r\n   *        push audio stream's write() method (Required if format is not 16 kHz 16bit mono PCM).\r\n   * @returns {PushAudioInputStream} The push audio input stream being created.\r\n   */\n  static create(format) {\n    return new PushAudioInputStreamImpl(format);\n  }\n\n}\n/**\r\n * Represents memory backed push audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class PushAudioInputStreamImpl\r\n */\n\nexport class PushAudioInputStreamImpl extends PushAudioInputStream {\n  /**\r\n   * Creates and initalizes an instance with the given values.\r\n   * @constructor\r\n   * @param {AudioStreamFormat} format - The audio stream format.\r\n   */\n  constructor(format) {\n    super();\n\n    this.onEvent = event => {\n      this.privEvents.onEvent(event);\n      Events.instance.onEvent(event);\n    };\n\n    if (format === undefined) {\n      this.privFormat = AudioStreamFormatImpl.getDefaultInputFormat();\n    } else {\n      this.privFormat = format;\n    }\n\n    this.privEvents = new EventSource();\n    this.privId = createNoDashGuid();\n    this.privStream = new ChunkedArrayBufferStream(this.privFormat.avgBytesPerSec / 10);\n  }\n  /**\r\n   * Format information for the audio\r\n   */\n\n\n  get format() {\n    return Promise.resolve(this.privFormat);\n  }\n  /**\r\n   * Writes the audio data specified by making an internal copy of the data.\r\n   * @member PushAudioInputStreamImpl.prototype.write\r\n   * @function\r\n   * @public\r\n   * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\r\n   */\n\n\n  write(dataBuffer) {\n    this.privStream.writeStreamChunk({\n      buffer: dataBuffer,\n      isEnd: false,\n      timeReceived: Date.now()\n    });\n  }\n  /**\r\n   * Closes the stream.\r\n   * @member PushAudioInputStreamImpl.prototype.close\r\n   * @function\r\n   * @public\r\n   */\n\n\n  close() {\n    this.privStream.close();\n  }\n\n  id() {\n    return this.privId;\n  }\n\n  get blob() {\n    return this.attach(\"id\").then(audioNode => {\n      const data = [];\n      let bufferData = Buffer.from(\"\");\n\n      const readCycle = () => {\n        return audioNode.read().then(audioStreamChunk => {\n          if (!audioStreamChunk || audioStreamChunk.isEnd) {\n            if (typeof XMLHttpRequest !== \"undefined\" && typeof Blob !== \"undefined\") {\n              return Promise.resolve(new Blob(data));\n            } else {\n              return Promise.resolve(Buffer.from(bufferData));\n            }\n          } else {\n            if (typeof Blob !== \"undefined\") {\n              data.push(audioStreamChunk.buffer);\n            } else {\n              bufferData = Buffer.concat([bufferData, this.toBuffer(audioStreamChunk.buffer)]);\n            }\n\n            return readCycle();\n          }\n        });\n      };\n\n      return readCycle();\n    });\n  }\n\n  turnOn() {\n    this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\n\n    this.onEvent(new AudioSourceReadyEvent(this.privId));\n    return;\n  }\n\n  attach(audioNodeId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\n      yield this.turnOn();\n      const stream = this.privStream;\n      this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\n      return {\n        detach: () => __awaiter(this, void 0, void 0, function* () {\n          this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\n          return this.turnOff();\n        }),\n        id: () => {\n          return audioNodeId;\n        },\n        read: () => {\n          return stream.read();\n        }\n      };\n    });\n  }\n\n  detach(audioNodeId) {\n    this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\n  }\n\n  turnOff() {\n    return;\n  }\n\n  get events() {\n    return this.privEvents;\n  }\n\n  get deviceInfo() {\n    return Promise.resolve({\n      bitspersample: this.privFormat.bitsPerSample,\n      channelcount: this.privFormat.channels,\n      connectivity: connectivity.Unknown,\n      manufacturer: \"Speech SDK\",\n      model: \"PushStream\",\n      samplerate: this.privFormat.samplesPerSec,\n      type: type.Stream\n    });\n  }\n\n  toBuffer(arrayBuffer) {\n    const buf = Buffer.alloc(arrayBuffer.byteLength);\n    const view = new Uint8Array(arrayBuffer);\n\n    for (let i = 0; i < buf.length; ++i) {\n      buf[i] = view[i];\n    }\n\n    return buf;\n  }\n\n}\n/*\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @class PullAudioInputStream\r\n */\n\nexport class PullAudioInputStream extends AudioInputStream {\n  /**\r\n   * Creates and initializes and instance.\r\n   * @constructor\r\n   */\n  constructor() {\n    super();\n  }\n  /**\r\n   * Creates a PullAudioInputStream that delegates to the specified callback interface for\r\n   * read() and close() methods, using the default format (16 kHz 16bit mono PCM).\r\n   * @member PullAudioInputStream.create\r\n   * @function\r\n   * @public\r\n   * @param {PullAudioInputStreamCallback} callback - The custom audio input object,\r\n   *        derived from PullAudioInputStreamCustomCallback\r\n   * @param {AudioStreamFormat} format - The audio data format in which audio will be\r\n   *        returned from the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\r\n   * @returns {PullAudioInputStream} The push audio input stream being created.\r\n   */\n\n\n  static create(callback, format) {\n    return new PullAudioInputStreamImpl(callback, format);\n  }\n\n}\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class PullAudioInputStreamImpl\r\n */\n\nexport class PullAudioInputStreamImpl extends PullAudioInputStream {\n  /**\r\n   * Creates a PullAudioInputStream that delegates to the specified callback interface for\r\n   * read() and close() methods, using the default format (16 kHz 16bit mono PCM).\r\n   * @constructor\r\n   * @param {PullAudioInputStreamCallback} callback - The custom audio input object,\r\n   *        derived from PullAudioInputStreamCustomCallback\r\n   * @param {AudioStreamFormat} format - The audio data format in which audio will be\r\n   *        returned from the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\r\n   */\n  constructor(callback, format) {\n    super();\n\n    this.onEvent = event => {\n      this.privEvents.onEvent(event);\n      Events.instance.onEvent(event);\n    };\n\n    if (undefined === format) {\n      this.privFormat = AudioStreamFormat.getDefaultInputFormat();\n    } else {\n      this.privFormat = format;\n    }\n\n    this.privEvents = new EventSource();\n    this.privId = createNoDashGuid();\n    this.privCallback = callback;\n    this.privIsClosed = false;\n    this.privBufferSize = this.privFormat.avgBytesPerSec / 10;\n  }\n  /**\r\n   * Format information for the audio\r\n   */\n\n\n  get format() {\n    return Promise.resolve(this.privFormat);\n  }\n  /**\r\n   * Closes the stream.\r\n   * @member PullAudioInputStreamImpl.prototype.close\r\n   * @function\r\n   * @public\r\n   */\n\n\n  close() {\n    this.privIsClosed = true;\n    this.privCallback.close();\n  }\n\n  id() {\n    return this.privId;\n  }\n\n  get blob() {\n    return Promise.reject(\"Not implemented\");\n  }\n\n  turnOn() {\n    this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\n\n    this.onEvent(new AudioSourceReadyEvent(this.privId));\n    return;\n  }\n\n  attach(audioNodeId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\n      yield this.turnOn();\n      this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\n      return {\n        detach: () => {\n          this.privCallback.close();\n          this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\n          return this.turnOff();\n        },\n        id: () => {\n          return audioNodeId;\n        },\n        read: () => {\n          let totalBytes = 0;\n          let transmitBuff; // Until we have the minimum number of bytes to send in a transmission, keep asking for more.\n\n          while (totalBytes < this.privBufferSize) {\n            // Sizing the read buffer to the delta between the perfect size and what's left means we won't ever get too much\n            // data back.\n            const readBuff = new ArrayBuffer(this.privBufferSize - totalBytes);\n            const pulledBytes = this.privCallback.read(readBuff); // If there is no return buffer yet defined, set the return buffer to the that was just populated.\n            // This was, if we have enough data there's no copy penalty, but if we don't we have a buffer that's the\n            // preferred size allocated.\n\n            if (undefined === transmitBuff) {\n              transmitBuff = readBuff;\n            } else {\n              // Not the first bite at the apple, so fill the return buffer with the data we got back.\n              const intView = new Int8Array(transmitBuff);\n              intView.set(new Int8Array(readBuff), totalBytes);\n            } // If there are no bytes to read, just break out and be done.\n\n\n            if (0 === pulledBytes) {\n              break;\n            }\n\n            totalBytes += pulledBytes;\n          }\n\n          return Promise.resolve({\n            buffer: transmitBuff.slice(0, totalBytes),\n            isEnd: this.privIsClosed || totalBytes === 0,\n            timeReceived: Date.now()\n          });\n        }\n      };\n    });\n  }\n\n  detach(audioNodeId) {\n    this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\n  }\n\n  turnOff() {\n    return;\n  }\n\n  get events() {\n    return this.privEvents;\n  }\n\n  get deviceInfo() {\n    return Promise.resolve({\n      bitspersample: this.privFormat.bitsPerSample,\n      channelcount: this.privFormat.channels,\n      connectivity: connectivity.Unknown,\n      manufacturer: \"Speech SDK\",\n      model: \"PullStream\",\n      samplerate: this.privFormat.samplesPerSec,\n      type: type.Stream\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["connectivity","type","AudioSourceInitializingEvent","AudioSourceReadyEvent","AudioStreamNodeAttachedEvent","AudioStreamNodeAttachingEvent","AudioStreamNodeDetachedEvent","ChunkedArrayBufferStream","Events","EventSource","createNoDashGuid","AudioStreamFormat","AudioStreamFormatImpl","AudioInputStream","constructor","createPushStream","format","PushAudioInputStream","create","createPullStream","callback","PullAudioInputStream","PushAudioInputStreamImpl","event","privEvents","onEvent","instance","undefined","privFormat","getDefaultInputFormat","privId","privStream","avgBytesPerSec","Promise","resolve","write","dataBuffer","writeStreamChunk","buffer","isEnd","timeReceived","Date","now","close","id","blob","attach","then","audioNode","data","bufferData","Buffer","from","readCycle","read","audioStreamChunk","XMLHttpRequest","Blob","push","concat","toBuffer","turnOn","audioNodeId","stream","detach","__awaiter","turnOff","events","deviceInfo","bitspersample","bitsPerSample","channelcount","channels","Unknown","manufacturer","model","samplerate","samplesPerSec","Stream","arrayBuffer","buf","alloc","byteLength","view","Uint8Array","i","length","PullAudioInputStreamImpl","privCallback","privIsClosed","privBufferSize","reject","totalBytes","transmitBuff","readBuff","ArrayBuffer","pulledBytes","intView","Int8Array","set","slice"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ_2\\educator\\node_modules\\microsoft-cognitiveservices-speech-sdk\\distrib\\es2015\\src\\sdk\\Audio\\src\\sdk\\Audio\\AudioInputStream.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// tslint:disable:max-classes-per-file\r\n\r\nimport {\r\n    connectivity,\r\n    ISpeechConfigAudioDevice,\r\n    type,\r\n} from \"../../common.speech/Exports\";\r\nimport {\r\n    AudioSourceEvent,\r\n    AudioSourceInitializingEvent,\r\n    AudioSourceReadyEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    ChunkedArrayBufferStream,\r\n    Deferred,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IStreamChunk,\r\n    Stream,\r\n} from \"../../common/Exports\";\r\nimport { createNoDashGuid } from \"../../common/Guid\";\r\nimport { AudioStreamFormat, PullAudioInputStreamCallback } from \"../Exports\";\r\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat\";\r\n\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @class AudioInputStream\r\n */\r\nexport abstract class AudioInputStream {\r\n\r\n    /**\r\n     * Creates and initializes an instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() { }\r\n\r\n    /**\r\n     * Creates a memory backed PushAudioInputStream with the specified audio format.\r\n     * @member AudioInputStream.createPushStream\r\n     * @function\r\n     * @public\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\r\n     *        written to the push audio stream's write() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PushAudioInputStream} The audio input stream being created.\r\n     */\r\n    public static createPushStream(format?: AudioStreamFormat): PushAudioInputStream {\r\n        return PushAudioInputStream.create(format);\r\n    }\r\n\r\n    /**\r\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for read()\r\n     * and close() methods.\r\n     * @member AudioInputStream.createPullStream\r\n     * @function\r\n     * @public\r\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object, derived from\r\n     *        PullAudioInputStreamCallback\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be returned from\r\n     *        the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PullAudioInputStream} The audio input stream being created.\r\n     */\r\n    public static createPullStream(callback: PullAudioInputStreamCallback, format?: AudioStreamFormat): PullAudioInputStream {\r\n        return PullAudioInputStream.create(callback, format);\r\n        // throw new Error(\"Oops\");\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioInputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio input stream used for custom audio input configurations.\r\n * @class PushAudioInputStream\r\n */\r\nexport abstract class PushAudioInputStream extends AudioInputStream {\r\n\r\n    /**\r\n     * Creates a memory backed PushAudioInputStream with the specified audio format.\r\n     * @member PushAudioInputStream.create\r\n     * @function\r\n     * @public\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be written to the\r\n     *        push audio stream's write() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PushAudioInputStream} The push audio input stream being created.\r\n     */\r\n    public static create(format?: AudioStreamFormat): PushAudioInputStream {\r\n        return new PushAudioInputStreamImpl(format);\r\n    }\r\n\r\n    /**\r\n     * Writes the audio data specified by making an internal copy of the data.\r\n     * @member PushAudioInputStream.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\r\n     */\r\n    public abstract write(dataBuffer: ArrayBuffer): void;\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PushAudioInputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class PushAudioInputStreamImpl\r\n */\r\nexport class PushAudioInputStreamImpl extends PushAudioInputStream implements IAudioSource {\r\n\r\n    private privFormat: AudioStreamFormatImpl;\r\n    private privId: string;\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n    private privStream: Stream<ArrayBuffer>;\r\n\r\n    /**\r\n     * Creates and initalizes an instance with the given values.\r\n     * @constructor\r\n     * @param {AudioStreamFormat} format - The audio stream format.\r\n     */\r\n    public constructor(format?: AudioStreamFormat) {\r\n        super();\r\n        if (format === undefined) {\r\n            this.privFormat = AudioStreamFormatImpl.getDefaultInputFormat();\r\n        } else {\r\n            this.privFormat = format as AudioStreamFormatImpl;\r\n        }\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n        this.privId = createNoDashGuid();\r\n        this.privStream = new ChunkedArrayBufferStream(this.privFormat.avgBytesPerSec / 10);\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return Promise.resolve(this.privFormat);\r\n    }\r\n\r\n    /**\r\n     * Writes the audio data specified by making an internal copy of the data.\r\n     * @member PushAudioInputStreamImpl.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\r\n     */\r\n    public write(dataBuffer: ArrayBuffer): void {\r\n        this.privStream.writeStreamChunk({\r\n            buffer: dataBuffer,\r\n            isEnd: false,\r\n            timeReceived: Date.now()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PushAudioInputStreamImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.privStream.close();\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public get blob(): Promise<Blob | Buffer> {\r\n        return this.attach(\"id\").then<Blob | Buffer>((audioNode: IAudioStreamNode) => {\r\n            const data: ArrayBuffer[] = [];\r\n            let bufferData = Buffer.from(\"\");\r\n            const readCycle = (): Promise<Blob | Buffer> => {\r\n                return audioNode.read().then<Blob | Buffer>((audioStreamChunk: IStreamChunk<ArrayBuffer>) => {\r\n                    if (!audioStreamChunk || audioStreamChunk.isEnd) {\r\n                        if (typeof (XMLHttpRequest) !== \"undefined\" && typeof (Blob) !== \"undefined\") {\r\n                            return Promise.resolve(new Blob(data));\r\n                        } else {\r\n                            return Promise.resolve(Buffer.from(bufferData));\r\n                        }\r\n                    } else {\r\n                        if (typeof (Blob) !== \"undefined\") {\r\n                            data.push(audioStreamChunk.buffer);\r\n                        } else {\r\n                            bufferData = Buffer.concat([bufferData, this.toBuffer(audioStreamChunk.buffer)]);\r\n                        }\r\n                        return readCycle();\r\n                    }\r\n                });\r\n            };\r\n            return readCycle();\r\n        });\r\n    }\r\n\r\n    public turnOn(): Promise<void> {\r\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n        return;\r\n    }\r\n\r\n    public async attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        await this.turnOn();\r\n        const stream = this.privStream;\r\n        this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n        return {\r\n            detach: async () => {\r\n                this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                return this.turnOff();\r\n            },\r\n            id: () => {\r\n                return audioNodeId;\r\n            },\r\n            read: () => {\r\n                return stream.read();\r\n            },\r\n        };\r\n    }\r\n\r\n    public detach(audioNodeId: string): void {\r\n        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n    }\r\n\r\n    public turnOff(): Promise<void> {\r\n        return;\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return Promise.resolve({\r\n            bitspersample: this.privFormat.bitsPerSample,\r\n            channelcount: this.privFormat.channels,\r\n            connectivity: connectivity.Unknown,\r\n            manufacturer: \"Speech SDK\",\r\n            model: \"PushStream\",\r\n            samplerate: this.privFormat.samplesPerSec,\r\n            type: type.Stream,\r\n        });\r\n    }\r\n\r\n    private onEvent = (event: AudioSourceEvent): void => {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private toBuffer(arrayBuffer: ArrayBuffer): Buffer {\r\n        const buf: Buffer = Buffer.alloc(arrayBuffer.byteLength);\r\n        const view: Uint8Array = new Uint8Array(arrayBuffer);\r\n        for (let i = 0; i < buf.length; ++i) {\r\n            buf[i] = view[i];\r\n        }\r\n        return buf;\r\n    }\r\n}\r\n\r\n/*\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @class PullAudioInputStream\r\n */\r\nexport abstract class PullAudioInputStream extends AudioInputStream {\r\n    /**\r\n     * Creates and initializes and instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() { super(); }\r\n\r\n    /**\r\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for\r\n     * read() and close() methods, using the default format (16 kHz 16bit mono PCM).\r\n     * @member PullAudioInputStream.create\r\n     * @function\r\n     * @public\r\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object,\r\n     *        derived from PullAudioInputStreamCustomCallback\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\r\n     *        returned from the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PullAudioInputStream} The push audio input stream being created.\r\n     */\r\n    public static create(callback: PullAudioInputStreamCallback, format?: AudioStreamFormat): PullAudioInputStream {\r\n        return new PullAudioInputStreamImpl(callback, format as AudioStreamFormatImpl);\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member PullAudioInputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n\r\n}\r\n\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class PullAudioInputStreamImpl\r\n */\r\nexport class PullAudioInputStreamImpl extends PullAudioInputStream implements IAudioSource {\r\n\r\n    private privCallback: PullAudioInputStreamCallback;\r\n    private privFormat: AudioStreamFormatImpl;\r\n    private privId: string;\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n    private privIsClosed: boolean;\r\n    private privBufferSize: number;\r\n\r\n    /**\r\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for\r\n     * read() and close() methods, using the default format (16 kHz 16bit mono PCM).\r\n     * @constructor\r\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object,\r\n     *        derived from PullAudioInputStreamCustomCallback\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\r\n     *        returned from the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     */\r\n    public constructor(callback: PullAudioInputStreamCallback, format?: AudioStreamFormatImpl) {\r\n        super();\r\n        if (undefined === format) {\r\n            this.privFormat = AudioStreamFormat.getDefaultInputFormat() as AudioStreamFormatImpl;\r\n        } else {\r\n            this.privFormat = format;\r\n        }\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n        this.privId = createNoDashGuid();\r\n        this.privCallback = callback;\r\n        this.privIsClosed = false;\r\n        this.privBufferSize = this.privFormat.avgBytesPerSec / 10;\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return Promise.resolve(this.privFormat);\r\n    }\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PullAudioInputStreamImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.privIsClosed = true;\r\n        this.privCallback.close();\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public get blob(): Promise<Blob | Buffer> {\r\n        return Promise.reject(\"Not implemented\");\r\n    }\r\n\r\n    public turnOn(): Promise<void> {\r\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n        return;\r\n    }\r\n\r\n    public async attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        await this.turnOn();\r\n        this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n        return {\r\n            detach: () => {\r\n                this.privCallback.close();\r\n                this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                return this.turnOff();\r\n            },\r\n            id: () => {\r\n                return audioNodeId;\r\n            },\r\n            read: (): Promise<IStreamChunk<ArrayBuffer>> => {\r\n                let totalBytes: number = 0;\r\n                let transmitBuff: ArrayBuffer;\r\n                // Until we have the minimum number of bytes to send in a transmission, keep asking for more.\r\n                while (totalBytes < this.privBufferSize) {\r\n                    // Sizing the read buffer to the delta between the perfect size and what's left means we won't ever get too much\r\n                    // data back.\r\n                    const readBuff: ArrayBuffer = new ArrayBuffer(this.privBufferSize - totalBytes);\r\n                    const pulledBytes: number = this.privCallback.read(readBuff);\r\n                    // If there is no return buffer yet defined, set the return buffer to the that was just populated.\r\n                    // This was, if we have enough data there's no copy penalty, but if we don't we have a buffer that's the\r\n                    // preferred size allocated.\r\n                    if (undefined === transmitBuff) {\r\n                        transmitBuff = readBuff;\r\n                    } else {\r\n                        // Not the first bite at the apple, so fill the return buffer with the data we got back.\r\n                        const intView: Int8Array = new Int8Array(transmitBuff);\r\n                        intView.set(new Int8Array(readBuff), totalBytes);\r\n                    }\r\n                    // If there are no bytes to read, just break out and be done.\r\n                    if (0 === pulledBytes) {\r\n                        break;\r\n                    }\r\n                    totalBytes += pulledBytes;\r\n                }\r\n                return Promise.resolve<IStreamChunk<ArrayBuffer>>({\r\n                    buffer: transmitBuff.slice(0, totalBytes),\r\n                    isEnd: this.privIsClosed || totalBytes === 0,\r\n                    timeReceived: Date.now(),\r\n                });\r\n            },\r\n        };\r\n    }\r\n\r\n    public detach(audioNodeId: string): void {\r\n        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n    }\r\n\r\n    public turnOff(): Promise<void> {\r\n        return;\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return Promise.resolve({\r\n            bitspersample: this.privFormat.bitsPerSample,\r\n            channelcount: this.privFormat.channels,\r\n            connectivity: connectivity.Unknown,\r\n            manufacturer: \"Speech SDK\",\r\n            model: \"PullStream\",\r\n            samplerate: this.privFormat.samplesPerSec,\r\n            type: type.Stream,\r\n        });\r\n    }\r\n\r\n    private onEvent = (event: AudioSourceEvent): void => {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}