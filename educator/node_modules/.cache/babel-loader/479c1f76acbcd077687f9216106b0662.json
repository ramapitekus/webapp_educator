{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ObjectDisposedError } from \"./Error\";\nexport class List {\n  constructor(list) {\n    this.privSubscriptionIdCounter = 0;\n    this.privAddSubscriptions = {};\n    this.privRemoveSubscriptions = {};\n    this.privDisposedSubscriptions = {};\n    this.privDisposeReason = null;\n\n    this.get = itemIndex => {\n      this.throwIfDisposed();\n      return this.privList[itemIndex];\n    };\n\n    this.first = () => {\n      return this.get(0);\n    };\n\n    this.last = () => {\n      return this.get(this.length() - 1);\n    };\n\n    this.add = item => {\n      this.throwIfDisposed();\n      this.insertAt(this.privList.length, item);\n    };\n\n    this.insertAt = (index, item) => {\n      this.throwIfDisposed();\n\n      if (index === 0) {\n        this.privList.unshift(item);\n      } else if (index === this.privList.length) {\n        this.privList.push(item);\n      } else {\n        this.privList.splice(index, 0, item);\n      }\n\n      this.triggerSubscriptions(this.privAddSubscriptions);\n    };\n\n    this.removeFirst = () => {\n      this.throwIfDisposed();\n      return this.removeAt(0);\n    };\n\n    this.removeLast = () => {\n      this.throwIfDisposed();\n      return this.removeAt(this.length() - 1);\n    };\n\n    this.removeAt = index => {\n      this.throwIfDisposed();\n      return this.remove(index, 1)[0];\n    };\n\n    this.remove = (index, count) => {\n      this.throwIfDisposed();\n      const removedElements = this.privList.splice(index, count);\n      this.triggerSubscriptions(this.privRemoveSubscriptions);\n      return removedElements;\n    };\n\n    this.clear = () => {\n      this.throwIfDisposed();\n      this.remove(0, this.length());\n    };\n\n    this.length = () => {\n      this.throwIfDisposed();\n      return this.privList.length;\n    };\n\n    this.onAdded = addedCallback => {\n      this.throwIfDisposed();\n      const subscriptionId = this.privSubscriptionIdCounter++;\n      this.privAddSubscriptions[subscriptionId] = addedCallback;\n      return {\n        detach: () => {\n          delete this.privAddSubscriptions[subscriptionId];\n          return Promise.resolve();\n        }\n      };\n    };\n\n    this.onRemoved = removedCallback => {\n      this.throwIfDisposed();\n      const subscriptionId = this.privSubscriptionIdCounter++;\n      this.privRemoveSubscriptions[subscriptionId] = removedCallback;\n      return {\n        detach: () => {\n          delete this.privRemoveSubscriptions[subscriptionId];\n          return Promise.resolve();\n        }\n      };\n    };\n\n    this.onDisposed = disposedCallback => {\n      this.throwIfDisposed();\n      const subscriptionId = this.privSubscriptionIdCounter++;\n      this.privDisposedSubscriptions[subscriptionId] = disposedCallback;\n      return {\n        detach: () => {\n          delete this.privDisposedSubscriptions[subscriptionId];\n          return Promise.resolve();\n        }\n      };\n    };\n\n    this.join = seperator => {\n      this.throwIfDisposed();\n      return this.privList.join(seperator);\n    };\n\n    this.toArray = () => {\n      const cloneCopy = Array();\n      this.privList.forEach(val => {\n        cloneCopy.push(val);\n      });\n      return cloneCopy;\n    };\n\n    this.any = callback => {\n      this.throwIfDisposed();\n\n      if (callback) {\n        return this.where(callback).length() > 0;\n      } else {\n        return this.length() > 0;\n      }\n    };\n\n    this.all = callback => {\n      this.throwIfDisposed();\n      return this.where(callback).length() === this.length();\n    };\n\n    this.forEach = callback => {\n      this.throwIfDisposed();\n\n      for (let i = 0; i < this.length(); i++) {\n        callback(this.privList[i], i);\n      }\n    };\n\n    this.select = callback => {\n      this.throwIfDisposed();\n      const selectList = [];\n\n      for (let i = 0; i < this.privList.length; i++) {\n        selectList.push(callback(this.privList[i], i));\n      }\n\n      return new List(selectList);\n    };\n\n    this.where = callback => {\n      this.throwIfDisposed();\n      const filteredList = new List();\n\n      for (let i = 0; i < this.privList.length; i++) {\n        if (callback(this.privList[i], i)) {\n          filteredList.add(this.privList[i]);\n        }\n      }\n\n      return filteredList;\n    };\n\n    this.orderBy = compareFn => {\n      this.throwIfDisposed();\n      const clonedArray = this.toArray();\n      const orderedArray = clonedArray.sort(compareFn);\n      return new List(orderedArray);\n    };\n\n    this.orderByDesc = compareFn => {\n      this.throwIfDisposed();\n      return this.orderBy((a, b) => compareFn(b, a));\n    };\n\n    this.clone = () => {\n      this.throwIfDisposed();\n      return new List(this.toArray());\n    };\n\n    this.concat = list => {\n      this.throwIfDisposed();\n      return new List(this.privList.concat(list.toArray()));\n    };\n\n    this.concatArray = array => {\n      this.throwIfDisposed();\n      return new List(this.privList.concat(array));\n    };\n\n    this.isDisposed = () => {\n      return this.privList == null;\n    };\n\n    this.dispose = reason => {\n      if (!this.isDisposed()) {\n        this.privDisposeReason = reason;\n        this.privList = null;\n        this.privAddSubscriptions = null;\n        this.privRemoveSubscriptions = null;\n        this.triggerSubscriptions(this.privDisposedSubscriptions);\n      }\n    };\n\n    this.throwIfDisposed = () => {\n      if (this.isDisposed()) {\n        throw new ObjectDisposedError(\"List\", this.privDisposeReason);\n      }\n    };\n\n    this.triggerSubscriptions = subscriptions => {\n      if (subscriptions) {\n        for (const subscriptionId in subscriptions) {\n          if (subscriptionId) {\n            subscriptions[subscriptionId]();\n          }\n        }\n      }\n    };\n\n    this.privList = []; // copy the list rather than taking as is.\n\n    if (list) {\n      for (const item of list) {\n        this.privList.push(item);\n      }\n    }\n  }\n\n}","map":{"version":3,"mappings":"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","names":["ObjectDisposedError","List","constructor","list","itemIndex","throwIfDisposed","privList","get","length","item","insertAt","index","unshift","push","splice","triggerSubscriptions","privAddSubscriptions","removeAt","remove","count","removedElements","privRemoveSubscriptions","addedCallback","subscriptionId","privSubscriptionIdCounter","detach","Promise","resolve","removedCallback","disposedCallback","privDisposedSubscriptions","seperator","join","cloneCopy","Array","forEach","val","callback","where","i","selectList","filteredList","add","compareFn","clonedArray","toArray","orderedArray","sort","orderBy","a","b","concat","array","reason","isDisposed","privDisposeReason","subscriptions"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\node_modules\\microsoft-cognitiveservices-speech-sdk\\distrib\\es2015\\src\\common\\src\\common\\List.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ObjectDisposedError } from \"./Error\";\r\nimport { IDetachable } from \"./IDetachable\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\nimport { IDisposable } from \"./IDisposable\";\r\n\r\nexport interface IList<TItem> extends IDisposable {\r\n    get(itemIndex: number): TItem;\r\n    first(): TItem;\r\n    last(): TItem;\r\n\r\n    add(item: TItem): void;\r\n    insertAt(index: number, item: TItem): void;\r\n\r\n    removeFirst(): TItem;\r\n    removeLast(): TItem;\r\n    removeAt(index: number): TItem;\r\n    remove(index: number, count: number): TItem[];\r\n    clear(): void;\r\n\r\n    length(): number;\r\n\r\n    onAdded(addedCallback: () => void): IDetachable;\r\n    onRemoved(removedCallback: () => void): IDetachable;\r\n    onDisposed(disposedCallback: () => void): IDetachable;\r\n\r\n    join(seperator?: string): string;\r\n\r\n    toArray(): TItem[];\r\n\r\n    any(callback?: (item: TItem, index: number) => boolean): boolean;\r\n    all(callback: (item: TItem) => boolean): boolean;\r\n    forEach(callback: (item: TItem, index: number) => void): void;\r\n    select<T2>(callback: (item: TItem, index: number) => T2): List<T2>;\r\n    where(callback: (item: TItem, index: number) => boolean): List<TItem>;\r\n    orderBy(compareFn: (a: TItem, b: TItem) => number): List<TItem>;\r\n    orderByDesc(compareFn: (a: TItem, b: TItem) => number): List<TItem>;\r\n    clone(): List<TItem>;\r\n    concat(list: List<TItem>): List<TItem>;\r\n    concatArray(array: TItem[]): List<TItem>;\r\n}\r\n\r\nexport class List<TItem> implements IList<TItem>  {\r\n    private privList: TItem[];\r\n    private privSubscriptionIdCounter: number = 0;\r\n    private privAddSubscriptions: IStringDictionary<() => void> = {};\r\n    private privRemoveSubscriptions: IStringDictionary<() => void> = {};\r\n    private privDisposedSubscriptions: IStringDictionary<() => void> = {};\r\n    private privDisposeReason: string = null;\r\n\r\n    public constructor(list?: TItem[]) {\r\n        this.privList = [];\r\n        // copy the list rather than taking as is.\r\n        if (list) {\r\n            for (const item of list) {\r\n                this.privList.push(item);\r\n            }\r\n        }\r\n    }\r\n\r\n    public get = (itemIndex: number): TItem => {\r\n        this.throwIfDisposed();\r\n        return this.privList[itemIndex];\r\n    }\r\n\r\n    public first = (): TItem => {\r\n        return this.get(0);\r\n    }\r\n\r\n    public last = (): TItem => {\r\n        return this.get(this.length() - 1);\r\n    }\r\n\r\n    public add = (item: TItem): void => {\r\n        this.throwIfDisposed();\r\n        this.insertAt(this.privList.length, item);\r\n    }\r\n\r\n    public insertAt = (index: number, item: TItem): void => {\r\n        this.throwIfDisposed();\r\n        if (index === 0) {\r\n            this.privList.unshift(item);\r\n        } else if (index === this.privList.length) {\r\n            this.privList.push(item);\r\n        } else {\r\n            this.privList.splice(index, 0, item);\r\n        }\r\n        this.triggerSubscriptions(this.privAddSubscriptions);\r\n    }\r\n\r\n    public removeFirst = (): TItem => {\r\n        this.throwIfDisposed();\r\n        return this.removeAt(0);\r\n    }\r\n\r\n    public removeLast = (): TItem => {\r\n        this.throwIfDisposed();\r\n        return this.removeAt(this.length() - 1);\r\n    }\r\n\r\n    public removeAt = (index: number): TItem => {\r\n        this.throwIfDisposed();\r\n        return this.remove(index, 1)[0];\r\n    }\r\n\r\n    public remove = (index: number, count: number): TItem[] => {\r\n        this.throwIfDisposed();\r\n        const removedElements = this.privList.splice(index, count);\r\n        this.triggerSubscriptions(this.privRemoveSubscriptions);\r\n        return removedElements;\r\n    }\r\n\r\n    public clear = (): void => {\r\n        this.throwIfDisposed();\r\n        this.remove(0, this.length());\r\n    }\r\n\r\n    public length = (): number => {\r\n        this.throwIfDisposed();\r\n        return this.privList.length;\r\n    }\r\n\r\n    public onAdded = (addedCallback: () => void): IDetachable => {\r\n        this.throwIfDisposed();\r\n        const subscriptionId = this.privSubscriptionIdCounter++;\r\n\r\n        this.privAddSubscriptions[subscriptionId] = addedCallback;\r\n\r\n        return {\r\n            detach: () => {\r\n                delete this.privAddSubscriptions[subscriptionId];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public onRemoved = (removedCallback: () => void): IDetachable => {\r\n        this.throwIfDisposed();\r\n        const subscriptionId = this.privSubscriptionIdCounter++;\r\n\r\n        this.privRemoveSubscriptions[subscriptionId] = removedCallback;\r\n\r\n        return {\r\n            detach: () => {\r\n                delete this.privRemoveSubscriptions[subscriptionId];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public onDisposed = (disposedCallback: () => void): IDetachable => {\r\n        this.throwIfDisposed();\r\n        const subscriptionId = this.privSubscriptionIdCounter++;\r\n\r\n        this.privDisposedSubscriptions[subscriptionId] = disposedCallback;\r\n\r\n        return {\r\n            detach: () => {\r\n                delete this.privDisposedSubscriptions[subscriptionId];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public join = (seperator?: string): string => {\r\n        this.throwIfDisposed();\r\n        return this.privList.join(seperator);\r\n    }\r\n\r\n    public toArray = (): TItem[] => {\r\n        const cloneCopy = Array<TItem>();\r\n        this.privList.forEach((val: TItem) => {\r\n            cloneCopy.push(val);\r\n        });\r\n        return cloneCopy;\r\n    }\r\n\r\n    public any = (callback?: (item: TItem, index: number) => boolean): boolean => {\r\n        this.throwIfDisposed();\r\n        if (callback) {\r\n            return this.where(callback).length() > 0;\r\n        } else {\r\n            return this.length() > 0;\r\n        }\r\n    }\r\n\r\n    public all = (callback: (item: TItem) => boolean): boolean => {\r\n        this.throwIfDisposed();\r\n        return this.where(callback).length() === this.length();\r\n    }\r\n\r\n    public forEach = (callback: (item: TItem, index: number) => void): void => {\r\n        this.throwIfDisposed();\r\n        for (let i = 0; i < this.length(); i++) {\r\n            callback(this.privList[i], i);\r\n        }\r\n    }\r\n\r\n    public select = <T2>(callback: (item: TItem, index: number) => T2): List<T2> => {\r\n        this.throwIfDisposed();\r\n        const selectList: T2[] = [];\r\n        for (let i = 0; i < this.privList.length; i++) {\r\n            selectList.push(callback(this.privList[i], i));\r\n        }\r\n\r\n        return new List<T2>(selectList);\r\n    }\r\n\r\n    public where = (callback: (item: TItem, index: number) => boolean): List<TItem> => {\r\n        this.throwIfDisposed();\r\n        const filteredList = new List<TItem>();\r\n        for (let i = 0; i < this.privList.length; i++) {\r\n            if (callback(this.privList[i], i)) {\r\n                filteredList.add(this.privList[i]);\r\n            }\r\n        }\r\n        return filteredList;\r\n    }\r\n\r\n    public orderBy = (compareFn: (a: TItem, b: TItem) => number): List<TItem> => {\r\n        this.throwIfDisposed();\r\n        const clonedArray = this.toArray();\r\n        const orderedArray = clonedArray.sort(compareFn);\r\n        return new List(orderedArray);\r\n    }\r\n\r\n    public orderByDesc = (compareFn: (a: TItem, b: TItem) => number): List<TItem> => {\r\n        this.throwIfDisposed();\r\n        return this.orderBy((a: TItem, b: TItem) => compareFn(b, a));\r\n    }\r\n\r\n    public clone = (): List<TItem> => {\r\n        this.throwIfDisposed();\r\n        return new List<TItem>(this.toArray());\r\n    }\r\n\r\n    public concat = (list: List<TItem>): List<TItem> => {\r\n        this.throwIfDisposed();\r\n        return new List<TItem>(this.privList.concat(list.toArray()));\r\n    }\r\n\r\n    public concatArray = (array: TItem[]): List<TItem> => {\r\n        this.throwIfDisposed();\r\n        return new List<TItem>(this.privList.concat(array));\r\n    }\r\n\r\n    public isDisposed = (): boolean => {\r\n        return this.privList == null;\r\n    }\r\n\r\n    public dispose = (reason?: string): void => {\r\n        if (!this.isDisposed()) {\r\n            this.privDisposeReason = reason;\r\n            this.privList = null;\r\n            this.privAddSubscriptions = null;\r\n            this.privRemoveSubscriptions = null;\r\n            this.triggerSubscriptions(this.privDisposedSubscriptions);\r\n        }\r\n    }\r\n\r\n    private throwIfDisposed = (): void => {\r\n        if (this.isDisposed()) {\r\n            throw new ObjectDisposedError(\"List\", this.privDisposeReason);\r\n        }\r\n    }\r\n\r\n    private triggerSubscriptions = (subscriptions: IStringDictionary<() => void>): void => {\r\n        if (subscriptions) {\r\n            for (const subscriptionId in subscriptions) {\r\n                if (subscriptionId) {\r\n                    subscriptions[subscriptionId]();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}