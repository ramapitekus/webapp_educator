{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { AddedLmIntent, IntentConnectionFactory, IntentServiceRecognizer, RecognitionMode, RecognizerConfig } from \"../common.speech/Exports\";\nimport { marshalPromiseToCallbacks } from \"../common/Exports\";\nimport { Contracts } from \"./Contracts\";\nimport { PropertyId, Recognizer } from \"./Exports\";\n/**\r\n * Intent recognizer.\r\n * @class\r\n */\n\nexport class IntentRecognizer extends Recognizer {\n  /**\r\n   * Initializes an instance of the IntentRecognizer.\r\n   * @constructor\r\n   * @param {SpeechConfig} speechConfig - The set of configuration properties.\r\n   * @param {AudioConfig} audioConfig - An optional audio input config associated with the recognizer\r\n   */\n  constructor(speechConfig, audioConfig) {\n    Contracts.throwIfNullOrUndefined(speechConfig, \"speechConfig\");\n    const configImpl = speechConfig;\n    Contracts.throwIfNullOrUndefined(configImpl, \"speechConfig\");\n    super(audioConfig, configImpl.properties, new IntentConnectionFactory());\n    this.privAddedIntents = [];\n    this.privAddedLmIntents = {};\n    this.privDisposedIntentRecognizer = false;\n    this.privProperties = configImpl.properties;\n    Contracts.throwIfNullOrWhitespace(this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage), PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\n  }\n  /**\r\n   * Gets the spoken language of recognition.\r\n   * @member IntentRecognizer.prototype.speechRecognitionLanguage\r\n   * @function\r\n   * @public\r\n   * @returns {string} the spoken language of recognition.\r\n   */\n\n\n  get speechRecognitionLanguage() {\n    Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\n    return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\n  }\n  /**\r\n   * Gets the authorization token used to communicate with the service.\r\n   * @member IntentRecognizer.prototype.authorizationToken\r\n   * @function\r\n   * @public\r\n   * @returns {string} Authorization token.\r\n   */\n\n\n  get authorizationToken() {\n    return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n  }\n  /**\r\n   * Gets/Sets the authorization token used to communicate with the service.\r\n   * Note: Please use a token derived from your LanguageUnderstanding subscription key for the Intent recognizer.\r\n   * @member IntentRecognizer.prototype.authorizationToken\r\n   * @function\r\n   * @public\r\n   * @param {string} value - Authorization token.\r\n   */\n\n\n  set authorizationToken(value) {\n    this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\n  }\n  /**\r\n   * The collection of properties and their values defined for this IntentRecognizer.\r\n   * @member IntentRecognizer.prototype.properties\r\n   * @function\r\n   * @public\r\n   * @returns {PropertyCollection} The collection of properties and their\r\n   *          values defined for this IntentRecognizer.\r\n   */\n\n\n  get properties() {\n    return this.privProperties;\n  }\n  /**\r\n   * Starts intent recognition, and stops after the first utterance is recognized.\r\n   * The task returns the recognition text and intent as result.\r\n   * Note: RecognizeOnceAsync() returns when the first utterance has been recognized,\r\n   *       so it is suitable only for single shot recognition like command or query.\r\n   *       For long-running recognition, use StartContinuousRecognitionAsync() instead.\r\n   * @member IntentRecognizer.prototype.recognizeOnceAsync\r\n   * @function\r\n   * @public\r\n   * @param cb - Callback that received the recognition has finished with an IntentRecognitionResult.\r\n   * @param err - Callback invoked in case of an error.\r\n   */\n\n\n  recognizeOnceAsync(cb, err) {\n    Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\n\n    if (Object.keys(this.privAddedLmIntents).length !== 0 || undefined !== this.privUmbrellaIntent) {\n      const context = this.buildSpeechContext();\n      this.privReco.speechContext.setSection(\"intent\", context.Intent);\n      this.privReco.dynamicGrammar.addReferenceGrammar(context.ReferenceGrammars);\n      const intentReco = this.privReco;\n      intentReco.setIntents(this.privAddedLmIntents, this.privUmbrellaIntent);\n    }\n\n    marshalPromiseToCallbacks(this.recognizeOnceAsyncImpl(RecognitionMode.Interactive), cb, err);\n  }\n  /**\r\n   * Starts speech recognition, until stopContinuousRecognitionAsync() is called.\r\n   * User must subscribe to events to receive recognition results.\r\n   * @member IntentRecognizer.prototype.startContinuousRecognitionAsync\r\n   * @function\r\n   * @public\r\n   * @param cb - Callback invoked once the recognition has started.\r\n   * @param err - Callback invoked in case of an error.\r\n   */\n\n\n  startContinuousRecognitionAsync(cb, err) {\n    if (Object.keys(this.privAddedLmIntents).length !== 0 || undefined !== this.privUmbrellaIntent) {\n      const context = this.buildSpeechContext();\n      this.privReco.speechContext.setSection(\"intent\", context.Intent);\n      this.privReco.dynamicGrammar.addReferenceGrammar(context.ReferenceGrammars);\n      const intentReco = this.privReco;\n      intentReco.setIntents(this.privAddedLmIntents, this.privUmbrellaIntent);\n    }\n\n    marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\n  }\n  /**\r\n   * Stops continuous intent recognition.\r\n   * @member IntentRecognizer.prototype.stopContinuousRecognitionAsync\r\n   * @function\r\n   * @public\r\n   * @param cb - Callback invoked once the recognition has stopped.\r\n   * @param err - Callback invoked in case of an error.\r\n   */\n\n\n  stopContinuousRecognitionAsync(cb, err) {\n    marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\n  }\n  /**\r\n   * Starts speech recognition with keyword spotting, until stopKeywordRecognitionAsync() is called.\r\n   * User must subscribe to events to receive recognition results.\r\n   * Note: Key word spotting functionality is only available on the Speech Devices SDK.\r\n   *       This functionality is currently not included in the SDK itself.\r\n   * @member IntentRecognizer.prototype.startKeywordRecognitionAsync\r\n   * @function\r\n   * @public\r\n   * @param {KeywordRecognitionModel} model - The keyword recognition model that specifies the keyword to be recognized.\r\n   * @param cb - Callback invoked once the recognition has started.\r\n   * @param err - Callback invoked in case of an error.\r\n   */\n\n\n  startKeywordRecognitionAsync(model, cb, err) {\n    Contracts.throwIfNull(model, \"model\");\n\n    if (!!err) {\n      err(\"Not yet implemented.\");\n    }\n  }\n  /**\r\n   * Stops continuous speech recognition.\r\n   * Note: Key word spotting functionality is only available on the Speech Devices SDK.\r\n   *       This functionality is currently not included in the SDK itself.\r\n   * @member IntentRecognizer.prototype.stopKeywordRecognitionAsync\r\n   * @function\r\n   * @public\r\n   * @param cb - Callback invoked once the recognition has stopped.\r\n   * @param err - Callback invoked in case of an error.\r\n   */\n\n\n  stopKeywordRecognitionAsync(cb, err) {\n    if (!!cb) {\n      cb();\n    }\n  }\n  /**\r\n   * Adds a phrase that should be recognized as intent.\r\n   * @member IntentRecognizer.prototype.addIntent\r\n   * @function\r\n   * @public\r\n   * @param {string} intentId - A String that represents the identifier of the intent to be recognized.\r\n   * @param {string} phrase - A String that specifies the phrase representing the intent.\r\n   */\n\n\n  addIntent(simplePhrase, intentId) {\n    Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\n    Contracts.throwIfNullOrWhitespace(intentId, \"intentId\");\n    Contracts.throwIfNullOrWhitespace(simplePhrase, \"simplePhrase\");\n    this.privAddedIntents.push([intentId, simplePhrase]);\n  }\n  /**\r\n   * Adds an intent from Language Understanding service for recognition.\r\n   * @member IntentRecognizer.prototype.addIntentWithLanguageModel\r\n   * @function\r\n   * @public\r\n   * @param {string} intentId - A String that represents the identifier of the intent\r\n   *        to be recognized. Ignored if intentName is empty.\r\n   * @param {string} model - The intent model from Language Understanding service.\r\n   * @param {string} intentName - The intent name defined in the intent model. If it\r\n   *        is empty, all intent names defined in the model will be added.\r\n   */\n\n\n  addIntentWithLanguageModel(intentId, model, intentName) {\n    Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\n    Contracts.throwIfNullOrWhitespace(intentId, \"intentId\");\n    Contracts.throwIfNull(model, \"model\");\n    const modelImpl = model;\n    Contracts.throwIfNullOrWhitespace(modelImpl.appId, \"model.appId\");\n    this.privAddedLmIntents[intentId] = new AddedLmIntent(modelImpl, intentName);\n  }\n  /**\r\n   * @summary Adds all intents from the specified Language Understanding Model.\r\n   * @member IntentRecognizer.prototype.addAllIntents\r\n   * @function\r\n   * @public\r\n   * @function\r\n   * @public\r\n   * @param {LanguageUnderstandingModel} model - The language understanding model containing the intents.\r\n   * @param {string} intentId - A custom id String to be returned in the IntentRecognitionResult's getIntentId() method.\r\n   */\n\n\n  addAllIntents(model, intentId) {\n    Contracts.throwIfNull(model, \"model\");\n    const modelImpl = model;\n    Contracts.throwIfNullOrWhitespace(modelImpl.appId, \"model.appId\");\n    this.privUmbrellaIntent = new AddedLmIntent(modelImpl, intentId);\n  }\n  /**\r\n   * closes all external resources held by an instance of this class.\r\n   * @member IntentRecognizer.prototype.close\r\n   * @function\r\n   * @public\r\n   */\n\n\n  close(cb, errorCb) {\n    Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\n    marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\n  }\n\n  createRecognizerConfig(speechConfig) {\n    return new RecognizerConfig(speechConfig, this.properties);\n  }\n\n  createServiceRecognizer(authentication, connectionFactory, audioConfig, recognizerConfig) {\n    const audioImpl = audioConfig;\n    return new IntentServiceRecognizer(authentication, connectionFactory, audioImpl, recognizerConfig, this);\n  }\n\n  dispose(disposing) {\n    const _super = Object.create(null, {\n      dispose: {\n        get: () => super.dispose\n      }\n    });\n\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.privDisposedIntentRecognizer) {\n        return;\n      }\n\n      if (disposing) {\n        this.privDisposedIntentRecognizer = true;\n        yield _super.dispose.call(this, disposing);\n      }\n    });\n  }\n\n  buildSpeechContext() {\n    let appId;\n    let region;\n    let subscriptionKey;\n    const refGrammers = [];\n\n    if (undefined !== this.privUmbrellaIntent) {\n      appId = this.privUmbrellaIntent.modelImpl.appId;\n      region = this.privUmbrellaIntent.modelImpl.region;\n      subscriptionKey = this.privUmbrellaIntent.modelImpl.subscriptionKey;\n    } // Build the reference grammer array.\n\n\n    for (const intentId of Object.keys(this.privAddedLmIntents)) {\n      const addedLmIntent = this.privAddedLmIntents[intentId]; // validate all the same model, region, and key...\n\n      if (appId === undefined) {\n        appId = addedLmIntent.modelImpl.appId;\n      } else {\n        if (appId !== addedLmIntent.modelImpl.appId) {\n          throw new Error(\"Intents must all be from the same LUIS model\");\n        }\n      }\n\n      if (region === undefined) {\n        region = addedLmIntent.modelImpl.region;\n      } else {\n        if (region !== addedLmIntent.modelImpl.region) {\n          throw new Error(\"Intents must all be from the same LUIS model in a single region\");\n        }\n      }\n\n      if (subscriptionKey === undefined) {\n        subscriptionKey = addedLmIntent.modelImpl.subscriptionKey;\n      } else {\n        if (subscriptionKey !== addedLmIntent.modelImpl.subscriptionKey) {\n          throw new Error(\"Intents must all use the same subscription key\");\n        }\n      }\n\n      const grammer = \"luis/\" + appId + \"-PRODUCTION#\" + intentId;\n      refGrammers.push(grammer);\n    }\n\n    return {\n      Intent: {\n        id: appId,\n        key: subscriptionKey === undefined ? this.privProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key]) : subscriptionKey,\n        provider: \"LUIS\"\n      },\n      ReferenceGrammars: undefined === this.privUmbrellaIntent ? refGrammers : [\"luis/\" + appId + \"-PRODUCTION\"]\n    };\n  }\n\n}","map":{"version":3,"mappings":"AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,SACIA,aADJ,EAIIC,uBAJJ,EAKIC,uBALJ,EAMIC,eANJ,EAOIC,gBAPJ,QAUO,0BAVP;AAWA,SAASC,yBAAT,QAA0C,mBAA1C;AAEA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAQIC,UARJ,EASIC,UATJ,QAWO,WAXP;AAeA;;;;;AAIA,OAAM,MAAOC,gBAAP,SAAgCD,UAAhC,CAA0C;AAM5C;;;;;;AAMAE,cAAmBC,YAAnB,EAA+CC,WAA/C,EAAwE;AACpEN,aAAS,CAACO,sBAAV,CAAiCF,YAAjC,EAA+C,cAA/C;AACA,UAAMG,UAAU,GAAqBH,YAArC;AACAL,aAAS,CAACO,sBAAV,CAAiCC,UAAjC,EAA6C,cAA7C;AAEA,UAAMF,WAAN,EAAmBE,UAAU,CAACC,UAA9B,EAA0C,IAAId,uBAAJ,EAA1C;AACA,SAAKe,gBAAL,GAAwB,EAAxB;AACA,SAAKC,kBAAL,GAA0B,EAA1B;AAEA,SAAKC,4BAAL,GAAoC,KAApC;AACA,SAAKC,cAAL,GAAsBL,UAAU,CAACC,UAAjC;AAEAT,aAAS,CAACc,uBAAV,CAAkC,KAAKL,UAAL,CAAgBM,WAAhB,CAA4Bd,UAAU,CAACe,oCAAvC,CAAlC,EAAgHf,UAAU,CAACA,UAAU,CAACe,oCAAZ,CAA1H;AACH;AA0BD;;;;;;;;;AAOoC,MAAzBC,yBAAyB;AAChCjB,aAAS,CAACkB,eAAV,CAA0B,KAAKN,4BAA/B;AAEA,WAAO,KAAKH,UAAL,CAAgBM,WAAhB,CAA4Bd,UAAU,CAACe,oCAAvC,CAAP;AACH;AAED;;;;;;;;;AAO6B,MAAlBG,kBAAkB;AACzB,WAAO,KAAKV,UAAL,CAAgBM,WAAhB,CAA4Bd,UAAU,CAACmB,gCAAvC,CAAP;AACH;AAED;;;;;;;;;;AAQ6B,MAAlBD,kBAAkB,CAACE,KAAD,EAAc;AACvC,SAAKZ,UAAL,CAAgBa,WAAhB,CAA4BrB,UAAU,CAACmB,gCAAvC,EAAyEC,KAAzE;AACH;AAED;;;;;;;;;;AAQqB,MAAVZ,UAAU;AACjB,WAAO,KAAKI,cAAZ;AACH;AAED;;;;;;;;;;;;;;AAYOU,oBAAkB,CAACC,EAAD,EAA4CC,GAA5C,EAAqE;AAC1FzB,aAAS,CAACkB,eAAV,CAA0B,KAAKN,4BAA/B;;AAEA,QAAIc,MAAM,CAACC,IAAP,CAAY,KAAKhB,kBAAjB,EAAqCiB,MAArC,KAAgD,CAAhD,IAAqDC,SAAS,KAAK,KAAKC,kBAA5E,EAAgG;AAC5F,YAAMC,OAAO,GAAmB,KAAKC,kBAAL,EAAhC;AAEA,WAAKC,QAAL,CAAcC,aAAd,CAA4BC,UAA5B,CAAuC,QAAvC,EAAiDJ,OAAO,CAACK,MAAzD;AACA,WAAKH,QAAL,CAAcI,cAAd,CAA6BC,mBAA7B,CAAiDP,OAAO,CAACQ,iBAAzD;AAEA,YAAMC,UAAU,GAA4B,KAAKP,QAAjD;AACAO,gBAAU,CAACC,UAAX,CAAsB,KAAK9B,kBAA3B,EAA+C,KAAKmB,kBAApD;AACH;;AAED/B,6BAAyB,CAAC,KAAK2C,sBAAL,CAA4B7C,eAAe,CAAC8C,WAA5C,CAAD,EAA2DnB,EAA3D,EAA+DC,GAA/D,CAAzB;AACH;AAED;;;;;;;;;;;AASOmB,iCAA+B,CAACpB,EAAD,EAAkBC,GAAlB,EAA2C;AAC7E,QAAIC,MAAM,CAACC,IAAP,CAAY,KAAKhB,kBAAjB,EAAqCiB,MAArC,KAAgD,CAAhD,IAAqDC,SAAS,KAAK,KAAKC,kBAA5E,EAAgG;AAC5F,YAAMC,OAAO,GAAmB,KAAKC,kBAAL,EAAhC;AAEA,WAAKC,QAAL,CAAcC,aAAd,CAA4BC,UAA5B,CAAuC,QAAvC,EAAiDJ,OAAO,CAACK,MAAzD;AACA,WAAKH,QAAL,CAAcI,cAAd,CAA6BC,mBAA7B,CAAiDP,OAAO,CAACQ,iBAAzD;AAEA,YAAMC,UAAU,GAA4B,KAAKP,QAAjD;AACAO,gBAAU,CAACC,UAAX,CAAsB,KAAK9B,kBAA3B,EAA+C,KAAKmB,kBAApD;AACH;;AAED/B,6BAAyB,CAAC,KAAK8C,mCAAL,CAAyChD,eAAe,CAACiD,YAAzD,CAAD,EAAyEtB,EAAzE,EAA6EC,GAA7E,CAAzB;AACH;AAED;;;;;;;;;;AAQOsB,gCAA8B,CAACvB,EAAD,EAAkBC,GAAlB,EAA2C;AAC5E1B,6BAAyB,CAAC,KAAKiD,kCAAL,EAAD,EAA4CxB,EAA5C,EAAgDC,GAAhD,CAAzB;AACH;AAED;;;;;;;;;;;;;;AAYOwB,8BAA4B,CAACC,KAAD,EAAiC1B,EAAjC,EAAkDC,GAAlD,EAA2E;AAC1GzB,aAAS,CAACmD,WAAV,CAAsBD,KAAtB,EAA6B,OAA7B;;AAEA,QAAI,CAAC,CAACzB,GAAN,EAAW;AACPA,SAAG,CAAC,sBAAD,CAAH;AACH;AACJ;AAED;;;;;;;;;;;;AAUO2B,6BAA2B,CAAC5B,EAAD,EAAkBC,GAAlB,EAA2C;AACzE,QAAI,CAAC,CAACD,EAAN,EAAU;AACNA,QAAE;AACL;AACJ;AAED;;;;;;;;;;AAQO6B,WAAS,CAACC,YAAD,EAAuBC,QAAvB,EAAwC;AACpDvD,aAAS,CAACkB,eAAV,CAA0B,KAAKN,4BAA/B;AACAZ,aAAS,CAACc,uBAAV,CAAkCyC,QAAlC,EAA4C,UAA5C;AACAvD,aAAS,CAACc,uBAAV,CAAkCwC,YAAlC,EAAgD,cAAhD;AAEA,SAAK5C,gBAAL,CAAsB8C,IAAtB,CAA2B,CAACD,QAAD,EAAWD,YAAX,CAA3B;AACH;AAED;;;;;;;;;;;;;AAWOG,4BAA0B,CAACF,QAAD,EAAmBL,KAAnB,EAAsDQ,UAAtD,EAAyE;AACtG1D,aAAS,CAACkB,eAAV,CAA0B,KAAKN,4BAA/B;AACAZ,aAAS,CAACc,uBAAV,CAAkCyC,QAAlC,EAA4C,UAA5C;AACAvD,aAAS,CAACmD,WAAV,CAAsBD,KAAtB,EAA6B,OAA7B;AAEA,UAAMS,SAAS,GAAmCT,KAAlD;AACAlD,aAAS,CAACc,uBAAV,CAAkC6C,SAAS,CAACC,KAA5C,EAAmD,aAAnD;AAEA,SAAKjD,kBAAL,CAAwB4C,QAAxB,IAAoC,IAAI7D,aAAJ,CAAkBiE,SAAlB,EAA6BD,UAA7B,CAApC;AACH;AAED;;;;;;;;;;;;AAUOG,eAAa,CAACX,KAAD,EAAoCK,QAApC,EAAqD;AACrEvD,aAAS,CAACmD,WAAV,CAAsBD,KAAtB,EAA6B,OAA7B;AAEA,UAAMS,SAAS,GAAmCT,KAAlD;AACAlD,aAAS,CAACc,uBAAV,CAAkC6C,SAAS,CAACC,KAA5C,EAAmD,aAAnD;AAEA,SAAK9B,kBAAL,GAA0B,IAAIpC,aAAJ,CAAkBiE,SAAlB,EAA6BJ,QAA7B,CAA1B;AACH;AAED;;;;;;;;AAMOO,OAAK,CAACtC,EAAD,EAAkBuC,OAAlB,EAAmD;AAC3D/D,aAAS,CAACkB,eAAV,CAA0B,KAAKN,4BAA/B;AAEAb,6BAAyB,CAAC,KAAKiE,OAAL,CAAa,IAAb,CAAD,EAAqBxC,EAArB,EAAyBuC,OAAzB,CAAzB;AACH;;AAESE,wBAAsB,CAAC5D,YAAD,EAAkC;AAC9D,WAAO,IAAIP,gBAAJ,CAAqBO,YAArB,EAAmC,KAAKI,UAAxC,CAAP;AACH;;AAESyD,yBAAuB,CAACC,cAAD,EAAkCC,iBAAlC,EAAyE9D,WAAzE,EAAmG+D,gBAAnG,EAAqI;AAClK,UAAMC,SAAS,GAAoBhE,WAAnC;AACA,WAAO,IAAIV,uBAAJ,CAA4BuE,cAA5B,EAA4CC,iBAA5C,EAA+DE,SAA/D,EAA0ED,gBAA1E,EAA4F,IAA5F,CAAP;AACH;;AAEeL,SAAO,CAACO,SAAD,EAAmB;;;;;;;;AACtC,UAAI,KAAK3D,4BAAT,EAAuC;AACnC;AACH;;AAED,UAAI2D,SAAJ,EAAe;AACX,aAAK3D,4BAAL,GAAoC,IAApC;AACA,cAAM4D,OAAMR,OAAN,CAAaS,IAAb,CAAa,IAAb,EAAcF,SAAd,CAAN;AACH;AACJ;AAAA;;AAEOvC,oBAAkB;AACtB,QAAI4B,KAAJ;AACA,QAAIc,MAAJ;AACA,QAAIC,eAAJ;AACA,UAAMC,WAAW,GAAa,EAA9B;;AAEA,QAAI/C,SAAS,KAAK,KAAKC,kBAAvB,EAA2C;AACvC8B,WAAK,GAAG,KAAK9B,kBAAL,CAAwB6B,SAAxB,CAAkCC,KAA1C;AACAc,YAAM,GAAG,KAAK5C,kBAAL,CAAwB6B,SAAxB,CAAkCe,MAA3C;AACAC,qBAAe,GAAG,KAAK7C,kBAAL,CAAwB6B,SAAxB,CAAkCgB,eAApD;AACH,KAVqB,CAYtB;;;AACA,SAAK,MAAMpB,QAAX,IAAuB7B,MAAM,CAACC,IAAP,CAAY,KAAKhB,kBAAjB,CAAvB,EAA6D;AACzD,YAAMkE,aAAa,GAAkB,KAAKlE,kBAAL,CAAwB4C,QAAxB,CAArC,CADyD,CAGzD;;AACA,UAAIK,KAAK,KAAK/B,SAAd,EAAyB;AACrB+B,aAAK,GAAGiB,aAAa,CAAClB,SAAd,CAAwBC,KAAhC;AACH,OAFD,MAEO;AACH,YAAIA,KAAK,KAAKiB,aAAa,CAAClB,SAAd,CAAwBC,KAAtC,EAA6C;AACzC,gBAAM,IAAIkB,KAAJ,CAAU,8CAAV,CAAN;AACH;AACJ;;AAED,UAAIJ,MAAM,KAAK7C,SAAf,EAA0B;AACtB6C,cAAM,GAAGG,aAAa,CAAClB,SAAd,CAAwBe,MAAjC;AACH,OAFD,MAEO;AACH,YAAIA,MAAM,KAAKG,aAAa,CAAClB,SAAd,CAAwBe,MAAvC,EAA+C;AAC3C,gBAAM,IAAII,KAAJ,CAAU,iEAAV,CAAN;AACH;AACJ;;AAED,UAAIH,eAAe,KAAK9C,SAAxB,EAAmC;AAC/B8C,uBAAe,GAAGE,aAAa,CAAClB,SAAd,CAAwBgB,eAA1C;AACH,OAFD,MAEO;AACH,YAAIA,eAAe,KAAKE,aAAa,CAAClB,SAAd,CAAwBgB,eAAhD,EAAiE;AAC7D,gBAAM,IAAIG,KAAJ,CAAU,gDAAV,CAAN;AACH;AACJ;;AAED,YAAMC,OAAO,GAAW,UAAUnB,KAAV,GAAkB,cAAlB,GAAmCL,QAA3D;AACAqB,iBAAW,CAACpB,IAAZ,CAAiBuB,OAAjB;AACH;;AAED,WAAO;AACH3C,YAAM,EAAE;AACJ4C,UAAE,EAAEpB,KADA;AAEJqB,WAAG,EAAGN,eAAe,KAAK9C,SAArB,GAAkC,KAAKhB,cAAL,CAAoBE,WAApB,CAAgCd,UAAU,CAACA,UAAU,CAACiF,2BAAZ,CAA1C,CAAlC,GAAwHP,eAFzH;AAGJQ,gBAAQ,EAAE;AAHN,OADL;AAMH5C,uBAAiB,EAAGV,SAAS,KAAK,KAAKC,kBAApB,GAA0C8C,WAA1C,GAAwD,CAAC,UAAUhB,KAAV,GAAkB,aAAnB;AANxE,KAAP;AAQH;;AApV2C","names":["AddedLmIntent","IntentConnectionFactory","IntentServiceRecognizer","RecognitionMode","RecognizerConfig","marshalPromiseToCallbacks","Contracts","PropertyId","Recognizer","IntentRecognizer","constructor","speechConfig","audioConfig","throwIfNullOrUndefined","configImpl","properties","privAddedIntents","privAddedLmIntents","privDisposedIntentRecognizer","privProperties","throwIfNullOrWhitespace","getProperty","SpeechServiceConnection_RecoLanguage","speechRecognitionLanguage","throwIfDisposed","authorizationToken","SpeechServiceAuthorization_Token","value","setProperty","recognizeOnceAsync","cb","err","Object","keys","length","undefined","privUmbrellaIntent","context","buildSpeechContext","privReco","speechContext","setSection","Intent","dynamicGrammar","addReferenceGrammar","ReferenceGrammars","intentReco","setIntents","recognizeOnceAsyncImpl","Interactive","startContinuousRecognitionAsync","startContinuousRecognitionAsyncImpl","Conversation","stopContinuousRecognitionAsync","stopContinuousRecognitionAsyncImpl","startKeywordRecognitionAsync","model","throwIfNull","stopKeywordRecognitionAsync","addIntent","simplePhrase","intentId","push","addIntentWithLanguageModel","intentName","modelImpl","appId","addAllIntents","close","errorCb","dispose","createRecognizerConfig","createServiceRecognizer","authentication","connectionFactory","recognizerConfig","audioImpl","disposing","_super","call","region","subscriptionKey","refGrammers","addedLmIntent","Error","grammer","id","key","SpeechServiceConnection_Key","provider"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ_2\\educator\\node_modules\\microsoft-cognitiveservices-speech-sdk\\distrib\\es2015\\src\\sdk\\src\\sdk\\IntentRecognizer.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    AddedLmIntent,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    IntentConnectionFactory,\r\n    IntentServiceRecognizer,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n} from \"../common.speech/Exports\";\r\nimport { marshalPromiseToCallbacks } from \"../common/Exports\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    IntentRecognitionCanceledEventArgs,\r\n    IntentRecognitionEventArgs,\r\n    IntentRecognitionResult,\r\n    KeywordRecognitionModel,\r\n    LanguageUnderstandingModel,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SpeechConfig,\r\n} from \"./Exports\";\r\nimport { LanguageUnderstandingModelImpl } from \"./LanguageUnderstandingModel\";\r\nimport { SpeechConfigImpl } from \"./SpeechConfig\";\r\n\r\n/**\r\n * Intent recognizer.\r\n * @class\r\n */\r\nexport class IntentRecognizer extends Recognizer {\r\n    private privDisposedIntentRecognizer: boolean;\r\n    private privAddedIntents: string[][];\r\n    private privAddedLmIntents: { [id: string]: AddedLmIntent; };\r\n    private privUmbrellaIntent: AddedLmIntent;\r\n\r\n    /**\r\n     * Initializes an instance of the IntentRecognizer.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - The set of configuration properties.\r\n     * @param {AudioConfig} audioConfig - An optional audio input config associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\r\n        Contracts.throwIfNullOrUndefined(speechConfig, \"speechConfig\");\r\n        const configImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNullOrUndefined(configImpl, \"speechConfig\");\r\n\r\n        super(audioConfig, configImpl.properties, new IntentConnectionFactory());\r\n        this.privAddedIntents = [];\r\n        this.privAddedLmIntents = {};\r\n\r\n        this.privDisposedIntentRecognizer = false;\r\n        this.privProperties = configImpl.properties;\r\n\r\n        Contracts.throwIfNullOrWhitespace(this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage), PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n    }\r\n\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member IntentRecognizer.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: IntentRecognizer, event: IntentRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member IntentRecognizer.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: IntentRecognizer, event: IntentRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member IntentRecognizer.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: IntentRecognizer, event: IntentRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * Gets the spoken language of recognition.\r\n     * @member IntentRecognizer.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} the spoken language of recognition.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member IntentRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * Note: Please use a token derived from your LanguageUnderstanding subscription key for the Intent recognizer.\r\n     * @member IntentRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - Authorization token.\r\n     */\r\n    public set authorizationToken(value: string) {\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this IntentRecognizer.\r\n     * @member IntentRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their\r\n     *          values defined for this IntentRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Starts intent recognition, and stops after the first utterance is recognized.\r\n     * The task returns the recognition text and intent as result.\r\n     * Note: RecognizeOnceAsync() returns when the first utterance has been recognized,\r\n     *       so it is suitable only for single shot recognition like command or query.\r\n     *       For long-running recognition, use StartContinuousRecognitionAsync() instead.\r\n     * @member IntentRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the recognition has finished with an IntentRecognitionResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public recognizeOnceAsync(cb?: (e: IntentRecognitionResult) => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n\r\n        if (Object.keys(this.privAddedLmIntents).length !== 0 || undefined !== this.privUmbrellaIntent) {\r\n            const context: IIntentContext = this.buildSpeechContext();\r\n\r\n            this.privReco.speechContext.setSection(\"intent\", context.Intent);\r\n            this.privReco.dynamicGrammar.addReferenceGrammar(context.ReferenceGrammars);\r\n\r\n            const intentReco: IntentServiceRecognizer = this.privReco as IntentServiceRecognizer;\r\n            intentReco.setIntents(this.privAddedLmIntents, this.privUmbrellaIntent);\r\n        }\r\n\r\n        marshalPromiseToCallbacks(this.recognizeOnceAsyncImpl(RecognitionMode.Interactive), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition, until stopContinuousRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * @member IntentRecognizer.prototype.startContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        if (Object.keys(this.privAddedLmIntents).length !== 0 || undefined !== this.privUmbrellaIntent) {\r\n            const context: IIntentContext = this.buildSpeechContext();\r\n\r\n            this.privReco.speechContext.setSection(\"intent\", context.Intent);\r\n            this.privReco.dynamicGrammar.addReferenceGrammar(context.ReferenceGrammars);\r\n\r\n            const intentReco: IntentServiceRecognizer = this.privReco as IntentServiceRecognizer;\r\n            intentReco.setIntents(this.privAddedLmIntents, this.privUmbrellaIntent);\r\n        }\r\n\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stops continuous intent recognition.\r\n     * @member IntentRecognizer.prototype.stopContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition with keyword spotting, until stopKeywordRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * Note: Key word spotting functionality is only available on the Speech Devices SDK.\r\n     *       This functionality is currently not included in the SDK itself.\r\n     * @member IntentRecognizer.prototype.startKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param {KeywordRecognitionModel} model - The keyword recognition model that specifies the keyword to be recognized.\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startKeywordRecognitionAsync(model: KeywordRecognitionModel, cb?: () => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        if (!!err) {\r\n            err(\"Not yet implemented.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops continuous speech recognition.\r\n     * Note: Key word spotting functionality is only available on the Speech Devices SDK.\r\n     *       This functionality is currently not included in the SDK itself.\r\n     * @member IntentRecognizer.prototype.stopKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopKeywordRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        if (!!cb) {\r\n            cb();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a phrase that should be recognized as intent.\r\n     * @member IntentRecognizer.prototype.addIntent\r\n     * @function\r\n     * @public\r\n     * @param {string} intentId - A String that represents the identifier of the intent to be recognized.\r\n     * @param {string} phrase - A String that specifies the phrase representing the intent.\r\n     */\r\n    public addIntent(simplePhrase: string, intentId?: string): void {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n        Contracts.throwIfNullOrWhitespace(intentId, \"intentId\");\r\n        Contracts.throwIfNullOrWhitespace(simplePhrase, \"simplePhrase\");\r\n\r\n        this.privAddedIntents.push([intentId, simplePhrase]);\r\n    }\r\n\r\n    /**\r\n     * Adds an intent from Language Understanding service for recognition.\r\n     * @member IntentRecognizer.prototype.addIntentWithLanguageModel\r\n     * @function\r\n     * @public\r\n     * @param {string} intentId - A String that represents the identifier of the intent\r\n     *        to be recognized. Ignored if intentName is empty.\r\n     * @param {string} model - The intent model from Language Understanding service.\r\n     * @param {string} intentName - The intent name defined in the intent model. If it\r\n     *        is empty, all intent names defined in the model will be added.\r\n     */\r\n    public addIntentWithLanguageModel(intentId: string, model: LanguageUnderstandingModel, intentName?: string): void {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n        Contracts.throwIfNullOrWhitespace(intentId, \"intentId\");\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        const modelImpl: LanguageUnderstandingModelImpl = model as LanguageUnderstandingModelImpl;\r\n        Contracts.throwIfNullOrWhitespace(modelImpl.appId, \"model.appId\");\r\n\r\n        this.privAddedLmIntents[intentId] = new AddedLmIntent(modelImpl, intentName);\r\n    }\r\n\r\n    /**\r\n     * @summary Adds all intents from the specified Language Understanding Model.\r\n     * @member IntentRecognizer.prototype.addAllIntents\r\n     * @function\r\n     * @public\r\n     * @function\r\n     * @public\r\n     * @param {LanguageUnderstandingModel} model - The language understanding model containing the intents.\r\n     * @param {string} intentId - A custom id String to be returned in the IntentRecognitionResult's getIntentId() method.\r\n     */\r\n    public addAllIntents(model: LanguageUnderstandingModel, intentId?: string): void {\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        const modelImpl: LanguageUnderstandingModelImpl = model as LanguageUnderstandingModelImpl;\r\n        Contracts.throwIfNullOrWhitespace(modelImpl.appId, \"model.appId\");\r\n\r\n        this.privUmbrellaIntent = new AddedLmIntent(modelImpl, intentId);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member IntentRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.properties);\r\n    }\r\n\r\n    protected createServiceRecognizer(authentication: IAuthentication, connectionFactory: IConnectionFactory, audioConfig: AudioConfig, recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const audioImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new IntentServiceRecognizer(authentication, connectionFactory, audioImpl, recognizerConfig, this);\r\n    }\r\n\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedIntentRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privDisposedIntentRecognizer = true;\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    private buildSpeechContext(): IIntentContext {\r\n        let appId: string;\r\n        let region: string;\r\n        let subscriptionKey: string;\r\n        const refGrammers: string[] = [];\r\n\r\n        if (undefined !== this.privUmbrellaIntent) {\r\n            appId = this.privUmbrellaIntent.modelImpl.appId;\r\n            region = this.privUmbrellaIntent.modelImpl.region;\r\n            subscriptionKey = this.privUmbrellaIntent.modelImpl.subscriptionKey;\r\n        }\r\n\r\n        // Build the reference grammer array.\r\n        for (const intentId of Object.keys(this.privAddedLmIntents)) {\r\n            const addedLmIntent: AddedLmIntent = this.privAddedLmIntents[intentId];\r\n\r\n            // validate all the same model, region, and key...\r\n            if (appId === undefined) {\r\n                appId = addedLmIntent.modelImpl.appId;\r\n            } else {\r\n                if (appId !== addedLmIntent.modelImpl.appId) {\r\n                    throw new Error(\"Intents must all be from the same LUIS model\");\r\n                }\r\n            }\r\n\r\n            if (region === undefined) {\r\n                region = addedLmIntent.modelImpl.region;\r\n            } else {\r\n                if (region !== addedLmIntent.modelImpl.region) {\r\n                    throw new Error(\"Intents must all be from the same LUIS model in a single region\");\r\n                }\r\n            }\r\n\r\n            if (subscriptionKey === undefined) {\r\n                subscriptionKey = addedLmIntent.modelImpl.subscriptionKey;\r\n            } else {\r\n                if (subscriptionKey !== addedLmIntent.modelImpl.subscriptionKey) {\r\n                    throw new Error(\"Intents must all use the same subscription key\");\r\n                }\r\n            }\r\n\r\n            const grammer: string = \"luis/\" + appId + \"-PRODUCTION#\" + intentId;\r\n            refGrammers.push(grammer);\r\n        }\r\n\r\n        return {\r\n            Intent: {\r\n                id: appId,\r\n                key: (subscriptionKey === undefined) ? this.privProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key]) : subscriptionKey,\r\n                provider: \"LUIS\",\r\n            },\r\n            ReferenceGrammars: (undefined === this.privUmbrellaIntent) ? refGrammers : [\"luis/\" + appId + \"-PRODUCTION\"],\r\n        };\r\n    }\r\n}\r\n\r\ninterface IIntentContext {\r\n    Intent: {\r\n        id: string,\r\n        key: string,\r\n        provider: string,\r\n    };\r\n    ReferenceGrammars: string[];\r\n}\r\n"]},"metadata":{},"sourceType":"module"}