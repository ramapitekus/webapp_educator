{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat\";\nimport { AudioOutputStream } from \"../sdk/Audio/AudioOutputStream\";\nimport { MessageDataStreamType } from \"./ServiceMessages/ActivityResponsePayload\";\nexport class DialogServiceTurnState {\n  constructor(manager, requestId) {\n    this.privRequestId = requestId;\n    this.privIsCompleted = false;\n    this.privAudioStream = null;\n    this.privTurnManager = manager;\n    this.resetTurnEndTimeout(); // tslint:disable-next-line:no-console\n    // console.info(\"DialogServiceTurnState debugturn start:\" + this.privRequestId);\n  }\n\n  get audioStream() {\n    // Called when is needed to stream.\n    this.resetTurnEndTimeout();\n    return this.privAudioStream;\n  }\n\n  processActivityPayload(payload, audioFormat) {\n    if (payload.messageDataStreamType === MessageDataStreamType.TextToSpeechAudio) {\n      this.privAudioStream = AudioOutputStream.createPullStream();\n      this.privAudioStream.format = audioFormat !== undefined ? audioFormat : AudioOutputFormatImpl.getDefaultOutputFormat(); // tslint:disable-next-line:no-console\n      // console.info(\"Audio start debugturn:\" + this.privRequestId);\n    }\n\n    return this.privAudioStream;\n  }\n\n  endAudioStream() {\n    if (this.privAudioStream !== null && !this.privAudioStream.isClosed) {\n      this.privAudioStream.close();\n    }\n  }\n\n  complete() {\n    if (this.privTimeoutToken !== undefined) {\n      clearTimeout(this.privTimeoutToken);\n    }\n\n    this.endAudioStream();\n  }\n\n  resetTurnEndTimeout() {\n    if (this.privTimeoutToken !== undefined) {\n      clearTimeout(this.privTimeoutToken);\n    } // tslint:disable-next-line:no-console\n    // console.info(\"Timeout reset debugturn:\" + this.privRequestId);\n\n\n    this.privTimeoutToken = setTimeout(() => {\n      // tslint:disable-next-line:no-console\n      // console.info(\"Timeout complete debugturn:\" + this.privRequestId);\n      this.privTurnManager.CompleteTurn(this.privRequestId);\n      return;\n    }, 2000);\n  }\n\n}","map":{"version":3,"mappings":"AAAA;AACA;AAEA,SAASA,qBAAT,QAAsC,gCAAtC;AACA,SAASC,iBAAT,QAA6D,gCAA7D;AAEA,SAAkCC,qBAAlC,QAA+D,2CAA/D;AAEA,OAAM,MAAOC,sBAAP,CAA6B;AAO/BC,cAAYC,OAAZ,EAAoDC,SAApD,EAAqE;AACjE,SAAKC,aAAL,GAAqBD,SAArB;AACA,SAAKE,eAAL,GAAuB,KAAvB;AACA,SAAKC,eAAL,GAAuB,IAAvB;AACA,SAAKC,eAAL,GAAuBL,OAAvB;AACA,SAAKM,mBAAL,GALiE,CAMjE;AACA;AACH;;AAEqB,MAAXC,WAAW;AAClB;AACA,SAAKD,mBAAL;AACA,WAAO,KAAKF,eAAZ;AACH;;AAEMI,wBAAsB,CAACC,OAAD,EAAmCC,WAAnC,EAAsE;AAC/F,QAAID,OAAO,CAACE,qBAAR,KAAkCd,qBAAqB,CAACe,iBAA5D,EAA+E;AAC3E,WAAKR,eAAL,GAAuBR,iBAAiB,CAACiB,gBAAlB,EAAvB;AACA,WAAKT,eAAL,CAAqBU,MAArB,GAA+BJ,WAAW,KAAKK,SAAjB,GAA8BL,WAA9B,GAA4Cf,qBAAqB,CAACqB,sBAAtB,EAA1E,CAF2E,CAG3E;AACA;AACH;;AACD,WAAO,KAAKZ,eAAZ;AACH;;AAEMa,gBAAc;AACjB,QAAI,KAAKb,eAAL,KAAyB,IAAzB,IAAiC,CAAC,KAAKA,eAAL,CAAqBc,QAA3D,EAAqE;AACjE,WAAKd,eAAL,CAAqBe,KAArB;AACH;AACJ;;AAEMC,UAAQ;AACX,QAAI,KAAKC,gBAAL,KAA0BN,SAA9B,EAAyC;AACrCO,kBAAY,CAAC,KAAKD,gBAAN,CAAZ;AACH;;AACD,SAAKJ,cAAL;AACH;;AAEOX,qBAAmB;AACvB,QAAI,KAAKe,gBAAL,KAA0BN,SAA9B,EAAyC;AACrCO,kBAAY,CAAC,KAAKD,gBAAN,CAAZ;AACH,KAHsB,CAIvB;AACA;;;AAEA,SAAKA,gBAAL,GAAwBE,UAAU,CAAC,MAAW;AAC1C;AACA;AAEA,WAAKlB,eAAL,CAAqBmB,YAArB,CAAkC,KAAKtB,aAAvC;AACA;AACH,KANiC,EAM/B,IAN+B,CAAlC;AAOH;;AA5D8B","names":["AudioOutputFormatImpl","AudioOutputStream","MessageDataStreamType","DialogServiceTurnState","constructor","manager","requestId","privRequestId","privIsCompleted","privAudioStream","privTurnManager","resetTurnEndTimeout","audioStream","processActivityPayload","payload","audioFormat","messageDataStreamType","TextToSpeechAudio","createPullStream","format","undefined","getDefaultOutputFormat","endAudioStream","isClosed","close","complete","privTimeoutToken","clearTimeout","setTimeout","CompleteTurn"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ_2\\educator\\node_modules\\microsoft-cognitiveservices-speech-sdk\\distrib\\es2015\\src\\common.speech\\src\\common.speech\\DialogServiceTurnState.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat\";\r\nimport { AudioOutputStream, PullAudioOutputStreamImpl } from \"../sdk/Audio/AudioOutputStream\";\r\nimport { DialogServiceTurnStateManager } from \"./DialogServiceTurnStateManager\";\r\nimport { ActivityPayloadResponse, MessageDataStreamType } from \"./ServiceMessages/ActivityResponsePayload\";\r\n\r\nexport class DialogServiceTurnState {\r\n    private privRequestId: string;\r\n    private privIsCompleted: boolean;\r\n    private privAudioStream: PullAudioOutputStreamImpl;\r\n    private privTimeoutToken: any;\r\n    private privTurnManager: DialogServiceTurnStateManager;\r\n\r\n    constructor(manager: DialogServiceTurnStateManager, requestId: string) {\r\n        this.privRequestId = requestId;\r\n        this.privIsCompleted = false;\r\n        this.privAudioStream = null;\r\n        this.privTurnManager = manager;\r\n        this.resetTurnEndTimeout();\r\n        // tslint:disable-next-line:no-console\r\n        // console.info(\"DialogServiceTurnState debugturn start:\" + this.privRequestId);\r\n    }\r\n\r\n    public get audioStream(): PullAudioOutputStreamImpl {\r\n        // Called when is needed to stream.\r\n        this.resetTurnEndTimeout();\r\n        return this.privAudioStream;\r\n    }\r\n\r\n    public processActivityPayload(payload: ActivityPayloadResponse, audioFormat?: AudioOutputFormatImpl): PullAudioOutputStreamImpl {\r\n        if (payload.messageDataStreamType === MessageDataStreamType.TextToSpeechAudio) {\r\n            this.privAudioStream = AudioOutputStream.createPullStream() as PullAudioOutputStreamImpl;\r\n            this.privAudioStream.format = (audioFormat !== undefined) ? audioFormat : AudioOutputFormatImpl.getDefaultOutputFormat();\r\n            // tslint:disable-next-line:no-console\r\n            // console.info(\"Audio start debugturn:\" + this.privRequestId);\r\n        }\r\n        return this.privAudioStream;\r\n    }\r\n\r\n    public endAudioStream(): void {\r\n        if (this.privAudioStream !== null && !this.privAudioStream.isClosed) {\r\n            this.privAudioStream.close();\r\n        }\r\n    }\r\n\r\n    public complete(): void {\r\n        if (this.privTimeoutToken !== undefined) {\r\n            clearTimeout(this.privTimeoutToken);\r\n        }\r\n        this.endAudioStream();\r\n    }\r\n\r\n    private resetTurnEndTimeout(): void {\r\n        if (this.privTimeoutToken !== undefined) {\r\n            clearTimeout(this.privTimeoutToken);\r\n        }\r\n        // tslint:disable-next-line:no-console\r\n        // console.info(\"Timeout reset debugturn:\" + this.privRequestId);\r\n\r\n        this.privTimeoutToken = setTimeout((): void => {\r\n            // tslint:disable-next-line:no-console\r\n            // console.info(\"Timeout complete debugturn:\" + this.privRequestId);\r\n\r\n            this.privTurnManager.CompleteTurn(this.privRequestId);\r\n            return;\r\n        }, 2000);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}