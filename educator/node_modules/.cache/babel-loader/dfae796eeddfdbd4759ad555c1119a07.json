{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { Stream } from \"./Exports\";\nexport class ChunkedArrayBufferStream extends Stream {\n  constructor(targetChunkSize, streamId) {\n    super(streamId);\n    this.privTargetChunkSize = targetChunkSize;\n    this.privNextBufferReadyBytes = 0;\n  }\n\n  writeStreamChunk(chunk) {\n    // No pending write, and the buffer is the right size so write it.\n    if (chunk.isEnd || 0 === this.privNextBufferReadyBytes && chunk.buffer.byteLength === this.privTargetChunkSize) {\n      super.writeStreamChunk(chunk);\n      return;\n    }\n\n    let bytesCopiedFromBuffer = 0;\n\n    while (bytesCopiedFromBuffer < chunk.buffer.byteLength) {\n      // Fill the next buffer.\n      if (undefined === this.privNextBufferToWrite) {\n        this.privNextBufferToWrite = new ArrayBuffer(this.privTargetChunkSize);\n        this.privNextBufferStartTime = chunk.timeReceived;\n      } // Find out how many bytes we can copy into the read buffer.\n\n\n      const bytesToCopy = Math.min(chunk.buffer.byteLength - bytesCopiedFromBuffer, this.privTargetChunkSize - this.privNextBufferReadyBytes);\n      const targetView = new Uint8Array(this.privNextBufferToWrite);\n      const sourceView = new Uint8Array(chunk.buffer.slice(bytesCopiedFromBuffer, bytesToCopy + bytesCopiedFromBuffer));\n      targetView.set(sourceView, this.privNextBufferReadyBytes);\n      this.privNextBufferReadyBytes += bytesToCopy;\n      bytesCopiedFromBuffer += bytesToCopy; // Are we ready to write?\n\n      if (this.privNextBufferReadyBytes === this.privTargetChunkSize) {\n        super.writeStreamChunk({\n          buffer: this.privNextBufferToWrite,\n          isEnd: false,\n          timeReceived: this.privNextBufferStartTime\n        });\n        this.privNextBufferReadyBytes = 0;\n        this.privNextBufferToWrite = undefined;\n      }\n    }\n  }\n\n  close() {\n    // Send whatever is pending, then close the base class.\n    if (0 !== this.privNextBufferReadyBytes && !this.isClosed) {\n      super.writeStreamChunk({\n        buffer: this.privNextBufferToWrite.slice(0, this.privNextBufferReadyBytes),\n        isEnd: false,\n        timeReceived: this.privNextBufferStartTime\n      });\n    }\n\n    super.close();\n  }\n\n}","map":{"version":3,"mappings":"AAAA;AACA;AAEA,SAAuBA,MAAvB,QAAqC,WAArC;AAEA,OAAM,MAAOC,wBAAP,SAAwCD,MAAxC,CAA2D;AAM7DE,cAAYC,eAAZ,EAAqCC,QAArC,EAAsD;AAClD,UAAMA,QAAN;AACA,SAAKC,mBAAL,GAA2BF,eAA3B;AACA,SAAKG,wBAAL,GAAgC,CAAhC;AACH;;AAEMC,kBAAgB,CAACC,KAAD,EAAiC;AACpD;AACA,QAAIA,KAAK,CAACC,KAAN,IACC,MAAM,KAAKH,wBAAX,IAAuCE,KAAK,CAACE,MAAN,CAAaC,UAAb,KAA4B,KAAKN,mBAD7E,EACmG;AAC/F,YAAME,gBAAN,CAAuBC,KAAvB;AACA;AACH;;AAED,QAAII,qBAAqB,GAAW,CAApC;;AAEA,WAAOA,qBAAqB,GAAGJ,KAAK,CAACE,MAAN,CAAaC,UAA5C,EAAwD;AACpD;AACA,UAAIE,SAAS,KAAK,KAAKC,qBAAvB,EAA8C;AAC1C,aAAKA,qBAAL,GAA6B,IAAIC,WAAJ,CAAgB,KAAKV,mBAArB,CAA7B;AACA,aAAKW,uBAAL,GAA+BR,KAAK,CAACS,YAArC;AACH,OALmD,CAOpD;;;AACA,YAAMC,WAAW,GAAWC,IAAI,CAACC,GAAL,CAASZ,KAAK,CAACE,MAAN,CAAaC,UAAb,GAA0BC,qBAAnC,EAA0D,KAAKP,mBAAL,GAA2B,KAAKC,wBAA1F,CAA5B;AACA,YAAMe,UAAU,GAAe,IAAIC,UAAJ,CAAe,KAAKR,qBAApB,CAA/B;AACA,YAAMS,UAAU,GAAe,IAAID,UAAJ,CAAed,KAAK,CAACE,MAAN,CAAac,KAAb,CAAmBZ,qBAAnB,EAA0CM,WAAW,GAAGN,qBAAxD,CAAf,CAA/B;AAEAS,gBAAU,CAACI,GAAX,CAAeF,UAAf,EAA2B,KAAKjB,wBAAhC;AACA,WAAKA,wBAAL,IAAiCY,WAAjC;AACAN,2BAAqB,IAAIM,WAAzB,CAdoD,CAgBpD;;AACA,UAAI,KAAKZ,wBAAL,KAAkC,KAAKD,mBAA3C,EAAgE;AAC5D,cAAME,gBAAN,CAAuB;AACnBG,gBAAM,EAAE,KAAKI,qBADM;AAEnBL,eAAK,EAAE,KAFY;AAGnBQ,sBAAY,EAAE,KAAKD;AAHA,SAAvB;AAKA,aAAKV,wBAAL,GAAgC,CAAhC;AACA,aAAKQ,qBAAL,GAA6BD,SAA7B;AACH;AACJ;AACJ;;AAEMa,OAAK;AACR;AACA,QAAI,MAAM,KAAKpB,wBAAX,IAAuC,CAAC,KAAKqB,QAAjD,EAA2D;AACvD,YAAMpB,gBAAN,CAAuB;AACnBG,cAAM,EAAE,KAAKI,qBAAL,CAA2BU,KAA3B,CAAiC,CAAjC,EAAoC,KAAKlB,wBAAzC,CADW;AAEnBG,aAAK,EAAE,KAFY;AAGnBQ,oBAAY,EAAE,KAAKD;AAHA,OAAvB;AAKH;;AAED,UAAMU,KAAN;AACH;;AA9D4D","names":["Stream","ChunkedArrayBufferStream","constructor","targetChunkSize","streamId","privTargetChunkSize","privNextBufferReadyBytes","writeStreamChunk","chunk","isEnd","buffer","byteLength","bytesCopiedFromBuffer","undefined","privNextBufferToWrite","ArrayBuffer","privNextBufferStartTime","timeReceived","bytesToCopy","Math","min","targetView","Uint8Array","sourceView","slice","set","close","isClosed"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ_2\\educator\\node_modules\\microsoft-cognitiveservices-speech-sdk\\distrib\\es2015\\src\\common\\src\\common\\ChunkedArrayBufferStream.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IStreamChunk, Stream } from \"./Exports\";\r\n\r\nexport class ChunkedArrayBufferStream extends Stream<ArrayBuffer> {\r\n    private privTargetChunkSize: number;\r\n    private privNextBufferToWrite: ArrayBuffer;\r\n    private privNextBufferStartTime: number;\r\n    private privNextBufferReadyBytes: number;\r\n\r\n    constructor(targetChunkSize: number, streamId?: string) {\r\n        super(streamId);\r\n        this.privTargetChunkSize = targetChunkSize;\r\n        this.privNextBufferReadyBytes = 0;\r\n    }\r\n\r\n    public writeStreamChunk(chunk: IStreamChunk<ArrayBuffer>): void {\r\n        // No pending write, and the buffer is the right size so write it.\r\n        if (chunk.isEnd ||\r\n            (0 === this.privNextBufferReadyBytes && chunk.buffer.byteLength === this.privTargetChunkSize)) {\r\n            super.writeStreamChunk(chunk);\r\n            return;\r\n        }\r\n\r\n        let bytesCopiedFromBuffer: number = 0;\r\n\r\n        while (bytesCopiedFromBuffer < chunk.buffer.byteLength) {\r\n            // Fill the next buffer.\r\n            if (undefined === this.privNextBufferToWrite) {\r\n                this.privNextBufferToWrite = new ArrayBuffer(this.privTargetChunkSize);\r\n                this.privNextBufferStartTime = chunk.timeReceived;\r\n            }\r\n\r\n            // Find out how many bytes we can copy into the read buffer.\r\n            const bytesToCopy: number = Math.min(chunk.buffer.byteLength - bytesCopiedFromBuffer, this.privTargetChunkSize - this.privNextBufferReadyBytes);\r\n            const targetView: Uint8Array = new Uint8Array(this.privNextBufferToWrite);\r\n            const sourceView: Uint8Array = new Uint8Array(chunk.buffer.slice(bytesCopiedFromBuffer, bytesToCopy + bytesCopiedFromBuffer));\r\n\r\n            targetView.set(sourceView, this.privNextBufferReadyBytes);\r\n            this.privNextBufferReadyBytes += bytesToCopy;\r\n            bytesCopiedFromBuffer += bytesToCopy;\r\n\r\n            // Are we ready to write?\r\n            if (this.privNextBufferReadyBytes === this.privTargetChunkSize) {\r\n                super.writeStreamChunk({\r\n                    buffer: this.privNextBufferToWrite,\r\n                    isEnd: false,\r\n                    timeReceived: this.privNextBufferStartTime,\r\n                });\r\n                this.privNextBufferReadyBytes = 0;\r\n                this.privNextBufferToWrite = undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    public close(): void {\r\n        // Send whatever is pending, then close the base class.\r\n        if (0 !== this.privNextBufferReadyBytes && !this.isClosed) {\r\n            super.writeStreamChunk({\r\n                buffer: this.privNextBufferToWrite.slice(0, this.privNextBufferReadyBytes),\r\n                isEnd: false,\r\n                timeReceived: this.privNextBufferStartTime,\r\n            });\r\n        }\r\n\r\n        super.close();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}