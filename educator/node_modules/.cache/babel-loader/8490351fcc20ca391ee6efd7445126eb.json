{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nexport class RiffPcmEncoder {\n  constructor(actualSampleRate, desiredSampleRate) {\n    this.encode = actualAudioFrame => {\n      const audioFrame = this.downSampleAudioFrame(actualAudioFrame, this.privActualSampleRate, this.privDesiredSampleRate);\n\n      if (!audioFrame) {\n        return null;\n      }\n\n      const audioLength = audioFrame.length * 2;\n      const buffer = new ArrayBuffer(audioLength);\n      const view = new DataView(buffer);\n      this.floatTo16BitPCM(view, 0, audioFrame);\n      return buffer;\n    };\n\n    this.setString = (view, offset, str) => {\n      for (let i = 0; i < str.length; i++) {\n        view.setUint8(offset + i, str.charCodeAt(i));\n      }\n    };\n\n    this.floatTo16BitPCM = (view, offset, input) => {\n      for (let i = 0; i < input.length; i++, offset += 2) {\n        const s = Math.max(-1, Math.min(1, input[i]));\n        view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\n      }\n    };\n\n    this.downSampleAudioFrame = (srcFrame, srcRate, dstRate) => {\n      if (!srcFrame) {\n        return null;\n      }\n\n      if (dstRate === srcRate || dstRate > srcRate) {\n        return srcFrame;\n      }\n\n      const ratio = srcRate / dstRate;\n      const dstLength = Math.round(srcFrame.length / ratio);\n      const dstFrame = new Float32Array(dstLength);\n      let srcOffset = 0;\n      let dstOffset = 0;\n\n      while (dstOffset < dstLength) {\n        const nextSrcOffset = Math.round((dstOffset + 1) * ratio);\n        let accum = 0;\n        let count = 0;\n\n        while (srcOffset < nextSrcOffset && srcOffset < srcFrame.length) {\n          accum += srcFrame[srcOffset++];\n          count++;\n        }\n\n        dstFrame[dstOffset++] = accum / count;\n      }\n\n      return dstFrame;\n    };\n\n    this.privActualSampleRate = actualSampleRate;\n    this.privDesiredSampleRate = desiredSampleRate;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["RiffPcmEncoder","constructor","actualSampleRate","desiredSampleRate","actualAudioFrame","audioFrame","downSampleAudioFrame","privActualSampleRate","privDesiredSampleRate","audioLength","length","buffer","ArrayBuffer","view","DataView","floatTo16BitPCM","offset","str","i","setUint8","charCodeAt","input","s","Math","max","min","setInt16","srcFrame","srcRate","dstRate","ratio","dstLength","round","dstFrame","Float32Array","srcOffset","dstOffset","nextSrcOffset","accum","count"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\node_modules\\microsoft-cognitiveservices-speech-sdk\\distrib\\es2015\\src\\common\\src\\common\\RiffPcmEncoder.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport class RiffPcmEncoder {\r\n\r\n    private privActualSampleRate: number;\r\n    private privDesiredSampleRate: number;\r\n\r\n    public constructor(actualSampleRate: number, desiredSampleRate: number) {\r\n        this.privActualSampleRate = actualSampleRate;\r\n        this.privDesiredSampleRate = desiredSampleRate;\r\n    }\r\n\r\n    public encode = (\r\n        actualAudioFrame: Float32Array): ArrayBuffer => {\r\n\r\n        const audioFrame = this.downSampleAudioFrame(actualAudioFrame, this.privActualSampleRate, this.privDesiredSampleRate);\r\n\r\n        if (!audioFrame) {\r\n            return null;\r\n        }\r\n\r\n        const audioLength = audioFrame.length * 2;\r\n\r\n        const buffer = new ArrayBuffer(audioLength);\r\n        const view = new DataView(buffer);\r\n        this.floatTo16BitPCM(view, 0, audioFrame);\r\n\r\n        return buffer;\r\n    }\r\n\r\n    private setString = (view: DataView, offset: number, str: string): void => {\r\n        for (let i = 0; i < str.length; i++) {\r\n            view.setUint8(offset + i, str.charCodeAt(i));\r\n        }\r\n    }\r\n\r\n    private floatTo16BitPCM = (view: DataView, offset: number, input: Float32Array): void => {\r\n        for (let i = 0; i < input.length; i++ , offset += 2) {\r\n            const s = Math.max(-1, Math.min(1, input[i]));\r\n            view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\r\n        }\r\n    }\r\n\r\n    private downSampleAudioFrame = (\r\n        srcFrame: Float32Array,\r\n        srcRate: number,\r\n        dstRate: number): Float32Array => {\r\n\r\n        if (!srcFrame) {\r\n            return null;\r\n        }\r\n\r\n        if (dstRate === srcRate || dstRate > srcRate) {\r\n            return srcFrame;\r\n        }\r\n\r\n        const ratio = srcRate / dstRate;\r\n        const dstLength = Math.round(srcFrame.length / ratio);\r\n        const dstFrame = new Float32Array(dstLength);\r\n        let srcOffset = 0;\r\n        let dstOffset = 0;\r\n        while (dstOffset < dstLength) {\r\n            const nextSrcOffset = Math.round((dstOffset + 1) * ratio);\r\n            let accum = 0;\r\n            let count = 0;\r\n            while (srcOffset < nextSrcOffset && srcOffset < srcFrame.length) {\r\n                accum += srcFrame[srcOffset++];\r\n                count++;\r\n            }\r\n            dstFrame[dstOffset++] = accum / count;\r\n        }\r\n\r\n        return dstFrame;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}