{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { Contracts } from \"./Contracts\";\nimport { DialogServiceConfig, DialogServiceConfigImpl } from \"./DialogServiceConfig\";\nimport { PropertyId } from \"./Exports\";\n/**\r\n * Class that defines configurations for the dialog service connector object for using a CustomCommands backend.\r\n * @class CustomCommandsConfig\r\n */\n\nexport class CustomCommandsConfig extends DialogServiceConfigImpl {\n  /**\r\n   * Creates an instance of CustomCommandsConfig.\r\n   */\n  constructor() {\n    super();\n  }\n  /**\r\n   * Creates an instance of the bot framework config with the specified subscription and region.\r\n   * @member CustomCommandsConfig.fromSubscription\r\n   * @function\r\n   * @public\r\n   * @param applicationId Speech Commands application id.\r\n   * @param subscription Subscription key associated with the bot\r\n   * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n   * @returns {CustomCommandsConfig} A new bot framework config.\r\n   */\n\n\n  static fromSubscription(applicationId, subscription, region) {\n    Contracts.throwIfNullOrWhitespace(applicationId, \"applicationId\");\n    Contracts.throwIfNullOrWhitespace(subscription, \"subscription\");\n    Contracts.throwIfNullOrWhitespace(region, \"region\");\n    const customCommandsConfig = new DialogServiceConfigImpl();\n    customCommandsConfig.setProperty(PropertyId.Conversation_DialogType, DialogServiceConfig.DialogTypes.CustomCommands);\n    customCommandsConfig.setProperty(PropertyId.Conversation_ApplicationId, applicationId);\n    customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscription);\n    customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\n    return customCommandsConfig;\n  }\n  /**\r\n   * Creates an instance of the bot framework config with the specified Speech Commands application id, authorization token and region.\r\n   * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n   * expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n   * As configuration values are copied when creating a new recognizer, the new token value will not apply to recognizers that have already been created.\r\n   * For recognizers that have been created before, you need to set authorization token of the corresponding recognizer\r\n   * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\r\n   * @member CustomCommandsConfig.fromAuthorizationToken\r\n   * @function\r\n   * @public\r\n   * @param applicationId Speech Commands application id.\r\n   * @param authorizationToken The authorization token associated with the application.\r\n   * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n   * @returns {CustomCommandsConfig} A new speech commands config.\r\n   */\n\n\n  static fromAuthorizationToken(applicationId, authorizationToken, region) {\n    Contracts.throwIfNullOrWhitespace(applicationId, \"applicationId\");\n    Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\n    Contracts.throwIfNullOrWhitespace(region, \"region\");\n    const customCommandsConfig = new DialogServiceConfigImpl();\n    customCommandsConfig.setProperty(PropertyId.Conversation_DialogType, DialogServiceConfig.DialogTypes.CustomCommands);\n    customCommandsConfig.setProperty(PropertyId.Conversation_ApplicationId, applicationId);\n    customCommandsConfig.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\n    customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\n    return customCommandsConfig;\n  }\n  /**\r\n   * Sets the corresponding backend application identifier.\r\n   * @member CustomCommandsConfig.prototype.Conversation_ApplicationId\r\n   * @function\r\n   * @public\r\n   * @param {string} value - The application identifier to set.\r\n   */\n\n\n  set applicationId(value) {\n    Contracts.throwIfNullOrWhitespace(value, \"value\");\n    this.setProperty(PropertyId.Conversation_ApplicationId, value);\n  }\n  /**\r\n   * Gets the corresponding backend application identifier.\r\n   * @member CustomCommandsConfig.prototype.Conversation_ApplicationId\r\n   * @function\r\n   * @public\r\n   * @param {string} value - The application identifier to get.\r\n   */\n\n\n  get applicationId() {\n    return this.getProperty(PropertyId.Conversation_ApplicationId);\n  }\n\n}","map":{"version":3,"mappings":"AAAA;AACA;AAEA,SAASA,SAAT,QAA0B,aAA1B;AACA,SAASC,mBAAT,EAA8BC,uBAA9B,QAA6D,uBAA7D;AACA,SAASC,UAAT,QAA2B,WAA3B;AAEA;;;;;AAIA,OAAM,MAAOC,oBAAP,SAAoCF,uBAApC,CAA2D;AAE7D;;;AAGAG;AACI;AACH;AAED;;;;;;;;;;;;AAU8B,SAAhBC,gBAAgB,CAACC,aAAD,EAAwBC,YAAxB,EAA8CC,MAA9C,EAA4D;AACtFT,aAAS,CAACU,uBAAV,CAAkCH,aAAlC,EAAiD,eAAjD;AACAP,aAAS,CAACU,uBAAV,CAAkCF,YAAlC,EAAgD,cAAhD;AACAR,aAAS,CAACU,uBAAV,CAAkCD,MAAlC,EAA0C,QAA1C;AAEA,UAAME,oBAAoB,GAAyB,IAAIT,uBAAJ,EAAnD;AACAS,wBAAoB,CAACC,WAArB,CAAiCT,UAAU,CAACU,uBAA5C,EAAqEZ,mBAAmB,CAACa,WAApB,CAAgCC,cAArG;AACAJ,wBAAoB,CAACC,WAArB,CAAiCT,UAAU,CAACa,0BAA5C,EAAwET,aAAxE;AACAI,wBAAoB,CAACC,WAArB,CAAiCT,UAAU,CAACc,2BAA5C,EAAyET,YAAzE;AACAG,wBAAoB,CAACC,WAArB,CAAiCT,UAAU,CAACe,8BAA5C,EAA4ET,MAA5E;AACA,WAAOE,oBAAP;AACH;AAED;;;;;;;;;;;;;;;;;AAeoC,SAAtBQ,sBAAsB,CAACZ,aAAD,EAAwBa,kBAAxB,EAAoDX,MAApD,EAAkE;AAClGT,aAAS,CAACU,uBAAV,CAAkCH,aAAlC,EAAiD,eAAjD;AACAP,aAAS,CAACU,uBAAV,CAAkCU,kBAAlC,EAAsD,oBAAtD;AACApB,aAAS,CAACU,uBAAV,CAAkCD,MAAlC,EAA0C,QAA1C;AAEA,UAAME,oBAAoB,GAAyB,IAAIT,uBAAJ,EAAnD;AACAS,wBAAoB,CAACC,WAArB,CAAiCT,UAAU,CAACU,uBAA5C,EAAqEZ,mBAAmB,CAACa,WAApB,CAAgCC,cAArG;AACAJ,wBAAoB,CAACC,WAArB,CAAiCT,UAAU,CAACa,0BAA5C,EAAwET,aAAxE;AACAI,wBAAoB,CAACC,WAArB,CAAiCT,UAAU,CAACkB,gCAA5C,EAA8ED,kBAA9E;AACAT,wBAAoB,CAACC,WAArB,CAAiCT,UAAU,CAACe,8BAA5C,EAA4ET,MAA5E;AACA,WAAOE,oBAAP;AACH;AAED;;;;;;;;;AAOwB,MAAbJ,aAAa,CAACe,KAAD,EAAc;AAClCtB,aAAS,CAACU,uBAAV,CAAkCY,KAAlC,EAAyC,OAAzC;AACA,SAAKV,WAAL,CAAiBT,UAAU,CAACa,0BAA5B,EAAwDM,KAAxD;AACH;AAED;;;;;;;;;AAOwB,MAAbf,aAAa;AACpB,WAAO,KAAKgB,WAAL,CAAiBpB,UAAU,CAACa,0BAA5B,CAAP;AACH;;AAjF4D","names":["Contracts","DialogServiceConfig","DialogServiceConfigImpl","PropertyId","CustomCommandsConfig","constructor","fromSubscription","applicationId","subscription","region","throwIfNullOrWhitespace","customCommandsConfig","setProperty","Conversation_DialogType","DialogTypes","CustomCommands","Conversation_ApplicationId","SpeechServiceConnection_Key","SpeechServiceConnection_Region","fromAuthorizationToken","authorizationToken","SpeechServiceAuthorization_Token","value","getProperty"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\node_modules\\microsoft-cognitiveservices-speech-sdk\\distrib\\es2015\\src\\sdk\\src\\sdk\\CustomCommandsConfig.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts\";\r\nimport { DialogServiceConfig, DialogServiceConfigImpl } from \"./DialogServiceConfig\";\r\nimport { PropertyId } from \"./Exports\";\r\n\r\n/**\r\n * Class that defines configurations for the dialog service connector object for using a CustomCommands backend.\r\n * @class CustomCommandsConfig\r\n */\r\nexport class CustomCommandsConfig extends DialogServiceConfigImpl {\r\n\r\n    /**\r\n     * Creates an instance of CustomCommandsConfig.\r\n     */\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the bot framework config with the specified subscription and region.\r\n     * @member CustomCommandsConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param applicationId Speech Commands application id.\r\n     * @param subscription Subscription key associated with the bot\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {CustomCommandsConfig} A new bot framework config.\r\n     */\r\n    public static fromSubscription(applicationId: string, subscription: string, region: string): CustomCommandsConfig {\r\n        Contracts.throwIfNullOrWhitespace(applicationId, \"applicationId\");\r\n        Contracts.throwIfNullOrWhitespace(subscription, \"subscription\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const customCommandsConfig: CustomCommandsConfig = new DialogServiceConfigImpl();\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_DialogType, DialogServiceConfig.DialogTypes.CustomCommands);\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_ApplicationId, applicationId);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscription);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return customCommandsConfig;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the bot framework config with the specified Speech Commands application id, authorization token and region.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n     * As configuration values are copied when creating a new recognizer, the new token value will not apply to recognizers that have already been created.\r\n     * For recognizers that have been created before, you need to set authorization token of the corresponding recognizer\r\n     * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\r\n     * @member CustomCommandsConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param applicationId Speech Commands application id.\r\n     * @param authorizationToken The authorization token associated with the application.\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {CustomCommandsConfig} A new speech commands config.\r\n     */\r\n    public static fromAuthorizationToken(applicationId: string, authorizationToken: string, region: string): CustomCommandsConfig {\r\n        Contracts.throwIfNullOrWhitespace(applicationId, \"applicationId\");\r\n        Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const customCommandsConfig: CustomCommandsConfig = new DialogServiceConfigImpl();\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_DialogType, DialogServiceConfig.DialogTypes.CustomCommands);\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_ApplicationId, applicationId);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return customCommandsConfig;\r\n    }\r\n\r\n    /**\r\n     * Sets the corresponding backend application identifier.\r\n     * @member CustomCommandsConfig.prototype.Conversation_ApplicationId\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The application identifier to set.\r\n     */\r\n    public set applicationId(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n        this.setProperty(PropertyId.Conversation_ApplicationId, value);\r\n    }\r\n\r\n    /**\r\n     * Gets the corresponding backend application identifier.\r\n     * @member CustomCommandsConfig.prototype.Conversation_ApplicationId\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The application identifier to get.\r\n     */\r\n    public get applicationId(): string {\r\n        return this.getProperty(PropertyId.Conversation_ApplicationId);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}