{"ast":null,"code":"//\n// Copyright (c) Microsoft. All rights reserved.\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\n//\nimport { ServiceRecognizerBase, SynthesisAdapterBase } from \"../common.speech/Exports\";\nimport { marshalPromiseToCallbacks } from \"../common/Exports\";\nimport { ConnectionMessageImpl } from \"./ConnectionMessage\";\nimport { Contracts } from \"./Contracts\";\nimport { ConnectionEventArgs, ConnectionMessageEventArgs, ServiceEventArgs } from \"./Exports\";\n/**\r\n * Connection is a proxy class for managing connection to the speech service of the specified Recognizer.\r\n * By default, a Recognizer autonomously manages connection to service when needed.\r\n * The Connection class provides additional methods for users to explicitly open or close a connection and\r\n * to subscribe to connection status changes.\r\n * The use of Connection is optional, and mainly for scenarios where fine tuning of application\r\n * behavior based on connection status is needed. Users can optionally call Open() to manually set up a connection\r\n * in advance before starting recognition on the Recognizer associated with this Connection.\r\n * If the Recognizer needs to connect or disconnect to service, it will\r\n * setup or shutdown the connection independently. In this case the Connection will be notified by change of connection\r\n * status via Connected/Disconnected events.\r\n * Added in version 1.2.1.\r\n */\n\nexport class Connection {\n  /**\r\n   * Gets the Connection instance from the specified recognizer.\r\n   * @param recognizer The recognizer associated with the connection.\r\n   * @return The Connection instance of the recognizer.\r\n   */\n  static fromRecognizer(recognizer) {\n    const recoBase = recognizer.internalData;\n    const ret = new Connection();\n    ret.privInternalData = recoBase;\n    ret.setupEvents();\n    return ret;\n  }\n  /**\r\n   * Gets the Connection instance from the specified synthesizer.\r\n   * @param synthesizer The synthesizer associated with the connection.\r\n   * @return The Connection instance of the synthesizer.\r\n   */\n\n\n  static fromSynthesizer(synthesizer) {\n    const synthBase = synthesizer.internalData;\n    const ret = new Connection();\n    ret.privInternalData = synthBase;\n    ret.setupEvents();\n    return ret;\n  }\n  /**\r\n   * Starts to set up connection to the service.\r\n   * Users can optionally call openConnection() to manually set up a connection in advance before starting recognition on the\r\n   * Recognizer associated with this Connection. After starting recognition, calling Open() will have no effect\r\n   *\r\n   * Note: On return, the connection might not be ready yet. Please subscribe to the Connected event to\r\n   * be notified when the connection is established.\r\n   */\n\n\n  openConnection(cb, err) {\n    marshalPromiseToCallbacks(this.privInternalData.connect(), cb, err);\n  }\n  /**\r\n   * Closes the connection the service.\r\n   * Users can optionally call closeConnection() to manually shutdown the connection of the associated Recognizer.\r\n   *\r\n   * If closeConnection() is called during recognition, recognition will fail and cancel with an error.\r\n   */\n\n\n  closeConnection(cb, err) {\n    if (this.privInternalData instanceof SynthesisAdapterBase) {\n      throw new Error(\"Disconnecting a synthesizer's connection is currently not supported\");\n    } else {\n      marshalPromiseToCallbacks(this.privInternalData.disconnect(), cb, err);\n    }\n  }\n  /**\r\n   * Appends a parameter in a message to service.\r\n   * Added in version 1.12.1.\r\n   * @param path The path of the network message.\r\n   * @param propertyName Name of the property\r\n   * @param propertyValue Value of the property. This is a json string.\r\n   */\n\n\n  setMessageProperty(path, propertyName, propertyValue) {\n    Contracts.throwIfNullOrWhitespace(propertyName, \"propertyName\");\n\n    if (this.privInternalData instanceof ServiceRecognizerBase) {\n      if (path.toLowerCase() !== \"speech.context\") {\n        throw new Error(\"Only speech.context message property sets are currently supported for recognizer\");\n      } else {\n        this.privInternalData.speechContext.setSection(propertyName, propertyValue);\n      }\n    } else if (this.privInternalData instanceof SynthesisAdapterBase) {\n      if (path.toLowerCase() !== \"synthesis.context\") {\n        throw new Error(\"Only synthesis.context message property sets are currently supported for synthesizer\");\n      } else {\n        this.privInternalData.synthesisContext.setSection(propertyName, propertyValue);\n      }\n    }\n  }\n  /**\r\n   * Sends a message to the speech service.\r\n   * Added in version 1.13.0.\r\n   * @param path The WebSocket path of the message\r\n   * @param payload The payload of the message. This is a json string or a ArrayBuffer.\r\n   * @param success A callback to indicate success.\r\n   * @param error A callback to indicate an error.\r\n   */\n\n\n  sendMessageAsync(path, payload, success, error) {\n    marshalPromiseToCallbacks(this.privInternalData.sendNetworkMessage(path, payload), success, error);\n  }\n  /**\r\n   * Dispose of associated resources.\r\n   */\n\n\n  close() {\n    /* tslint:disable:no-empty */\n  }\n\n  setupEvents() {\n    this.privEventListener = this.privInternalData.connectionEvents.attach(connectionEvent => {\n      if (connectionEvent.name === \"ConnectionEstablishedEvent\") {\n        if (!!this.connected) {\n          this.connected(new ConnectionEventArgs(connectionEvent.connectionId));\n        }\n      } else if (connectionEvent.name === \"ConnectionClosedEvent\") {\n        if (!!this.disconnected) {\n          this.disconnected(new ConnectionEventArgs(connectionEvent.connectionId));\n        }\n      } else if (connectionEvent.name === \"ConnectionMessageSentEvent\") {\n        if (!!this.messageSent) {\n          this.messageSent(new ConnectionMessageEventArgs(new ConnectionMessageImpl(connectionEvent.message)));\n        }\n      } else if (connectionEvent.name === \"ConnectionMessageReceivedEvent\") {\n        if (!!this.messageReceived) {\n          this.messageReceived(new ConnectionMessageEventArgs(new ConnectionMessageImpl(connectionEvent.message)));\n        }\n      }\n    });\n    this.privServiceEventListener = this.privInternalData.serviceEvents.attach(e => {\n      if (!!this.receivedServiceMessage) {\n        this.receivedServiceMessage(new ServiceEventArgs(e.jsonString, e.name));\n      }\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["ServiceRecognizerBase","SynthesisAdapterBase","marshalPromiseToCallbacks","ConnectionMessageImpl","Contracts","ConnectionEventArgs","ConnectionMessageEventArgs","ServiceEventArgs","Connection","fromRecognizer","recognizer","recoBase","internalData","ret","privInternalData","setupEvents","fromSynthesizer","synthesizer","synthBase","openConnection","cb","err","connect","closeConnection","Error","disconnect","setMessageProperty","path","propertyName","propertyValue","throwIfNullOrWhitespace","toLowerCase","speechContext","setSection","synthesisContext","sendMessageAsync","payload","success","error","sendNetworkMessage","close","privEventListener","connectionEvents","attach","connectionEvent","name","connected","connectionId","disconnected","messageSent","message","messageReceived","privServiceEventListener","serviceEvents","e","receivedServiceMessage","jsonString"],"sources":["C:\\Users\\ozgur\\Documents\\VSCodeProjects\\webapp_educator\\educator\\node_modules\\microsoft-cognitiveservices-speech-sdk\\distrib\\es2015\\src\\sdk\\src\\sdk\\Connection.ts"],"sourcesContent":["//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\nimport {\r\n    ServiceRecognizerBase,\r\n    SynthesisAdapterBase,\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    ConnectionEvent,\r\n    ConnectionMessageReceivedEvent,\r\n    ConnectionMessageSentEvent,\r\n    IDetachable,\r\n    marshalPromiseToCallbacks,\r\n    ServiceEvent,\r\n} from \"../common/Exports\";\r\nimport {\r\n    ConnectionMessageImpl\r\n} from \"./ConnectionMessage\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    ConnectionEventArgs,\r\n    ConnectionMessageEventArgs,\r\n    Recognizer,\r\n    ServiceEventArgs,\r\n    SpeechSynthesizer,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Connection is a proxy class for managing connection to the speech service of the specified Recognizer.\r\n * By default, a Recognizer autonomously manages connection to service when needed.\r\n * The Connection class provides additional methods for users to explicitly open or close a connection and\r\n * to subscribe to connection status changes.\r\n * The use of Connection is optional, and mainly for scenarios where fine tuning of application\r\n * behavior based on connection status is needed. Users can optionally call Open() to manually set up a connection\r\n * in advance before starting recognition on the Recognizer associated with this Connection.\r\n * If the Recognizer needs to connect or disconnect to service, it will\r\n * setup or shutdown the connection independently. In this case the Connection will be notified by change of connection\r\n * status via Connected/Disconnected events.\r\n * Added in version 1.2.1.\r\n */\r\nexport class Connection {\r\n    private privInternalData: ServiceRecognizerBase | SynthesisAdapterBase;\r\n    private privEventListener: IDetachable;\r\n    private privServiceEventListener: IDetachable;\r\n\r\n    /**\r\n     * Gets the Connection instance from the specified recognizer.\r\n     * @param recognizer The recognizer associated with the connection.\r\n     * @return The Connection instance of the recognizer.\r\n     */\r\n    public static fromRecognizer(recognizer: Recognizer): Connection {\r\n        const recoBase: ServiceRecognizerBase = recognizer.internalData as ServiceRecognizerBase;\r\n\r\n        const ret: Connection = new Connection();\r\n\r\n        ret.privInternalData = recoBase;\r\n        ret.setupEvents();\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Gets the Connection instance from the specified synthesizer.\r\n     * @param synthesizer The synthesizer associated with the connection.\r\n     * @return The Connection instance of the synthesizer.\r\n     */\r\n    public static fromSynthesizer(synthesizer: SpeechSynthesizer): Connection {\r\n        const synthBase: SynthesisAdapterBase = synthesizer.internalData as SynthesisAdapterBase;\r\n\r\n        const ret: Connection = new Connection();\r\n\r\n        ret.privInternalData = synthBase;\r\n        ret.setupEvents();\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Starts to set up connection to the service.\r\n     * Users can optionally call openConnection() to manually set up a connection in advance before starting recognition on the\r\n     * Recognizer associated with this Connection. After starting recognition, calling Open() will have no effect\r\n     *\r\n     * Note: On return, the connection might not be ready yet. Please subscribe to the Connected event to\r\n     * be notified when the connection is established.\r\n     */\r\n    public openConnection(cb?: () => void, err?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks(this.privInternalData.connect(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Closes the connection the service.\r\n     * Users can optionally call closeConnection() to manually shutdown the connection of the associated Recognizer.\r\n     *\r\n     * If closeConnection() is called during recognition, recognition will fail and cancel with an error.\r\n     */\r\n    public closeConnection(cb?: () => void, err?: (error: string) => void): void {\r\n        if (this.privInternalData instanceof SynthesisAdapterBase) {\r\n            throw new Error(\"Disconnecting a synthesizer's connection is currently not supported\");\r\n        } else {\r\n            marshalPromiseToCallbacks((this.privInternalData as ServiceRecognizerBase).disconnect(), cb, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Appends a parameter in a message to service.\r\n     * Added in version 1.12.1.\r\n     * @param path The path of the network message.\r\n     * @param propertyName Name of the property\r\n     * @param propertyValue Value of the property. This is a json string.\r\n     */\r\n    public setMessageProperty(path: string, propertyName: string, propertyValue: string | object): void {\r\n        Contracts.throwIfNullOrWhitespace(propertyName, \"propertyName\");\r\n\r\n        if (this.privInternalData instanceof ServiceRecognizerBase) {\r\n            if (path.toLowerCase() !== \"speech.context\") {\r\n                throw new Error(\"Only speech.context message property sets are currently supported for recognizer\");\r\n            } else {\r\n                (this.privInternalData as ServiceRecognizerBase).speechContext.setSection(propertyName, propertyValue);\r\n            }\r\n        } else if (this.privInternalData instanceof SynthesisAdapterBase) {\r\n            if (path.toLowerCase() !== \"synthesis.context\") {\r\n                throw new Error(\"Only synthesis.context message property sets are currently supported for synthesizer\");\r\n            } else {\r\n                (this.privInternalData as SynthesisAdapterBase).synthesisContext.setSection(propertyName, propertyValue);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends a message to the speech service.\r\n     * Added in version 1.13.0.\r\n     * @param path The WebSocket path of the message\r\n     * @param payload The payload of the message. This is a json string or a ArrayBuffer.\r\n     * @param success A callback to indicate success.\r\n     * @param error A callback to indicate an error.\r\n     */\r\n    public sendMessageAsync(path: string, payload: string | ArrayBuffer, success?: () => void, error?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks(this.privInternalData.sendNetworkMessage(path, payload), success, error);\r\n    }\r\n\r\n    /**\r\n     * Any message from service that is not being processed by any other top level recognizers.\r\n     *\r\n     * Will be removed in 2.0.\r\n     */\r\n    public receivedServiceMessage: (args: ServiceEventArgs) => void;\r\n\r\n    /**\r\n     * Any message received from the Speech Service.\r\n     */\r\n    public messageReceived: (args: ConnectionMessageEventArgs) => void;\r\n\r\n    /**\r\n     * Any message sent to the Speech Service.\r\n     */\r\n    public messageSent: (args: ConnectionMessageEventArgs) => void;\r\n\r\n    /**\r\n     * The Connected event to indicate that the recognizer is connected to service.\r\n     */\r\n    public connected: (args: ConnectionEventArgs) => void;\r\n\r\n    /**\r\n     * The Disconnected event to indicate that the recognizer is disconnected from service.\r\n     */\r\n    public disconnected: (args: ConnectionEventArgs) => void;\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     */\r\n    public close(): void {\r\n        /* tslint:disable:no-empty */\r\n    }\r\n\r\n    private setupEvents(): void {\r\n        this.privEventListener = this.privInternalData.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionEstablishedEvent\") {\r\n                if (!!this.connected) {\r\n                    this.connected(new ConnectionEventArgs(connectionEvent.connectionId));\r\n                }\r\n            } else if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                if (!!this.disconnected) {\r\n                    this.disconnected(new ConnectionEventArgs(connectionEvent.connectionId));\r\n                }\r\n            } else if (connectionEvent.name === \"ConnectionMessageSentEvent\") {\r\n                if (!!this.messageSent) {\r\n                    this.messageSent(new ConnectionMessageEventArgs(new ConnectionMessageImpl((connectionEvent as ConnectionMessageSentEvent).message)));\r\n                }\r\n            } else if (connectionEvent.name === \"ConnectionMessageReceivedEvent\") {\r\n                if (!!this.messageReceived) {\r\n                    this.messageReceived(new ConnectionMessageEventArgs(new ConnectionMessageImpl((connectionEvent as ConnectionMessageReceivedEvent).message)));\r\n                }\r\n            }\r\n        });\r\n\r\n        this.privServiceEventListener = this.privInternalData.serviceEvents.attach((e: ServiceEvent): void => {\r\n            if (!!this.receivedServiceMessage) {\r\n                this.receivedServiceMessage(new ServiceEventArgs(e.jsonString, e.name));\r\n            }\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}