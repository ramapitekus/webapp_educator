{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { MessageType } from \"../common/Exports\";\nimport { CancellationErrorCode, IntentRecognitionCanceledEventArgs, IntentRecognitionEventArgs, IntentRecognitionResult, PropertyCollection, PropertyId, ResultReason } from \"../sdk/Exports\";\nimport { CancellationErrorCodePropertyName, EnumTranslation, IntentResponse, ServiceRecognizerBase, SimpleSpeechPhrase, SpeechHypothesis } from \"./Exports\"; // tslint:disable-next-line:max-classes-per-file\n\nexport class IntentServiceRecognizer extends ServiceRecognizerBase {\n  constructor(authentication, connectionFactory, audioSource, recognizerConfig, recognizer) {\n    super(authentication, connectionFactory, audioSource, recognizerConfig, recognizer);\n    this.privIntentRecognizer = recognizer;\n    this.privIntentDataSent = false;\n  }\n\n  setIntents(addedIntents, umbrellaIntent) {\n    this.privAddedLmIntents = addedIntents;\n    this.privUmbrellaIntent = umbrellaIntent;\n    this.privIntentDataSent = true;\n  }\n\n  processTypeSpecificMessages(connectionMessage) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let result;\n      let ev;\n      let processed = false;\n      const resultProps = new PropertyCollection();\n\n      if (connectionMessage.messageType === MessageType.Text) {\n        resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\n      }\n\n      switch (connectionMessage.path.toLowerCase()) {\n        case \"speech.hypothesis\":\n          const speechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\n          result = new IntentRecognitionResult(undefined, this.privRequestSession.requestId, ResultReason.RecognizingIntent, speechHypothesis.Text, speechHypothesis.Duration, speechHypothesis.Offset + this.privRequestSession.currentTurnAudioOffset, speechHypothesis.Language, speechHypothesis.LanguageDetectionConfidence, undefined, connectionMessage.textBody, resultProps);\n          this.privRequestSession.onHypothesis(result.offset);\n          ev = new IntentRecognitionEventArgs(result, speechHypothesis.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);\n\n          if (!!this.privIntentRecognizer.recognizing) {\n            try {\n              this.privIntentRecognizer.recognizing(this.privIntentRecognizer, ev);\n              /* tslint:disable:no-empty */\n            } catch (error) {// Not going to let errors in the event handler\n              // trip things up.\n            }\n          }\n\n          processed = true;\n          break;\n\n        case \"speech.phrase\":\n          const simple = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\n          result = new IntentRecognitionResult(undefined, this.privRequestSession.requestId, EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus), simple.DisplayText, simple.Duration, simple.Offset + this.privRequestSession.currentTurnAudioOffset, simple.Language, simple.LanguageDetectionConfidence, undefined, connectionMessage.textBody, resultProps);\n          ev = new IntentRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\n\n          const sendEvent = () => {\n            if (!!this.privIntentRecognizer.recognized) {\n              try {\n                this.privIntentRecognizer.recognized(this.privIntentRecognizer, ev);\n                /* tslint:disable:no-empty */\n              } catch (error) {// Not going to let errors in the event handler\n                // trip things up.\n              }\n            } // report result to promise.\n\n\n            if (!!this.privSuccessCallback) {\n              try {\n                this.privSuccessCallback(result);\n              } catch (e) {\n                if (!!this.privErrorCallback) {\n                  this.privErrorCallback(e);\n                }\n              } // Only invoke the call back once.\n              // and if it's successful don't invoke the\n              // error after that.\n\n\n              this.privSuccessCallback = undefined;\n              this.privErrorCallback = undefined;\n            }\n          }; // If intent data was sent, the terminal result for this recognizer is an intent being found.\n          // If no intent data was sent, the terminal event is speech recognition being successful.\n\n\n          if (false === this.privIntentDataSent || ResultReason.NoMatch === ev.result.reason) {\n            // Advance the buffers.\n            this.privRequestSession.onPhraseRecognized(ev.offset + ev.result.duration);\n            sendEvent();\n          } else {\n            // Squirrel away the args, when the response event arrives it will build upon them\n            // and then return\n            this.privPendingIntentArgs = ev;\n          }\n\n          processed = true;\n          break;\n\n        case \"response\":\n          // Response from LUIS\n          ev = this.privPendingIntentArgs;\n          this.privPendingIntentArgs = undefined;\n\n          if (undefined === ev) {\n            if (\"\" === connectionMessage.textBody) {\n              // This condition happens if there is nothing but silence in the\n              // audio sent to the service.\n              return;\n            } // Odd... Not sure this can happen\n\n\n            ev = new IntentRecognitionEventArgs(new IntentRecognitionResult(), 0\n            /*TODO*/\n            , this.privRequestSession.sessionId);\n          }\n\n          const intentResponse = IntentResponse.fromJSON(connectionMessage.textBody); // If LUIS didn't return anything, send the existing event, else\n          // modify it to show the match.\n          // See if the intent found is in the list of intents asked for.\n\n          let addedIntent = this.privAddedLmIntents[intentResponse.topScoringIntent.intent];\n\n          if (this.privUmbrellaIntent !== undefined) {\n            addedIntent = this.privUmbrellaIntent;\n          }\n\n          if (null !== intentResponse && addedIntent !== undefined) {\n            const intentId = addedIntent.intentName === undefined ? intentResponse.topScoringIntent.intent : addedIntent.intentName;\n            let reason = ev.result.reason;\n\n            if (undefined !== intentId) {\n              reason = ResultReason.RecognizedIntent;\n            } // make sure, properties is set.\n\n\n            const properties = undefined !== ev.result.properties ? ev.result.properties : new PropertyCollection();\n            properties.setProperty(PropertyId.LanguageUnderstandingServiceResponse_JsonResult, connectionMessage.textBody);\n            ev = new IntentRecognitionEventArgs(new IntentRecognitionResult(intentId, ev.result.resultId, reason, ev.result.text, ev.result.duration, ev.result.offset, undefined, undefined, ev.result.errorDetails, ev.result.json, properties), ev.offset, ev.sessionId);\n          }\n\n          this.privRequestSession.onPhraseRecognized(ev.offset + ev.result.duration);\n\n          if (!!this.privIntentRecognizer.recognized) {\n            try {\n              this.privIntentRecognizer.recognized(this.privIntentRecognizer, ev);\n              /* tslint:disable:no-empty */\n            } catch (error) {// Not going to let errors in the event handler\n              // trip things up.\n            }\n          } // report result to promise.\n\n\n          if (!!this.privSuccessCallback) {\n            try {\n              this.privSuccessCallback(ev.result);\n            } catch (e) {\n              if (!!this.privErrorCallback) {\n                this.privErrorCallback(e);\n              }\n            } // Only invoke the call back once.\n            // and if it's successful don't invoke the\n            // error after that.\n\n\n            this.privSuccessCallback = undefined;\n            this.privErrorCallback = undefined;\n          }\n\n          processed = true;\n          break;\n\n        default:\n          break;\n      }\n\n      return processed;\n    });\n  } // Cancels recognition.\n\n\n  cancelRecognition(sessionId, requestId, cancellationReason, errorCode, error) {\n    const properties = new PropertyCollection();\n    properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\n\n    if (!!this.privIntentRecognizer.canceled) {\n      const cancelEvent = new IntentRecognitionCanceledEventArgs(cancellationReason, error, errorCode, undefined, undefined, sessionId);\n\n      try {\n        this.privIntentRecognizer.canceled(this.privIntentRecognizer, cancelEvent);\n        /* tslint:disable:no-empty */\n      } catch (_a) {}\n    }\n\n    if (!!this.privSuccessCallback) {\n      const result = new IntentRecognitionResult(undefined, // Intent Id\n      requestId, ResultReason.Canceled, undefined, // Text\n      undefined, // Duration\n      undefined, // Offset\n      undefined, // Language\n      undefined, // LanguageDetectionConfidence\n      error, undefined, // Json\n      properties);\n\n      try {\n        this.privSuccessCallback(result);\n        this.privSuccessCallback = undefined;\n        /* tslint:disable:no-empty */\n      } catch (_b) {}\n    }\n  }\n\n}","map":{"version":3,"mappings":"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","names":["MessageType","CancellationErrorCode","IntentRecognitionCanceledEventArgs","IntentRecognitionEventArgs","IntentRecognitionResult","PropertyCollection","PropertyId","ResultReason","CancellationErrorCodePropertyName","EnumTranslation","IntentResponse","ServiceRecognizerBase","SimpleSpeechPhrase","SpeechHypothesis","IntentServiceRecognizer","constructor","authentication","connectionFactory","audioSource","recognizerConfig","recognizer","privIntentRecognizer","privIntentDataSent","setIntents","addedIntents","umbrellaIntent","privAddedLmIntents","privUmbrellaIntent","processTypeSpecificMessages","connectionMessage","result","ev","processed","resultProps","messageType","Text","setProperty","SpeechServiceResponse_JsonResult","textBody","path","toLowerCase","speechHypothesis","fromJSON","undefined","privRequestSession","requestId","RecognizingIntent","Duration","Offset","currentTurnAudioOffset","Language","LanguageDetectionConfidence","onHypothesis","offset","sessionId","recognizing","error","simple","implTranslateRecognitionResult","RecognitionStatus","DisplayText","sendEvent","recognized","privSuccessCallback","e","privErrorCallback","NoMatch","reason","onPhraseRecognized","duration","privPendingIntentArgs","intentResponse","addedIntent","topScoringIntent","intent","intentId","intentName","RecognizedIntent","properties","LanguageUnderstandingServiceResponse_JsonResult","resultId","text","errorDetails","json","cancelRecognition","cancellationReason","errorCode","canceled","cancelEvent","Canceled"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\node_modules\\microsoft-cognitiveservices-speech-sdk\\distrib\\es2015\\src\\common.speech\\src\\common.speech\\IntentServiceRecognizer.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAudioSource,\r\n    MessageType,\r\n} from \"../common/Exports\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    IntentRecognitionCanceledEventArgs,\r\n    IntentRecognitionEventArgs,\r\n    IntentRecognitionResult,\r\n    IntentRecognizer,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechRecognitionResult,\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    AddedLmIntent,\r\n    CancellationErrorCodePropertyName,\r\n    EnumTranslation,\r\n    IntentResponse,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechHypothesis,\r\n} from \"./Exports\";\r\nimport { IAuthentication } from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class IntentServiceRecognizer extends ServiceRecognizerBase {\r\n    private privIntentRecognizer: IntentRecognizer;\r\n    private privAddedLmIntents: { [id: string]: AddedLmIntent; };\r\n    private privIntentDataSent: boolean;\r\n    private privUmbrellaIntent: AddedLmIntent;\r\n    private privPendingIntentArgs: IntentRecognitionEventArgs;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: IntentRecognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, recognizer);\r\n        this.privIntentRecognizer = recognizer;\r\n        this.privIntentDataSent = false;\r\n    }\r\n\r\n    public setIntents(addedIntents: { [id: string]: AddedLmIntent; }, umbrellaIntent: AddedLmIntent): void {\r\n        this.privAddedLmIntents = addedIntents;\r\n        this.privUmbrellaIntent = umbrellaIntent;\r\n        this.privIntentDataSent = true;\r\n    }\r\n\r\n    protected async processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        let result: IntentRecognitionResult;\r\n        let ev: IntentRecognitionEventArgs;\r\n        let processed: boolean = false;\r\n\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        if (connectionMessage.messageType === MessageType.Text) {\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        }\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.hypothesis\":\r\n                const speechHypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\r\n\r\n                result = new IntentRecognitionResult(\r\n                    undefined,\r\n                    this.privRequestSession.requestId,\r\n                    ResultReason.RecognizingIntent,\r\n                    speechHypothesis.Text,\r\n                    speechHypothesis.Duration,\r\n                    speechHypothesis.Offset + this.privRequestSession.currentTurnAudioOffset,\r\n                    speechHypothesis.Language,\r\n                    speechHypothesis.LanguageDetectionConfidence,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                this.privRequestSession.onHypothesis(result.offset);\r\n\r\n                ev = new IntentRecognitionEventArgs(result, speechHypothesis.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);\r\n\r\n                if (!!this.privIntentRecognizer.recognizing) {\r\n                    try {\r\n                        this.privIntentRecognizer.recognizing(this.privIntentRecognizer, ev);\r\n                        /* tslint:disable:no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.phrase\":\r\n                const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                result = new IntentRecognitionResult(\r\n                    undefined,\r\n                    this.privRequestSession.requestId,\r\n                    EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus),\r\n                    simple.DisplayText,\r\n                    simple.Duration,\r\n                    simple.Offset + this.privRequestSession.currentTurnAudioOffset,\r\n                    simple.Language,\r\n                    simple.LanguageDetectionConfidence,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                ev = new IntentRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\r\n\r\n                const sendEvent: () => void = () => {\r\n                    if (!!this.privIntentRecognizer.recognized) {\r\n                        try {\r\n                            this.privIntentRecognizer.recognized(this.privIntentRecognizer, ev);\r\n                            /* tslint:disable:no-empty */\r\n                        } catch (error) {\r\n                            // Not going to let errors in the event handler\r\n                            // trip things up.\r\n                        }\r\n                    }\r\n\r\n                    // report result to promise.\r\n                    if (!!this.privSuccessCallback) {\r\n                        try {\r\n                            this.privSuccessCallback(result);\r\n                        } catch (e) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(e);\r\n                            }\r\n                        }\r\n                        // Only invoke the call back once.\r\n                        // and if it's successful don't invoke the\r\n                        // error after that.\r\n                        this.privSuccessCallback = undefined;\r\n                        this.privErrorCallback = undefined;\r\n                    }\r\n                };\r\n\r\n                // If intent data was sent, the terminal result for this recognizer is an intent being found.\r\n                // If no intent data was sent, the terminal event is speech recognition being successful.\r\n                if (false === this.privIntentDataSent || ResultReason.NoMatch === ev.result.reason) {\r\n                    // Advance the buffers.\r\n                    this.privRequestSession.onPhraseRecognized(ev.offset + ev.result.duration);\r\n                    sendEvent();\r\n                } else {\r\n                    // Squirrel away the args, when the response event arrives it will build upon them\r\n                    // and then return\r\n                    this.privPendingIntentArgs = ev;\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"response\":\r\n                // Response from LUIS\r\n                ev = this.privPendingIntentArgs;\r\n                this.privPendingIntentArgs = undefined;\r\n\r\n                if (undefined === ev) {\r\n                    if (\"\" === connectionMessage.textBody) {\r\n                        // This condition happens if there is nothing but silence in the\r\n                        // audio sent to the service.\r\n                        return;\r\n                    }\r\n\r\n                    // Odd... Not sure this can happen\r\n                    ev = new IntentRecognitionEventArgs(new IntentRecognitionResult(), 0 /*TODO*/, this.privRequestSession.sessionId);\r\n                }\r\n\r\n                const intentResponse: IntentResponse = IntentResponse.fromJSON(connectionMessage.textBody);\r\n\r\n                // If LUIS didn't return anything, send the existing event, else\r\n                // modify it to show the match.\r\n                // See if the intent found is in the list of intents asked for.\r\n                let addedIntent: AddedLmIntent = this.privAddedLmIntents[intentResponse.topScoringIntent.intent];\r\n\r\n                if (this.privUmbrellaIntent !== undefined) {\r\n                    addedIntent = this.privUmbrellaIntent;\r\n                }\r\n\r\n                if (null !== intentResponse && addedIntent !== undefined) {\r\n                    const intentId = addedIntent.intentName === undefined ? intentResponse.topScoringIntent.intent : addedIntent.intentName;\r\n                    let reason = ev.result.reason;\r\n\r\n                    if (undefined !== intentId) {\r\n                        reason = ResultReason.RecognizedIntent;\r\n                    }\r\n\r\n                    // make sure, properties is set.\r\n                    const properties = (undefined !== ev.result.properties) ?\r\n                        ev.result.properties : new PropertyCollection();\r\n\r\n                    properties.setProperty(PropertyId.LanguageUnderstandingServiceResponse_JsonResult, connectionMessage.textBody);\r\n\r\n                    ev = new IntentRecognitionEventArgs(\r\n                        new IntentRecognitionResult(\r\n                            intentId,\r\n                            ev.result.resultId,\r\n                            reason,\r\n                            ev.result.text,\r\n                            ev.result.duration,\r\n                            ev.result.offset,\r\n                            undefined,\r\n                            undefined,\r\n                            ev.result.errorDetails,\r\n                            ev.result.json,\r\n                            properties),\r\n                        ev.offset,\r\n                        ev.sessionId);\r\n                }\r\n                this.privRequestSession.onPhraseRecognized(ev.offset + ev.result.duration);\r\n\r\n                if (!!this.privIntentRecognizer.recognized) {\r\n                    try {\r\n                        this.privIntentRecognizer.recognized(this.privIntentRecognizer, ev);\r\n                        /* tslint:disable:no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n\r\n                // report result to promise.\r\n                if (!!this.privSuccessCallback) {\r\n                    try {\r\n                        this.privSuccessCallback(ev.result);\r\n                    } catch (e) {\r\n                        if (!!this.privErrorCallback) {\r\n                            this.privErrorCallback(e);\r\n                        }\r\n                    }\r\n                    // Only invoke the call back once.\r\n                    // and if it's successful don't invoke the\r\n                    // error after that.\r\n                    this.privSuccessCallback = undefined;\r\n                    this.privErrorCallback = undefined;\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privIntentRecognizer.canceled) {\r\n\r\n            const cancelEvent: IntentRecognitionCanceledEventArgs = new IntentRecognitionCanceledEventArgs(\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined,\r\n                undefined,\r\n                sessionId);\r\n            try {\r\n                this.privIntentRecognizer.canceled(this.privIntentRecognizer, cancelEvent);\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            const result: IntentRecognitionResult = new IntentRecognitionResult(\r\n                undefined, // Intent Id\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined, // Text\r\n                undefined, // Duration\r\n                undefined, // Offset\r\n                undefined, // Language\r\n                undefined, // LanguageDetectionConfidence\r\n                error,\r\n                undefined, // Json\r\n                properties);\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                this.privSuccessCallback = undefined;\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}