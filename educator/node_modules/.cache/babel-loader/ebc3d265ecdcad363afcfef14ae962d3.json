{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { MessageType } from \"../common/Exports\";\nimport { CancellationErrorCode, ConversationTranscriptionCanceledEventArgs, OutputFormat, PropertyCollection, PropertyId, ResultReason, SpeechRecognitionEventArgs, SpeechRecognitionResult } from \"../sdk/Exports\";\nimport { CancellationErrorCodePropertyName, DetailedSpeechPhrase, EnumTranslation, OutputFormatPropertyName, RecognitionStatus, ServiceRecognizerBase, SimpleSpeechPhrase, SpeechHypothesis } from \"./Exports\";\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\"; // tslint:disable-next-line:max-classes-per-file\n\nexport class TranscriptionServiceRecognizer extends ServiceRecognizerBase {\n  constructor(authentication, connectionFactory, audioSource, recognizerConfig, transcriber) {\n    super(authentication, connectionFactory, audioSource, recognizerConfig, transcriber);\n\n    this.sendSpeechEvent = (connection, payload) => {\n      const speechEventJson = JSON.stringify(payload);\n\n      if (speechEventJson) {\n        return connection.send(new SpeechConnectionMessage(MessageType.Text, \"speech.event\", this.privRequestSession.requestId, \"application/json\", speechEventJson));\n      }\n\n      return;\n    };\n\n    this.privTranscriberRecognizer = transcriber;\n    this.sendPrePayloadJSONOverride = this.sendTranscriptionStartJSON;\n  }\n\n  sendSpeechEventAsync(info, command) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!!this.privRequestSession.isRecognizing) {\n        const connection = yield this.fetchConnection();\n        yield this.sendSpeechEvent(connection, this.createSpeechEventPayload(info, command));\n      }\n    });\n  }\n\n  processTypeSpecificMessages(connectionMessage) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let result;\n      const resultProps = new PropertyCollection();\n      resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\n      let processed = false;\n\n      switch (connectionMessage.path.toLowerCase()) {\n        case \"speech.hypothesis\":\n        case \"speech.fragment\":\n          const hypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\n          const offset = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\n          result = new SpeechRecognitionResult(this.privRequestSession.requestId, ResultReason.RecognizingSpeech, hypothesis.Text, hypothesis.Duration, offset, hypothesis.Language, hypothesis.LanguageDetectionConfidence, hypothesis.SpeakerId, undefined, connectionMessage.textBody, resultProps);\n          this.privRequestSession.onHypothesis(offset);\n          const ev = new SpeechRecognitionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);\n\n          if (!!this.privTranscriberRecognizer.recognizing) {\n            try {\n              this.privTranscriberRecognizer.recognizing(this.privTranscriberRecognizer, ev);\n              /* tslint:disable:no-empty */\n            } catch (error) {// Not going to let errors in the event handler\n              // trip things up.\n            }\n          }\n\n          processed = true;\n          break;\n\n        case \"speech.phrase\":\n          const simple = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\n          const resultReason = EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus);\n          this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + simple.Offset + simple.Duration);\n\n          if (ResultReason.Canceled === resultReason) {\n            const cancelReason = EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);\n            const cancellationErrorCode = EnumTranslation.implTranslateCancelErrorCode(simple.RecognitionStatus);\n            yield this.cancelRecognitionLocal(cancelReason, cancellationErrorCode, EnumTranslation.implTranslateErrorDetails(cancellationErrorCode));\n          } else {\n            if (!(this.privRequestSession.isSpeechEnded && resultReason === ResultReason.NoMatch && simple.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\n              if (this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName) === OutputFormat[OutputFormat.Simple]) {\n                result = new SpeechRecognitionResult(this.privRequestSession.requestId, resultReason, simple.DisplayText, simple.Duration, simple.Offset + this.privRequestSession.currentTurnAudioOffset, simple.Language, simple.LanguageDetectionConfidence, simple.SpeakerId, undefined, connectionMessage.textBody, resultProps);\n              } else {\n                const detailed = DetailedSpeechPhrase.fromJSON(connectionMessage.textBody);\n                const totalOffset = detailed.Offset + this.privRequestSession.currentTurnAudioOffset;\n                const offsetCorrectedJson = detailed.getJsonWithCorrectedOffsets(totalOffset);\n                result = new SpeechRecognitionResult(this.privRequestSession.requestId, resultReason, detailed.Text, detailed.Duration, totalOffset, detailed.Language, detailed.LanguageDetectionConfidence, detailed.SpeakerId, undefined, offsetCorrectedJson, resultProps);\n              }\n\n              const event = new SpeechRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\n\n              if (!!this.privTranscriberRecognizer.recognized) {\n                try {\n                  this.privTranscriberRecognizer.recognized(this.privTranscriberRecognizer, event);\n                  /* tslint:disable:no-empty */\n                } catch (error) {// Not going to let errors in the event handler\n                  // trip things up.\n                }\n              }\n            }\n\n            if (!!this.privSuccessCallback) {\n              try {\n                this.privSuccessCallback(result);\n              } catch (e) {\n                if (!!this.privErrorCallback) {\n                  this.privErrorCallback(e);\n                }\n              } // Only invoke the call back once.\n              // and if it's successful don't invoke the\n              // error after that.\n\n\n              this.privSuccessCallback = undefined;\n              this.privErrorCallback = undefined;\n            }\n          }\n\n          processed = true;\n          break;\n\n        default:\n          break;\n      }\n\n      return processed;\n    });\n  } // Cancels recognition.\n\n\n  cancelRecognition(sessionId, requestId, cancellationReason, errorCode, error) {\n    const properties = new PropertyCollection();\n    properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\n\n    if (!!this.privTranscriberRecognizer.canceled) {\n      const cancelEvent = new ConversationTranscriptionCanceledEventArgs(cancellationReason, error, errorCode, undefined, sessionId);\n\n      try {\n        this.privTranscriberRecognizer.canceled(this.privTranscriberRecognizer, cancelEvent);\n        /* tslint:disable:no-empty */\n      } catch (_a) {}\n    }\n\n    if (!!this.privSuccessCallback) {\n      const result = new SpeechRecognitionResult(requestId, ResultReason.Canceled, undefined, // Text\n      undefined, // Duration\n      undefined, // Offset\n      undefined, // Language\n      undefined, // Language Detection Confidence\n      undefined, // Speaker Id\n      error, undefined, // Json\n      properties);\n\n      try {\n        this.privSuccessCallback(result);\n        this.privSuccessCallback = undefined;\n        /* tslint:disable:no-empty */\n      } catch (_b) {}\n    }\n  } // Encapsulated for derived service recognizers that need to send additional JSON\n\n\n  sendTranscriptionStartJSON(connection) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.sendSpeechContext(connection);\n      const info = this.privTranscriberRecognizer.getConversationInfo();\n      const payload = this.createSpeechEventPayload(info, \"start\");\n      yield this.sendSpeechEvent(connection, payload);\n      yield this.sendWaveHeader(connection);\n      return;\n    });\n  }\n\n  createSpeechEventPayload(info, command) {\n    const meeting = \"meeting\";\n    const eventDict = {\n      id: meeting,\n      name: command,\n      meeting: info.conversationProperties\n    };\n    const idString = \"id\";\n    const attendees = \"attendees\";\n    const record = \"record\";\n    eventDict[meeting][idString] = info.id;\n    eventDict[meeting][attendees] = info.participants;\n    eventDict[meeting][record] = info.conversationProperties.audiorecording === \"on\" ? \"true\" : \"false\";\n    return eventDict;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["MessageType","CancellationErrorCode","ConversationTranscriptionCanceledEventArgs","OutputFormat","PropertyCollection","PropertyId","ResultReason","SpeechRecognitionEventArgs","SpeechRecognitionResult","CancellationErrorCodePropertyName","DetailedSpeechPhrase","EnumTranslation","OutputFormatPropertyName","RecognitionStatus","ServiceRecognizerBase","SimpleSpeechPhrase","SpeechHypothesis","SpeechConnectionMessage","TranscriptionServiceRecognizer","constructor","authentication","connectionFactory","audioSource","recognizerConfig","transcriber","connection","payload","speechEventJson","JSON","stringify","send","Text","privRequestSession","requestId","privTranscriberRecognizer","sendPrePayloadJSONOverride","sendTranscriptionStartJSON","sendSpeechEventAsync","info","command","isRecognizing","fetchConnection","sendSpeechEvent","createSpeechEventPayload","processTypeSpecificMessages","connectionMessage","result","resultProps","setProperty","SpeechServiceResponse_JsonResult","textBody","processed","path","toLowerCase","hypothesis","fromJSON","offset","Offset","currentTurnAudioOffset","RecognizingSpeech","Duration","Language","LanguageDetectionConfidence","SpeakerId","undefined","onHypothesis","ev","sessionId","recognizing","error","simple","resultReason","implTranslateRecognitionResult","onPhraseRecognized","Canceled","cancelReason","implTranslateCancelResult","cancellationErrorCode","implTranslateCancelErrorCode","cancelRecognitionLocal","implTranslateErrorDetails","isSpeechEnded","NoMatch","InitialSilenceTimeout","privRecognizerConfig","parameters","getProperty","Simple","DisplayText","detailed","totalOffset","offsetCorrectedJson","getJsonWithCorrectedOffsets","event","recognized","privSuccessCallback","e","privErrorCallback","cancelRecognition","cancellationReason","errorCode","properties","canceled","cancelEvent","sendSpeechContext","getConversationInfo","sendWaveHeader","meeting","eventDict","id","name","conversationProperties","idString","attendees","record","participants","audiorecording"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ_2\\educator\\node_modules\\microsoft-cognitiveservices-speech-sdk\\distrib\\es2015\\src\\common.speech\\src\\common.speech\\TranscriptionServiceRecognizer.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAudioSource,\r\n    IConnection,\r\n    MessageType\r\n} from \"../common/Exports\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    ConversationTranscriptionCanceledEventArgs,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"../sdk/Exports\";\r\nimport { ConversationInfo } from \"../sdk/Transcription/Exports\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    DetailedSpeechPhrase,\r\n    EnumTranslation,\r\n    OutputFormatPropertyName,\r\n    RecognitionStatus,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechHypothesis,\r\n    TranscriberRecognizer\r\n} from \"./Exports\";\r\nimport { IAuthentication } from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class TranscriptionServiceRecognizer extends ServiceRecognizerBase {\r\n\r\n    private privTranscriberRecognizer: TranscriberRecognizer;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        transcriber: TranscriberRecognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, transcriber);\r\n        this.privTranscriberRecognizer = transcriber;\r\n        this.sendPrePayloadJSONOverride = this.sendTranscriptionStartJSON;\r\n    }\r\n\r\n    public async sendSpeechEventAsync(info: ConversationInfo, command: string): Promise<void> {\r\n        if (!!this.privRequestSession.isRecognizing) {\r\n            const connection: IConnection = await this.fetchConnection();\r\n            await this.sendSpeechEvent(connection, this.createSpeechEventPayload(info, command));\r\n        }\r\n    }\r\n\r\n    protected async processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        let result: SpeechRecognitionResult;\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        let processed: boolean = false;\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.hypothesis\":\r\n            case \"speech.fragment\":\r\n                const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\r\n                const offset: number = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n                result = new SpeechRecognitionResult(\r\n                    this.privRequestSession.requestId,\r\n                    ResultReason.RecognizingSpeech,\r\n                    hypothesis.Text,\r\n                    hypothesis.Duration,\r\n                    offset,\r\n                    hypothesis.Language,\r\n                    hypothesis.LanguageDetectionConfidence,\r\n                    hypothesis.SpeakerId,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                this.privRequestSession.onHypothesis(offset);\r\n\r\n                const ev = new SpeechRecognitionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);\r\n\r\n                if (!!this.privTranscriberRecognizer.recognizing) {\r\n                    try {\r\n                        this.privTranscriberRecognizer.recognizing(this.privTranscriberRecognizer, ev);\r\n                        /* tslint:disable:no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.phrase\":\r\n                const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus);\r\n\r\n                this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + simple.Offset + simple.Duration);\r\n\r\n                if (ResultReason.Canceled === resultReason) {\r\n                    const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);\r\n                    const cancellationErrorCode: CancellationErrorCode = EnumTranslation.implTranslateCancelErrorCode(simple.RecognitionStatus);\r\n\r\n                    await this.cancelRecognitionLocal(\r\n                        cancelReason,\r\n                        cancellationErrorCode,\r\n                        EnumTranslation.implTranslateErrorDetails(cancellationErrorCode));\r\n\r\n                } else {\r\n                    if (!(this.privRequestSession.isSpeechEnded && resultReason === ResultReason.NoMatch && simple.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\r\n                        if (this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName) === OutputFormat[OutputFormat.Simple]) {\r\n                            result = new SpeechRecognitionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                simple.DisplayText,\r\n                                simple.Duration,\r\n                                simple.Offset + this.privRequestSession.currentTurnAudioOffset,\r\n                                simple.Language,\r\n                                simple.LanguageDetectionConfidence,\r\n                                simple.SpeakerId,\r\n                                undefined,\r\n                                connectionMessage.textBody,\r\n                                resultProps);\r\n                        } else {\r\n                            const detailed: DetailedSpeechPhrase = DetailedSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                            const totalOffset: number = detailed.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n                            const offsetCorrectedJson: string = detailed.getJsonWithCorrectedOffsets(totalOffset);\r\n\r\n                            result = new SpeechRecognitionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                detailed.Text,\r\n                                detailed.Duration,\r\n                                totalOffset,\r\n                                detailed.Language,\r\n                                detailed.LanguageDetectionConfidence,\r\n                                detailed.SpeakerId,\r\n                                undefined,\r\n                                offsetCorrectedJson,\r\n                                resultProps);\r\n                        }\r\n\r\n                        const event: SpeechRecognitionEventArgs = new SpeechRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privTranscriberRecognizer.recognized) {\r\n                            try {\r\n                                this.privTranscriberRecognizer.recognized(this.privTranscriberRecognizer, event);\r\n                                /* tslint:disable:no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (!!this.privSuccessCallback) {\r\n                        try {\r\n                            this.privSuccessCallback(result);\r\n                        } catch (e) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(e);\r\n                            }\r\n                        }\r\n                        // Only invoke the call back once.\r\n                        // and if it's successful don't invoke the\r\n                        // error after that.\r\n                        this.privSuccessCallback = undefined;\r\n                        this.privErrorCallback = undefined;\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privTranscriberRecognizer.canceled) {\r\n            const cancelEvent: ConversationTranscriptionCanceledEventArgs = new ConversationTranscriptionCanceledEventArgs(\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined,\r\n                sessionId);\r\n            try {\r\n                this.privTranscriberRecognizer.canceled(this.privTranscriberRecognizer, cancelEvent);\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            const result: SpeechRecognitionResult = new SpeechRecognitionResult(\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined, // Text\r\n                undefined, // Duration\r\n                undefined, // Offset\r\n                undefined, // Language\r\n                undefined, // Language Detection Confidence\r\n                undefined, // Speaker Id\r\n                error,\r\n                undefined, // Json\r\n                properties);\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                this.privSuccessCallback = undefined;\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n\r\n    // Encapsulated for derived service recognizers that need to send additional JSON\r\n    protected async sendTranscriptionStartJSON(connection: IConnection): Promise<void> {\r\n        await this.sendSpeechContext(connection);\r\n        const info: ConversationInfo = this.privTranscriberRecognizer.getConversationInfo();\r\n        const payload: { [id: string]: any } = this.createSpeechEventPayload(info, \"start\");\r\n        await this.sendSpeechEvent(connection, payload);\r\n        await this.sendWaveHeader(connection);\r\n        return;\r\n    }\r\n\r\n    protected sendSpeechEvent = (connection: IConnection, payload: { [id: string]: any }): Promise<void> => {\r\n        const speechEventJson = JSON.stringify(payload);\r\n\r\n        if (speechEventJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.event\",\r\n                this.privRequestSession.requestId,\r\n                \"application/json\",\r\n                speechEventJson));\r\n        }\r\n        return;\r\n    }\r\n\r\n    private createSpeechEventPayload(info: ConversationInfo, command: string): { [id: string]: any } {\r\n        const meeting: string = \"meeting\";\r\n        const eventDict: { [id: string]: any } = { id: meeting, name: command, meeting: info.conversationProperties };\r\n        const idString: string = \"id\";\r\n        const attendees: string = \"attendees\";\r\n        const record: string = \"record\";\r\n        eventDict[meeting][idString] = info.id;\r\n        eventDict[meeting][attendees] = info.participants;\r\n        eventDict[meeting][record] = info.conversationProperties.audiorecording === \"on\" ? \"true\" : \"false\";\r\n        return eventDict;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}