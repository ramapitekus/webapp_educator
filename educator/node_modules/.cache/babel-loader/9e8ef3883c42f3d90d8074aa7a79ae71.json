{"ast":null,"code":"import color from 'color';\nimport * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport Text from '../Typography/Text';\nimport Icon from '../Icon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\n/**\n * A component used to show an action item with an icon and a label in a navigation drawer.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/drawer-item.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Drawer } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *    <Drawer.Item\n *      style={{ backgroundColor: '#64ffda' }}\n *      icon=\"star\"\n *      label=\"First Item\"\n *    />\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nconst DrawerItem = _ref => {\n  let {\n    icon,\n    label,\n    active,\n    theme,\n    style,\n    onPress,\n    accessibilityLabel,\n    right,\n    ...rest\n  } = _ref;\n  const {\n    colors,\n    roundness\n  } = theme;\n  const backgroundColor = active ? color(colors.primary).alpha(0.12).rgb().string() : 'transparent';\n  const contentColor = active ? colors.primary : color(colors.text).alpha(0.68).rgb().string();\n  const font = theme.fonts.medium;\n  const labelMargin = icon ? 32 : 0;\n  return /*#__PURE__*/React.createElement(View, rest, /*#__PURE__*/React.createElement(TouchableRipple, {\n    borderless: true,\n    delayPressIn: 0,\n    onPress: onPress,\n    style: [styles.container, {\n      backgroundColor,\n      borderRadius: roundness\n    }, style] // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n    ,\n    accessibilityTraits: active ? ['button', 'selected'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      selected: active\n    },\n    accessibilityLabel: accessibilityLabel\n  }, /*#__PURE__*/React.createElement(View, {\n    style: styles.wrapper\n  }, /*#__PURE__*/React.createElement(View, {\n    style: styles.content\n  }, icon ? /*#__PURE__*/React.createElement(Icon, {\n    source: icon,\n    size: 24,\n    color: contentColor\n  }) : null, /*#__PURE__*/React.createElement(Text, {\n    selectable: false,\n    numberOfLines: 1,\n    style: [styles.label, {\n      color: contentColor,\n      ...font,\n      marginLeft: labelMargin\n    }]\n  }, label)), right === null || right === void 0 ? void 0 : right({\n    color: contentColor\n  }))));\n};\n\nDrawerItem.displayName = 'Drawer.Item';\nconst styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8\n  },\n  content: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  label: {\n    marginRight: 32\n  }\n});\nexport default withTheme(DrawerItem);","map":{"version":3,"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,IAAT,EAAeC,UAAf,QAAuD,cAAvD;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,IAAP,MAAiC,SAAjC;AACA,OAAOC,eAAP,MAA4B,oCAA5B;AACA,SAASC,SAAT,QAA0B,oBAA1B;AAkCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,UAAU,GAAG,QAUN;AAAA,MAVO;AAClBC,QADkB;AAElBC,SAFkB;AAGlBC,UAHkB;AAIlBC,SAJkB;AAKlBC,SALkB;AAMlBC,WANkB;AAOlBC,sBAPkB;AAQlBC,SARkB;AASlB,OAAGC;AATe,GAUP;AACX,QAAM;AAAEC,UAAF;AAAUC;AAAV,MAAwBP,KAA9B;AACA,QAAMQ,eAAe,GAAGT,MAAM,GAC1BX,KAAK,CAACkB,MAAM,CAACG,OAAR,CAALrB,CAAsBsB,KAAtBtB,CAA4B,IAA5BA,EAAkCuB,GAAlCvB,GAAwCwB,MAAxCxB,EAD0B,GAE1B,aAFJ;AAGA,QAAMyB,YAAY,GAAGd,MAAM,GACvBO,MAAM,CAACG,OADgB,GAEvBrB,KAAK,CAACkB,MAAM,CAACQ,IAAR,CAAL1B,CAAmBsB,KAAnBtB,CAAyB,IAAzBA,EAA+BuB,GAA/BvB,GAAqCwB,MAArCxB,EAFJ;AAGA,QAAM2B,IAAI,GAAGf,KAAK,CAACgB,KAANhB,CAAYiB,MAAzB;AACA,QAAMC,WAAW,GAAGrB,IAAI,GAAG,EAAH,GAAQ,CAAhC;AAEA,sBACER,oBAACC,IAAD,EAAUe,IAAV,eACEhB,oBAACK,eAAD;AACEyB,cAAU,MADZ;AAEEC,gBAAY,EAAE,CAFhB;AAGElB,WAAO,EAAEA,OAHX;AAIED,SAAK,EAAE,CACLoB,MAAM,CAACC,SADF,EAEL;AAAEd,qBAAF;AAAmBe,kBAAY,EAAEhB;AAAjC,KAFK,EAGLN,KAHK,CAJT,CASE;AATF;AAUEuB,uBAAmB,EAAEzB,MAAM,GAAG,CAAC,QAAD,EAAW,UAAX,CAAH,GAA4B,QAVzD;AAWE0B,8BAA0B,EAAC,QAX7B;AAYEC,qBAAiB,EAAC,QAZpB;AAaEC,sBAAkB,EAAE;AAAEC,cAAQ,EAAE7B;AAAZ,KAbtB;AAcEI,sBAAkB,EAAEA;AAdtB,kBAgBEd,oBAACC,IAAD;AAAMW,SAAK,EAAEoB,MAAM,CAACQ;AAApB,kBACExC,oBAACC,IAAD;AAAMW,SAAK,EAAEoB,MAAM,CAACS;AAApB,KACGjC,IAAI,gBACHR,oBAACI,IAAD;AAAMsC,UAAM,EAAElC,IAAd;AAAoBmC,QAAI,EAAE,EAA1B;AAA8B5C,SAAK,EAAEyB;AAArC,IADG,GAED,IAHN,eAIExB,oBAACG,IAAD;AACEyC,cAAU,EAAE,KADd;AAEEC,iBAAa,EAAE,CAFjB;AAGEjC,SAAK,EAAE,CACLoB,MAAM,CAACvB,KADF,EAEL;AACEV,WAAK,EAAEyB,YADT;AAEE,SAAGE,IAFL;AAGEoB,gBAAU,EAAEjB;AAHd,KAFK;AAHT,KAYGpB,KAZH,CAJF,CADF,EAoBGM,KApBH,SAoBGA,SApBH,WAoBGA,GApBH,MAoBGA,QAAK,CAAG;AAAEhB,SAAK,EAAEyB;AAAT,GAAH,CApBR,CAhBF,CADF,CADF;AArBF;;AAkEAjB,UAAU,CAACwC,WAAXxC,GAAyB,aAAzBA;AAEA,MAAMyB,MAAM,GAAG9B,UAAU,CAAC8C,MAAX9C,CAAkB;AAC/B+B,WAAS,EAAE;AACTgB,oBAAgB,EAAE,EADT;AAETC,kBAAc,EAAE;AAFP,GADoB;AAK/BV,SAAO,EAAE;AACPW,iBAAa,EAAE,KADR;AAEPC,cAAU,EAAE,QAFL;AAGPC,WAAO,EAAE;AAHF,GALsB;AAU/BZ,SAAO,EAAE;AACPa,QAAI,EAAE,CADC;AAEPH,iBAAa,EAAE,KAFR;AAGPC,cAAU,EAAE;AAHL,GAVsB;AAe/B3C,OAAK,EAAE;AACL8C,eAAW,EAAE;AADR;AAfwB,CAAlBrD,CAAf;AAoBA,eAAeI,SAAS,CAACC,UAAD,CAAxB","names":["color","React","View","StyleSheet","Text","Icon","TouchableRipple","withTheme","DrawerItem","icon","label","active","theme","style","onPress","accessibilityLabel","right","rest","colors","roundness","backgroundColor","primary","alpha","rgb","string","contentColor","text","font","fonts","medium","labelMargin","borderless","delayPressIn","styles","container","borderRadius","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","selected","wrapper","content","source","size","selectable","numberOfLines","marginLeft","displayName","create","marginHorizontal","marginVertical","flexDirection","alignItems","padding","flex","marginRight"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\node_modules\\react-native-paper\\lib\\module\\components\\Drawer\\DrawerItem.tsx"],"sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport { View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport Text from '../Typography/Text';\nimport Icon, { IconSource } from '../Icon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * The label text of the item.\n   */\n  label: string;\n  /**\n   * Icon to display for the `DrawerItem`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether to highlight the drawer item as active.\n   */\n  active?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Callback which returns a React element to display on the right side. For instance a Badge.\n   */\n  right?: (props: { color: string }) => React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A component used to show an action item with an icon and a label in a navigation drawer.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/drawer-item.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Drawer } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *    <Drawer.Item\n *      style={{ backgroundColor: '#64ffda' }}\n *      icon=\"star\"\n *      label=\"First Item\"\n *    />\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst DrawerItem = ({\n  icon,\n  label,\n  active,\n  theme,\n  style,\n  onPress,\n  accessibilityLabel,\n  right,\n  ...rest\n}: Props) => {\n  const { colors, roundness } = theme;\n  const backgroundColor = active\n    ? color(colors.primary).alpha(0.12).rgb().string()\n    : 'transparent';\n  const contentColor = active\n    ? colors.primary\n    : color(colors.text).alpha(0.68).rgb().string();\n  const font = theme.fonts.medium;\n  const labelMargin = icon ? 32 : 0;\n\n  return (\n    <View {...rest}>\n      <TouchableRipple\n        borderless\n        delayPressIn={0}\n        onPress={onPress}\n        style={[\n          styles.container,\n          { backgroundColor, borderRadius: roundness },\n          style,\n        ]}\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        accessibilityTraits={active ? ['button', 'selected'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={{ selected: active }}\n        accessibilityLabel={accessibilityLabel}\n      >\n        <View style={styles.wrapper}>\n          <View style={styles.content}>\n            {icon ? (\n              <Icon source={icon} size={24} color={contentColor} />\n            ) : null}\n            <Text\n              selectable={false}\n              numberOfLines={1}\n              style={[\n                styles.label,\n                {\n                  color: contentColor,\n                  ...font,\n                  marginLeft: labelMargin,\n                },\n              ]}\n            >\n              {label}\n            </Text>\n          </View>\n          {right?.({ color: contentColor })}\n        </View>\n      </TouchableRipple>\n    </View>\n  );\n};\n\nDrawerItem.displayName = 'Drawer.Item';\n\nconst styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8,\n  },\n  content: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  label: {\n    marginRight: 32,\n  },\n});\n\nexport default withTheme(DrawerItem);\n"]},"metadata":{},"sourceType":"module"}