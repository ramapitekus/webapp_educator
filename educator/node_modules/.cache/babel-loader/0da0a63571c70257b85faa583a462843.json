{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { ArgumentNullError, createNoDashGuid } from \"../common/Exports\";\nimport { WebsocketMessageAdapter } from \"./WebsocketMessageAdapter\";\nexport class WebsocketConnection {\n  constructor(uri, queryParameters, headers, messageFormatter, proxyInfo) {\n    let enableCompression = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n    let connectionId = arguments.length > 6 ? arguments[6] : undefined;\n    this.privIsDisposed = false;\n\n    this.isDisposed = () => {\n      return this.privIsDisposed;\n    };\n\n    this.state = () => {\n      return this.privConnectionMessageAdapter.state;\n    };\n\n    this.open = () => {\n      return this.privConnectionMessageAdapter.open();\n    };\n\n    this.send = message => {\n      return this.privConnectionMessageAdapter.send(message);\n    };\n\n    this.read = () => {\n      return this.privConnectionMessageAdapter.read();\n    };\n\n    if (!uri) {\n      throw new ArgumentNullError(\"uri\");\n    }\n\n    if (!messageFormatter) {\n      throw new ArgumentNullError(\"messageFormatter\");\n    }\n\n    this.privMessageFormatter = messageFormatter;\n    let queryParams = \"\";\n    let i = 0;\n\n    if (queryParameters) {\n      for (const paramName in queryParameters) {\n        if (paramName) {\n          queryParams += i === 0 && uri.indexOf(\"?\") === -1 ? \"?\" : \"&\";\n          const val = encodeURIComponent(queryParameters[paramName]);\n          queryParams += `${paramName}=${val}`;\n          i++;\n        }\n      }\n    }\n\n    if (headers) {\n      for (const headerName in headers) {\n        if (headerName) {\n          queryParams += i === 0 && uri.indexOf(\"?\") === -1 ? \"?\" : \"&\";\n          const val = encodeURIComponent(headers[headerName]);\n          queryParams += `${headerName}=${val}`;\n          i++;\n        }\n      }\n    }\n\n    this.privUri = uri + queryParams;\n    this.privId = connectionId ? connectionId : createNoDashGuid();\n    this.privConnectionMessageAdapter = new WebsocketMessageAdapter(this.privUri, this.id, this.privMessageFormatter, proxyInfo, headers, enableCompression);\n  }\n\n  dispose() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.privIsDisposed = true;\n\n      if (this.privConnectionMessageAdapter) {\n        yield this.privConnectionMessageAdapter.close();\n      }\n    });\n  }\n\n  get id() {\n    return this.privId;\n  }\n\n  get events() {\n    return this.privConnectionMessageAdapter.events;\n  }\n\n}","map":{"version":3,"mappings":"AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,SACIA,iBADJ,EAMIC,gBANJ,QAWO,mBAXP;AAaA,SAASC,uBAAT,QAAwC,2BAAxC;AAEA,OAAM,MAAOC,mBAAP,CAA0B;AAQ5BC,cACIC,GADJ,EAEIC,eAFJ,EAGIC,OAHJ,EAIIC,gBAJJ,EAKIC,SALJ,EAOyB;AAAA,QADrBC,iBACqB,uEADQ,KACR;AAAA,QAArBC,YAAqB;AATjB,0BAA0B,KAA1B;;AAkED,sBAAa,MAAc;AAC9B,aAAO,KAAKC,cAAZ;AACH,KAFM;;AAQA,iBAAQ,MAAsB;AACjC,aAAO,KAAKC,4BAAL,CAAkCC,KAAzC;AACH,KAFM;;AAIA,gBAAO,MAAsC;AAChD,aAAO,KAAKD,4BAAL,CAAkCE,IAAlC,EAAP;AACH,KAFM;;AAIA,gBAAQC,OAAD,IAA8C;AACxD,aAAO,KAAKH,4BAAL,CAAkCI,IAAlC,CAAuCD,OAAvC,CAAP;AACH,KAFM;;AAIA,gBAAO,MAAiC;AAC3C,aAAO,KAAKH,4BAAL,CAAkCK,IAAlC,EAAP;AACH,KAFM;;AA3EH,QAAI,CAACb,GAAL,EAAU;AACN,YAAM,IAAIL,iBAAJ,CAAsB,KAAtB,CAAN;AACH;;AAED,QAAI,CAACQ,gBAAL,EAAuB;AACnB,YAAM,IAAIR,iBAAJ,CAAsB,kBAAtB,CAAN;AACH;;AAED,SAAKmB,oBAAL,GAA4BX,gBAA5B;AAEA,QAAIY,WAAW,GAAG,EAAlB;AACA,QAAIC,CAAC,GAAG,CAAR;;AAEA,QAAIf,eAAJ,EAAqB;AACjB,WAAK,MAAMgB,SAAX,IAAwBhB,eAAxB,EAAyC;AACrC,YAAIgB,SAAJ,EAAe;AACXF,qBAAW,IAAMC,CAAC,KAAK,CAAP,IAAchB,GAAG,CAACkB,OAAJ,CAAY,GAAZ,MAAqB,CAAC,CAArC,GAA2C,GAA3C,GAAiD,GAAhE;AACA,gBAAMC,GAAG,GAAGC,kBAAkB,CAACnB,eAAe,CAACgB,SAAD,CAAhB,CAA9B;AACAF,qBAAW,IAAI,GAAGE,SAAS,IAAIE,GAAG,EAAlC;AACAH,WAAC;AACJ;AACJ;AACJ;;AAED,QAAId,OAAJ,EAAa;AACT,WAAK,MAAMmB,UAAX,IAAyBnB,OAAzB,EAAkC;AAC9B,YAAImB,UAAJ,EAAgB;AACZN,qBAAW,IAAMC,CAAC,KAAK,CAAP,IAAchB,GAAG,CAACkB,OAAJ,CAAY,GAAZ,MAAqB,CAAC,CAArC,GAA2C,GAA3C,GAAiD,GAAhE;AACA,gBAAMC,GAAG,GAAGC,kBAAkB,CAAClB,OAAO,CAACmB,UAAD,CAAR,CAA9B;AACAN,qBAAW,IAAI,GAAGM,UAAU,IAAIF,GAAG,EAAnC;AACAH,WAAC;AACJ;AACJ;AACJ;;AAED,SAAKM,OAAL,GAAetB,GAAG,GAAGe,WAArB;AACA,SAAKQ,MAAL,GAAcjB,YAAY,GAAGA,YAAH,GAAkBV,gBAAgB,EAA5D;AAEA,SAAKY,4BAAL,GAAoC,IAAIX,uBAAJ,CAChC,KAAKyB,OAD2B,EAEhC,KAAKE,EAF2B,EAGhC,KAAKV,oBAH2B,EAIhCV,SAJgC,EAKhCF,OALgC,EAMhCG,iBANgC,CAApC;AAOH;;AAEYoB,SAAO;;AAChB,WAAKlB,cAAL,GAAsB,IAAtB;;AAEA,UAAI,KAAKC,4BAAT,EAAuC;AACnC,cAAM,KAAKA,4BAAL,CAAkCkB,KAAlC,EAAN;AACH;AACJ;AAAA;;AAMY,MAAFF,EAAE;AACT,WAAO,KAAKD,MAAZ;AACH;;AAkBgB,MAANI,MAAM;AACb,WAAO,KAAKnB,4BAAL,CAAkCmB,MAAzC;AACH;;AAlG2B","names":["ArgumentNullError","createNoDashGuid","WebsocketMessageAdapter","WebsocketConnection","constructor","uri","queryParameters","headers","messageFormatter","proxyInfo","enableCompression","connectionId","privIsDisposed","privConnectionMessageAdapter","state","open","message","send","read","privMessageFormatter","queryParams","i","paramName","indexOf","val","encodeURIComponent","headerName","privUri","privId","id","dispose","close","events"],"sources":["C:\\Users\\ozgur\\Documents\\VSCodeProjects\\webapp_educator\\educator\\node_modules\\microsoft-cognitiveservices-speech-sdk\\distrib\\es2015\\src\\common.browser\\src\\common.browser\\WebsocketConnection.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionOpenResponse,\r\n    ConnectionState,\r\n    createNoDashGuid,\r\n    EventSource,\r\n    IConnection,\r\n    IStringDictionary,\r\n    IWebsocketMessageFormatter,\r\n} from \"../common/Exports\";\r\nimport { ProxyInfo } from \"./ProxyInfo\";\r\nimport { WebsocketMessageAdapter } from \"./WebsocketMessageAdapter\";\r\n\r\nexport class WebsocketConnection implements IConnection {\r\n\r\n    private privUri: string;\r\n    private privMessageFormatter: IWebsocketMessageFormatter;\r\n    private privConnectionMessageAdapter: WebsocketMessageAdapter;\r\n    private privId: string;\r\n    private privIsDisposed: boolean = false;\r\n\r\n    public constructor(\r\n        uri: string,\r\n        queryParameters: IStringDictionary<string>,\r\n        headers: IStringDictionary<string>,\r\n        messageFormatter: IWebsocketMessageFormatter,\r\n        proxyInfo: ProxyInfo,\r\n        enableCompression: boolean = false,\r\n        connectionId?: string) {\r\n\r\n        if (!uri) {\r\n            throw new ArgumentNullError(\"uri\");\r\n        }\r\n\r\n        if (!messageFormatter) {\r\n            throw new ArgumentNullError(\"messageFormatter\");\r\n        }\r\n\r\n        this.privMessageFormatter = messageFormatter;\r\n\r\n        let queryParams = \"\";\r\n        let i = 0;\r\n\r\n        if (queryParameters) {\r\n            for (const paramName in queryParameters) {\r\n                if (paramName) {\r\n                    queryParams += ((i === 0) && (uri.indexOf(\"?\") === -1)) ? \"?\" : \"&\";\r\n                    const val = encodeURIComponent(queryParameters[paramName]);\r\n                    queryParams += `${paramName}=${val}`;\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (headers) {\r\n            for (const headerName in headers) {\r\n                if (headerName) {\r\n                    queryParams += ((i === 0) && (uri.indexOf(\"?\") === -1)) ? \"?\" : \"&\";\r\n                    const val = encodeURIComponent(headers[headerName]);\r\n                    queryParams += `${headerName}=${val}`;\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.privUri = uri + queryParams;\r\n        this.privId = connectionId ? connectionId : createNoDashGuid();\r\n\r\n        this.privConnectionMessageAdapter = new WebsocketMessageAdapter(\r\n            this.privUri,\r\n            this.id,\r\n            this.privMessageFormatter,\r\n            proxyInfo,\r\n            headers,\r\n            enableCompression);\r\n    }\r\n\r\n    public async dispose(): Promise<void> {\r\n        this.privIsDisposed = true;\r\n\r\n        if (this.privConnectionMessageAdapter) {\r\n            await this.privConnectionMessageAdapter.close();\r\n        }\r\n    }\r\n\r\n    public isDisposed = (): boolean => {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public state = (): ConnectionState => {\r\n        return this.privConnectionMessageAdapter.state;\r\n    }\r\n\r\n    public open = (): Promise<ConnectionOpenResponse> => {\r\n        return this.privConnectionMessageAdapter.open();\r\n    }\r\n\r\n    public send = (message: ConnectionMessage): Promise<void> => {\r\n        return this.privConnectionMessageAdapter.send(message);\r\n    }\r\n\r\n    public read = (): Promise<ConnectionMessage> => {\r\n        return this.privConnectionMessageAdapter.read();\r\n    }\r\n\r\n    public get events(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionMessageAdapter.events;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}