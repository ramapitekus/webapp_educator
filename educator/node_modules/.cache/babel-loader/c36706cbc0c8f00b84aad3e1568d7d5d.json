{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ProxyInfo, WebsocketConnection } from \"../common.browser/Exports\";\nimport { PropertyId } from \"../sdk/Exports\";\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\nimport { WebsocketMessageFormatter } from \"./Exports\";\nimport { HeaderNames } from \"./HeaderNames\";\nimport { QueryParameterNames } from \"./QueryParameterNames\";\nexport class SpeechSynthesisConnectionFactory {\n  constructor() {\n    this.synthesisUri = \"/cognitiveservices/websocket/v1\";\n\n    this.create = (config, authInfo, connectionId) => {\n      let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\n      const region = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\n      const hostSuffix = ConnectionFactoryBase.getHostSuffix(region);\n      const endpointId = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\n      const hostPrefix = endpointId === undefined ? \"tts\" : \"voice\";\n      const host = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".\" + hostPrefix + \".speech\" + hostSuffix);\n      const queryParams = {};\n\n      if (!endpoint) {\n        endpoint = host + this.synthesisUri;\n      }\n\n      const headers = {};\n\n      if (authInfo.token !== undefined && authInfo.token !== \"\") {\n        headers[authInfo.headerName] = authInfo.token;\n      }\n\n      headers[HeaderNames.ConnectionId] = connectionId;\n\n      if (endpointId !== undefined) {\n        headers[QueryParameterNames.CustomVoiceDeploymentId] = endpointId;\n      }\n\n      config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\n      const enableCompression = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\n      return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromParameters(config.parameters), enableCompression, connectionId);\n    };\n  }\n\n}","map":{"version":3,"mappings":"AAAA;AACA;AAEA,SACIA,SADJ,EAEIC,mBAFJ,QAGO,2BAHP;AAQA,SAASC,UAAT,QAA2B,gBAA3B;AACA,SAASC,qBAAT,QAAsC,yBAAtC;AACA,SAGIC,yBAHJ,QAIO,WAJP;AAKA,SAASC,WAAT,QAA4B,eAA5B;AAEA,SACIC,mBADJ,QAEO,uBAFP;AAIA,OAAM,MAAOC,gCAAP,CAAuC;AAA7CC;AAEqB,wBAAuB,iCAAvB;;AAEV,kBAAS,CACZC,MADY,EAEZC,QAFY,EAGZC,YAHY,KAG0B;AAEtC,UAAIC,QAAQ,GAAWH,MAAM,CAACI,UAAP,CAAkBC,WAAlB,CAA8BZ,UAAU,CAACa,gCAAzC,EAA2EC,SAA3E,CAAvB;AACA,YAAMC,MAAM,GAAWR,MAAM,CAACI,UAAP,CAAkBC,WAAlB,CAA8BZ,UAAU,CAACgB,8BAAzC,EAAyEF,SAAzE,CAAvB;AACA,YAAMG,UAAU,GAAWhB,qBAAqB,CAACiB,aAAtB,CAAoCH,MAApC,CAA3B;AACA,YAAMI,UAAU,GAAGZ,MAAM,CAACI,UAAP,CAAkBC,WAAlB,CAA8BZ,UAAU,CAACoB,kCAAzC,EAA6EN,SAA7E,CAAnB;AACA,YAAMO,UAAU,GAAIF,UAAU,KAAKL,SAAhB,GAA6B,KAA7B,GAAqC,OAAxD;AACA,YAAMQ,IAAI,GAAWf,MAAM,CAACI,UAAP,CAAkBC,WAAlB,CAA8BZ,UAAU,CAACuB,4BAAzC,EAAuE,WAAWR,MAAX,GAAoB,GAApB,GAA0BM,UAA1B,GAAuC,SAAvC,GAAmDJ,UAA1H,CAArB;AAEA,YAAMO,WAAW,GAA8B,EAA/C;;AAEA,UAAI,CAACd,QAAL,EAAe;AACXA,gBAAQ,GAAGY,IAAI,GAAG,KAAKG,YAAvB;AACH;;AAED,YAAMC,OAAO,GAA8B,EAA3C;;AACA,UAAIlB,QAAQ,CAACmB,KAAT,KAAmBb,SAAnB,IAAgCN,QAAQ,CAACmB,KAAT,KAAmB,EAAvD,EAA2D;AACvDD,eAAO,CAAClB,QAAQ,CAACoB,UAAV,CAAP,GAA+BpB,QAAQ,CAACmB,KAAxC;AACH;;AACDD,aAAO,CAACvB,WAAW,CAAC0B,YAAb,CAAP,GAAoCpB,YAApC;;AACA,UAAIU,UAAU,KAAKL,SAAnB,EAA8B;AAC1BY,eAAO,CAACtB,mBAAmB,CAAC0B,uBAArB,CAAP,GAAuDX,UAAvD;AACH;;AAEDZ,YAAM,CAACI,UAAP,CAAkBoB,WAAlB,CAA8B/B,UAAU,CAACgC,2BAAzC,EAAsEtB,QAAtE;AAEA,YAAMuB,iBAAiB,GAAY1B,MAAM,CAACI,UAAP,CAAkBC,WAAlB,CAA8B,mCAA9B,EAAmE,OAAnE,MAAgF,MAAnH;AACA,aAAO,IAAIb,mBAAJ,CAAwBW,QAAxB,EAAkCc,WAAlC,EAA+CE,OAA/C,EAAwD,IAAIxB,yBAAJ,EAAxD,EAAyFJ,SAAS,CAACoC,cAAV,CAAyB3B,MAAM,CAACI,UAAhC,CAAzF,EAAsIsB,iBAAtI,EAAyJxB,YAAzJ,CAAP;AACH,KA/BM;AAgCV;;AApC4C","names":["ProxyInfo","WebsocketConnection","PropertyId","ConnectionFactoryBase","WebsocketMessageFormatter","HeaderNames","QueryParameterNames","SpeechSynthesisConnectionFactory","constructor","config","authInfo","connectionId","endpoint","parameters","getProperty","SpeechServiceConnection_Endpoint","undefined","region","SpeechServiceConnection_Region","hostSuffix","getHostSuffix","endpointId","SpeechServiceConnection_EndpointId","hostPrefix","host","SpeechServiceConnection_Host","queryParams","synthesisUri","headers","token","headerName","ConnectionId","CustomVoiceDeploymentId","setProperty","SpeechServiceConnection_Url","enableCompression","fromParameters"],"sources":["C:\\Users\\ozgur\\Documents\\VSCodeProjects\\webapp_educator\\educator\\node_modules\\microsoft-cognitiveservices-speech-sdk\\distrib\\es2015\\src\\common.speech\\src\\common.speech\\SpeechSynthesisConnectionFactory.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection, WebsocketMessageAdapter,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports\";\r\nimport { PropertyId } from \"../sdk/Exports\";\r\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\r\nimport {\r\n    AuthInfo,\r\n    SynthesizerConfig,\r\n    WebsocketMessageFormatter\r\n} from \"./Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { ISynthesisConnectionFactory } from \"./ISynthesisConnectionFactory\";\r\nimport {\r\n    QueryParameterNames\r\n} from \"./QueryParameterNames\";\r\n\r\nexport class SpeechSynthesisConnectionFactory implements ISynthesisConnectionFactory {\r\n\r\n    private readonly synthesisUri: string = \"/cognitiveservices/websocket/v1\";\r\n\r\n    public create = (\r\n        config: SynthesizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection => {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\r\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n        const endpointId = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\r\n        const hostPrefix = (endpointId === undefined) ? \"tts\" : \"voice\";\r\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".\" + hostPrefix + \".speech\" + hostSuffix);\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n\r\n        if (!endpoint) {\r\n            endpoint = host + this.synthesisUri;\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n        if (endpointId !== undefined) {\r\n            headers[QueryParameterNames.CustomVoiceDeploymentId] = endpointId;\r\n        }\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromParameters(config.parameters), enableCompression, connectionId);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}