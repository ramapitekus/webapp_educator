{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport * as tls from \"tls\";\nimport * as parse from \"url-parse\";\nimport * as ocsp from \"../../external/ocsp/ocsp\";\nimport { Events, OCSPCacheEntryExpiredEvent, OCSPCacheEntryNeedsRefreshEvent, OCSPCacheFetchErrorEvent, OCSPCacheHitEvent, OCSPCacheMissEvent, OCSPCacheUpdateCompleteEvent, OCSPCacheUpdateNeededEvent, OCSPDiskCacheHitEvent, OCSPDiskCacheStoreEvent, OCSPMemoryCacheHitEvent, OCSPMemoryCacheStoreEvent, OCSPResponseRetrievedEvent, OCSPStapleReceivedEvent, OCSPVerificationFailedEvent } from \"../common/Exports\";\nimport Agent from \"agent-base\"; // @ts-ignore\n\nimport Cache from \"async-disk-cache\";\nimport HttpsProxyAgent from \"https-proxy-agent\";\nimport * as net from \"net\";\nimport { OCSPCacheUpdateErrorEvent } from \"../common/OCSPEvents\";\nexport class CertCheckAgent {\n  constructor(proxyInfo) {\n    if (!!proxyInfo) {\n      this.privProxyInfo = proxyInfo;\n    } // Initialize this here to allow tests to set the env variable before the cache is constructed.\n\n\n    if (!CertCheckAgent.privDiskCache) {\n      CertCheckAgent.privDiskCache = new Cache(\"microsoft-cognitiveservices-speech-sdk-cache\", {\n        supportBuffer: true,\n        location: typeof process !== \"undefined\" && !!process.env.SPEECH_OCSP_CACHE_ROOT ? process.env.SPEECH_OCSP_CACHE_ROOT : undefined\n      });\n    }\n  } // Test hook to force the disk cache to be recreated.\n\n\n  static forceReinitDiskCache() {\n    CertCheckAgent.privDiskCache = undefined;\n    CertCheckAgent.privMemCache = {};\n  }\n\n  GetAgent(disableStapling) {\n    const agent = new Agent.Agent(this.CreateConnection);\n\n    if (this.privProxyInfo !== undefined && this.privProxyInfo.HostName !== undefined && this.privProxyInfo.Port > 0) {\n      const proxyName = \"privProxyInfo\";\n      agent[proxyName] = this.privProxyInfo;\n    }\n\n    return agent;\n  }\n\n  static GetProxyAgent(proxyInfo) {\n    const httpProxyOptions = {\n      host: proxyInfo.HostName,\n      port: proxyInfo.Port\n    };\n\n    if (!!proxyInfo.UserName) {\n      httpProxyOptions.headers = {\n        \"Proxy-Authentication\": \"Basic \" + new Buffer(proxyInfo.UserName + \":\" + (proxyInfo.Password === undefined) ? \"\" : proxyInfo.Password).toString(\"base64\")\n      };\n    } else {\n      httpProxyOptions.headers = {};\n    }\n\n    httpProxyOptions.headers.requestOCSP = \"true\";\n    const httpProxyAgent = new HttpsProxyAgent(httpProxyOptions);\n    return httpProxyAgent;\n  }\n\n  static OCSPCheck(socketPromise, proxyInfo) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let ocspRequest;\n      let stapling;\n      let resolved = false;\n      const socket = yield socketPromise;\n      socket.cork();\n      const tlsSocket = socket;\n      return new Promise((resolve, reject) => {\n        socket.on(\"OCSPResponse\", data => {\n          if (!!data) {\n            this.onEvent(new OCSPStapleReceivedEvent());\n            stapling = data;\n          }\n        });\n        socket.on(\"error\", error => {\n          if (!resolved) {\n            resolved = true;\n            socket.destroy();\n            reject(error);\n          }\n        });\n        tlsSocket.on(\"secure\", () => __awaiter(this, void 0, void 0, function* () {\n          const peer = tlsSocket.getPeerCertificate(true);\n\n          try {\n            const issuer = yield this.GetIssuer(peer); // We always need a request to verify the response.\n\n            ocspRequest = ocsp.request.generate(peer.raw, issuer.raw); // Do we have a result for this certificate in our memory cache?\n\n            const sig = ocspRequest.id.toString(\"hex\"); // Stapled response trumps cached response.\n\n            if (!stapling) {\n              const cacheEntry = yield CertCheckAgent.GetResponseFromCache(sig, ocspRequest, proxyInfo);\n              stapling = cacheEntry;\n            }\n\n            yield this.VerifyOCSPResponse(stapling, ocspRequest, proxyInfo);\n            socket.uncork();\n            resolved = true;\n            resolve(socket);\n          } catch (e) {\n            socket.destroy();\n            resolved = true;\n            reject(e);\n          }\n        }));\n      });\n    });\n  }\n\n  static GetIssuer(peer) {\n    if (peer.issuerCertificate) {\n      return Promise.resolve(peer.issuerCertificate);\n    }\n\n    return new Promise((resolve, reject) => {\n      const ocspAgent = new ocsp.Agent({});\n      ocspAgent.fetchIssuer(peer, null, (error, value) => {\n        if (!!error) {\n          reject(error);\n          return;\n        }\n\n        resolve(value);\n      });\n    });\n  }\n\n  static GetResponseFromCache(signature, ocspRequest, proxyInfo) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let cachedResponse = CertCheckAgent.privMemCache[signature];\n\n      if (!!cachedResponse) {\n        this.onEvent(new OCSPMemoryCacheHitEvent(signature));\n      } // Do we have a result for this certificate on disk in %TMP%?\n\n\n      if (!cachedResponse) {\n        try {\n          const diskCacheResponse = yield CertCheckAgent.privDiskCache.get(signature);\n\n          if (!!diskCacheResponse.isCached) {\n            CertCheckAgent.onEvent(new OCSPDiskCacheHitEvent(signature));\n            CertCheckAgent.StoreMemoryCacheEntry(signature, diskCacheResponse.value);\n            cachedResponse = diskCacheResponse.value;\n          }\n        } catch (error) {\n          cachedResponse = null;\n        }\n      }\n\n      if (!cachedResponse) {\n        return cachedResponse;\n      }\n\n      try {\n        const cachedOcspResponse = ocsp.utils.parseResponse(cachedResponse);\n        const tbsData = cachedOcspResponse.value.tbsResponseData;\n\n        if (tbsData.responses.length < 1) {\n          this.onEvent(new OCSPCacheFetchErrorEvent(signature, \"Not enough data in cached response\"));\n          return;\n        }\n\n        const cachedStartTime = tbsData.responses[0].thisUpdate;\n        const cachedNextTime = tbsData.responses[0].nextUpdate;\n\n        if (cachedNextTime < Date.now() + this.testTimeOffset - 60000) {\n          // Cached entry has expired.\n          this.onEvent(new OCSPCacheEntryExpiredEvent(signature, cachedNextTime));\n          cachedResponse = null;\n        } else {\n          // If we're within one day of the next update, or 50% of the way through the validity period,\n          // background an update to the cache.\n          const minUpdate = Math.min(24 * 60 * 60 * 1000, (cachedNextTime - cachedStartTime) / 2);\n\n          if (cachedNextTime - (Date.now() + this.testTimeOffset) < minUpdate) {\n            this.onEvent(new OCSPCacheEntryNeedsRefreshEvent(signature, cachedStartTime, cachedNextTime));\n            this.UpdateCache(ocspRequest, proxyInfo).catch(error => {\n              // Well, not much we can do here.\n              this.onEvent(new OCSPCacheUpdateErrorEvent(signature, error.toString()));\n            });\n          } else {\n            this.onEvent(new OCSPCacheHitEvent(signature, cachedStartTime, cachedNextTime));\n          }\n        }\n      } catch (error) {\n        this.onEvent(new OCSPCacheFetchErrorEvent(signature, error));\n        cachedResponse = null;\n      }\n\n      if (!cachedResponse) {\n        this.onEvent(new OCSPCacheMissEvent(signature));\n      }\n\n      return cachedResponse;\n    });\n  }\n\n  static VerifyOCSPResponse(cacheValue, ocspRequest, proxyInfo) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let ocspResponse = cacheValue;\n      const sig = ocspRequest.certID.toString(\"hex\"); // Do we have a valid response?\n\n      if (!ocspResponse) {\n        ocspResponse = yield CertCheckAgent.GetOCSPResponse(ocspRequest, proxyInfo);\n      }\n\n      return new Promise((resolve, reject) => {\n        ocsp.verify({\n          request: ocspRequest,\n          response: ocspResponse\n        }, (error, result) => {\n          if (!!error) {\n            CertCheckAgent.onEvent(new OCSPVerificationFailedEvent(ocspRequest.id.toString(\"hex\"), error)); // Bad Cached Value? One more try without the cache.\n\n            if (!!cacheValue) {\n              this.VerifyOCSPResponse(null, ocspRequest, proxyInfo).then(() => {\n                resolve();\n              }, error => {\n                reject(error);\n              });\n            } else {\n              reject(error);\n            }\n          } else {\n            if (!cacheValue) {\n              CertCheckAgent.StoreCacheEntry(ocspRequest.id.toString(\"hex\"), ocspResponse);\n            }\n\n            resolve();\n          }\n        });\n      });\n    });\n  }\n\n  static UpdateCache(req, proxyInfo) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const signature = req.id.toString(\"hex\");\n      this.onEvent(new OCSPCacheUpdateNeededEvent(signature));\n      const rawResponse = yield this.GetOCSPResponse(req, proxyInfo);\n      this.StoreCacheEntry(signature, rawResponse);\n      this.onEvent(new OCSPCacheUpdateCompleteEvent(req.id.toString(\"hex\")));\n    });\n  }\n\n  static StoreCacheEntry(sig, rawResponse) {\n    this.StoreMemoryCacheEntry(sig, rawResponse);\n    this.StoreDiskCacheEntry(sig, rawResponse);\n  }\n\n  static StoreMemoryCacheEntry(sig, rawResponse) {\n    this.privMemCache[sig] = rawResponse;\n    this.onEvent(new OCSPMemoryCacheStoreEvent(sig));\n  }\n\n  static StoreDiskCacheEntry(sig, rawResponse) {\n    this.privDiskCache.set(sig, rawResponse).then(() => {\n      this.onEvent(new OCSPDiskCacheStoreEvent(sig));\n    });\n  }\n\n  static GetOCSPResponse(req, proxyInfo) {\n    const ocspMethod = \"1.3.6.1.5.5.7.48.1\";\n    let options = {};\n\n    if (!!proxyInfo) {\n      const agent = CertCheckAgent.GetProxyAgent(proxyInfo);\n      options.agent = agent;\n    }\n\n    return new Promise((resolve, reject) => {\n      ocsp.utils.getAuthorityInfo(req.cert, ocspMethod, (error, uri) => {\n        if (error) {\n          reject(error);\n          return;\n        }\n\n        const parsedUri = parse.default(uri);\n        parsedUri.path = parsedUri.pathname;\n        options = Object.assign(Object.assign({}, options), parsedUri);\n        ocsp.utils.getResponse(options, req.data, (error, raw) => {\n          if (error) {\n            reject(error);\n            return;\n          }\n\n          this.onEvent(new OCSPResponseRetrievedEvent(req.certID.toString(\"hex\")));\n          resolve(raw);\n        });\n      });\n    });\n  }\n\n  CreateConnection(request, options) {\n    const enableOCSP = typeof process !== \"undefined\" && process.env.NODE_TLS_REJECT_UNAUTHORIZED !== \"0\" && process.env.SPEECH_CONDUCT_OCSP_CHECK !== \"0\" && options.secureEndpoint;\n    let socketPromise;\n    options = Object.assign(Object.assign({}, options), {\n      requestOCSP: !CertCheckAgent.forceDisableOCSPStapling,\n      servername: options.host\n    });\n\n    if (!!this.privProxyInfo) {\n      const httpProxyAgent = CertCheckAgent.GetProxyAgent(this.privProxyInfo);\n      const baseAgent = httpProxyAgent;\n      socketPromise = new Promise((resolve, reject) => {\n        baseAgent.callback(request, options, (error, socket) => {\n          if (!!error) {\n            reject(error);\n          } else {\n            resolve(socket);\n          }\n        });\n      });\n    } else {\n      if (!!options.secureEndpoint) {\n        socketPromise = Promise.resolve(tls.connect(options));\n      } else {\n        socketPromise = Promise.resolve(net.connect(options));\n      }\n    }\n\n    if (!!enableOCSP) {\n      return CertCheckAgent.OCSPCheck(socketPromise, this.privProxyInfo);\n    } else {\n      return socketPromise;\n    }\n  }\n\n} // Test hook to enable forcing expiration / refresh to happen.\n\nCertCheckAgent.testTimeOffset = 0; // Test hook to disable stapling for cache testing.\n\nCertCheckAgent.forceDisableOCSPStapling = false; // An in memory cache for recived responses.\n\nCertCheckAgent.privMemCache = {};\n\nCertCheckAgent.onEvent = event => {\n  Events.instance.onEvent(event);\n};","map":{"version":3,"mappings":"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","names":["tls","parse","ocsp","Events","OCSPCacheEntryExpiredEvent","OCSPCacheEntryNeedsRefreshEvent","OCSPCacheFetchErrorEvent","OCSPCacheHitEvent","OCSPCacheMissEvent","OCSPCacheUpdateCompleteEvent","OCSPCacheUpdateNeededEvent","OCSPDiskCacheHitEvent","OCSPDiskCacheStoreEvent","OCSPMemoryCacheHitEvent","OCSPMemoryCacheStoreEvent","OCSPResponseRetrievedEvent","OCSPStapleReceivedEvent","OCSPVerificationFailedEvent","Agent","Cache","HttpsProxyAgent","net","OCSPCacheUpdateErrorEvent","CertCheckAgent","constructor","proxyInfo","privProxyInfo","privDiskCache","supportBuffer","location","process","env","SPEECH_OCSP_CACHE_ROOT","undefined","forceReinitDiskCache","privMemCache","GetAgent","disableStapling","agent","CreateConnection","HostName","Port","proxyName","GetProxyAgent","httpProxyOptions","host","port","UserName","headers","Buffer","Password","toString","requestOCSP","httpProxyAgent","OCSPCheck","socketPromise","ocspRequest","stapling","resolved","socket","cork","tlsSocket","Promise","resolve","reject","on","data","onEvent","error","destroy","__awaiter","peer","getPeerCertificate","issuer","GetIssuer","request","generate","raw","sig","id","cacheEntry","GetResponseFromCache","VerifyOCSPResponse","uncork","e","issuerCertificate","ocspAgent","fetchIssuer","value","signature","cachedResponse","diskCacheResponse","get","isCached","StoreMemoryCacheEntry","cachedOcspResponse","utils","parseResponse","tbsData","tbsResponseData","responses","length","cachedStartTime","thisUpdate","cachedNextTime","nextUpdate","Date","now","testTimeOffset","minUpdate","Math","min","UpdateCache","catch","cacheValue","ocspResponse","certID","GetOCSPResponse","verify","response","result","then","StoreCacheEntry","req","rawResponse","StoreDiskCacheEntry","set","ocspMethod","options","getAuthorityInfo","cert","uri","parsedUri","default","path","pathname","getResponse","enableOCSP","NODE_TLS_REJECT_UNAUTHORIZED","SPEECH_CONDUCT_OCSP_CHECK","secureEndpoint","forceDisableOCSPStapling","servername","baseAgent","callback","connect","event","instance"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ_2\\educator\\node_modules\\microsoft-cognitiveservices-speech-sdk\\distrib\\es2015\\src\\common.browser\\src\\common.browser\\CertChecks.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport * as http from \"http\";\r\nimport * as tls from \"tls\";\r\nimport * as parse from \"url-parse\";\r\nimport * as ocsp from \"../../external/ocsp/ocsp\";\r\nimport {\r\n    Events,\r\n    OCSPCacheEntryExpiredEvent,\r\n    OCSPCacheEntryNeedsRefreshEvent,\r\n    OCSPCacheFetchErrorEvent,\r\n    OCSPCacheHitEvent,\r\n    OCSPCacheMissEvent,\r\n    OCSPCacheUpdateCompleteEvent,\r\n    OCSPCacheUpdateNeededEvent,\r\n    OCSPDiskCacheHitEvent,\r\n    OCSPDiskCacheStoreEvent,\r\n    OCSPEvent,\r\n    OCSPMemoryCacheHitEvent,\r\n    OCSPMemoryCacheStoreEvent,\r\n    OCSPResponseRetrievedEvent,\r\n    OCSPStapleReceivedEvent,\r\n    OCSPVerificationFailedEvent,\r\n} from \"../common/Exports\";\r\nimport { IStringDictionary } from \"../common/IDictionary\";\r\nimport { ProxyInfo } from \"./ProxyInfo\";\r\n\r\nimport Agent from \"agent-base\";\r\n\r\n// @ts-ignore\r\nimport Cache from \"async-disk-cache\";\r\nimport HttpsProxyAgent from \"https-proxy-agent\";\r\nimport * as net from \"net\";\r\nimport { OCSPCacheUpdateErrorEvent } from \"../common/OCSPEvents\";\r\n\r\nexport class CertCheckAgent {\r\n\r\n    // Test hook to enable forcing expiration / refresh to happen.\r\n    public static testTimeOffset: number = 0;\r\n\r\n    // Test hook to disable stapling for cache testing.\r\n    public static forceDisableOCSPStapling: boolean = false;\r\n\r\n    // An in memory cache for recived responses.\r\n    private static privMemCache: IStringDictionary<Buffer> = {};\r\n\r\n    // The on disk cache.\r\n    private static privDiskCache: Cache;\r\n\r\n    private privProxyInfo: ProxyInfo;\r\n\r\n    constructor(proxyInfo?: ProxyInfo) {\r\n        if (!!proxyInfo) {\r\n            this.privProxyInfo = proxyInfo;\r\n        }\r\n\r\n        // Initialize this here to allow tests to set the env variable before the cache is constructed.\r\n        if (!CertCheckAgent.privDiskCache) {\r\n            CertCheckAgent.privDiskCache = new Cache(\"microsoft-cognitiveservices-speech-sdk-cache\", { supportBuffer: true, location: (typeof process !== \"undefined\" && !!process.env.SPEECH_OCSP_CACHE_ROOT) ? process.env.SPEECH_OCSP_CACHE_ROOT : undefined });\r\n        }\r\n    }\r\n\r\n    // Test hook to force the disk cache to be recreated.\r\n    public static forceReinitDiskCache(): void {\r\n        CertCheckAgent.privDiskCache = undefined;\r\n        CertCheckAgent.privMemCache = {};\r\n    }\r\n\r\n    public GetAgent(disableStapling?: boolean): http.Agent {\r\n        const agent: any = new Agent.Agent(this.CreateConnection);\r\n\r\n        if (this.privProxyInfo !== undefined &&\r\n            this.privProxyInfo.HostName !== undefined &&\r\n            this.privProxyInfo.Port > 0) {\r\n            const proxyName: string = \"privProxyInfo\";\r\n            agent[proxyName] = this.privProxyInfo;\r\n        }\r\n\r\n        return agent;\r\n    }\r\n\r\n    private static GetProxyAgent(proxyInfo: ProxyInfo): HttpsProxyAgent {\r\n        const httpProxyOptions: HttpsProxyAgent.HttpsProxyAgentOptions = {\r\n            host: proxyInfo.HostName,\r\n            port: proxyInfo.Port,\r\n        };\r\n\r\n        if (!!proxyInfo.UserName) {\r\n            httpProxyOptions.headers = {\r\n                \"Proxy-Authentication\": \"Basic \" + new Buffer(proxyInfo.UserName + \":\" + (proxyInfo.Password === undefined) ? \"\" : proxyInfo.Password).toString(\"base64\"),\r\n            };\r\n        } else {\r\n            httpProxyOptions.headers = {};\r\n        }\r\n\r\n        httpProxyOptions.headers.requestOCSP = \"true\";\r\n\r\n        const httpProxyAgent: HttpsProxyAgent = new HttpsProxyAgent(httpProxyOptions);\r\n        return httpProxyAgent;\r\n    }\r\n\r\n    private static async OCSPCheck(socketPromise: Promise<net.Socket>, proxyInfo: ProxyInfo): Promise<net.Socket> {\r\n        let ocspRequest: ocsp.Request;\r\n        let stapling: Buffer;\r\n        let resolved: boolean = false;\r\n\r\n        const socket: net.Socket = await socketPromise;\r\n        socket.cork();\r\n\r\n        const tlsSocket: tls.TLSSocket = socket as tls.TLSSocket;\r\n\r\n        return new Promise<net.Socket>((resolve: (value: net.Socket) => void, reject: (error: string | Error) => void) => {\r\n            socket.on(\"OCSPResponse\", (data: Buffer): void => {\r\n                if (!!data) {\r\n                    this.onEvent(new OCSPStapleReceivedEvent());\r\n                    stapling = data;\r\n                }\r\n            });\r\n\r\n            socket.on(\"error\", (error: Error) => {\r\n                if (!resolved) {\r\n                    resolved = true;\r\n                    socket.destroy();\r\n                    reject(error);\r\n                }\r\n            });\r\n\r\n            tlsSocket.on(\"secure\", async () => {\r\n                const peer: tls.DetailedPeerCertificate = tlsSocket.getPeerCertificate(true);\r\n                try {\r\n                    const issuer: tls.DetailedPeerCertificate = await this.GetIssuer(peer);\r\n\r\n                    // We always need a request to verify the response.\r\n                    ocspRequest = ocsp.request.generate(peer.raw, issuer.raw);\r\n\r\n                    // Do we have a result for this certificate in our memory cache?\r\n                    const sig: string = ocspRequest.id.toString(\"hex\");\r\n\r\n                    // Stapled response trumps cached response.\r\n                    if (!stapling) {\r\n                        const cacheEntry: Buffer = await CertCheckAgent.GetResponseFromCache(sig, ocspRequest, proxyInfo);\r\n                        stapling = cacheEntry;\r\n                    }\r\n\r\n                    await this.VerifyOCSPResponse(stapling, ocspRequest, proxyInfo);\r\n\r\n                    socket.uncork();\r\n                    resolved = true;\r\n                    resolve(socket);\r\n                } catch (e) {\r\n                    socket.destroy();\r\n                    resolved = true;\r\n                    reject(e);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    private static GetIssuer(peer: tls.DetailedPeerCertificate): Promise<tls.DetailedPeerCertificate> {\r\n        if (peer.issuerCertificate) {\r\n            return Promise.resolve(peer.issuerCertificate);\r\n        }\r\n\r\n        return new Promise<tls.DetailedPeerCertificate>((resolve: (value: tls.DetailedPeerCertificate) => void, reject: (reason: string) => void) => {\r\n            const ocspAgent: ocsp.Agent = new ocsp.Agent({});\r\n            ocspAgent.fetchIssuer(peer, null, (error: string, value: tls.DetailedPeerCertificate): void => {\r\n                if (!!error) {\r\n                    reject(error);\r\n                    return;\r\n                }\r\n\r\n                resolve(value);\r\n            });\r\n        });\r\n    }\r\n\r\n    private static async GetResponseFromCache(signature: string, ocspRequest: ocsp.Request, proxyInfo: ProxyInfo): Promise<Buffer> {\r\n        let cachedResponse: Buffer = CertCheckAgent.privMemCache[signature];\r\n\r\n        if (!!cachedResponse) {\r\n            this.onEvent(new OCSPMemoryCacheHitEvent(signature));\r\n        }\r\n\r\n        // Do we have a result for this certificate on disk in %TMP%?\r\n        if (!cachedResponse) {\r\n            try {\r\n                const diskCacheResponse: any = await CertCheckAgent.privDiskCache.get(signature);\r\n                if (!!diskCacheResponse.isCached) {\r\n                    CertCheckAgent.onEvent(new OCSPDiskCacheHitEvent(signature));\r\n                    CertCheckAgent.StoreMemoryCacheEntry(signature, diskCacheResponse.value);\r\n                    cachedResponse = diskCacheResponse.value;\r\n                }\r\n            } catch (error) {\r\n                cachedResponse = null;\r\n            }\r\n        }\r\n\r\n        if (!cachedResponse) {\r\n            return cachedResponse;\r\n        }\r\n\r\n        try {\r\n            const cachedOcspResponse: ocsp.Response = ocsp.utils.parseResponse(cachedResponse);\r\n            const tbsData = cachedOcspResponse.value.tbsResponseData;\r\n            if (tbsData.responses.length < 1) {\r\n                this.onEvent(new OCSPCacheFetchErrorEvent(signature, \"Not enough data in cached response\"));\r\n                return;\r\n            }\r\n\r\n            const cachedStartTime: number = tbsData.responses[0].thisUpdate;\r\n            const cachedNextTime: number = tbsData.responses[0].nextUpdate;\r\n\r\n            if (cachedNextTime < (Date.now() + this.testTimeOffset - 60000)) {\r\n                // Cached entry has expired.\r\n                this.onEvent(new OCSPCacheEntryExpiredEvent(signature, cachedNextTime));\r\n                cachedResponse = null;\r\n            } else {\r\n                // If we're within one day of the next update, or 50% of the way through the validity period,\r\n                // background an update to the cache.\r\n\r\n                const minUpdate: number = Math.min(24 * 60 * 60 * 1000, (cachedNextTime - cachedStartTime) / 2);\r\n\r\n                if ((cachedNextTime - (Date.now() + this.testTimeOffset)) < minUpdate) {\r\n                    this.onEvent(new OCSPCacheEntryNeedsRefreshEvent(signature, cachedStartTime, cachedNextTime));\r\n                    this.UpdateCache(ocspRequest, proxyInfo).catch((error: string) => {\r\n                        // Well, not much we can do here.\r\n                        this.onEvent(new OCSPCacheUpdateErrorEvent(signature, error.toString()));\r\n                    });\r\n                } else {\r\n                    this.onEvent(new OCSPCacheHitEvent(signature, cachedStartTime, cachedNextTime));\r\n                }\r\n            }\r\n        } catch (error) {\r\n            this.onEvent(new OCSPCacheFetchErrorEvent(signature, error));\r\n            cachedResponse = null;\r\n        }\r\n        if (!cachedResponse) {\r\n            this.onEvent(new OCSPCacheMissEvent(signature));\r\n        }\r\n        return cachedResponse;\r\n    }\r\n\r\n    private static async VerifyOCSPResponse(cacheValue: Buffer, ocspRequest: ocsp.Request, proxyInfo: ProxyInfo): Promise<void> {\r\n        let ocspResponse: Buffer = cacheValue;\r\n        const sig: string = ocspRequest.certID.toString(\"hex\");\r\n\r\n        // Do we have a valid response?\r\n        if (!ocspResponse) {\r\n            ocspResponse = await CertCheckAgent.GetOCSPResponse(ocspRequest, proxyInfo);\r\n        }\r\n\r\n        return new Promise<void>((resolve: () => void, reject: (error: string | Error) => void) => {\r\n            ocsp.verify({ request: ocspRequest, response: ocspResponse }, (error: string, result: any): void => {\r\n                if (!!error) {\r\n                    CertCheckAgent.onEvent(new OCSPVerificationFailedEvent(ocspRequest.id.toString(\"hex\"), error));\r\n\r\n                    // Bad Cached Value? One more try without the cache.\r\n                    if (!!cacheValue) {\r\n                        this.VerifyOCSPResponse(null, ocspRequest, proxyInfo).then(() => {\r\n                            resolve();\r\n                        }, (error: Error) => {\r\n                            reject(error);\r\n                        });\r\n                    } else {\r\n                        reject(error);\r\n                    }\r\n                } else {\r\n                    if (!cacheValue) {\r\n                        CertCheckAgent.StoreCacheEntry(ocspRequest.id.toString(\"hex\"), ocspResponse);\r\n                    }\r\n                    resolve();\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    private static async UpdateCache(req: ocsp.Request, proxyInfo: ProxyInfo): Promise<void> {\r\n        const signature: string = req.id.toString(\"hex\");\r\n        this.onEvent(new OCSPCacheUpdateNeededEvent(signature));\r\n\r\n        const rawResponse: Buffer = await this.GetOCSPResponse(req, proxyInfo);\r\n        this.StoreCacheEntry(signature, rawResponse);\r\n        this.onEvent(new OCSPCacheUpdateCompleteEvent(req.id.toString(\"hex\")));\r\n\r\n    }\r\n\r\n    private static StoreCacheEntry(sig: string, rawResponse: Buffer): void {\r\n        this.StoreMemoryCacheEntry(sig, rawResponse);\r\n        this.StoreDiskCacheEntry(sig, rawResponse);\r\n    }\r\n\r\n    private static StoreMemoryCacheEntry(sig: string, rawResponse: Buffer): void {\r\n        this.privMemCache[sig] = rawResponse;\r\n        this.onEvent(new OCSPMemoryCacheStoreEvent(sig));\r\n    }\r\n\r\n    private static StoreDiskCacheEntry(sig: string, rawResponse: Buffer): void {\r\n        this.privDiskCache.set(sig, rawResponse).then(() => {\r\n            this.onEvent(new OCSPDiskCacheStoreEvent(sig));\r\n        });\r\n    }\r\n\r\n    private static GetOCSPResponse(req: ocsp.Request, proxyInfo: ProxyInfo): Promise<Buffer> {\r\n\r\n        const ocspMethod: string = \"1.3.6.1.5.5.7.48.1\";\r\n        let options: http.RequestOptions = {};\r\n\r\n        if (!!proxyInfo) {\r\n            const agent: HttpsProxyAgent = CertCheckAgent.GetProxyAgent(proxyInfo);\r\n            options.agent = agent;\r\n        }\r\n\r\n        return new Promise<Buffer>((resolve: (value: Buffer) => void, reject: (error: string | Error) => void) => {\r\n            ocsp.utils.getAuthorityInfo(req.cert, ocspMethod, (error: string, uri: string): void => {\r\n                if (error) {\r\n                    reject(error);\r\n                    return;\r\n                }\r\n\r\n                const parsedUri: {[k: string]: any} = parse.default(uri);\r\n                parsedUri.path = parsedUri.pathname;\r\n                options = { ...options, ...parsedUri };\r\n\r\n                ocsp.utils.getResponse(options, req.data, (error: string, raw: Buffer): void => {\r\n                    if (error) {\r\n                        reject(error);\r\n                        return;\r\n                    }\r\n\r\n                    this.onEvent(new OCSPResponseRetrievedEvent(req.certID.toString(\"hex\")));\r\n                    resolve(raw);\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    private static onEvent = (event: OCSPEvent): void => {\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private CreateConnection(request: Agent.ClientRequest, options: Agent.RequestOptions): Promise<net.Socket> {\r\n        const enableOCSP: boolean = (typeof process !== \"undefined\" && process.env.NODE_TLS_REJECT_UNAUTHORIZED !== \"0\" && process.env.SPEECH_CONDUCT_OCSP_CHECK !== \"0\") && options.secureEndpoint;\r\n        let socketPromise: Promise<net.Socket>;\r\n\r\n        options = {\r\n            ...options,\r\n            ...{\r\n                requestOCSP: !CertCheckAgent.forceDisableOCSPStapling,\r\n                servername: options.host\r\n            }\r\n        };\r\n\r\n        if (!!this.privProxyInfo) {\r\n            const httpProxyAgent: HttpsProxyAgent = CertCheckAgent.GetProxyAgent(this.privProxyInfo);\r\n            const baseAgent: Agent.Agent = httpProxyAgent as unknown as Agent.Agent;\r\n\r\n            socketPromise = new Promise<net.Socket>((resolve: (value: net.Socket) => void, reject: (error: string | Error) => void) => {\r\n                baseAgent.callback(request, options, (error: Error, socket: net.Socket) => {\r\n                    if (!!error) {\r\n                        reject(error);\r\n                    } else {\r\n                        resolve(socket);\r\n                    }\r\n                });\r\n            });\r\n        } else {\r\n            if (!!options.secureEndpoint) {\r\n                socketPromise = Promise.resolve(tls.connect(options));\r\n            } else {\r\n                socketPromise = Promise.resolve(net.connect(options));\r\n            }\r\n        }\r\n\r\n        if (!!enableOCSP) {\r\n            return CertCheckAgent.OCSPCheck(socketPromise, this.privProxyInfo);\r\n        } else {\r\n            return socketPromise;\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}