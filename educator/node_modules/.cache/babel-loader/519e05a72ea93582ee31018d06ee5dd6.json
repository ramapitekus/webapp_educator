{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport { Animated, StyleSheet } from 'react-native';\nimport { white, black } from '../styles/colors';\nimport { withTheme } from '../core/theming';\nimport getContrastingColor from '../utils/getContrastingColor';\nconst defaultSize = 20;\n/**\n * Badges are small status descriptors for UI elements.\n * A badge consists of a small circle, typically containing a number or other short set of characters, that appears in proximity to another object.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/badge-1.png\" />\n *     <figcaption>Badge with content</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/badge-2.png\" />\n *     <figcaption>Badge without content</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Badge } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Badge>3</Badge>\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nconst Badge = _ref => {\n  let {\n    children,\n    size = defaultSize,\n    style,\n    theme,\n    visible = true,\n    ...rest\n  } = _ref;\n  const {\n    current: opacity\n  } = React.useRef(new Animated.Value(visible ? 1 : 0));\n  const isFirstRendering = React.useRef(true);\n  const {\n    animation: {\n      scale\n    }\n  } = theme;\n  React.useEffect(() => {\n    // Do not run animation on very first rendering\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n\n    Animated.timing(opacity, {\n      toValue: visible ? 1 : 0,\n      duration: 150 * scale,\n      useNativeDriver: true\n    }).start();\n  }, [visible, opacity, scale]);\n  const {\n    backgroundColor = theme.colors.notification,\n    ...restStyle\n  } = StyleSheet.flatten(style) || {};\n  const textColor = getContrastingColor(backgroundColor, white, black);\n  const borderRadius = size / 2;\n  return /*#__PURE__*/React.createElement(Animated.Text, _extends({\n    numberOfLines: 1,\n    style: [{\n      opacity,\n      backgroundColor,\n      color: textColor,\n      fontSize: size * 0.5,\n      ...theme.fonts.regular,\n      lineHeight: size,\n      height: size,\n      minWidth: size,\n      borderRadius\n    }, styles.container, restStyle]\n  }, rest), children);\n};\n\nexport default withTheme(Badge);\nconst styles = StyleSheet.create({\n  container: {\n    alignSelf: 'flex-end',\n    textAlign: 'center',\n    textAlignVertical: 'center',\n    paddingHorizontal: 4,\n    overflow: 'hidden'\n  }\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAA2D,cAA3D;AACA,SAASC,KAAT,EAAgBC,KAAhB,QAA6B,kBAA7B;AACA,SAASC,SAAT,QAA0B,iBAA1B;AACA,OAAOC,mBAAP,MAAgC,8BAAhC;AAEA,MAAMC,WAAW,GAAG,EAApB;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,KAAK,GAAG,QAOD;AAAA,MAPE;AACbC,YADa;AAEbC,QAAI,GAAGH,WAFM;AAGbI,SAHa;AAIbC,SAJa;AAKbC,WAAO,GAAG,IALG;AAMb,OAAGC;AANU,GAOF;AACX,QAAM;AAAEC,WAAO,EAAEC;AAAX,MAAuBhB,KAAK,CAACiB,MAANjB,CAC3B,IAAIC,QAAQ,CAACiB,KAAb,CAAmBL,OAAO,GAAG,CAAH,GAAO,CAAjC,CAD2Bb,CAA7B;AAGA,QAAMmB,gBAAgB,GAAGnB,KAAK,CAACiB,MAANjB,CAAsB,IAAtBA,CAAzB;AAEA,QAAM;AACJoB,aAAS,EAAE;AAAEC;AAAF;AADP,MAEFT,KAFJ;AAIAZ,OAAK,CAACsB,SAANtB,CAAgB,MAAM;AACpB;AACA,QAAImB,gBAAgB,CAACJ,OAArB,EAA8B;AAC5BI,sBAAgB,CAACJ,OAAjBI,GAA2B,KAA3BA;AACA;AACD;;AAEDlB,YAAQ,CAACsB,MAATtB,CAAgBe,OAAhBf,EAAyB;AACvBuB,aAAO,EAAEX,OAAO,GAAG,CAAH,GAAO,CADA;AAEvBY,cAAQ,EAAE,MAAMJ,KAFO;AAGvBK,qBAAe,EAAE;AAHM,KAAzBzB,EAIG0B,KAJH1B;AAPF,KAYG,CAACY,OAAD,EAAUG,OAAV,EAAmBK,KAAnB,CAZHrB;AAcA,QAAM;AACJ4B,mBAAe,GAAGhB,KAAK,CAACiB,MAANjB,CAAakB,YAD3B;AAEJ,OAAGC;AAFC,MAGD7B,UAAU,CAAC8B,OAAX9B,CAAmBS,KAAnBT,KAA6B,EAHlC;AAKA,QAAM+B,SAAS,GAAG3B,mBAAmB,CAACsB,eAAD,EAAkBzB,KAAlB,EAAyBC,KAAzB,CAArC;AAEA,QAAM8B,YAAY,GAAGxB,IAAI,GAAG,CAA5B;AAEA,sBACEV,oBAACC,QAAD,CAAUkC,IAAV;AACEC,iBAAa,EAAE,CADjB;AAEEzB,SAAK,EAAE,CACL;AACEK,aADF;AAEEY,qBAFF;AAGES,WAAK,EAAEJ,SAHT;AAIEK,cAAQ,EAAE5B,IAAI,GAAG,GAJnB;AAKE,SAAGE,KAAK,CAAC2B,KAAN3B,CAAY4B,OALjB;AAMEC,gBAAU,EAAE/B,IANd;AAOEgC,YAAM,EAAEhC,IAPV;AAQEiC,cAAQ,EAAEjC,IARZ;AASEwB;AATF,KADK,EAYLU,MAAM,CAACC,SAZF,EAaLd,SAbK;AAFT,KAiBMjB,IAjBN,GAmBGL,QAnBH,CADF;AAxCF;;AAiEA,eAAeJ,SAAS,CAACG,KAAD,CAAxB;AAEA,MAAMoC,MAAM,GAAG1C,UAAU,CAAC4C,MAAX5C,CAAkB;AAC/B2C,WAAS,EAAE;AACTE,aAAS,EAAE,UADF;AAETC,aAAS,EAAE,QAFF;AAGTC,qBAAiB,EAAE,QAHV;AAITC,qBAAiB,EAAE,CAJV;AAKTC,YAAQ,EAAE;AALD;AADoB,CAAlBjD,CAAf","names":["React","Animated","StyleSheet","white","black","withTheme","getContrastingColor","defaultSize","Badge","children","size","style","theme","visible","rest","current","opacity","useRef","Value","isFirstRendering","animation","scale","useEffect","timing","toValue","duration","useNativeDriver","start","backgroundColor","colors","notification","restStyle","flatten","textColor","borderRadius","Text","numberOfLines","color","fontSize","fonts","regular","lineHeight","height","minWidth","styles","container","create","alignSelf","textAlign","textAlignVertical","paddingHorizontal","overflow"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\node_modules\\react-native-paper\\lib\\module\\components\\Badge.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Animated, StyleSheet, StyleProp, TextStyle } from 'react-native';\nimport { white, black } from '../styles/colors';\nimport { withTheme } from '../core/theming';\nimport getContrastingColor from '../utils/getContrastingColor';\n\nconst defaultSize = 20;\n\ntype Props = React.ComponentProps<typeof Animated.Text> & {\n  /**\n   * Whether the badge is visible\n   */\n  visible?: boolean;\n  /**\n   * Content of the `Badge`.\n   */\n  children?: string | number;\n  /**\n   * Size of the `Badge`.\n   */\n  size?: number;\n  style?: StyleProp<TextStyle>;\n  ref?: React.RefObject<typeof Animated.Text>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Badges are small status descriptors for UI elements.\n * A badge consists of a small circle, typically containing a number or other short set of characters, that appears in proximity to another object.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/badge-1.png\" />\n *     <figcaption>Badge with content</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/badge-2.png\" />\n *     <figcaption>Badge without content</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Badge } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Badge>3</Badge>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Badge = ({\n  children,\n  size = defaultSize,\n  style,\n  theme,\n  visible = true,\n  ...rest\n}: Props) => {\n  const { current: opacity } = React.useRef<Animated.Value>(\n    new Animated.Value(visible ? 1 : 0)\n  );\n  const isFirstRendering = React.useRef<boolean>(true);\n\n  const {\n    animation: { scale },\n  } = theme;\n\n  React.useEffect(() => {\n    // Do not run animation on very first rendering\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n\n    Animated.timing(opacity, {\n      toValue: visible ? 1 : 0,\n      duration: 150 * scale,\n      useNativeDriver: true,\n    }).start();\n  }, [visible, opacity, scale]);\n\n  const {\n    backgroundColor = theme.colors.notification,\n    ...restStyle\n  } = (StyleSheet.flatten(style) || {}) as TextStyle;\n\n  const textColor = getContrastingColor(backgroundColor, white, black);\n\n  const borderRadius = size / 2;\n\n  return (\n    <Animated.Text\n      numberOfLines={1}\n      style={[\n        {\n          opacity,\n          backgroundColor,\n          color: textColor,\n          fontSize: size * 0.5,\n          ...theme.fonts.regular,\n          lineHeight: size,\n          height: size,\n          minWidth: size,\n          borderRadius,\n        },\n        styles.container,\n        restStyle,\n      ]}\n      {...rest}\n    >\n      {children}\n    </Animated.Text>\n  );\n};\n\nexport default withTheme(Badge);\n\nconst styles = StyleSheet.create({\n  container: {\n    alignSelf: 'flex-end',\n    textAlign: 'center',\n    textAlignVertical: 'center',\n    paddingHorizontal: 4,\n    overflow: 'hidden',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}