{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ForceDictationPropertyName, OutputFormatPropertyName, ServicePropertiesPropertyName } from \"../common.speech/Exports\";\nimport { Contracts } from \"./Contracts\";\nimport { OutputFormat, ProfanityOption, PropertyCollection, PropertyId, SpeechConfig, SpeechSynthesisOutputFormat } from \"./Exports\";\n/**\r\n * Speech translation configuration.\r\n * @class SpeechTranslationConfig\r\n */\n\nexport class SpeechTranslationConfig extends SpeechConfig {\n  /**\r\n   * Creates an instance of recognizer config.\r\n   */\n  constructor() {\n    super();\n  }\n  /**\r\n   * Static instance of SpeechTranslationConfig returned by passing a subscription key and service region.\r\n   * @member SpeechTranslationConfig.fromSubscription\r\n   * @function\r\n   * @public\r\n   * @param {string} subscriptionKey - The subscription key.\r\n   * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n   * @returns {SpeechTranslationConfig} The speech translation config.\r\n   */\n\n\n  static fromSubscription(subscriptionKey, region) {\n    Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\n    Contracts.throwIfNullOrWhitespace(region, \"region\");\n    const ret = new SpeechTranslationConfigImpl();\n    ret.properties.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\n    ret.properties.setProperty(PropertyId.SpeechServiceConnection_Region, region);\n    return ret;\n  }\n  /**\r\n   * Static instance of SpeechTranslationConfig returned by passing authorization token and service region.\r\n   * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n   *       expires, the caller needs to refresh it by setting the property authorizationToken with a new\r\n   *       valid token. Otherwise, all the recognizers created by this SpeechTranslationConfig instance\r\n   *       will encounter errors during recognition.\r\n   * As configuration values are copied when creating a new recognizer, the new token value will not apply\r\n   * to recognizers that have already been created.\r\n   * For recognizers that have been created before, you need to set authorization token of the corresponding recognizer\r\n   * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\r\n   * @member SpeechTranslationConfig.fromAuthorizationToken\r\n   * @function\r\n   * @public\r\n   * @param {string} authorizationToken - The authorization token.\r\n   * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n   * @returns {SpeechTranslationConfig} The speech translation config.\r\n   */\n\n\n  static fromAuthorizationToken(authorizationToken, region) {\n    Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\n    Contracts.throwIfNullOrWhitespace(region, \"region\");\n    const ret = new SpeechTranslationConfigImpl();\n    ret.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\n    ret.properties.setProperty(PropertyId.SpeechServiceConnection_Region, region);\n    return ret;\n  }\n  /**\r\n   * Creates an instance of the speech config with specified host and subscription key.\r\n   * This method is intended only for users who use a non-default service host. Standard resource path will be assumed.\r\n   * For services with a non-standard resource path or no path at all, use fromEndpoint instead.\r\n   * Note: Query parameters are not allowed in the host URI and must be set by other APIs.\r\n   * Note: To use an authorization token with fromHost, use fromHost(URL),\r\n   * and then set the AuthorizationToken property on the created SpeechConfig instance.\r\n   * Note: Added in version 1.9.0.\r\n   * @member SpeechConfig.fromHost\r\n   * @function\r\n   * @public\r\n   * @param {URL} host - The service endpoint to connect to. Format is \"protocol://host:port\" where \":port\" is optional.\r\n   * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization token must be set.\r\n   * @returns {SpeechConfig} A speech factory instance.\r\n   */\n\n\n  static fromHost(hostName, subscriptionKey) {\n    Contracts.throwIfNull(hostName, \"hostName\");\n    const speechImpl = new SpeechTranslationConfigImpl();\n    speechImpl.setProperty(PropertyId.SpeechServiceConnection_Host, hostName.protocol + \"//\" + hostName.hostname + (hostName.port === \"\" ? \"\" : \":\" + hostName.port));\n\n    if (undefined !== subscriptionKey) {\n      speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\n    }\n\n    return speechImpl;\n  }\n  /**\r\n   * Creates an instance of the speech translation config with specified endpoint and subscription key.\r\n   * This method is intended only for users who use a non-standard service endpoint or paramters.\r\n   * Note: The query properties specified in the endpoint URL are not changed, even if they are\r\n   *       set by any other APIs. For example, if language is defined in the uri as query parameter\r\n   *       \"language=de-DE\", and also set by the speechRecognitionLanguage property, the language\r\n   *       setting in uri takes precedence, and the effective language is \"de-DE\".\r\n   * Only the properties that are not specified in the endpoint URL can be set by other APIs.\r\n   * Note: To use authorization token with fromEndpoint, pass an empty string to the subscriptionKey in the\r\n   *       fromEndpoint method, and then set authorizationToken=\"token\" on the created SpeechConfig instance to\r\n   *       use the authorization token.\r\n   * @member SpeechTranslationConfig.fromEndpoint\r\n   * @function\r\n   * @public\r\n   * @param {URL} endpoint - The service endpoint to connect to.\r\n   * @param {string} subscriptionKey - The subscription key.\r\n   * @returns {SpeechTranslationConfig} A speech config instance.\r\n   */\n\n\n  static fromEndpoint(endpoint, subscriptionKey) {\n    Contracts.throwIfNull(endpoint, \"endpoint\");\n    Contracts.throwIfNull(subscriptionKey, \"subscriptionKey\");\n    const ret = new SpeechTranslationConfigImpl();\n    ret.properties.setProperty(PropertyId.SpeechServiceConnection_Endpoint, endpoint.href);\n    ret.properties.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\n    return ret;\n  }\n\n}\n/**\r\n * @private\r\n * @class SpeechTranslationConfigImpl\r\n */\n// tslint:disable-next-line:max-classes-per-file\n\nexport class SpeechTranslationConfigImpl extends SpeechTranslationConfig {\n  constructor() {\n    super();\n    this.privSpeechProperties = new PropertyCollection();\n    this.outputFormat = OutputFormat.Simple;\n  }\n  /**\r\n   * Gets/Sets the authorization token.\r\n   * If this is set, subscription key is ignored.\r\n   * User needs to make sure the provided authorization token is valid and not expired.\r\n   * @member SpeechTranslationConfigImpl.prototype.authorizationToken\r\n   * @function\r\n   * @public\r\n   * @param {string} value - The authorization token.\r\n   */\n\n\n  set authorizationToken(value) {\n    Contracts.throwIfNullOrWhitespace(value, \"value\");\n    this.privSpeechProperties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\n  }\n  /**\r\n   * Sets the speech recognition language.\r\n   * @member SpeechTranslationConfigImpl.prototype.speechRecognitionLanguage\r\n   * @function\r\n   * @public\r\n   * @param {string} value - The authorization token.\r\n   */\n\n\n  set speechRecognitionLanguage(value) {\n    Contracts.throwIfNullOrWhitespace(value, \"value\");\n    this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_RecoLanguage, value);\n  }\n  /**\r\n   * Gets the speech recognition language.\r\n   * @member SpeechTranslationConfigImpl.prototype.speechRecognitionLanguage\r\n   * @function\r\n   * @public\r\n   * @return {string} The speechRecognitionLanguage.\r\n   */\n\n\n  get speechRecognitionLanguage() {\n    return this.privSpeechProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\n  }\n  /**\r\n   * @member SpeechTranslationConfigImpl.prototype.subscriptionKey\r\n   * @function\r\n   * @public\r\n   */\n\n\n  get subscriptionKey() {\n    return this.privSpeechProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key]);\n  }\n  /**\r\n   * Gets the output format\r\n   * @member SpeechTranslationConfigImpl.prototype.outputFormat\r\n   * @function\r\n   * @public\r\n   */\n\n\n  get outputFormat() {\n    return OutputFormat[this.privSpeechProperties.getProperty(OutputFormatPropertyName, undefined)];\n  }\n  /**\r\n   * Gets/Sets the output format\r\n   * @member SpeechTranslationConfigImpl.prototype.outputFormat\r\n   * @function\r\n   * @public\r\n   */\n\n\n  set outputFormat(value) {\n    this.privSpeechProperties.setProperty(OutputFormatPropertyName, OutputFormat[value]);\n  }\n  /**\r\n   * Gets the endpoint id.\r\n   * @member SpeechTranslationConfigImpl.prototype.endpointId\r\n   * @function\r\n   * @public\r\n   */\n\n\n  get endpointId() {\n    return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_EndpointId);\n  }\n  /**\r\n   * Gets/Sets the endpoint id.\r\n   * @member SpeechTranslationConfigImpl.prototype.endpointId\r\n   * @function\r\n   * @public\r\n   */\n\n\n  set endpointId(value) {\n    this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_EndpointId, value);\n  }\n  /**\r\n   * Add a (text) target language to translate into.\r\n   * @member SpeechTranslationConfigImpl.prototype.addTargetLanguage\r\n   * @function\r\n   * @public\r\n   * @param {string} value - The language such as de-DE\r\n   */\n\n\n  addTargetLanguage(value) {\n    Contracts.throwIfNullOrWhitespace(value, \"value\");\n    const languages = this.targetLanguages;\n    languages.push(value);\n    this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\n  }\n  /**\r\n   * Gets the (text) target language to translate into.\r\n   * @member SpeechTranslationConfigImpl.prototype.targetLanguages\r\n   * @function\r\n   * @public\r\n   * @param {string} value - The language such as de-DE\r\n   */\n\n\n  get targetLanguages() {\n    if (this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\n      return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\n    } else {\n      return [];\n    }\n  }\n  /**\r\n   * Gets the voice name.\r\n   * @member SpeechTranslationConfigImpl.prototype.voiceName\r\n   * @function\r\n   * @public\r\n   */\n\n\n  get voiceName() {\n    return this.getProperty(PropertyId[PropertyId.SpeechServiceConnection_TranslationVoice]);\n  }\n  /**\r\n   * Gets/Sets the voice of the translated language, enable voice synthesis output.\r\n   * @member SpeechTranslationConfigImpl.prototype.voiceName\r\n   * @function\r\n   * @public\r\n   * @param {string} value - The name of the voice.\r\n   */\n\n\n  set voiceName(value) {\n    Contracts.throwIfNullOrWhitespace(value, \"value\");\n    this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_TranslationVoice, value);\n  }\n  /**\r\n   * Provides the region.\r\n   * @member SpeechTranslationConfigImpl.prototype.region\r\n   * @function\r\n   * @public\r\n   * @returns {string} The region.\r\n   */\n\n\n  get region() {\n    return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_Region);\n  }\n\n  setProxy(proxyHostName, proxyPort, proxyUserName, proxyPassword) {\n    this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyHostName], proxyHostName);\n    this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPort], proxyPort);\n    this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyUserName], proxyUserName);\n    this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPassword], proxyPassword);\n  }\n  /**\r\n   * Gets an arbitrary property value.\r\n   * @member SpeechTranslationConfigImpl.prototype.getProperty\r\n   * @function\r\n   * @public\r\n   * @param {string} name - The name of the property.\r\n   * @param {string} def - The default value of the property in case it is not set.\r\n   * @returns {string} The value of the property.\r\n   */\n\n\n  getProperty(name, def) {\n    return this.privSpeechProperties.getProperty(name, def);\n  }\n  /**\r\n   * Gets/Sets an arbitrary property value.\r\n   * @member SpeechTranslationConfigImpl.prototype.setProperty\r\n   * @function\r\n   * @public\r\n   * @param {string} name - The name of the property.\r\n   * @param {string} value - The value of the property.\r\n   */\n\n\n  setProperty(name, value) {\n    this.privSpeechProperties.setProperty(name, value);\n  }\n  /**\r\n   * Provides access to custom properties.\r\n   * @member SpeechTranslationConfigImpl.prototype.properties\r\n   * @function\r\n   * @public\r\n   * @returns {PropertyCollection} The properties.\r\n   */\n\n\n  get properties() {\n    return this.privSpeechProperties;\n  }\n  /**\r\n   * Dispose of associated resources.\r\n   * @member SpeechTranslationConfigImpl.prototype.close\r\n   * @function\r\n   * @public\r\n   */\n\n\n  close() {\n    return;\n  }\n\n  setServiceProperty(name, value, channel) {\n    const currentProperties = JSON.parse(this.privSpeechProperties.getProperty(ServicePropertiesPropertyName, \"{}\"));\n    currentProperties[name] = value;\n    this.privSpeechProperties.setProperty(ServicePropertiesPropertyName, JSON.stringify(currentProperties));\n  }\n\n  setProfanity(profanity) {\n    this.privSpeechProperties.setProperty(PropertyId.SpeechServiceResponse_ProfanityOption, ProfanityOption[profanity]);\n  }\n\n  enableAudioLogging() {\n    this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_EnableAudioLogging, \"true\");\n  }\n\n  requestWordLevelTimestamps() {\n    this.privSpeechProperties.setProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"true\");\n  }\n\n  enableDictation() {\n    this.privSpeechProperties.setProperty(ForceDictationPropertyName, \"true\");\n  }\n\n  get speechSynthesisLanguage() {\n    return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_SynthLanguage);\n  }\n\n  set speechSynthesisLanguage(language) {\n    this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_SynthLanguage, language);\n  }\n\n  get speechSynthesisVoiceName() {\n    return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_SynthVoice);\n  }\n\n  set speechSynthesisVoiceName(voice) {\n    this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_SynthVoice, voice);\n  }\n\n  get speechSynthesisOutputFormat() {\n    return SpeechSynthesisOutputFormat[this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)];\n  }\n\n  set speechSynthesisOutputFormat(format) {\n    this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, SpeechSynthesisOutputFormat[format]);\n  }\n\n}","map":{"version":3,"mappings":"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","names":["ForceDictationPropertyName","OutputFormatPropertyName","ServicePropertiesPropertyName","Contracts","OutputFormat","ProfanityOption","PropertyCollection","PropertyId","SpeechConfig","SpeechSynthesisOutputFormat","SpeechTranslationConfig","constructor","fromSubscription","subscriptionKey","region","throwIfNullOrWhitespace","ret","SpeechTranslationConfigImpl","properties","setProperty","SpeechServiceConnection_Key","SpeechServiceConnection_Region","fromAuthorizationToken","authorizationToken","SpeechServiceAuthorization_Token","fromHost","hostName","throwIfNull","speechImpl","SpeechServiceConnection_Host","protocol","hostname","port","undefined","fromEndpoint","endpoint","SpeechServiceConnection_Endpoint","href","privSpeechProperties","outputFormat","Simple","value","speechRecognitionLanguage","SpeechServiceConnection_RecoLanguage","getProperty","endpointId","SpeechServiceConnection_EndpointId","addTargetLanguage","languages","targetLanguages","push","SpeechServiceConnection_TranslationToLanguages","join","split","voiceName","SpeechServiceConnection_TranslationVoice","setProxy","proxyHostName","proxyPort","proxyUserName","proxyPassword","SpeechServiceConnection_ProxyHostName","SpeechServiceConnection_ProxyPort","SpeechServiceConnection_ProxyUserName","SpeechServiceConnection_ProxyPassword","name","def","close","setServiceProperty","channel","currentProperties","JSON","parse","stringify","setProfanity","profanity","SpeechServiceResponse_ProfanityOption","enableAudioLogging","SpeechServiceConnection_EnableAudioLogging","requestWordLevelTimestamps","SpeechServiceResponse_RequestWordLevelTimestamps","enableDictation","speechSynthesisLanguage","SpeechServiceConnection_SynthLanguage","language","speechSynthesisVoiceName","SpeechServiceConnection_SynthVoice","voice","speechSynthesisOutputFormat","SpeechServiceConnection_SynthOutputFormat","format"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\node_modules\\microsoft-cognitiveservices-speech-sdk\\distrib\\es2015\\src\\sdk\\src\\sdk\\SpeechTranslationConfig.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ForceDictationPropertyName,\r\n    OutputFormatPropertyName,\r\n    ServicePropertiesPropertyName\r\n} from \"../common.speech/Exports\";\r\nimport { IStringDictionary } from \"../common/Exports\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    OutputFormat,\r\n    ProfanityOption,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ServicePropertyChannel,\r\n    SpeechConfig, SpeechSynthesisOutputFormat,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Speech translation configuration.\r\n * @class SpeechTranslationConfig\r\n */\r\nexport abstract class SpeechTranslationConfig extends SpeechConfig {\r\n\r\n    /**\r\n     * Creates an instance of recognizer config.\r\n     */\r\n    protected constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Static instance of SpeechTranslationConfig returned by passing a subscription key and service region.\r\n     * @member SpeechTranslationConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param {string} subscriptionKey - The subscription key.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechTranslationConfig} The speech translation config.\r\n     */\r\n    public static fromSubscription(subscriptionKey: string, region: string): SpeechTranslationConfig {\r\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const ret: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Static instance of SpeechTranslationConfig returned by passing authorization token and service region.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     *       expires, the caller needs to refresh it by setting the property authorizationToken with a new\r\n     *       valid token. Otherwise, all the recognizers created by this SpeechTranslationConfig instance\r\n     *       will encounter errors during recognition.\r\n     * As configuration values are copied when creating a new recognizer, the new token value will not apply\r\n     * to recognizers that have already been created.\r\n     * For recognizers that have been created before, you need to set authorization token of the corresponding recognizer\r\n     * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\r\n     * @member SpeechTranslationConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} authorizationToken - The authorization token.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechTranslationConfig} The speech translation config.\r\n     */\r\n    public static fromAuthorizationToken(authorizationToken: string, region: string): SpeechTranslationConfig {\r\n        Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const ret: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\r\n        ret.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech config with specified host and subscription key.\r\n     * This method is intended only for users who use a non-default service host. Standard resource path will be assumed.\r\n     * For services with a non-standard resource path or no path at all, use fromEndpoint instead.\r\n     * Note: Query parameters are not allowed in the host URI and must be set by other APIs.\r\n     * Note: To use an authorization token with fromHost, use fromHost(URL),\r\n     * and then set the AuthorizationToken property on the created SpeechConfig instance.\r\n     * Note: Added in version 1.9.0.\r\n     * @member SpeechConfig.fromHost\r\n     * @function\r\n     * @public\r\n     * @param {URL} host - The service endpoint to connect to. Format is \"protocol://host:port\" where \":port\" is optional.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization token must be set.\r\n     * @returns {SpeechConfig} A speech factory instance.\r\n     */\r\n    public static fromHost(hostName: URL, subscriptionKey?: string): SpeechConfig {\r\n        Contracts.throwIfNull(hostName, \"hostName\");\r\n\r\n        const speechImpl: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Host, hostName.protocol + \"//\" + hostName.hostname + (hostName.port === \"\" ? \"\" : \":\" + hostName.port));\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech translation config with specified endpoint and subscription key.\r\n     * This method is intended only for users who use a non-standard service endpoint or paramters.\r\n     * Note: The query properties specified in the endpoint URL are not changed, even if they are\r\n     *       set by any other APIs. For example, if language is defined in the uri as query parameter\r\n     *       \"language=de-DE\", and also set by the speechRecognitionLanguage property, the language\r\n     *       setting in uri takes precedence, and the effective language is \"de-DE\".\r\n     * Only the properties that are not specified in the endpoint URL can be set by other APIs.\r\n     * Note: To use authorization token with fromEndpoint, pass an empty string to the subscriptionKey in the\r\n     *       fromEndpoint method, and then set authorizationToken=\"token\" on the created SpeechConfig instance to\r\n     *       use the authorization token.\r\n     * @member SpeechTranslationConfig.fromEndpoint\r\n     * @function\r\n     * @public\r\n     * @param {URL} endpoint - The service endpoint to connect to.\r\n     * @param {string} subscriptionKey - The subscription key.\r\n     * @returns {SpeechTranslationConfig} A speech config instance.\r\n     */\r\n    public static fromEndpoint(endpoint: URL, subscriptionKey: string): SpeechTranslationConfig {\r\n        Contracts.throwIfNull(endpoint, \"endpoint\");\r\n        Contracts.throwIfNull(subscriptionKey, \"subscriptionKey\");\r\n\r\n        const ret: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Endpoint, endpoint.href);\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n     * @member SpeechTranslationConfig.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set authorizationToken(value: string);\r\n\r\n    /**\r\n     * Gets/Sets the speech recognition language.\r\n     * @member SpeechTranslationConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set speechRecognitionLanguage(value: string);\r\n\r\n    /**\r\n     * Add a (text) target language to translate into.\r\n     * @member SpeechTranslationConfig.prototype.addTargetLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public abstract addTargetLanguage(value: string): void;\r\n\r\n    /**\r\n     * Gets the (text) target language to translate into.\r\n     * @member SpeechTranslationConfig.prototype.targetLanguages\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public abstract get targetLanguages(): string[];\r\n\r\n    /**\r\n     * Gets the selected voice name.\r\n     * @member SpeechTranslationConfig.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @returns {string} The voice name.\r\n     */\r\n    public abstract get voiceName(): string;\r\n\r\n    /**\r\n     * Gets/Sets voice of the translated language, enable voice synthesis output.\r\n     * @member SpeechTranslationConfig.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The name of the voice.\r\n     */\r\n    public abstract set voiceName(value: string);\r\n\r\n    /**\r\n     * Sets a named property as value\r\n     * @member SpeechTranslationConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property.\r\n     * @param {string} value - The value.\r\n     */\r\n    public abstract setProperty(name: string, value: string): void;\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member SpeechTranslationConfig.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * @private\r\n * @class SpeechTranslationConfigImpl\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class SpeechTranslationConfigImpl extends SpeechTranslationConfig {\r\n\r\n    private privSpeechProperties: PropertyCollection;\r\n\r\n    public constructor() {\r\n        super();\r\n        this.privSpeechProperties = new PropertyCollection();\r\n        this.outputFormat = OutputFormat.Simple;\r\n    }\r\n    /**\r\n     * Gets/Sets the authorization token.\r\n     * If this is set, subscription key is ignored.\r\n     * User needs to make sure the provided authorization token is valid and not expired.\r\n     * @member SpeechTranslationConfigImpl.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public set authorizationToken(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    /**\r\n     * Sets the speech recognition language.\r\n     * @member SpeechTranslationConfigImpl.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public set speechRecognitionLanguage(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_RecoLanguage, value);\r\n    }\r\n\r\n    /**\r\n     * Gets the speech recognition language.\r\n     * @member SpeechTranslationConfigImpl.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @return {string} The speechRecognitionLanguage.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n    }\r\n\r\n    /**\r\n     * @member SpeechTranslationConfigImpl.prototype.subscriptionKey\r\n     * @function\r\n     * @public\r\n     */\r\n    public get subscriptionKey(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key]);\r\n    }\r\n\r\n    /**\r\n     * Gets the output format\r\n     * @member SpeechTranslationConfigImpl.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     */\r\n    public get outputFormat(): OutputFormat {\r\n        return (OutputFormat as any)[this.privSpeechProperties.getProperty(OutputFormatPropertyName, undefined)];\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the output format\r\n     * @member SpeechTranslationConfigImpl.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     */\r\n    public set outputFormat(value: OutputFormat) {\r\n        this.privSpeechProperties.setProperty(OutputFormatPropertyName, OutputFormat[value]);\r\n    }\r\n\r\n    /**\r\n     * Gets the endpoint id.\r\n     * @member SpeechTranslationConfigImpl.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     */\r\n    public get endpointId(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_EndpointId);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the endpoint id.\r\n     * @member SpeechTranslationConfigImpl.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     */\r\n    public set endpointId(value: string) {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_EndpointId, value);\r\n    }\r\n\r\n    /**\r\n     * Add a (text) target language to translate into.\r\n     * @member SpeechTranslationConfigImpl.prototype.addTargetLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public addTargetLanguage(value: string): void {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n\r\n        const languages: string[] = this.targetLanguages;\r\n        languages.push(value);\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\r\n    }\r\n\r\n    /**\r\n     * Gets the (text) target language to translate into.\r\n     * @member SpeechTranslationConfigImpl.prototype.targetLanguages\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public get targetLanguages(): string[] {\r\n\r\n        if (this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\r\n            return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n        } else {\r\n            return [];\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Gets the voice name.\r\n     * @member SpeechTranslationConfigImpl.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     */\r\n    public get voiceName(): string {\r\n        return this.getProperty(PropertyId[PropertyId.SpeechServiceConnection_TranslationVoice]);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the voice of the translated language, enable voice synthesis output.\r\n     * @member SpeechTranslationConfigImpl.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The name of the voice.\r\n     */\r\n    public set voiceName(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_TranslationVoice, value);\r\n    }\r\n\r\n    /**\r\n     * Provides the region.\r\n     * @member SpeechTranslationConfigImpl.prototype.region\r\n     * @function\r\n     * @public\r\n     * @returns {string} The region.\r\n     */\r\n    public get region(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n    }\r\n\r\n    public setProxy(proxyHostName: string, proxyPort: number): void;\r\n    public setProxy(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string): void;\r\n    public setProxy(proxyHostName: any, proxyPort: any, proxyUserName?: any, proxyPassword?: any): void {\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyHostName], proxyHostName);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPort], proxyPort);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyUserName], proxyUserName);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPassword], proxyPassword);\r\n    }\r\n\r\n    /**\r\n     * Gets an arbitrary property value.\r\n     * @member SpeechTranslationConfigImpl.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property.\r\n     * @param {string} def - The default value of the property in case it is not set.\r\n     * @returns {string} The value of the property.\r\n     */\r\n    public getProperty(name: string, def?: string): string {\r\n        return this.privSpeechProperties.getProperty(name, def);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets an arbitrary property value.\r\n     * @member SpeechTranslationConfigImpl.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property.\r\n     * @param {string} value - The value of the property.\r\n     */\r\n    public setProperty(name: string | PropertyId, value: string): void {\r\n        this.privSpeechProperties.setProperty(name, value);\r\n    }\r\n\r\n    /**\r\n     * Provides access to custom properties.\r\n     * @member SpeechTranslationConfigImpl.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The properties.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privSpeechProperties;\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member SpeechTranslationConfigImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        return;\r\n    }\r\n\r\n    public setServiceProperty(name: string, value: string, channel: ServicePropertyChannel): void {\r\n        const currentProperties: IStringDictionary<string> = JSON.parse(this.privSpeechProperties.getProperty(ServicePropertiesPropertyName, \"{}\"));\r\n\r\n        currentProperties[name] = value;\r\n\r\n        this.privSpeechProperties.setProperty(ServicePropertiesPropertyName, JSON.stringify(currentProperties));\r\n    }\r\n\r\n    public setProfanity(profanity: ProfanityOption): void {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceResponse_ProfanityOption, ProfanityOption[profanity]);\r\n    }\r\n\r\n    public enableAudioLogging(): void {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_EnableAudioLogging, \"true\");\r\n    }\r\n    public requestWordLevelTimestamps(): void {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"true\");\r\n    }\r\n    public enableDictation(): void {\r\n        this.privSpeechProperties.setProperty(ForceDictationPropertyName, \"true\");\r\n    }\r\n\r\n    public get speechSynthesisLanguage(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_SynthLanguage);\r\n    }\r\n\r\n    public set speechSynthesisLanguage(language: string) {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_SynthLanguage, language);\r\n    }\r\n\r\n    public get speechSynthesisVoiceName(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_SynthVoice);\r\n    }\r\n\r\n    public set speechSynthesisVoiceName(voice: string) {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_SynthVoice, voice);\r\n    }\r\n\r\n    public get speechSynthesisOutputFormat(): SpeechSynthesisOutputFormat {\r\n        return (SpeechSynthesisOutputFormat as any)[this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)];\r\n    }\r\n\r\n    public set speechSynthesisOutputFormat(format: SpeechSynthesisOutputFormat) {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, SpeechSynthesisOutputFormat[format]);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}