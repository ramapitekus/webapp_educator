{"ast":null,"code":"import * as React from 'react';\nimport { AccessibilityInfo, Appearance } from 'react-native';\nimport { ThemeProvider } from './theming';\nimport { Provider as SettingsProvider } from './settings';\nimport MaterialCommunityIcon from '../components/MaterialCommunityIcon';\nimport PortalHost from '../components/Portal/PortalHost';\nimport DefaultTheme from '../styles/DefaultTheme';\nimport DarkTheme from '../styles/DarkTheme';\n\nconst Provider = _ref => {\n  let { ...props\n  } = _ref;\n  const colorSchemeName = !props.theme && (Appearance === null || Appearance === void 0 ? void 0 : Appearance.getColorScheme()) || 'light';\n  const [reduceMotionEnabled, setReduceMotionEnabled] = React.useState(false);\n  const [colorScheme, setColorScheme] = React.useState(colorSchemeName);\n\n  const handleAppearanceChange = preferences => {\n    const {\n      colorScheme\n    } = preferences;\n    setColorScheme(colorScheme);\n  };\n\n  React.useEffect(() => {\n    let subscription;\n\n    if (!props.theme) {\n      subscription = AccessibilityInfo.addEventListener('reduceMotionChanged', setReduceMotionEnabled);\n    }\n\n    return () => {\n      if (!props.theme) {\n        var _subscription;\n\n        if ((_subscription = subscription) !== null && _subscription !== void 0 && _subscription.remove) {\n          subscription.remove();\n        } else {\n          AccessibilityInfo.removeEventListener('reduceMotionChanged', setReduceMotionEnabled);\n        }\n      }\n    };\n  }, [props.theme]);\n  React.useEffect(() => {\n    let appearanceSubscription;\n\n    if (!props.theme) {\n      appearanceSubscription = Appearance === null || Appearance === void 0 ? void 0 : Appearance.addChangeListener(handleAppearanceChange);\n    }\n\n    return () => {\n      if (!props.theme) {\n        if (appearanceSubscription) {\n          appearanceSubscription.remove();\n        } else {\n          Appearance === null || Appearance === void 0 ? void 0 : Appearance.removeChangeListener(handleAppearanceChange);\n        }\n      }\n    };\n  }, [props.theme]);\n\n  const getTheme = () => {\n    const {\n      theme: providedTheme\n    } = props;\n\n    if (providedTheme) {\n      return providedTheme;\n    } else {\n      const theme = colorScheme === 'dark' ? DarkTheme : DefaultTheme;\n      return { ...theme,\n        animation: { ...theme.animation,\n          scale: reduceMotionEnabled ? 0 : 1\n        }\n      };\n    }\n  };\n\n  const {\n    children,\n    settings\n  } = props;\n  return /*#__PURE__*/React.createElement(PortalHost, null, /*#__PURE__*/React.createElement(SettingsProvider, {\n    value: settings || {\n      icon: MaterialCommunityIcon\n    }\n  }, /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: getTheme()\n  }, children)));\n};\n\nexport default Provider;","map":{"version":3,"mappings":"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","names":["React","AccessibilityInfo","Appearance","ThemeProvider","Provider","SettingsProvider","MaterialCommunityIcon","PortalHost","DefaultTheme","DarkTheme","props","colorSchemeName","theme","getColorScheme","reduceMotionEnabled","setReduceMotionEnabled","useState","colorScheme","setColorScheme","handleAppearanceChange","preferences","useEffect","subscription","addEventListener","_subscription","remove","removeEventListener","appearanceSubscription","addChangeListener","removeChangeListener","getTheme","providedTheme","animation","scale","children","settings","value","icon"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\node_modules\\react-native-paper\\lib\\module\\core\\Provider.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  AccessibilityInfo,\n  Appearance,\n  ColorSchemeName,\n  NativeEventSubscription,\n} from 'react-native';\nimport { ThemeProvider } from './theming';\nimport { Provider as SettingsProvider, Settings } from './settings';\nimport MaterialCommunityIcon from '../components/MaterialCommunityIcon';\nimport PortalHost from '../components/Portal/PortalHost';\nimport DefaultTheme from '../styles/DefaultTheme';\nimport DarkTheme from '../styles/DarkTheme';\n\ntype Props = {\n  children: React.ReactNode;\n  theme?: ReactNativePaper.Theme;\n  settings?: Settings;\n};\n\nconst Provider = ({ ...props }: Props) => {\n  const colorSchemeName =\n    (!props.theme && Appearance?.getColorScheme()) || 'light';\n\n  const [reduceMotionEnabled, setReduceMotionEnabled] = React.useState<boolean>(\n    false\n  );\n  const [colorScheme, setColorScheme] = React.useState<ColorSchemeName>(\n    colorSchemeName\n  );\n\n  const handleAppearanceChange = (\n    preferences: Appearance.AppearancePreferences\n  ) => {\n    const { colorScheme } = preferences;\n    setColorScheme(colorScheme);\n  };\n\n  React.useEffect(() => {\n    let subscription: NativeEventSubscription | undefined;\n\n    if (!props.theme) {\n      subscription = AccessibilityInfo.addEventListener(\n        'reduceMotionChanged',\n        setReduceMotionEnabled\n      );\n    }\n    return () => {\n      if (!props.theme) {\n        if (subscription?.remove) {\n          subscription.remove();\n        } else {\n          AccessibilityInfo.removeEventListener(\n            'reduceMotionChanged',\n            setReduceMotionEnabled\n          );\n        }\n      }\n    };\n  }, [props.theme]);\n\n  React.useEffect(() => {\n    let appearanceSubscription: NativeEventSubscription | undefined;\n    if (!props.theme) {\n      appearanceSubscription = Appearance?.addChangeListener(\n        handleAppearanceChange\n      ) as NativeEventSubscription | undefined;\n    }\n    return () => {\n      if (!props.theme) {\n        if (appearanceSubscription) {\n          appearanceSubscription.remove();\n        } else {\n          Appearance?.removeChangeListener(handleAppearanceChange);\n        }\n      }\n    };\n  }, [props.theme]);\n\n  const getTheme = () => {\n    const { theme: providedTheme } = props;\n\n    if (providedTheme) {\n      return providedTheme;\n    } else {\n      const theme = (colorScheme === 'dark'\n        ? DarkTheme\n        : DefaultTheme) as ReactNativePaper.Theme;\n\n      return {\n        ...theme,\n        animation: {\n          ...theme.animation,\n          scale: reduceMotionEnabled ? 0 : 1,\n        },\n      };\n    }\n  };\n\n  const { children, settings } = props;\n  return (\n    <PortalHost>\n      <SettingsProvider value={settings || { icon: MaterialCommunityIcon }}>\n        <ThemeProvider theme={getTheme()}>{children}</ThemeProvider>\n      </SettingsProvider>\n    </PortalHost>\n  );\n};\n\nexport default Provider;\n"]},"metadata":{},"sourceType":"module"}