{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { AutoDetectSourceLanguagesOpenRangeOptionName } from \"../common.speech/Exports\";\nimport { Contracts } from \"./Contracts\";\nimport { PropertyCollection, PropertyId } from \"./Exports\";\n/**\r\n * Language auto detect configuration.\r\n * @class AutoDetectSourceLanguageConfig\r\n * Added in version 1.13.0.\r\n */\n\nexport class AutoDetectSourceLanguageConfig {\n  constructor() {\n    this.privProperties = new PropertyCollection();\n  }\n  /**\r\n   * @member AutoDetectSourceLanguageConfig.fromOpenRange\r\n   * @function\r\n   * @public\r\n   * Only [[SpeechSynthesizer]] supports source language auto detection from open range,\r\n   * for [[Recognizer]], please use AutoDetectSourceLanguageConfig with specific source languages.\r\n   * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\r\n   * @summary Creates an instance of the AutoDetectSourceLanguageConfig with open range.\r\n   */\n\n\n  static fromOpenRange() {\n    const config = new AutoDetectSourceLanguageConfig();\n    config.properties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, AutoDetectSourceLanguagesOpenRangeOptionName);\n    return config;\n  }\n  /**\r\n   * @member AutoDetectSourceLanguageConfig.fromLanguages\r\n   * @function\r\n   * @public\r\n   * @param {string[]} languages Comma-separated string of languages (eg. \"en-US,fr-FR\") to populate properties of config.\r\n   * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\r\n   * @summary Creates an instance of the AutoDetectSourceLanguageConfig with given languages.\r\n   */\n\n\n  static fromLanguages(languages) {\n    Contracts.throwIfArrayEmptyOrWhitespace(languages, \"languages\");\n    const config = new AutoDetectSourceLanguageConfig();\n    config.properties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, languages.join());\n    return config;\n  }\n  /**\r\n   * @member AutoDetectSourceLanguageConfig.fromSourceLanguageConfigs\r\n   * @function\r\n   * @public\r\n   * @param {SourceLanguageConfig[]} configs SourceLanguageConfigs to populate properties of config.\r\n   * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\r\n   * @summary Creates an instance of the AutoDetectSourceLanguageConfig with given SourceLanguageConfigs.\r\n   */\n\n\n  static fromSourceLanguageConfigs(configs) {\n    if (configs.length < 1) {\n      throw new Error(\"Expected non-empty SourceLanguageConfig array.\");\n    }\n\n    const autoConfig = new AutoDetectSourceLanguageConfig();\n    const langs = [];\n    configs.forEach(config => {\n      langs.push(config.language);\n\n      if (config.endpointId !== undefined && config.endpointId !== \"\") {\n        const customProperty = config.language + PropertyId.SpeechServiceConnection_EndpointId.toString();\n        autoConfig.properties.setProperty(customProperty, config.endpointId);\n      }\n    });\n    autoConfig.properties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, langs.join());\n    return autoConfig;\n  }\n  /**\r\n   * @member AutoDetectSourceLanguageConfig.prototype.properties\r\n   * @function\r\n   * @public\r\n   * @return {PropertyCollection} Properties of the config.\r\n   * @summary Gets an auto detected language config properties\r\n   */\n\n\n  get properties() {\n    return this.privProperties;\n  }\n\n}","map":{"version":3,"mappings":"AAAA;AACA;AAEA,SAASA,4CAAT,QAA6D,0BAA7D;AACA,SAAQC,SAAR,QAAwB,aAAxB;AACA,SACIC,kBADJ,EAEIC,UAFJ,QAIO,WAJP;AAMA;;;;;;AAKA,OAAM,MAAOC,8BAAP,CAAqC;AAGvCC;AACI,SAAKC,cAAL,GAAsB,IAAIJ,kBAAJ,EAAtB;AACH;AAED;;;;;;;;;;;AAS2B,SAAbK,aAAa;AACvB,UAAMC,MAAM,GAAG,IAAIJ,8BAAJ,EAAf;AACAI,UAAM,CAACC,UAAP,CAAkBC,WAAlB,CAA8BP,UAAU,CAACQ,iDAAzC,EAA4FX,4CAA5F;AACA,WAAOQ,MAAP;AACH;AAED;;;;;;;;;;AAQ2B,SAAbI,aAAa,CAACC,SAAD,EAAoB;AAC3CZ,aAAS,CAACa,6BAAV,CAAwCD,SAAxC,EAAmD,WAAnD;AACA,UAAML,MAAM,GAAG,IAAIJ,8BAAJ,EAAf;AACAI,UAAM,CAACC,UAAP,CAAkBC,WAAlB,CAA8BP,UAAU,CAACQ,iDAAzC,EAA4FE,SAAS,CAACE,IAAV,EAA5F;AACA,WAAOP,MAAP;AACH;AAED;;;;;;;;;;AAQuC,SAAzBQ,yBAAyB,CAACC,OAAD,EAAgC;AACnE,QAAIA,OAAO,CAACC,MAAR,GAAiB,CAArB,EAAwB;AACpB,YAAM,IAAIC,KAAJ,CAAU,gDAAV,CAAN;AACH;;AACD,UAAMC,UAAU,GAAG,IAAIhB,8BAAJ,EAAnB;AACA,UAAMiB,KAAK,GAAa,EAAxB;AACAJ,WAAO,CAACK,OAAR,CAAiBd,MAAD,IAAiC;AAC7Ca,WAAK,CAACE,IAAN,CAAWf,MAAM,CAACgB,QAAlB;;AACA,UAAIhB,MAAM,CAACiB,UAAP,KAAsBC,SAAtB,IAAmClB,MAAM,CAACiB,UAAP,KAAsB,EAA7D,EAAiE;AAC7D,cAAME,cAAc,GAAGnB,MAAM,CAACgB,QAAP,GAAkBrB,UAAU,CAACyB,kCAAX,CAA8CC,QAA9C,EAAzC;AACAT,kBAAU,CAACX,UAAX,CAAsBC,WAAtB,CAAkCiB,cAAlC,EAAkDnB,MAAM,CAACiB,UAAzD;AACH;AACJ,KAND;AAOAL,cAAU,CAACX,UAAX,CAAsBC,WAAtB,CAAkCP,UAAU,CAACQ,iDAA7C,EAAgGU,KAAK,CAACN,IAAN,EAAhG;AAEA,WAAOK,UAAP;AACH;AAED;;;;;;;;;AAOqB,MAAVX,UAAU;AACjB,WAAO,KAAKH,cAAZ;AACH;;AAxEsC","names":["AutoDetectSourceLanguagesOpenRangeOptionName","Contracts","PropertyCollection","PropertyId","AutoDetectSourceLanguageConfig","constructor","privProperties","fromOpenRange","config","properties","setProperty","SpeechServiceConnection_AutoDetectSourceLanguages","fromLanguages","languages","throwIfArrayEmptyOrWhitespace","join","fromSourceLanguageConfigs","configs","length","Error","autoConfig","langs","forEach","push","language","endpointId","undefined","customProperty","SpeechServiceConnection_EndpointId","toString"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\node_modules\\microsoft-cognitiveservices-speech-sdk\\distrib\\es2015\\src\\sdk\\src\\sdk\\AutoDetectSourceLanguageConfig.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { AutoDetectSourceLanguagesOpenRangeOptionName } from \"../common.speech/Exports\";\r\nimport {Contracts} from \"./Contracts\";\r\nimport {\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SourceLanguageConfig,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Language auto detect configuration.\r\n * @class AutoDetectSourceLanguageConfig\r\n * Added in version 1.13.0.\r\n */\r\nexport class AutoDetectSourceLanguageConfig {\r\n    private privProperties: PropertyCollection;\r\n\r\n    private constructor() {\r\n        this.privProperties = new PropertyCollection();\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.fromOpenRange\r\n     * @function\r\n     * @public\r\n     * Only [[SpeechSynthesizer]] supports source language auto detection from open range,\r\n     * for [[Recognizer]], please use AutoDetectSourceLanguageConfig with specific source languages.\r\n     * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\r\n     * @summary Creates an instance of the AutoDetectSourceLanguageConfig with open range.\r\n     */\r\n    public static fromOpenRange(): AutoDetectSourceLanguageConfig {\r\n        const config = new AutoDetectSourceLanguageConfig();\r\n        config.properties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, AutoDetectSourceLanguagesOpenRangeOptionName);\r\n        return config;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.fromLanguages\r\n     * @function\r\n     * @public\r\n     * @param {string[]} languages Comma-separated string of languages (eg. \"en-US,fr-FR\") to populate properties of config.\r\n     * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\r\n     * @summary Creates an instance of the AutoDetectSourceLanguageConfig with given languages.\r\n     */\r\n    public static fromLanguages(languages: string[]): AutoDetectSourceLanguageConfig {\r\n        Contracts.throwIfArrayEmptyOrWhitespace(languages, \"languages\");\r\n        const config = new AutoDetectSourceLanguageConfig();\r\n        config.properties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, languages.join());\r\n        return config;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.fromSourceLanguageConfigs\r\n     * @function\r\n     * @public\r\n     * @param {SourceLanguageConfig[]} configs SourceLanguageConfigs to populate properties of config.\r\n     * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\r\n     * @summary Creates an instance of the AutoDetectSourceLanguageConfig with given SourceLanguageConfigs.\r\n     */\r\n    public static fromSourceLanguageConfigs(configs: SourceLanguageConfig[]): AutoDetectSourceLanguageConfig {\r\n        if (configs.length < 1) {\r\n            throw new Error(\"Expected non-empty SourceLanguageConfig array.\");\r\n        }\r\n        const autoConfig = new AutoDetectSourceLanguageConfig();\r\n        const langs: string[] = [];\r\n        configs.forEach((config: SourceLanguageConfig) => {\r\n            langs.push(config.language);\r\n            if (config.endpointId !== undefined && config.endpointId !== \"\") {\r\n                const customProperty = config.language + PropertyId.SpeechServiceConnection_EndpointId.toString();\r\n                autoConfig.properties.setProperty(customProperty, config.endpointId);\r\n            }\r\n        });\r\n        autoConfig.properties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, langs.join());\r\n\r\n        return autoConfig;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @return {PropertyCollection} Properties of the config.\r\n     * @summary Gets an auto detected language config properties\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}