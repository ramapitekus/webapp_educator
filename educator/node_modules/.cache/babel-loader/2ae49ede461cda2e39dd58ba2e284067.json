{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar _a;\n\nimport { Contracts } from \"./Contracts\";\nimport { PropertyId, SpeechConfigImpl } from \"./Exports\";\n/**\r\n * Class that defines base configurations for dialog service connector\r\n * @class DialogServiceConfig\r\n */\n\nexport class DialogServiceConfig {\n  /**\r\n   * Creates an instance of DialogService config.\r\n   * @constructor\r\n   */\n  constructor() {}\n  /**\r\n   * Sets the corresponding backend application identifier.\r\n   * @member DialogServiceConfig.prototype.Conversation_ApplicationId\r\n   * @function\r\n   * @public\r\n   * @param {string} value - The application identifier to set.\r\n   */\n  // tslint:disable-next-line: no-empty\n\n\n  set applicationId(value) {}\n\n}\nDialogServiceConfig.DialogTypes = (_a = class {}, _a.BotFramework = \"bot_framework\", _a.CustomCommands = \"custom_commands\", _a);\n/**\r\n * Dialog Service configuration.\r\n * @class DialogServiceConfigImpl\r\n */\n// tslint:disable-next-line:max-classes-per-file\n\nexport class DialogServiceConfigImpl extends DialogServiceConfig {\n  /**\r\n   * Creates an instance of dialogService config.\r\n   */\n  constructor() {\n    super();\n    this.privSpeechConfig = new SpeechConfigImpl();\n  }\n  /**\r\n   * Provides access to custom properties.\r\n   * @member DialogServiceConfigImpl.prototype.properties\r\n   * @function\r\n   * @public\r\n   * @returns {PropertyCollection} The properties.\r\n   */\n\n\n  get properties() {\n    return this.privSpeechConfig.properties;\n  }\n  /**\r\n   * Gets the speech recognition language.\r\n   * @member DialogServiceConfigImpl.prototype.speechRecognitionLanguage\r\n   * @function\r\n   * @public\r\n   */\n\n\n  get speechRecognitionLanguage() {\n    return this.privSpeechConfig.speechRecognitionLanguage;\n  }\n  /**\r\n   * Sets the speech recognition language.\r\n   * @member DialogServiceConfigImpl.prototype.speechRecognitionLanguage\r\n   * @function\r\n   * @public\r\n   * @param {string} value - The language to set.\r\n   */\n\n\n  set speechRecognitionLanguage(value) {\n    Contracts.throwIfNullOrWhitespace(value, \"value\");\n    this.privSpeechConfig.speechRecognitionLanguage = value;\n  }\n\n  get outputFormat() {\n    return this.privSpeechConfig.outputFormat;\n  }\n\n  set outputFormat(value) {\n    this.privSpeechConfig.outputFormat = value;\n  }\n  /**\r\n   * Sets a named property as value\r\n   * @member DialogServiceConfigImpl.prototype.setProperty\r\n   * @function\r\n   * @public\r\n   * @param {PropertyId | string} name - The property to set.\r\n   * @param {string} value - The value.\r\n   */\n\n\n  setProperty(name, value) {\n    this.privSpeechConfig.setProperty(name, value);\n  }\n  /**\r\n   * Sets a named property as value\r\n   * @member DialogServiceConfigImpl.prototype.getProperty\r\n   * @function\r\n   * @public\r\n   * @param {PropertyId | string} name - The property to get.\r\n   * @param {string} def - The default value to return in case the property is not known.\r\n   * @returns {string} The current value, or provided default, of the given property.\r\n   */\n\n\n  getProperty(name, def) {\n    return this.privSpeechConfig.getProperty(name);\n  }\n  /**\r\n   * Sets the proxy configuration.\r\n   * Only relevant in Node.js environments.\r\n   * Added in version 1.4.0.\r\n   * @param proxyHostName The host name of the proxy server, without the protocol scheme (http://)\r\n   * @param proxyPort The port number of the proxy server.\r\n   * @param proxyUserName The user name of the proxy server.\r\n   * @param proxyPassword The password of the proxy server.\r\n   */\n\n\n  setProxy(proxyHostName, proxyPort, proxyUserName, proxyPassword) {\n    this.setProperty(PropertyId.SpeechServiceConnection_ProxyHostName, proxyHostName);\n    this.setProperty(PropertyId.SpeechServiceConnection_ProxyPort, `${proxyPort}`);\n\n    if (proxyUserName) {\n      this.setProperty(PropertyId.SpeechServiceConnection_ProxyUserName, proxyUserName);\n    }\n\n    if (proxyPassword) {\n      this.setProperty(PropertyId.SpeechServiceConnection_ProxyPassword, proxyPassword);\n    }\n  }\n\n  setServiceProperty(name, value, channel) {\n    this.privSpeechConfig.setServiceProperty(name, value, channel);\n  }\n  /**\r\n   * Dispose of associated resources.\r\n   * @member DialogServiceConfigImpl.prototype.close\r\n   * @function\r\n   * @public\r\n   */\n\n\n  close() {\n    return;\n  }\n\n}","map":{"version":3,"mappings":"AAAA;AACA;;;AAEA,SAASA,SAAT,QAA0B,aAA1B;AACA,SAA6BC,UAA7B,EAAiEC,gBAAjE,QAAyF,WAAzF;AAGA;;;;;AAIA,OAAM,MAAgBC,mBAAhB,CAAmC;AAErC;;;;AAIAC,iBAA2B;AAuE3B;;;;;;;AAOA;;;AACwB,MAAbC,aAAa,CAACC,KAAD,EAAc,CAAK;;AArFN;AAuFvBH,mCAAWI,KAAQ,QAAR,EACPA,kBAAuB,eADhB,EAEPA,oBAAyB,iBAFlB,IAAX;AAMlB;;;;AAIA;;AACA,OAAM,MAAOC,uBAAP,SAAuCL,mBAAvC,CAA0D;AAI5D;;;AAGAC;AACI;AACA,SAAKK,gBAAL,GAAwB,IAAIP,gBAAJ,EAAxB;AACH;AAED;;;;;;;;;AAOqB,MAAVQ,UAAU;AACjB,WAAO,KAAKD,gBAAL,CAAsBC,UAA7B;AACH;AAED;;;;;;;;AAMoC,MAAzBC,yBAAyB;AAChC,WAAO,KAAKF,gBAAL,CAAsBE,yBAA7B;AACH;AAED;;;;;;;;;AAOoC,MAAzBA,yBAAyB,CAACL,KAAD,EAAc;AAC9CN,aAAS,CAACY,uBAAV,CAAkCN,KAAlC,EAAyC,OAAzC;AACA,SAAKG,gBAAL,CAAsBE,yBAAtB,GAAkDL,KAAlD;AACH;;AAEsB,MAAZO,YAAY;AACnB,WAAO,KAAKJ,gBAAL,CAAsBI,YAA7B;AACH;;AAEsB,MAAZA,YAAY,CAACP,KAAD,EAAoB;AACvC,SAAKG,gBAAL,CAAsBI,YAAtB,GAAqCP,KAArC;AACH;AAED;;;;;;;;;;AAQOQ,aAAW,CAACC,IAAD,EAA4BT,KAA5B,EAAyC;AACvD,SAAKG,gBAAL,CAAsBK,WAAtB,CAAkCC,IAAlC,EAAwCT,KAAxC;AACH;AAED;;;;;;;;;;;AASOU,aAAW,CAACD,IAAD,EAA4BE,GAA5B,EAAwC;AACtD,WAAO,KAAKR,gBAAL,CAAsBO,WAAtB,CAAkCD,IAAlC,CAAP;AACH;AAED;;;;;;;;;;;AASOG,UAAQ,CAACC,aAAD,EAAwBC,SAAxB,EAA2CC,aAA3C,EAAmEC,aAAnE,EAAyF;AACpG,SAAKR,WAAL,CAAiBb,UAAU,CAACsB,qCAA5B,EAAmEJ,aAAnE;AACA,SAAKL,WAAL,CAAiBb,UAAU,CAACuB,iCAA5B,EAA+D,GAAGJ,SAAS,EAA3E;;AACA,QAAIC,aAAJ,EAAmB;AACf,WAAKP,WAAL,CAAiBb,UAAU,CAACwB,qCAA5B,EAAmEJ,aAAnE;AACH;;AACD,QAAIC,aAAJ,EAAmB;AACf,WAAKR,WAAL,CAAiBb,UAAU,CAACyB,qCAA5B,EAAmEJ,aAAnE;AACH;AACJ;;AAEMK,oBAAkB,CAACZ,IAAD,EAAeT,KAAf,EAA8BsB,OAA9B,EAA6D;AAClF,SAAKnB,gBAAL,CAAsBkB,kBAAtB,CAAyCZ,IAAzC,EAA+CT,KAA/C,EAAsDsB,OAAtD;AACH;AAED;;;;;;;;AAMOC,OAAK;AACR;AACH;;AA9G2D","names":["Contracts","PropertyId","SpeechConfigImpl","DialogServiceConfig","constructor","applicationId","value","_a","DialogServiceConfigImpl","privSpeechConfig","properties","speechRecognitionLanguage","throwIfNullOrWhitespace","outputFormat","setProperty","name","getProperty","def","setProxy","proxyHostName","proxyPort","proxyUserName","proxyPassword","SpeechServiceConnection_ProxyHostName","SpeechServiceConnection_ProxyPort","SpeechServiceConnection_ProxyUserName","SpeechServiceConnection_ProxyPassword","setServiceProperty","channel","close"],"sources":["C:\\Users\\ozgur\\Documents\\VSCodeProjects\\webapp_educator\\educator\\node_modules\\microsoft-cognitiveservices-speech-sdk\\distrib\\es2015\\src\\sdk\\src\\sdk\\DialogServiceConfig.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts\";\r\nimport { PropertyCollection, PropertyId, ServicePropertyChannel, SpeechConfigImpl } from \"./Exports\";\r\nimport { OutputFormat } from \"./OutputFormat\";\r\n\r\n/**\r\n * Class that defines base configurations for dialog service connector\r\n * @class DialogServiceConfig\r\n */\r\nexport abstract class DialogServiceConfig {\r\n\r\n    /**\r\n     * Creates an instance of DialogService config.\r\n     * @constructor\r\n     */\r\n    protected constructor() { }\r\n\r\n    /**\r\n     * Sets an arbitrary property.\r\n     * @member DialogServiceConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to set.\r\n     * @param {string} value - The new value of the property.\r\n     */\r\n    public abstract setProperty(name: string | PropertyId, value: string): void;\r\n\r\n    /**\r\n     * Returns the current value of an arbitrary property.\r\n     * @member DialogServiceConfig.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to query.\r\n     * @param {string} def - The value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public abstract getProperty(name: string | PropertyId, def?: string): string;\r\n\r\n    /**\r\n     * @member DialogServiceConfig.prototype.setServiceProperty\r\n     * @function\r\n     * @public\r\n     * @param {name} The name of the property.\r\n     * @param {value} Value to set.\r\n     * @param {channel} The channel used to pass the specified property to service.\r\n     * @summary Sets a property value that will be passed to service using the specified channel.\r\n     */\r\n    public abstract setServiceProperty(name: string, value: string, channel: ServicePropertyChannel): void;\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server.\r\n     * @param proxyPort The port number of the proxy server.\r\n     */\r\n    public abstract setProxy(proxyHostName: string, proxyPort: number): void;\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server, without the protocol scheme (http://)\r\n     * @param porxyPort The port number of the proxy server.\r\n     * @param proxyUserName The user name of the proxy server.\r\n     * @param proxyPassword The password of the proxy server.\r\n     */\r\n    public abstract setProxy(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string): void;\r\n\r\n    /**\r\n     * Returns the configured language.\r\n     * @member DialogServiceConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract get speechRecognitionLanguage(): string;\r\n\r\n    /**\r\n     * Gets/Sets the input language.\r\n     * @member DialogServiceConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language to use for recognition.\r\n     */\r\n    public abstract set speechRecognitionLanguage(value: string);\r\n\r\n    /**\r\n     * Sets the corresponding backend application identifier.\r\n     * @member DialogServiceConfig.prototype.Conversation_ApplicationId\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The application identifier to set.\r\n     */\r\n    // tslint:disable-next-line: no-empty\r\n    public set applicationId(value: string) { }\r\n\r\n    public static DialogTypes: any = class {\r\n        public static BotFramework: string = \"bot_framework\";\r\n        public static CustomCommands: string = \"custom_commands\";\r\n    };\r\n}\r\n\r\n/**\r\n * Dialog Service configuration.\r\n * @class DialogServiceConfigImpl\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class DialogServiceConfigImpl extends DialogServiceConfig {\r\n\r\n    private privSpeechConfig: SpeechConfigImpl;\r\n\r\n    /**\r\n     * Creates an instance of dialogService config.\r\n     */\r\n    public constructor() {\r\n        super();\r\n        this.privSpeechConfig = new SpeechConfigImpl();\r\n    }\r\n\r\n    /**\r\n     * Provides access to custom properties.\r\n     * @member DialogServiceConfigImpl.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The properties.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privSpeechConfig.properties;\r\n    }\r\n\r\n    /**\r\n     * Gets the speech recognition language.\r\n     * @member DialogServiceConfigImpl.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privSpeechConfig.speechRecognitionLanguage;\r\n    }\r\n\r\n    /**\r\n     * Sets the speech recognition language.\r\n     * @member DialogServiceConfigImpl.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language to set.\r\n     */\r\n    public set speechRecognitionLanguage(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n        this.privSpeechConfig.speechRecognitionLanguage = value;\r\n    }\r\n\r\n    public get outputFormat(): OutputFormat {\r\n        return this.privSpeechConfig.outputFormat;\r\n    }\r\n\r\n    public set outputFormat(value: OutputFormat) {\r\n        this.privSpeechConfig.outputFormat = value;\r\n    }\r\n\r\n    /**\r\n     * Sets a named property as value\r\n     * @member DialogServiceConfigImpl.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {PropertyId | string} name - The property to set.\r\n     * @param {string} value - The value.\r\n     */\r\n    public setProperty(name: string | PropertyId, value: string): void {\r\n        this.privSpeechConfig.setProperty(name, value);\r\n    }\r\n\r\n    /**\r\n     * Sets a named property as value\r\n     * @member DialogServiceConfigImpl.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {PropertyId | string} name - The property to get.\r\n     * @param {string} def - The default value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public getProperty(name: string | PropertyId, def?: string): string {\r\n        return this.privSpeechConfig.getProperty(name);\r\n    }\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server, without the protocol scheme (http://)\r\n     * @param proxyPort The port number of the proxy server.\r\n     * @param proxyUserName The user name of the proxy server.\r\n     * @param proxyPassword The password of the proxy server.\r\n     */\r\n    public setProxy(proxyHostName: string, proxyPort: number, proxyUserName?: string, proxyPassword?: string): void {\r\n        this.setProperty(PropertyId.SpeechServiceConnection_ProxyHostName, proxyHostName);\r\n        this.setProperty(PropertyId.SpeechServiceConnection_ProxyPort, `${proxyPort}`);\r\n        if (proxyUserName) {\r\n            this.setProperty(PropertyId.SpeechServiceConnection_ProxyUserName, proxyUserName);\r\n        }\r\n        if (proxyPassword) {\r\n            this.setProperty(PropertyId.SpeechServiceConnection_ProxyPassword, proxyPassword);\r\n        }\r\n    }\r\n\r\n    public setServiceProperty(name: string, value: string, channel: ServicePropertyChannel): void {\r\n        this.privSpeechConfig.setServiceProperty(name, value, channel);\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member DialogServiceConfigImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        return;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}