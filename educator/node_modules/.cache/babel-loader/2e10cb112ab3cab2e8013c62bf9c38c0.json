{"ast":null,"code":"import * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport { RadioButtonContext } from './RadioButtonGroup';\nimport { handlePress } from './utils';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport RadioButton from './RadioButton';\nimport Text from '../Typography/Text';\nimport RadioButtonAndroid from './RadioButtonAndroid';\nimport RadioButtonIOS from './RadioButtonIOS';\n/**\n * RadioButton.Item allows you to press the whole row (item) instead of only the RadioButton.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/radio-item.ios.png\" />\n *     <figcaption>Pressed</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { RadioButton } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('first');\n *\n *   return (\n *     <RadioButton.Group onValueChange={value => setValue(value)} value={value}>\n *       <RadioButton.Item label=\"First item\" value=\"first\" />\n *       <RadioButton.Item label=\"Second item\" value=\"second\" />\n *     </RadioButton.Group>\n *   );\n * };\n *\n * export default MyComponent;\n *```\n */\n\nconst RadioButtonItem = _ref => {\n  let {\n    value,\n    label,\n    style,\n    labelStyle,\n    onPress,\n    disabled,\n    color,\n    uncheckedColor,\n    status,\n    theme: {\n      colors\n    },\n    accessibilityLabel,\n    testID,\n    mode,\n    position = 'trailing'\n  } = _ref;\n  const radioButtonProps = {\n    value,\n    disabled,\n    status,\n    color,\n    uncheckedColor\n  };\n  const isLeading = position === 'leading';\n  let radioButton;\n\n  if (mode === 'android') {\n    radioButton = /*#__PURE__*/React.createElement(RadioButtonAndroid, radioButtonProps);\n  } else if (mode === 'ios') {\n    radioButton = /*#__PURE__*/React.createElement(RadioButtonIOS, radioButtonProps);\n  } else {\n    radioButton = /*#__PURE__*/React.createElement(RadioButton, radioButtonProps);\n  }\n\n  return /*#__PURE__*/React.createElement(RadioButtonContext.Consumer, null, context => {\n    return /*#__PURE__*/React.createElement(TouchableRipple, {\n      onPress: disabled ? undefined : () => handlePress({\n        onPress: onPress,\n        onValueChange: context === null || context === void 0 ? void 0 : context.onValueChange,\n        value\n      }),\n      accessibilityLabel: accessibilityLabel,\n      testID: testID\n    }, /*#__PURE__*/React.createElement(View, {\n      style: [styles.container, style],\n      pointerEvents: \"none\"\n    }, isLeading && radioButton, /*#__PURE__*/React.createElement(Text, {\n      style: [styles.label, {\n        color: colors.text,\n        textAlign: isLeading ? 'right' : 'left'\n      }, labelStyle]\n    }, label), !isLeading && radioButton));\n  });\n};\n\nRadioButtonItem.displayName = 'RadioButton.Item';\nexport default withTheme(RadioButtonItem); // @component-docs ignore-next-line\n\nconst RadioButtonItemWithTheme = withTheme(RadioButtonItem); // @component-docs ignore-next-line\n\nexport { RadioButtonItemWithTheme as RadioButtonItem };\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16\n  },\n  label: {\n    fontSize: 16,\n    flexShrink: 1,\n    flexGrow: 1\n  }\n});","map":{"version":3,"mappings":"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","names":["React","View","StyleSheet","withTheme","RadioButtonContext","handlePress","TouchableRipple","RadioButton","Text","RadioButtonAndroid","RadioButtonIOS","RadioButtonItem","value","label","style","labelStyle","onPress","disabled","color","uncheckedColor","status","theme","colors","accessibilityLabel","testID","mode","position","radioButtonProps","isLeading","radioButton","Consumer","context","undefined","onValueChange","styles","container","pointerEvents","text","textAlign","displayName","RadioButtonItemWithTheme","create","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","fontSize","flexShrink","flexGrow"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\node_modules\\react-native-paper\\lib\\module\\components\\RadioButton\\RadioButtonItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n} from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress } from './utils';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport RadioButton from './RadioButton';\nimport Text from '../Typography/Text';\nimport RadioButtonAndroid from './RadioButtonAndroid';\nimport RadioButtonIOS from './RadioButtonIOS';\n\nexport type Props = {\n  /**\n   * Value of the radio button.\n   */\n  value: string;\n  /**\n   * Label to be displayed on the item.\n   */\n  label: string;\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Accessibility label for the touchable. This is read by the screen reader when the user taps the touchable.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Custom color for unchecked radio.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Additional styles for container View.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n  /**\n   * Whether `<RadioButton.Android />` or `<RadioButton.IOS />` should be used.\n   * Left undefined `<RadioButton />` will be used.\n   */\n  mode?: 'android' | 'ios';\n  /**\n   * Radio button control position.\n   */\n  position?: 'leading' | 'trailing';\n};\n\n/**\n * RadioButton.Item allows you to press the whole row (item) instead of only the RadioButton.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/radio-item.ios.png\" />\n *     <figcaption>Pressed</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { RadioButton } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('first');\n *\n *   return (\n *     <RadioButton.Group onValueChange={value => setValue(value)} value={value}>\n *       <RadioButton.Item label=\"First item\" value=\"first\" />\n *       <RadioButton.Item label=\"Second item\" value=\"second\" />\n *     </RadioButton.Group>\n *   );\n * };\n *\n * export default MyComponent;\n *```\n */\nconst RadioButtonItem = ({\n  value,\n  label,\n  style,\n  labelStyle,\n  onPress,\n  disabled,\n  color,\n  uncheckedColor,\n  status,\n  theme: { colors },\n  accessibilityLabel,\n  testID,\n  mode,\n  position = 'trailing',\n}: Props) => {\n  const radioButtonProps = { value, disabled, status, color, uncheckedColor };\n  const isLeading = position === 'leading';\n  let radioButton: any;\n\n  if (mode === 'android') {\n    radioButton = <RadioButtonAndroid {...radioButtonProps} />;\n  } else if (mode === 'ios') {\n    radioButton = <RadioButtonIOS {...radioButtonProps} />;\n  } else {\n    radioButton = <RadioButton {...radioButtonProps} />;\n  }\n\n  return (\n    <RadioButtonContext.Consumer>\n      {(context?: RadioButtonContextType) => {\n        return (\n          <TouchableRipple\n            onPress={\n              disabled\n                ? undefined\n                : () =>\n                    handlePress({\n                      onPress: onPress,\n                      onValueChange: context?.onValueChange,\n                      value,\n                    })\n            }\n            accessibilityLabel={accessibilityLabel}\n            testID={testID}\n          >\n            <View style={[styles.container, style]} pointerEvents=\"none\">\n              {isLeading && radioButton}\n              <Text\n                style={[\n                  styles.label,\n                  {\n                    color: colors.text,\n                    textAlign: isLeading ? 'right' : 'left',\n                  },\n                  labelStyle,\n                ]}\n              >\n                {label}\n              </Text>\n              {!isLeading && radioButton}\n            </View>\n          </TouchableRipple>\n        );\n      }}\n    </RadioButtonContext.Consumer>\n  );\n};\n\nRadioButtonItem.displayName = 'RadioButton.Item';\n\nexport default withTheme(RadioButtonItem);\n\n// @component-docs ignore-next-line\nconst RadioButtonItemWithTheme = withTheme(RadioButtonItem);\n// @component-docs ignore-next-line\nexport { RadioButtonItemWithTheme as RadioButtonItem };\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  label: {\n    fontSize: 16,\n    flexShrink: 1,\n    flexGrow: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}