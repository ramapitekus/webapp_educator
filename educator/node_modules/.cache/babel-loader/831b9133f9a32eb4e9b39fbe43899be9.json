{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport { View, StyleSheet, Animated } from 'react-native';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport Button from './Button';\nimport Icon from './Icon';\nimport { withTheme } from '../core/theming';\nimport shadow from '../styles/shadow';\nconst ELEVATION = 1;\nconst DEFAULT_MAX_WIDTH = 960;\n/**\n * Banner displays a prominent message and related actions.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/banner.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Image } from 'react-native';\n * import { Banner } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(true);\n *\n *   return (\n *     <Banner\n *       visible={visible}\n *       actions={[\n *         {\n *           label: 'Fix it',\n *           onPress: () => setVisible(false),\n *         },\n *         {\n *           label: 'Learn more',\n *           onPress: () => setVisible(false),\n *         },\n *       ]}\n *       icon={({size}) => (\n *         <Image\n *           source={{\n *             uri: 'https://avatars3.githubusercontent.com/u/17571969?s=400&v=4',\n *           }}\n *           style={{\n *             width: size,\n *             height: size,\n *           }}\n *         />\n *       )}>\n *       There was a problem processing a transaction on your credit card.\n *     </Banner>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nconst Banner = _ref => {\n  let {\n    visible,\n    icon,\n    children,\n    actions,\n    contentStyle,\n    style,\n    theme,\n    onShowAnimationFinished = () => {},\n    onHideAnimationFinished = () => {},\n    ...rest\n  } = _ref;\n  const {\n    current: position\n  } = React.useRef(new Animated.Value(visible ? 1 : 0));\n  const [layout, setLayout] = React.useState({\n    height: 0,\n    measured: false\n  });\n  const {\n    scale\n  } = theme.animation;\n  React.useEffect(() => {\n    if (visible) {\n      // show\n      Animated.timing(position, {\n        duration: 250 * scale,\n        toValue: 1,\n        useNativeDriver: false\n      }).start(onShowAnimationFinished);\n    } else {\n      // hide\n      Animated.timing(position, {\n        duration: 200 * scale,\n        toValue: 0,\n        useNativeDriver: false\n      }).start(onHideAnimationFinished);\n    }\n  }, [visible, position, scale]);\n\n  const handleLayout = _ref2 => {\n    let {\n      nativeEvent\n    } = _ref2;\n    const {\n      height\n    } = nativeEvent.layout;\n    setLayout({\n      height,\n      measured: true\n    });\n  }; // The banner animation has 2 parts:\n  // 1. Blank spacer element which animates its height to move the content\n  // 2. Actual banner which animates its translateY\n  // In initial render, we position everything normally and measure the height of the banner\n  // Once we have the height, we apply the height to the spacer and switch the banner to position: absolute\n  // We need this because we need to move the content below as if banner's height was being animated\n  // However we can't animated banner's height directly as it'll also resize the content inside\n\n\n  const height = Animated.multiply(position, layout.height);\n  const translateY = Animated.multiply(Animated.add(position, -1), layout.height);\n  return /*#__PURE__*/React.createElement(Surface, _extends({}, rest, {\n    style: [styles.container, shadow(ELEVATION), style],\n    theme: theme\n  }), /*#__PURE__*/React.createElement(View, {\n    style: [styles.wrapper, contentStyle]\n  }, /*#__PURE__*/React.createElement(Animated.View, {\n    style: {\n      height\n    }\n  }), /*#__PURE__*/React.createElement(Animated.View, {\n    onLayout: handleLayout,\n    style: [layout.measured || !visible ? // If we have measured banner's height or it's invisible,\n    // Position it absolutely, the layout will be taken care of the spacer\n    [styles.absolute, {\n      transform: [{\n        translateY\n      }]\n    }] : // Otherwise position it normally\n    null, !layout.measured && !visible ? // If we haven't measured banner's height yet and it's invisible,\n    // hide it with opacity: 0 so user doesn't see it\n    {\n      opacity: 0\n    } : null]\n  }, /*#__PURE__*/React.createElement(View, {\n    style: styles.content\n  }, icon ? /*#__PURE__*/React.createElement(View, {\n    style: styles.icon\n  }, /*#__PURE__*/React.createElement(Icon, {\n    source: icon,\n    size: 40\n  })) : null, /*#__PURE__*/React.createElement(Text, {\n    style: [styles.message, {\n      color: theme.colors.text\n    }],\n    accessibilityLiveRegion: visible ? 'polite' : 'none',\n    accessibilityRole: \"alert\"\n  }, children)), /*#__PURE__*/React.createElement(View, {\n    style: styles.actions\n  }, actions.map((_ref3, i) => {\n    let {\n      label,\n      ...others\n    } = _ref3;\n    return /*#__PURE__*/React.createElement(Button, _extends({\n      key:\n      /* eslint-disable-line react/no-array-index-key */\n      i,\n      compact: true,\n      mode: \"text\",\n      style: styles.button,\n      color: theme.colors.primary\n    }, others), label);\n  })))));\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    elevation: ELEVATION\n  },\n  wrapper: {\n    overflow: 'hidden',\n    alignSelf: 'center',\n    width: '100%',\n    maxWidth: DEFAULT_MAX_WIDTH\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    width: '100%'\n  },\n  content: {\n    flexDirection: 'row',\n    justifyContent: 'flex-start',\n    marginHorizontal: 8,\n    marginTop: 16,\n    marginBottom: 0\n  },\n  icon: {\n    margin: 8\n  },\n  message: {\n    flex: 1,\n    margin: 8\n  },\n  actions: {\n    flexDirection: 'row',\n    justifyContent: 'flex-end',\n    margin: 4\n  },\n  button: {\n    margin: 4\n  }\n});\nexport default withTheme(Banner);","map":{"version":3,"mappings":"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","names":["React","View","StyleSheet","Animated","Surface","Text","Button","Icon","withTheme","shadow","ELEVATION","DEFAULT_MAX_WIDTH","Banner","visible","icon","children","actions","contentStyle","style","theme","onShowAnimationFinished","onHideAnimationFinished","rest","current","position","useRef","Value","layout","setLayout","useState","height","measured","scale","animation","useEffect","timing","duration","toValue","useNativeDriver","start","handleLayout","nativeEvent","multiply","translateY","add","styles","container","wrapper","onLayout","absolute","transform","opacity","content","source","size","message","color","colors","text","accessibilityLiveRegion","accessibilityRole","map","i","label","others","key","compact","mode","button","primary","create","elevation","overflow","alignSelf","width","maxWidth","top","flexDirection","justifyContent","marginHorizontal","marginTop","marginBottom","margin","flex"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\node_modules\\react-native-paper\\lib\\module\\components\\Banner.tsx"],"sourcesContent":["import * as React from 'react';\nimport { View, ViewStyle, StyleSheet, StyleProp, Animated } from 'react-native';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport Button from './Button';\nimport Icon, { IconSource } from './Icon';\nimport { withTheme } from '../core/theming';\nimport type { $RemoveChildren } from '../types';\nimport shadow from '../styles/shadow';\n\nconst ELEVATION = 1;\nconst DEFAULT_MAX_WIDTH = 960;\n\ntype Props = $RemoveChildren<typeof Surface> & {\n  /**\n   * Whether banner is currently visible.\n   */\n  visible: boolean;\n  /**\n   * Content that will be displayed inside banner.\n   */\n  children: string;\n  /**\n   * Icon to display for the `Banner`. Can be an image.\n   */\n  icon?: IconSource;\n  /**\n   * Action items to shown in the banner.\n   * An action item should contain the following properties:\n   *\n   * - `label`: label of the action button (required)\n   * - `onPress`: callback that is called when button is pressed (required)\n   *\n   * To customize button you can pass other props that button component takes.\n   */\n  actions: Array<\n    {\n      label: string;\n    } & Omit<React.ComponentProps<typeof Button>, 'children'>\n  >;\n  /**\n   * Style of banner's inner content.\n   * Use this prop to apply custom width for wide layouts.\n   */\n  contentStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  ref?: React.RefObject<View>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * @optional\n   * Optional callback that will be called after the opening animation finished running normally\n   */\n  onShowAnimationFinished?: Animated.EndCallback;\n  /**\n   * @optional\n   * Optional callback that will be called after the closing animation finished running normally\n   */\n  onHideAnimationFinished?: Animated.EndCallback;\n};\n\ntype NativeEvent = {\n  nativeEvent: {\n    layout: {\n      x: number;\n      y: number;\n      width: number;\n      height: number;\n    };\n  };\n};\n\n/**\n * Banner displays a prominent message and related actions.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/banner.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Image } from 'react-native';\n * import { Banner } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(true);\n *\n *   return (\n *     <Banner\n *       visible={visible}\n *       actions={[\n *         {\n *           label: 'Fix it',\n *           onPress: () => setVisible(false),\n *         },\n *         {\n *           label: 'Learn more',\n *           onPress: () => setVisible(false),\n *         },\n *       ]}\n *       icon={({size}) => (\n *         <Image\n *           source={{\n *             uri: 'https://avatars3.githubusercontent.com/u/17571969?s=400&v=4',\n *           }}\n *           style={{\n *             width: size,\n *             height: size,\n *           }}\n *         />\n *       )}>\n *       There was a problem processing a transaction on your credit card.\n *     </Banner>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst Banner = ({\n  visible,\n  icon,\n  children,\n  actions,\n  contentStyle,\n  style,\n  theme,\n  onShowAnimationFinished = () => {},\n  onHideAnimationFinished = () => {},\n  ...rest\n}: Props) => {\n  const { current: position } = React.useRef<Animated.Value>(\n    new Animated.Value(visible ? 1 : 0)\n  );\n  const [layout, setLayout] = React.useState<{\n    height: number;\n    measured: boolean;\n  }>({\n    height: 0,\n    measured: false,\n  });\n\n  const { scale } = theme.animation;\n\n  React.useEffect(() => {\n    if (visible) {\n      // show\n      Animated.timing(position, {\n        duration: 250 * scale,\n        toValue: 1,\n        useNativeDriver: false,\n      }).start(onShowAnimationFinished);\n    } else {\n      // hide\n      Animated.timing(position, {\n        duration: 200 * scale,\n        toValue: 0,\n        useNativeDriver: false,\n      }).start(onHideAnimationFinished);\n    }\n  }, [visible, position, scale]);\n\n  const handleLayout = ({ nativeEvent }: NativeEvent) => {\n    const { height } = nativeEvent.layout;\n    setLayout({ height, measured: true });\n  };\n\n  // The banner animation has 2 parts:\n  // 1. Blank spacer element which animates its height to move the content\n  // 2. Actual banner which animates its translateY\n  // In initial render, we position everything normally and measure the height of the banner\n  // Once we have the height, we apply the height to the spacer and switch the banner to position: absolute\n  // We need this because we need to move the content below as if banner's height was being animated\n  // However we can't animated banner's height directly as it'll also resize the content inside\n  const height = Animated.multiply(position, layout.height);\n\n  const translateY = Animated.multiply(\n    Animated.add(position, -1),\n    layout.height\n  );\n  return (\n    <Surface\n      {...rest}\n      style={[styles.container, shadow(ELEVATION) as ViewStyle, style]}\n      theme={theme}\n    >\n      <View style={[styles.wrapper, contentStyle]}>\n        <Animated.View style={{ height }} />\n        <Animated.View\n          onLayout={handleLayout}\n          style={[\n            layout.measured || !visible\n              ? // If we have measured banner's height or it's invisible,\n                // Position it absolutely, the layout will be taken care of the spacer\n                [styles.absolute, { transform: [{ translateY }] }]\n              : // Otherwise position it normally\n                null,\n            !layout.measured && !visible\n              ? // If we haven't measured banner's height yet and it's invisible,\n                // hide it with opacity: 0 so user doesn't see it\n                { opacity: 0 }\n              : null,\n          ]}\n        >\n          <View style={styles.content}>\n            {icon ? (\n              <View style={styles.icon}>\n                <Icon source={icon} size={40} />\n              </View>\n            ) : null}\n            <Text\n              style={[styles.message, { color: theme.colors.text }]}\n              accessibilityLiveRegion={visible ? 'polite' : 'none'}\n              accessibilityRole=\"alert\"\n            >\n              {children}\n            </Text>\n          </View>\n          <View style={styles.actions}>\n            {actions.map(({ label, ...others }, i) => (\n              <Button\n                key={/* eslint-disable-line react/no-array-index-key */ i}\n                compact\n                mode=\"text\"\n                style={styles.button}\n                color={theme.colors.primary}\n                {...others}\n              >\n                {label}\n              </Button>\n            ))}\n          </View>\n        </Animated.View>\n      </View>\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    elevation: ELEVATION,\n  },\n  wrapper: {\n    overflow: 'hidden',\n    alignSelf: 'center',\n    width: '100%',\n    maxWidth: DEFAULT_MAX_WIDTH,\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    width: '100%',\n  },\n  content: {\n    flexDirection: 'row',\n    justifyContent: 'flex-start',\n    marginHorizontal: 8,\n    marginTop: 16,\n    marginBottom: 0,\n  },\n  icon: {\n    margin: 8,\n  },\n  message: {\n    flex: 1,\n    margin: 8,\n  },\n  actions: {\n    flexDirection: 'row',\n    justifyContent: 'flex-end',\n    margin: 4,\n  },\n  button: {\n    margin: 4,\n  },\n});\n\nexport default withTheme(Banner);\n"]},"metadata":{},"sourceType":"module"}