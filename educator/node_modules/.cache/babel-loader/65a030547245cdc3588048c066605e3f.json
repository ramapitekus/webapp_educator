{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ProxyInfo, WebsocketConnection } from \"../common.browser/Exports\";\nimport { ForceDictationPropertyName, OutputFormatPropertyName } from \"../common.speech/Exports\";\nimport { OutputFormat, PropertyId } from \"../sdk/Exports\";\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\nimport { RecognitionMode, WebsocketMessageFormatter } from \"./Exports\";\nimport { HeaderNames } from \"./HeaderNames\";\nimport { QueryParameterNames } from \"./QueryParameterNames\";\nexport class SpeechConnectionFactory extends ConnectionFactoryBase {\n  constructor() {\n    super(...arguments);\n    this.interactiveRelativeUri = \"/speech/recognition/interactive/cognitiveservices/v1\";\n    this.conversationRelativeUri = \"/speech/recognition/conversation/cognitiveservices/v1\";\n    this.dictationRelativeUri = \"/speech/recognition/dictation/cognitiveservices/v1\";\n\n    this.create = (config, authInfo, connectionId) => {\n      let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\n      const region = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\n      const hostSuffix = ConnectionFactoryBase.getHostSuffix(region);\n      const host = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".stt.speech\" + hostSuffix);\n      const queryParams = {};\n      const endpointId = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\n      const language = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\n\n      if (endpointId) {\n        if (!endpoint || endpoint.search(QueryParameterNames.CustomSpeechDeploymentId) === -1) {\n          queryParams[QueryParameterNames.CustomSpeechDeploymentId] = endpointId;\n        }\n      } else if (language) {\n        if (!endpoint || endpoint.search(QueryParameterNames.Language) === -1) {\n          queryParams[QueryParameterNames.Language] = language;\n        }\n      }\n\n      if (!endpoint || endpoint.search(QueryParameterNames.Format) === -1) {\n        queryParams[QueryParameterNames.Format] = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\n      }\n\n      if (config.autoDetectSourceLanguages !== undefined) {\n        queryParams[QueryParameterNames.EnableLanguageId] = \"true\";\n      }\n\n      this.setCommonUrlParams(config, queryParams, endpoint);\n\n      if (!endpoint) {\n        switch (config.recognitionMode) {\n          case RecognitionMode.Conversation:\n            if (config.parameters.getProperty(ForceDictationPropertyName, \"false\") === \"true\") {\n              endpoint = host + this.dictationRelativeUri;\n            } else {\n              endpoint = host + this.conversationRelativeUri;\n            }\n\n            break;\n\n          case RecognitionMode.Dictation:\n            endpoint = host + this.dictationRelativeUri;\n            break;\n\n          default:\n            endpoint = host + this.interactiveRelativeUri; // default is interactive\n\n            break;\n        }\n      }\n\n      const headers = {};\n\n      if (authInfo.token !== undefined && authInfo.token !== \"\") {\n        headers[authInfo.headerName] = authInfo.token;\n      }\n\n      headers[HeaderNames.ConnectionId] = connectionId;\n      config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\n      const enableCompression = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\n      return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\n    };\n  }\n\n}","map":{"version":3,"mappings":"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","names":["ProxyInfo","WebsocketConnection","ForceDictationPropertyName","OutputFormatPropertyName","OutputFormat","PropertyId","ConnectionFactoryBase","RecognitionMode","WebsocketMessageFormatter","HeaderNames","QueryParameterNames","SpeechConnectionFactory","constructor","config","authInfo","connectionId","endpoint","parameters","getProperty","SpeechServiceConnection_Endpoint","undefined","region","SpeechServiceConnection_Region","hostSuffix","getHostSuffix","host","SpeechServiceConnection_Host","queryParams","endpointId","SpeechServiceConnection_EndpointId","language","SpeechServiceConnection_RecoLanguage","search","CustomSpeechDeploymentId","Language","Format","Simple","toLowerCase","autoDetectSourceLanguages","EnableLanguageId","setCommonUrlParams","recognitionMode","Conversation","dictationRelativeUri","conversationRelativeUri","Dictation","interactiveRelativeUri","headers","token","headerName","ConnectionId","setProperty","SpeechServiceConnection_Url","enableCompression","fromRecognizerConfig"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\node_modules\\microsoft-cognitiveservices-speech-sdk\\distrib\\es2015\\src\\common.speech\\src\\common.speech\\SpeechConnectionFactory.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    ForceDictationPropertyName,\r\n    OutputFormatPropertyName,\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports\";\r\nimport {\r\n    OutputFormat,\r\n    PropertyId\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase\";\r\nimport {\r\n    AuthInfo,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter\r\n} from \"./Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport {\r\n    QueryParameterNames\r\n} from \"./QueryParameterNames\";\r\n\r\nexport class SpeechConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    private readonly interactiveRelativeUri: string = \"/speech/recognition/interactive/cognitiveservices/v1\";\r\n    private readonly conversationRelativeUri: string = \"/speech/recognition/conversation/cognitiveservices/v1\";\r\n    private readonly dictationRelativeUri: string = \"/speech/recognition/dictation/cognitiveservices/v1\";\r\n\r\n    public create = (\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection => {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\r\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".stt.speech\" + hostSuffix);\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n\r\n        const endpointId: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\r\n\r\n        if (endpointId) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.CustomSpeechDeploymentId) === -1) {\r\n                queryParams[QueryParameterNames.CustomSpeechDeploymentId] = endpointId;\r\n            }\r\n        } else if (language) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.Language) === -1) {\r\n                queryParams[QueryParameterNames.Language] = language;\r\n            }\r\n        }\r\n\r\n        if (!endpoint || endpoint.search(QueryParameterNames.Format) === -1) {\r\n            queryParams[QueryParameterNames.Format] = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\r\n        }\r\n\r\n        if (config.autoDetectSourceLanguages !== undefined) {\r\n            queryParams[QueryParameterNames.EnableLanguageId] = \"true\";\r\n        }\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n\r\n        if (!endpoint) {\r\n            switch (config.recognitionMode) {\r\n                case RecognitionMode.Conversation:\r\n                    if (config.parameters.getProperty(ForceDictationPropertyName, \"false\") === \"true\") {\r\n                        endpoint = host + this.dictationRelativeUri;\r\n                    } else {\r\n                        endpoint = host + this.conversationRelativeUri;\r\n                    }\r\n                    break;\r\n                case RecognitionMode.Dictation:\r\n                    endpoint = host + this.dictationRelativeUri;\r\n                    break;\r\n                default:\r\n                    endpoint = host + this.interactiveRelativeUri; // default is interactive\r\n                    break;\r\n            }\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}