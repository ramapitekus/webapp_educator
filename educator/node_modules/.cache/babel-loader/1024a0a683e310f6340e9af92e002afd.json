{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport { View, Animated, TouchableWithoutFeedback, StyleSheet, Platform } from 'react-native';\nimport { getBottomSpace } from 'react-native-iphone-x-helper';\nimport color from 'color';\nimport overlay from '../../styles/overlay';\nimport Icon from '../Icon';\nimport Surface from '../Surface';\nimport Badge from '../Badge';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport { black, white } from '../../styles/colors';\nimport { withTheme } from '../../core/theming';\nimport useAnimatedValue from '../../utils/useAnimatedValue';\nimport useAnimatedValueArray from '../../utils/useAnimatedValueArray';\nimport useLayout from '../../utils/useLayout';\nimport useIsKeyboardShown from '../../utils/useIsKeyboardShown';\nimport BottomNavigationRouteScreen from './BottomNavigationRouteScreen';\nconst MIN_RIPPLE_SCALE = 0.001; // Minimum scale is not 0 due to bug with animation\n\nconst MIN_TAB_WIDTH = 96;\nconst MAX_TAB_WIDTH = 168;\nconst BAR_HEIGHT = 56;\nconst BOTTOM_INSET = getBottomSpace();\nconst FAR_FAR_AWAY = Platform.OS === 'web' ? 0 : 9999;\n\nconst Touchable = _ref => {\n  let {\n    route: _0,\n    style,\n    children,\n    borderless,\n    centered,\n    rippleColor,\n    ...rest\n  } = _ref;\n  return TouchableRipple.supported ? /*#__PURE__*/React.createElement(TouchableRipple, _extends({}, rest, {\n    disabled: rest.disabled || undefined,\n    borderless: borderless,\n    centered: centered,\n    rippleColor: rippleColor,\n    style: style\n  }), children) : /*#__PURE__*/React.createElement(TouchableWithoutFeedback, rest, /*#__PURE__*/React.createElement(View, {\n    style: style\n  }, children));\n};\n\nconst SceneComponent = /*#__PURE__*/React.memo(_ref2 => {\n  let {\n    component,\n    ...rest\n  } = _ref2;\n  return /*#__PURE__*/React.createElement(component, rest);\n});\n/**\n * Bottom navigation provides quick navigation between top-level views of an app with a bottom navigation bar.\n * It is primarily designed for use on mobile.\n *\n * For integration with React Navigation, you can use [react-navigation-material-bottom-tabs](https://github.com/react-navigation/react-navigation/tree/main/packages/material-bottom-tabs) and consult [createMaterialBottomTabNavigator](https://reactnavigation.org/docs/material-bottom-tab-navigator/) documentation.\n *\n * By default Bottom navigation uses primary color as a background, in dark theme with `adaptive` mode it will use surface colour instead.\n * See [Dark Theme](https://callstack.github.io/react-native-paper/theming.html#dark-theme) for more information.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/bottom-navigation.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { BottomNavigation, Text } from 'react-native-paper';\n *\n * const MusicRoute = () => <Text>Music</Text>;\n *\n * const AlbumsRoute = () => <Text>Albums</Text>;\n *\n * const RecentsRoute = () => <Text>Recents</Text>;\n *\n * const MyComponent = () => {\n *   const [index, setIndex] = React.useState(0);\n *   const [routes] = React.useState([\n *     { key: 'music', title: 'Music', icon: 'queue-music' },\n *     { key: 'albums', title: 'Albums', icon: 'album' },\n *     { key: 'recents', title: 'Recents', icon: 'history' },\n *   ]);\n *\n *   const renderScene = BottomNavigation.SceneMap({\n *     music: MusicRoute,\n *     albums: AlbumsRoute,\n *     recents: RecentsRoute,\n *   });\n *\n *   return (\n *     <BottomNavigation\n *       navigationState={{ index, routes }}\n *       onIndexChange={setIndex}\n *       renderScene={renderScene}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nconst BottomNavigation = _ref3 => {\n  let {\n    navigationState,\n    renderScene,\n    renderIcon,\n    renderLabel,\n    renderTouchable = props => /*#__PURE__*/React.createElement(Touchable, props),\n    getLabelText = _ref4 => {\n      let {\n        route\n      } = _ref4;\n      return route.title;\n    },\n    getBadge = _ref5 => {\n      let {\n        route\n      } = _ref5;\n      return route.badge;\n    },\n    getColor = _ref6 => {\n      let {\n        route\n      } = _ref6;\n      return route.color;\n    },\n    getAccessibilityLabel = _ref7 => {\n      let {\n        route\n      } = _ref7;\n      return route.accessibilityLabel;\n    },\n    getTestID = _ref8 => {\n      let {\n        route\n      } = _ref8;\n      return route.testID;\n    },\n    activeColor,\n    inactiveColor,\n    keyboardHidesNavigationBar = true,\n    barStyle,\n    labeled = true,\n    style,\n    theme,\n    sceneAnimationEnabled = false,\n    onTabPress,\n    onIndexChange,\n    shifting = navigationState.routes.length > 3,\n    safeAreaInsets\n  } = _ref3;\n\n  var _safeAreaInsets$left, _safeAreaInsets$right, _safeAreaInsets$botto;\n\n  const {\n    scale\n  } = theme.animation;\n  const focusedKey = navigationState.routes[navigationState.index].key;\n  /**\n   * Visibility of the navigation bar, visible state is 1 and invisible is 0.\n   */\n\n  const visibleAnim = useAnimatedValue(1);\n  /**\n   * Active state of individual tab items, active state is 1 and inactive state is 0.\n   */\n\n  const tabsAnims = useAnimatedValueArray(navigationState.routes.map( // focused === 1, unfocused === 0\n  (_, i) => i === navigationState.index ? 1 : 0));\n  /**\n   * The top offset for each tab item to position it offscreen.\n   * Placing items offscreen helps to save memory usage for inactive screens with removeClippedSubviews.\n   * We use animated values for this to prevent unnecessary re-renders.\n   */\n\n  const offsetsAnims = useAnimatedValueArray(navigationState.routes.map( // offscreen === 1, normal === 0\n  (_, i) => i === navigationState.index ? 0 : 1));\n  /**\n   * Index of the currently active tab. Used for setting the background color.\n   * We don't use the color as an animated value directly, because `setValue` seems to be buggy with colors.\n   */\n\n  const indexAnim = useAnimatedValue(navigationState.index);\n  /**\n   * Animation for the background color ripple, used to determine it's scale and opacity.\n   */\n\n  const rippleAnim = useAnimatedValue(MIN_RIPPLE_SCALE);\n  /**\n   * Layout of the navigation bar. The width is used to determine the size and position of the ripple.\n   */\n\n  const [layout, onLayout] = useLayout();\n  /**\n   * List of loaded tabs, tabs will be loaded when navigated to.\n   */\n\n  const [loaded, setLoaded] = React.useState([focusedKey]);\n\n  if (!loaded.includes(focusedKey)) {\n    // Set the current tab to be loaded if it was not loaded before\n    setLoaded(loaded => [...loaded, focusedKey]);\n  }\n  /**\n   * Track whether the keyboard is visible to show and hide the navigation bar.\n   */\n\n\n  const [keyboardVisible, setKeyboardVisible] = React.useState(false);\n  const handleKeyboardShow = React.useCallback(() => {\n    setKeyboardVisible(true);\n    Animated.timing(visibleAnim, {\n      toValue: 0,\n      duration: 150 * scale,\n      useNativeDriver: true\n    }).start();\n  }, [scale, visibleAnim]);\n  const handleKeyboardHide = React.useCallback(() => {\n    Animated.timing(visibleAnim, {\n      toValue: 1,\n      duration: 100 * scale,\n      useNativeDriver: true\n    }).start(() => {\n      setKeyboardVisible(false);\n    });\n  }, [scale, visibleAnim]);\n  const animateToIndex = React.useCallback(index => {\n    // Reset the ripple to avoid glitch if it's currently animating\n    rippleAnim.setValue(MIN_RIPPLE_SCALE);\n    Animated.parallel([Animated.timing(rippleAnim, {\n      toValue: 1,\n      duration: shifting ? 400 * scale : 0,\n      useNativeDriver: true\n    }), ...navigationState.routes.map((_, i) => Animated.timing(tabsAnims[i], {\n      toValue: i === index ? 1 : 0,\n      duration: shifting ? 150 * scale : 0,\n      useNativeDriver: true\n    }))]).start(_ref9 => {\n      let {\n        finished\n      } = _ref9;\n      // Workaround a bug in native animations where this is reset after first animation\n      tabsAnims.map((tab, i) => tab.setValue(i === index ? 1 : 0)); // Update the index to change bar's background color and then hide the ripple\n\n      indexAnim.setValue(index);\n      rippleAnim.setValue(MIN_RIPPLE_SCALE);\n\n      if (finished) {\n        // Position all inactive screens offscreen to save memory usage\n        // Only do it when animation has finished to avoid glitches mid-transition if switching fast\n        offsetsAnims.forEach((offset, i) => {\n          if (i === index) {\n            offset.setValue(0);\n          } else {\n            offset.setValue(1);\n          }\n        });\n      }\n    });\n  }, [indexAnim, shifting, navigationState.routes, offsetsAnims, rippleAnim, scale, tabsAnims]);\n  React.useEffect(() => {\n    // Workaround for native animated bug in react-native@^0.57\n    // Context: https://github.com/callstack/react-native-paper/pull/637\n    animateToIndex(navigationState.index); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  useIsKeyboardShown({\n    onShow: handleKeyboardShow,\n    onHide: handleKeyboardHide\n  });\n  const prevNavigationState = React.useRef();\n  React.useEffect(() => {\n    // Reset offsets of previous and current tabs before animation\n    offsetsAnims.forEach((offset, i) => {\n      var _prevNavigationState$;\n\n      if (i === navigationState.index || i === ((_prevNavigationState$ = prevNavigationState.current) === null || _prevNavigationState$ === void 0 ? void 0 : _prevNavigationState$.index)) {\n        offset.setValue(0);\n      }\n    });\n    animateToIndex(navigationState.index);\n  }, [navigationState.index, animateToIndex, offsetsAnims]);\n\n  const handleTabPress = index => {\n    const event = {\n      route: navigationState.routes[index],\n      defaultPrevented: false,\n      preventDefault: () => {\n        event.defaultPrevented = true;\n      }\n    };\n    onTabPress === null || onTabPress === void 0 ? void 0 : onTabPress(event);\n\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    if (index !== navigationState.index) {\n      onIndexChange(index);\n    }\n  };\n\n  const jumpTo = React.useCallback(key => {\n    const index = navigationState.routes.findIndex(route => route.key === key);\n    onIndexChange(index);\n  }, [navigationState.routes, onIndexChange]);\n  const {\n    routes\n  } = navigationState;\n  const {\n    colors,\n    dark: isDarkTheme,\n    mode\n  } = theme;\n  const {\n    backgroundColor: customBackground,\n    elevation = 4\n  } = StyleSheet.flatten(barStyle) || {};\n  const approxBackgroundColor = customBackground ? customBackground : isDarkTheme && mode === 'adaptive' ? overlay(elevation, colors.surface) : colors.primary;\n  const backgroundColor = shifting ? indexAnim.interpolate({\n    inputRange: routes.map((_, i) => i),\n    // FIXME: does outputRange support ColorValue or just strings?\n    // @ts-expect-error\n    outputRange: routes.map(route => getColor({\n      route\n    }) || approxBackgroundColor)\n  }) : approxBackgroundColor;\n  const isDark = typeof approxBackgroundColor === 'string' ? !color(approxBackgroundColor).isLight() : true;\n  const textColor = isDark ? white : black;\n  const activeTintColor = typeof activeColor !== 'undefined' ? activeColor : textColor;\n  const inactiveTintColor = typeof inactiveColor !== 'undefined' ? inactiveColor : color(textColor).alpha(0.5).rgb().string();\n  const touchColor = color(activeColor || activeTintColor).alpha(0.12).rgb().string();\n  const maxTabWidth = routes.length > 3 ? MIN_TAB_WIDTH : MAX_TAB_WIDTH;\n  const maxTabBarWidth = maxTabWidth * routes.length;\n  const tabBarWidth = Math.min(layout.width, maxTabBarWidth);\n  const tabWidth = tabBarWidth / routes.length;\n  const rippleSize = layout.width / 4;\n  const insets = {\n    left: (_safeAreaInsets$left = safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.left) !== null && _safeAreaInsets$left !== void 0 ? _safeAreaInsets$left : 0,\n    right: (_safeAreaInsets$right = safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.right) !== null && _safeAreaInsets$right !== void 0 ? _safeAreaInsets$right : 0,\n    bottom: (_safeAreaInsets$botto = safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.bottom) !== null && _safeAreaInsets$botto !== void 0 ? _safeAreaInsets$botto : BOTTOM_INSET\n  };\n  return /*#__PURE__*/React.createElement(View, {\n    style: [styles.container, style]\n  }, /*#__PURE__*/React.createElement(View, {\n    style: [styles.content, {\n      backgroundColor: colors.background\n    }]\n  }, routes.map((route, index) => {\n    if (!loaded.includes(route.key)) {\n      // Don't render a screen if we've never navigated to it\n      return null;\n    }\n\n    const focused = navigationState.index === index;\n    const opacity = sceneAnimationEnabled ? tabsAnims[index] : focused ? 1 : 0;\n    const top = sceneAnimationEnabled ? offsetsAnims[index].interpolate({\n      inputRange: [0, 1],\n      outputRange: [0, FAR_FAR_AWAY]\n    }) : focused ? 0 : FAR_FAR_AWAY;\n    return /*#__PURE__*/React.createElement(BottomNavigationRouteScreen, {\n      key: route.key,\n      pointerEvents: focused ? 'auto' : 'none',\n      accessibilityElementsHidden: !focused,\n      importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',\n      index: index,\n      visibility: opacity,\n      style: [StyleSheet.absoluteFill, {\n        opacity\n      }],\n      collapsable: false,\n      removeClippedSubviews: // On iOS, set removeClippedSubviews to true only when not focused\n      // This is an workaround for a bug where the clipped view never re-appears\n      Platform.OS === 'ios' ? navigationState.index !== index : true\n    }, /*#__PURE__*/React.createElement(Animated.View, {\n      style: [styles.content, {\n        top\n      }]\n    }, renderScene({\n      route,\n      jumpTo\n    })));\n  })), /*#__PURE__*/React.createElement(Surface, {\n    style: [styles.bar, keyboardHidesNavigationBar ? {\n      // When the keyboard is shown, slide down the navigation bar\n      transform: [{\n        translateY: visibleAnim.interpolate({\n          inputRange: [0, 1],\n          outputRange: [layout.height, 0]\n        })\n      }],\n      // Absolutely position the navigation bar so that the content is below it\n      // This is needed to avoid gap at bottom when the navigation bar is hidden\n      position: keyboardVisible ? 'absolute' : null\n    } : null, barStyle],\n    pointerEvents: layout.measured ? keyboardHidesNavigationBar && keyboardVisible ? 'none' : 'auto' : 'none',\n    onLayout: onLayout\n  }, /*#__PURE__*/React.createElement(Animated.View, {\n    style: [styles.barContent, {\n      backgroundColor\n    }]\n  }, /*#__PURE__*/React.createElement(View, {\n    style: [styles.items, {\n      marginBottom: insets.bottom,\n      marginHorizontal: Math.max(insets.left, insets.right),\n      maxWidth: maxTabBarWidth\n    }],\n    accessibilityRole: 'tablist'\n  }, shifting ? /*#__PURE__*/React.createElement(Animated.View, {\n    pointerEvents: \"none\",\n    style: [styles.ripple, {\n      // Since we have a single ripple, we have to reposition it so that it appears to expand from active tab.\n      // We need to move it from the top to center of the navigation bar and from the left to the active tab.\n      top: (BAR_HEIGHT - rippleSize) / 2,\n      left: tabWidth * (navigationState.index + 0.5) - rippleSize / 2,\n      height: rippleSize,\n      width: rippleSize,\n      borderRadius: rippleSize / 2,\n      backgroundColor: getColor({\n        route: routes[navigationState.index]\n      }),\n      transform: [{\n        // Scale to twice the size  to ensure it covers the whole navigation bar\n        scale: rippleAnim.interpolate({\n          inputRange: [0, 1],\n          outputRange: [0, 8]\n        })\n      }],\n      opacity: rippleAnim.interpolate({\n        inputRange: [0, MIN_RIPPLE_SCALE, 0.3, 1],\n        outputRange: [0, 0, 1, 1]\n      })\n    }]\n  }) : null, routes.map((route, index) => {\n    const focused = navigationState.index === index;\n    const active = tabsAnims[index]; // Scale the label up\n\n    const scale = labeled && shifting ? active.interpolate({\n      inputRange: [0, 1],\n      outputRange: [0.5, 1]\n    }) : 1; // Move down the icon to account for no-label in shifting and smaller label in non-shifting.\n\n    const translateY = labeled ? shifting ? active.interpolate({\n      inputRange: [0, 1],\n      outputRange: [7, 0]\n    }) : 0 : 7; // We render the active icon and label on top of inactive ones and cross-fade them on change.\n    // This trick gives the illusion that we are animating between active and inactive colors.\n    // This is to ensure that we can use native driver, as colors cannot be animated with native driver.\n\n    const activeOpacity = active;\n    const inactiveOpacity = active.interpolate({\n      inputRange: [0, 1],\n      outputRange: [1, 0]\n    });\n    const badge = getBadge({\n      route\n    });\n    return renderTouchable({\n      key: route.key,\n      route,\n      borderless: true,\n      centered: true,\n      rippleColor: touchColor,\n      onPress: () => handleTabPress(index),\n      testID: getTestID({\n        route\n      }),\n      accessibilityLabel: getAccessibilityLabel({\n        route\n      }),\n      // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n      accessibilityTraits: focused ? ['button', 'selected'] : 'button',\n      accessibilityComponentType: 'button',\n      accessibilityRole: Platform.OS === 'ios' ? 'button' : 'tab',\n      accessibilityState: {\n        selected: focused\n      },\n      style: styles.item,\n      children: /*#__PURE__*/React.createElement(View, {\n        pointerEvents: \"none\"\n      }, /*#__PURE__*/React.createElement(Animated.View, {\n        style: [styles.iconContainer, {\n          transform: [{\n            translateY\n          }]\n        }]\n      }, /*#__PURE__*/React.createElement(Animated.View, {\n        style: [styles.iconWrapper, {\n          opacity: activeOpacity\n        }]\n      }, renderIcon ? renderIcon({\n        route,\n        focused: true,\n        color: activeTintColor\n      }) : /*#__PURE__*/React.createElement(Icon, {\n        source: route.icon,\n        color: activeTintColor,\n        size: 24\n      })), /*#__PURE__*/React.createElement(Animated.View, {\n        style: [styles.iconWrapper, {\n          opacity: inactiveOpacity\n        }]\n      }, renderIcon ? renderIcon({\n        route,\n        focused: false,\n        color: inactiveTintColor\n      }) : /*#__PURE__*/React.createElement(Icon, {\n        source: route.icon,\n        color: inactiveTintColor,\n        size: 24\n      })), /*#__PURE__*/React.createElement(View, {\n        style: [styles.badgeContainer, {\n          right: (badge != null && typeof badge !== 'boolean' ? String(badge).length * -2 : 0) - 2\n        }]\n      }, typeof badge === 'boolean' ? /*#__PURE__*/React.createElement(Badge, {\n        visible: badge,\n        size: 8\n      }) : /*#__PURE__*/React.createElement(Badge, {\n        visible: badge != null,\n        size: 16\n      }, badge))), labeled ? /*#__PURE__*/React.createElement(Animated.View, {\n        style: [styles.labelContainer, {\n          transform: [{\n            scale\n          }]\n        }]\n      }, /*#__PURE__*/React.createElement(Animated.View, {\n        style: [styles.labelWrapper, {\n          opacity: activeOpacity\n        }]\n      }, renderLabel ? renderLabel({\n        route,\n        focused: true,\n        color: activeTintColor\n      }) : /*#__PURE__*/React.createElement(Text, {\n        style: [styles.label, {\n          color: activeTintColor\n        }]\n      }, getLabelText({\n        route\n      }))), shifting ? null : /*#__PURE__*/React.createElement(Animated.View, {\n        style: [styles.labelWrapper, {\n          opacity: inactiveOpacity\n        }]\n      }, renderLabel ? renderLabel({\n        route,\n        focused: false,\n        color: inactiveTintColor\n      }) : /*#__PURE__*/React.createElement(Text, {\n        selectable: false,\n        style: [styles.label, {\n          color: inactiveTintColor\n        }]\n      }, getLabelText({\n        route\n      })))) : /*#__PURE__*/React.createElement(View, {\n        style: styles.labelContainer\n      }))\n    });\n  })))));\n};\n/**\n * Function which takes a map of route keys to components.\n * Pure components are used to minimize re-rendering of the pages.\n * This drastically improves the animation performance.\n */\n\n\nBottomNavigation.SceneMap = scenes => {\n  return _ref10 => {\n    let {\n      route,\n      jumpTo\n    } = _ref10;\n    return /*#__PURE__*/React.createElement(SceneComponent, {\n      key: route.key,\n      component: scenes[route.key ? route.key : ''],\n      route: route,\n      jumpTo: jumpTo\n    });\n  };\n};\n\nexport default withTheme(BottomNavigation);\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  content: {\n    flex: 1\n  },\n  bar: {\n    left: 0,\n    right: 0,\n    bottom: 0,\n    elevation: 4\n  },\n  barContent: {\n    alignItems: 'center',\n    overflow: 'hidden'\n  },\n  items: {\n    flexDirection: 'row',\n    ...(Platform.OS === 'web' ? {\n      width: '100%'\n    } : null)\n  },\n  item: {\n    flex: 1,\n    // Top padding is 6 and bottom padding is 10\n    // The extra 4dp bottom padding is offset by label's height\n    paddingVertical: 6\n  },\n  ripple: {\n    position: 'absolute'\n  },\n  iconContainer: {\n    height: 24,\n    width: 24,\n    marginTop: 2,\n    marginHorizontal: 12,\n    alignSelf: 'center'\n  },\n  iconWrapper: { ...StyleSheet.absoluteFillObject,\n    alignItems: 'center'\n  },\n  labelContainer: {\n    height: 16,\n    paddingBottom: 2\n  },\n  labelWrapper: { ...StyleSheet.absoluteFillObject\n  },\n  // eslint-disable-next-line react-native/no-color-literals\n  label: {\n    fontSize: 12,\n    textAlign: 'center',\n    backgroundColor: 'transparent',\n    ...(Platform.OS === 'web' ? {\n      whiteSpace: 'nowrap',\n      alignSelf: 'center'\n    } : null)\n  },\n  badgeContainer: {\n    position: 'absolute',\n    left: 0,\n    top: -2\n  }\n});","map":{"version":3,"mappings":"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","names":["React","View","Animated","TouchableWithoutFeedback","StyleSheet","Platform","getBottomSpace","color","overlay","Icon","Surface","Badge","TouchableRipple","Text","black","white","withTheme","useAnimatedValue","useAnimatedValueArray","useLayout","useIsKeyboardShown","BottomNavigationRouteScreen","MIN_RIPPLE_SCALE","MIN_TAB_WIDTH","MAX_TAB_WIDTH","BAR_HEIGHT","BOTTOM_INSET","FAR_FAR_AWAY","OS","Touchable","route","_0","style","children","borderless","centered","rippleColor","rest","supported","disabled","undefined","SceneComponent","memo","component","createElement","BottomNavigation","navigationState","renderScene","renderIcon","renderLabel","renderTouchable","props","getLabelText","title","getBadge","badge","getColor","getAccessibilityLabel","accessibilityLabel","getTestID","testID","activeColor","inactiveColor","keyboardHidesNavigationBar","barStyle","labeled","theme","sceneAnimationEnabled","onTabPress","onIndexChange","shifting","routes","length","safeAreaInsets","scale","animation","focusedKey","index","key","visibleAnim","tabsAnims","map","_","i","offsetsAnims","indexAnim","rippleAnim","layout","onLayout","loaded","setLoaded","useState","includes","keyboardVisible","setKeyboardVisible","handleKeyboardShow","useCallback","timing","toValue","duration","useNativeDriver","start","handleKeyboardHide","animateToIndex","setValue","parallel","finished","tab","forEach","offset","useEffect","onShow","onHide","prevNavigationState","useRef","current","_prevNavigationState$","handleTabPress","event","defaultPrevented","preventDefault","jumpTo","findIndex","colors","dark","isDarkTheme","mode","backgroundColor","customBackground","elevation","flatten","approxBackgroundColor","surface","primary","interpolate","inputRange","outputRange","isDark","isLight","textColor","activeTintColor","inactiveTintColor","alpha","rgb","string","touchColor","maxTabWidth","maxTabBarWidth","tabBarWidth","Math","min","width","tabWidth","rippleSize","insets","left","right","bottom","styles","container","content","background","focused","opacity","top","pointerEvents","accessibilityElementsHidden","importantForAccessibility","visibility","absoluteFill","collapsable","removeClippedSubviews","bar","transform","translateY","height","position","measured","barContent","items","marginBottom","marginHorizontal","max","maxWidth","accessibilityRole","ripple","borderRadius","active","activeOpacity","inactiveOpacity","onPress","accessibilityTraits","accessibilityComponentType","accessibilityState","selected","item","iconContainer","iconWrapper","source","icon","size","badgeContainer","String","visible","labelContainer","labelWrapper","label","selectable","SceneMap","scenes","create","flex","overflow","alignItems","flexDirection","paddingVertical","marginTop","alignSelf","absoluteFillObject","paddingBottom","fontSize","textAlign","whiteSpace"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\node_modules\\react-native-paper\\lib\\module\\components\\BottomNavigation\\BottomNavigation.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  Animated,\n  TouchableWithoutFeedback,\n  TouchableWithoutFeedbackProps,\n  StyleSheet,\n  StyleProp,\n  Platform,\n  ViewStyle,\n} from 'react-native';\nimport { getBottomSpace } from 'react-native-iphone-x-helper';\nimport color from 'color';\nimport overlay from '../../styles/overlay';\nimport Icon, { IconSource } from '../Icon';\nimport Surface from '../Surface';\nimport Badge from '../Badge';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport { black, white } from '../../styles/colors';\nimport { withTheme } from '../../core/theming';\nimport useAnimatedValue from '../../utils/useAnimatedValue';\nimport useAnimatedValueArray from '../../utils/useAnimatedValueArray';\nimport useLayout from '../../utils/useLayout';\nimport useIsKeyboardShown from '../../utils/useIsKeyboardShown';\nimport BottomNavigationRouteScreen from './BottomNavigationRouteScreen';\n\ntype Route = {\n  key: string;\n  title?: string;\n  icon?: IconSource;\n  badge?: string | number | boolean;\n  color?: string;\n  accessibilityLabel?: string;\n  testID?: string;\n};\n\ntype NavigationState = {\n  index: number;\n  routes: Route[];\n};\n\ntype TabPressEvent = {\n  defaultPrevented: boolean;\n  preventDefault(): void;\n};\n\ntype TouchableProps = TouchableWithoutFeedbackProps & {\n  key: string;\n  route: Route;\n  children: React.ReactNode;\n  borderless?: boolean;\n  centered?: boolean;\n  rippleColor?: string;\n};\n\ntype Props = {\n  /**\n   * Whether the shifting style is used, the active tab icon shifts up to show the label and the inactive tabs won't have a label.\n   *\n   * By default, this is `true` when you have more than 3 tabs.\n   * Pass `shifting={false}` to explicitly disable this animation, or `shifting={true}` to always use this animation.\n   */\n  shifting?: boolean;\n  /**\n   * Whether to show labels in tabs. When `false`, only icons will be displayed.\n   */\n  labeled?: boolean;\n  /**\n   * State for the bottom navigation. The state should contain the following properties:\n   *\n   * - `index`: a number representing the index of the active route in the `routes` array\n   * - `routes`: an array containing a list of route objects used for rendering the tabs\n   *\n   * Each route object should contain the following properties:\n   *\n   * - `key`: a unique key to identify the route (required)\n   * - `title`: title of the route to use as the tab label\n   * - `icon`: icon to use as the tab icon, can be a string, an image source or a react component\n   * - `color`: color to use as background color for shifting bottom navigation\n   * - `badge`: badge to show on the tab icon, can be `true` to show a dot, `string` or `number` to show text.\n   * - `accessibilityLabel`: accessibility label for the tab button\n   * - `testID`: test id for the tab button\n   *\n   * Example:\n   *\n   * ```js\n   * {\n   *   index: 1,\n   *   routes: [\n   *     { key: 'music', title: 'Music', icon: 'queue-music', color: '#3F51B5' },\n   *     { key: 'albums', title: 'Albums', icon: 'album', color: '#009688' },\n   *     { key: 'recents', title: 'Recents', icon: 'history', color: '#795548' },\n   *     { key: 'purchased', title: 'Purchased', icon: 'shopping-cart', color: '#607D8B' },\n   *   ]\n   * }\n   * ```\n   *\n   * `BottomNavigation` is a controlled component, which means the `index` needs to be updated via the `onIndexChange` callback.\n   */\n  navigationState: NavigationState;\n  /**\n   * Callback which is called on tab change, receives the index of the new tab as argument.\n   * The navigation state needs to be updated when it's called, otherwise the change is dropped.\n   */\n  onIndexChange: (index: number) => void;\n  /**\n   * Callback which returns a react element to render as the page for the tab. Receives an object containing the route as the argument:\n   *\n   * ```js\n   * renderScene = ({ route, jumpTo }) => {\n   *   switch (route.key) {\n   *     case 'music':\n   *       return <MusicRoute jumpTo={jumpTo} />;\n   *     case 'albums':\n   *       return <AlbumsRoute jumpTo={jumpTo} />;\n   *   }\n   * }\n   * ```\n   *\n   * Pages are lazily rendered, which means that a page will be rendered the first time you navigate to it.\n   * After initial render, all the pages stay rendered to preserve their state.\n   *\n   * You need to make sure that your individual routes implement a `shouldComponentUpdate` to improve the performance.\n   * To make it easier to specify the components, you can use the `SceneMap` helper:\n   *\n   * ```js\n   * renderScene = BottomNavigation.SceneMap({\n   *   music: MusicRoute,\n   *   albums: AlbumsRoute,\n   * });\n   * ```\n   *\n   * Specifying the components this way is easier and takes care of implementing a `shouldComponentUpdate` method.\n   * Each component will receive the current route and a `jumpTo` method as it's props.\n   * The `jumpTo` method can be used to navigate to other tabs programmatically:\n   *\n   * ```js\n   * this.props.jumpTo('albums')\n   * ```\n   */\n  renderScene: (props: {\n    route: Route;\n    jumpTo: (key: string) => void;\n  }) => React.ReactNode | null;\n  /**\n   * Callback which returns a React Element to be used as tab icon.\n   */\n  renderIcon?: (props: {\n    route: Route;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Callback which React Element to be used as tab label.\n   */\n  renderLabel?: (props: {\n    route: Route;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to be used as the touchable for the tab item.\n   * Renders a `TouchableRipple` on Android and `TouchableWithoutFeedback` with `View` on iOS.\n   */\n  renderTouchable?: (props: TouchableProps) => React.ReactNode;\n  /**\n   * Get label text for the tab, uses `route.title` by default. Use `renderLabel` to replace label component.\n   */\n  getLabelText?: (props: { route: Route }) => string | undefined;\n  /**\n   * Get accessibility label for the tab button. This is read by the screen reader when the user taps the tab.\n   * Uses `route.accessibilityLabel` by default.\n   */\n  getAccessibilityLabel?: (props: { route: Route }) => string | undefined;\n  /**\n   * Get the id to locate this tab button in tests, uses `route.testID` by default.\n   */\n  getTestID?: (props: { route: Route }) => string | undefined;\n  /**\n   * Get badge for the tab, uses `route.badge` by default.\n   */\n  getBadge?: (props: { route: Route }) => boolean | number | string | undefined;\n  /**\n   * Get color for the tab, uses `route.color` by default.\n   */\n  getColor?: (props: { route: Route }) => string | undefined;\n  /**\n   * Function to execute on tab press. It receives the route for the pressed tab, useful for things like scroll to top.\n   */\n  onTabPress?: (props: { route: Route } & TabPressEvent) => void;\n  /**\n   * Custom color for icon and label in the active tab.\n   */\n  activeColor?: string;\n  /**\n   * Custom color for icon and label in the inactive tab.\n   */\n  inactiveColor?: string;\n  /**\n   * Whether animation is enabled for scenes transitions in `shifting` mode.\n   * By default, the scenes cross-fade during tab change when `shifting` is enabled.\n   * Specify `sceneAnimationEnabled` as `false` to disable the animation.\n   */\n  sceneAnimationEnabled?: boolean;\n  /**\n   * Whether the bottom navigation bar is hidden when keyboard is shown.\n   * On Android, this works best when [`windowSoftInputMode`](https://developer.android.com/guide/topics/manifest/activity-element#wsoft) is set to `adjustResize`.\n   */\n  keyboardHidesNavigationBar?: boolean;\n  /**\n   * Safe area insets for the tab bar. This can be used to avoid elements like the navigation bar on Android and bottom safe area on iOS.\n   * The bottom insets for iOS is added by default. You can override the behavior with this option.\n   */\n  safeAreaInsets?: {\n    top?: number;\n    right?: number;\n    bottom?: number;\n    left?: number;\n  };\n  /**\n   * Style for the bottom navigation bar.  You can pass a custom background color here:\n   *\n   * ```js\n   * barStyle={{ backgroundColor: '#694fad' }}\n   * ```\n   */\n  barStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\nconst MIN_RIPPLE_SCALE = 0.001; // Minimum scale is not 0 due to bug with animation\nconst MIN_TAB_WIDTH = 96;\nconst MAX_TAB_WIDTH = 168;\nconst BAR_HEIGHT = 56;\nconst BOTTOM_INSET = getBottomSpace();\nconst FAR_FAR_AWAY = Platform.OS === 'web' ? 0 : 9999;\n\nconst Touchable = ({\n  route: _0,\n  style,\n  children,\n  borderless,\n  centered,\n  rippleColor,\n  ...rest\n}: TouchableProps) =>\n  TouchableRipple.supported ? (\n    <TouchableRipple\n      {...rest}\n      disabled={rest.disabled || undefined}\n      borderless={borderless}\n      centered={centered}\n      rippleColor={rippleColor}\n      style={style}\n    >\n      {children}\n    </TouchableRipple>\n  ) : (\n    <TouchableWithoutFeedback {...rest}>\n      <View style={style}>{children}</View>\n    </TouchableWithoutFeedback>\n  );\n\nconst SceneComponent = React.memo(({ component, ...rest }: any) =>\n  React.createElement(component, rest)\n);\n\n/**\n * Bottom navigation provides quick navigation between top-level views of an app with a bottom navigation bar.\n * It is primarily designed for use on mobile.\n *\n * For integration with React Navigation, you can use [react-navigation-material-bottom-tabs](https://github.com/react-navigation/react-navigation/tree/main/packages/material-bottom-tabs) and consult [createMaterialBottomTabNavigator](https://reactnavigation.org/docs/material-bottom-tab-navigator/) documentation.\n *\n * By default Bottom navigation uses primary color as a background, in dark theme with `adaptive` mode it will use surface colour instead.\n * See [Dark Theme](https://callstack.github.io/react-native-paper/theming.html#dark-theme) for more information.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/bottom-navigation.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { BottomNavigation, Text } from 'react-native-paper';\n *\n * const MusicRoute = () => <Text>Music</Text>;\n *\n * const AlbumsRoute = () => <Text>Albums</Text>;\n *\n * const RecentsRoute = () => <Text>Recents</Text>;\n *\n * const MyComponent = () => {\n *   const [index, setIndex] = React.useState(0);\n *   const [routes] = React.useState([\n *     { key: 'music', title: 'Music', icon: 'queue-music' },\n *     { key: 'albums', title: 'Albums', icon: 'album' },\n *     { key: 'recents', title: 'Recents', icon: 'history' },\n *   ]);\n *\n *   const renderScene = BottomNavigation.SceneMap({\n *     music: MusicRoute,\n *     albums: AlbumsRoute,\n *     recents: RecentsRoute,\n *   });\n *\n *   return (\n *     <BottomNavigation\n *       navigationState={{ index, routes }}\n *       onIndexChange={setIndex}\n *       renderScene={renderScene}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst BottomNavigation = ({\n  navigationState,\n  renderScene,\n  renderIcon,\n  renderLabel,\n  renderTouchable = (props: TouchableProps) => <Touchable {...props} />,\n  getLabelText = ({ route }: { route: Route }) => route.title,\n  getBadge = ({ route }: { route: Route }) => route.badge,\n  getColor = ({ route }: { route: Route }) => route.color,\n  getAccessibilityLabel = ({ route }: { route: Route }) =>\n    route.accessibilityLabel,\n  getTestID = ({ route }: { route: Route }) => route.testID,\n  activeColor,\n  inactiveColor,\n  keyboardHidesNavigationBar = true,\n  barStyle,\n  labeled = true,\n  style,\n  theme,\n  sceneAnimationEnabled = false,\n  onTabPress,\n  onIndexChange,\n  shifting = navigationState.routes.length > 3,\n  safeAreaInsets,\n}: Props) => {\n  const { scale } = theme.animation;\n\n  const focusedKey = navigationState.routes[navigationState.index].key;\n\n  /**\n   * Visibility of the navigation bar, visible state is 1 and invisible is 0.\n   */\n  const visibleAnim = useAnimatedValue(1);\n\n  /**\n   * Active state of individual tab items, active state is 1 and inactive state is 0.\n   */\n  const tabsAnims = useAnimatedValueArray(\n    navigationState.routes.map(\n      // focused === 1, unfocused === 0\n      (_, i) => (i === navigationState.index ? 1 : 0)\n    )\n  );\n\n  /**\n   * The top offset for each tab item to position it offscreen.\n   * Placing items offscreen helps to save memory usage for inactive screens with removeClippedSubviews.\n   * We use animated values for this to prevent unnecessary re-renders.\n   */\n  const offsetsAnims = useAnimatedValueArray(\n    navigationState.routes.map(\n      // offscreen === 1, normal === 0\n      (_, i) => (i === navigationState.index ? 0 : 1)\n    )\n  );\n\n  /**\n   * Index of the currently active tab. Used for setting the background color.\n   * We don't use the color as an animated value directly, because `setValue` seems to be buggy with colors.\n   */\n  const indexAnim = useAnimatedValue(navigationState.index);\n\n  /**\n   * Animation for the background color ripple, used to determine it's scale and opacity.\n   */\n  const rippleAnim = useAnimatedValue(MIN_RIPPLE_SCALE);\n\n  /**\n   * Layout of the navigation bar. The width is used to determine the size and position of the ripple.\n   */\n  const [layout, onLayout] = useLayout();\n\n  /**\n   * List of loaded tabs, tabs will be loaded when navigated to.\n   */\n  const [loaded, setLoaded] = React.useState<string[]>([focusedKey]);\n\n  if (!loaded.includes(focusedKey)) {\n    // Set the current tab to be loaded if it was not loaded before\n    setLoaded((loaded) => [...loaded, focusedKey]);\n  }\n\n  /**\n   * Track whether the keyboard is visible to show and hide the navigation bar.\n   */\n  const [keyboardVisible, setKeyboardVisible] = React.useState(false);\n\n  const handleKeyboardShow = React.useCallback(() => {\n    setKeyboardVisible(true);\n    Animated.timing(visibleAnim, {\n      toValue: 0,\n      duration: 150 * scale,\n      useNativeDriver: true,\n    }).start();\n  }, [scale, visibleAnim]);\n\n  const handleKeyboardHide = React.useCallback(() => {\n    Animated.timing(visibleAnim, {\n      toValue: 1,\n      duration: 100 * scale,\n      useNativeDriver: true,\n    }).start(() => {\n      setKeyboardVisible(false);\n    });\n  }, [scale, visibleAnim]);\n\n  const animateToIndex = React.useCallback(\n    (index: number) => {\n      // Reset the ripple to avoid glitch if it's currently animating\n      rippleAnim.setValue(MIN_RIPPLE_SCALE);\n\n      Animated.parallel([\n        Animated.timing(rippleAnim, {\n          toValue: 1,\n          duration: shifting ? 400 * scale : 0,\n          useNativeDriver: true,\n        }),\n        ...navigationState.routes.map((_, i) =>\n          Animated.timing(tabsAnims[i], {\n            toValue: i === index ? 1 : 0,\n            duration: shifting ? 150 * scale : 0,\n            useNativeDriver: true,\n          })\n        ),\n      ]).start(({ finished }) => {\n        // Workaround a bug in native animations where this is reset after first animation\n        tabsAnims.map((tab, i) => tab.setValue(i === index ? 1 : 0));\n\n        // Update the index to change bar's background color and then hide the ripple\n        indexAnim.setValue(index);\n        rippleAnim.setValue(MIN_RIPPLE_SCALE);\n\n        if (finished) {\n          // Position all inactive screens offscreen to save memory usage\n          // Only do it when animation has finished to avoid glitches mid-transition if switching fast\n          offsetsAnims.forEach((offset, i) => {\n            if (i === index) {\n              offset.setValue(0);\n            } else {\n              offset.setValue(1);\n            }\n          });\n        }\n      });\n    },\n    [\n      indexAnim,\n      shifting,\n      navigationState.routes,\n      offsetsAnims,\n      rippleAnim,\n      scale,\n      tabsAnims,\n    ]\n  );\n\n  React.useEffect(() => {\n    // Workaround for native animated bug in react-native@^0.57\n    // Context: https://github.com/callstack/react-native-paper/pull/637\n    animateToIndex(navigationState.index);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useIsKeyboardShown({\n    onShow: handleKeyboardShow,\n    onHide: handleKeyboardHide,\n  });\n\n  const prevNavigationState = React.useRef<NavigationState>();\n\n  React.useEffect(() => {\n    // Reset offsets of previous and current tabs before animation\n    offsetsAnims.forEach((offset, i) => {\n      if (\n        i === navigationState.index ||\n        i === prevNavigationState.current?.index\n      ) {\n        offset.setValue(0);\n      }\n    });\n\n    animateToIndex(navigationState.index);\n  }, [navigationState.index, animateToIndex, offsetsAnims]);\n\n  const handleTabPress = (index: number) => {\n    const event = {\n      route: navigationState.routes[index],\n      defaultPrevented: false,\n      preventDefault: () => {\n        event.defaultPrevented = true;\n      },\n    };\n\n    onTabPress?.(event);\n\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    if (index !== navigationState.index) {\n      onIndexChange(index);\n    }\n  };\n\n  const jumpTo = React.useCallback(\n    (key: string) => {\n      const index = navigationState.routes.findIndex(\n        (route) => route.key === key\n      );\n\n      onIndexChange(index);\n    },\n    [navigationState.routes, onIndexChange]\n  );\n\n  const { routes } = navigationState;\n  const { colors, dark: isDarkTheme, mode } = theme;\n\n  const { backgroundColor: customBackground, elevation = 4 }: ViewStyle =\n    StyleSheet.flatten(barStyle) || {};\n\n  const approxBackgroundColor = customBackground\n    ? customBackground\n    : isDarkTheme && mode === 'adaptive'\n    ? overlay(elevation, colors.surface)\n    : colors.primary;\n\n  const backgroundColor = shifting\n    ? indexAnim.interpolate({\n        inputRange: routes.map((_, i) => i),\n        // FIXME: does outputRange support ColorValue or just strings?\n        // @ts-expect-error\n        outputRange: routes.map(\n          (route) => getColor({ route }) || approxBackgroundColor\n        ),\n      })\n    : approxBackgroundColor;\n\n  const isDark =\n    typeof approxBackgroundColor === 'string'\n      ? !color(approxBackgroundColor).isLight()\n      : true;\n\n  const textColor = isDark ? white : black;\n  const activeTintColor =\n    typeof activeColor !== 'undefined' ? activeColor : textColor;\n  const inactiveTintColor =\n    typeof inactiveColor !== 'undefined'\n      ? inactiveColor\n      : color(textColor).alpha(0.5).rgb().string();\n\n  const touchColor = color(activeColor || activeTintColor)\n    .alpha(0.12)\n    .rgb()\n    .string();\n\n  const maxTabWidth = routes.length > 3 ? MIN_TAB_WIDTH : MAX_TAB_WIDTH;\n  const maxTabBarWidth = maxTabWidth * routes.length;\n\n  const tabBarWidth = Math.min(layout.width, maxTabBarWidth);\n  const tabWidth = tabBarWidth / routes.length;\n\n  const rippleSize = layout.width / 4;\n\n  const insets = {\n    left: safeAreaInsets?.left ?? 0,\n    right: safeAreaInsets?.right ?? 0,\n    bottom: safeAreaInsets?.bottom ?? BOTTOM_INSET,\n  };\n\n  return (\n    <View style={[styles.container, style]}>\n      <View style={[styles.content, { backgroundColor: colors.background }]}>\n        {routes.map((route, index) => {\n          if (!loaded.includes(route.key)) {\n            // Don't render a screen if we've never navigated to it\n            return null;\n          }\n\n          const focused = navigationState.index === index;\n\n          const opacity = sceneAnimationEnabled\n            ? tabsAnims[index]\n            : focused\n            ? 1\n            : 0;\n\n          const top = sceneAnimationEnabled\n            ? offsetsAnims[index].interpolate({\n                inputRange: [0, 1],\n                outputRange: [0, FAR_FAR_AWAY],\n              })\n            : focused\n            ? 0\n            : FAR_FAR_AWAY;\n\n          return (\n            <BottomNavigationRouteScreen\n              key={route.key}\n              pointerEvents={focused ? 'auto' : 'none'}\n              accessibilityElementsHidden={!focused}\n              importantForAccessibility={\n                focused ? 'auto' : 'no-hide-descendants'\n              }\n              index={index}\n              visibility={opacity}\n              style={[StyleSheet.absoluteFill, { opacity }]}\n              collapsable={false}\n              removeClippedSubviews={\n                // On iOS, set removeClippedSubviews to true only when not focused\n                // This is an workaround for a bug where the clipped view never re-appears\n                Platform.OS === 'ios' ? navigationState.index !== index : true\n              }\n            >\n              <Animated.View style={[styles.content, { top }]}>\n                {renderScene({ route, jumpTo })}\n              </Animated.View>\n            </BottomNavigationRouteScreen>\n          );\n        })}\n      </View>\n      <Surface\n        style={\n          [\n            styles.bar,\n            keyboardHidesNavigationBar\n              ? {\n                  // When the keyboard is shown, slide down the navigation bar\n                  transform: [\n                    {\n                      translateY: visibleAnim.interpolate({\n                        inputRange: [0, 1],\n                        outputRange: [layout.height, 0],\n                      }),\n                    },\n                  ],\n                  // Absolutely position the navigation bar so that the content is below it\n                  // This is needed to avoid gap at bottom when the navigation bar is hidden\n                  position: keyboardVisible ? 'absolute' : null,\n                }\n              : null,\n            barStyle,\n          ] as StyleProp<ViewStyle>\n        }\n        pointerEvents={\n          layout.measured\n            ? keyboardHidesNavigationBar && keyboardVisible\n              ? 'none'\n              : 'auto'\n            : 'none'\n        }\n        onLayout={onLayout}\n      >\n        <Animated.View style={[styles.barContent, { backgroundColor }]}>\n          <View\n            style={[\n              styles.items,\n              {\n                marginBottom: insets.bottom,\n                marginHorizontal: Math.max(insets.left, insets.right),\n                maxWidth: maxTabBarWidth,\n              },\n            ]}\n            accessibilityRole={'tablist'}\n          >\n            {shifting ? (\n              <Animated.View\n                pointerEvents=\"none\"\n                style={[\n                  styles.ripple,\n                  {\n                    // Since we have a single ripple, we have to reposition it so that it appears to expand from active tab.\n                    // We need to move it from the top to center of the navigation bar and from the left to the active tab.\n                    top: (BAR_HEIGHT - rippleSize) / 2,\n                    left:\n                      tabWidth * (navigationState.index + 0.5) - rippleSize / 2,\n                    height: rippleSize,\n                    width: rippleSize,\n                    borderRadius: rippleSize / 2,\n                    backgroundColor: getColor({\n                      route: routes[navigationState.index],\n                    }),\n                    transform: [\n                      {\n                        // Scale to twice the size  to ensure it covers the whole navigation bar\n                        scale: rippleAnim.interpolate({\n                          inputRange: [0, 1],\n                          outputRange: [0, 8],\n                        }),\n                      },\n                    ],\n                    opacity: rippleAnim.interpolate({\n                      inputRange: [0, MIN_RIPPLE_SCALE, 0.3, 1],\n                      outputRange: [0, 0, 1, 1],\n                    }),\n                  },\n                ]}\n              />\n            ) : null}\n            {routes.map((route, index) => {\n              const focused = navigationState.index === index;\n              const active = tabsAnims[index];\n\n              // Scale the label up\n              const scale =\n                labeled && shifting\n                  ? active.interpolate({\n                      inputRange: [0, 1],\n                      outputRange: [0.5, 1],\n                    })\n                  : 1;\n\n              // Move down the icon to account for no-label in shifting and smaller label in non-shifting.\n              const translateY = labeled\n                ? shifting\n                  ? active.interpolate({\n                      inputRange: [0, 1],\n                      outputRange: [7, 0],\n                    })\n                  : 0\n                : 7;\n\n              // We render the active icon and label on top of inactive ones and cross-fade them on change.\n              // This trick gives the illusion that we are animating between active and inactive colors.\n              // This is to ensure that we can use native driver, as colors cannot be animated with native driver.\n              const activeOpacity = active;\n              const inactiveOpacity = active.interpolate({\n                inputRange: [0, 1],\n                outputRange: [1, 0],\n              });\n\n              const badge = getBadge({ route });\n\n              return renderTouchable({\n                key: route.key,\n                route,\n                borderless: true,\n                centered: true,\n                rippleColor: touchColor,\n                onPress: () => handleTabPress(index),\n                testID: getTestID({ route }),\n                accessibilityLabel: getAccessibilityLabel({ route }),\n                // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n                accessibilityTraits: focused\n                  ? ['button', 'selected']\n                  : 'button',\n                accessibilityComponentType: 'button',\n                accessibilityRole: Platform.OS === 'ios' ? 'button' : 'tab',\n                accessibilityState: { selected: focused },\n                style: styles.item,\n                children: (\n                  <View pointerEvents=\"none\">\n                    <Animated.View\n                      style={[\n                        styles.iconContainer,\n                        { transform: [{ translateY }] },\n                      ]}\n                    >\n                      <Animated.View\n                        style={[styles.iconWrapper, { opacity: activeOpacity }]}\n                      >\n                        {renderIcon ? (\n                          renderIcon({\n                            route,\n                            focused: true,\n                            color: activeTintColor,\n                          })\n                        ) : (\n                          <Icon\n                            source={route.icon as IconSource}\n                            color={activeTintColor}\n                            size={24}\n                          />\n                        )}\n                      </Animated.View>\n                      <Animated.View\n                        style={[\n                          styles.iconWrapper,\n                          { opacity: inactiveOpacity },\n                        ]}\n                      >\n                        {renderIcon ? (\n                          renderIcon({\n                            route,\n                            focused: false,\n                            color: inactiveTintColor,\n                          })\n                        ) : (\n                          <Icon\n                            source={route.icon as IconSource}\n                            color={inactiveTintColor}\n                            size={24}\n                          />\n                        )}\n                      </Animated.View>\n                      <View\n                        style={[\n                          styles.badgeContainer,\n                          {\n                            right:\n                              (badge != null && typeof badge !== 'boolean'\n                                ? String(badge).length * -2\n                                : 0) - 2,\n                          },\n                        ]}\n                      >\n                        {typeof badge === 'boolean' ? (\n                          <Badge visible={badge} size={8} />\n                        ) : (\n                          <Badge visible={badge != null} size={16}>\n                            {badge}\n                          </Badge>\n                        )}\n                      </View>\n                    </Animated.View>\n                    {labeled ? (\n                      <Animated.View\n                        style={[\n                          styles.labelContainer,\n                          { transform: [{ scale }] },\n                        ]}\n                      >\n                        <Animated.View\n                          style={[\n                            styles.labelWrapper,\n                            { opacity: activeOpacity },\n                          ]}\n                        >\n                          {renderLabel ? (\n                            renderLabel({\n                              route,\n                              focused: true,\n                              color: activeTintColor,\n                            })\n                          ) : (\n                            <Text\n                              style={[styles.label, { color: activeTintColor }]}\n                            >\n                              {getLabelText({ route })}\n                            </Text>\n                          )}\n                        </Animated.View>\n                        {shifting ? null : (\n                          <Animated.View\n                            style={[\n                              styles.labelWrapper,\n                              { opacity: inactiveOpacity },\n                            ]}\n                          >\n                            {renderLabel ? (\n                              renderLabel({\n                                route,\n                                focused: false,\n                                color: inactiveTintColor,\n                              })\n                            ) : (\n                              <Text\n                                selectable={false}\n                                style={[\n                                  styles.label,\n                                  { color: inactiveTintColor },\n                                ]}\n                              >\n                                {getLabelText({ route })}\n                              </Text>\n                            )}\n                          </Animated.View>\n                        )}\n                      </Animated.View>\n                    ) : (\n                      <View style={styles.labelContainer} />\n                    )}\n                  </View>\n                ),\n              });\n            })}\n          </View>\n        </Animated.View>\n      </Surface>\n    </View>\n  );\n};\n\n/**\n * Function which takes a map of route keys to components.\n * Pure components are used to minimize re-rendering of the pages.\n * This drastically improves the animation performance.\n */\nBottomNavigation.SceneMap = (scenes: {\n  [key: string]: React.ComponentType<{\n    route: Route;\n    jumpTo: (key: string) => void;\n  }>;\n}) => {\n  return ({\n    route,\n    jumpTo,\n  }: {\n    route: Route;\n    jumpTo: (key: string) => void;\n  }) => (\n    <SceneComponent\n      key={route.key}\n      component={scenes[route.key ? route.key : '']}\n      route={route}\n      jumpTo={jumpTo}\n    />\n  );\n};\n\nexport default withTheme(BottomNavigation);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  content: {\n    flex: 1,\n  },\n  bar: {\n    left: 0,\n    right: 0,\n    bottom: 0,\n    elevation: 4,\n  },\n  barContent: {\n    alignItems: 'center',\n    overflow: 'hidden',\n  },\n  items: {\n    flexDirection: 'row',\n    ...(Platform.OS === 'web'\n      ? {\n          width: '100%',\n        }\n      : null),\n  },\n  item: {\n    flex: 1,\n    // Top padding is 6 and bottom padding is 10\n    // The extra 4dp bottom padding is offset by label's height\n    paddingVertical: 6,\n  },\n  ripple: {\n    position: 'absolute',\n  },\n  iconContainer: {\n    height: 24,\n    width: 24,\n    marginTop: 2,\n    marginHorizontal: 12,\n    alignSelf: 'center',\n  },\n  iconWrapper: {\n    ...StyleSheet.absoluteFillObject,\n    alignItems: 'center',\n  },\n  labelContainer: {\n    height: 16,\n    paddingBottom: 2,\n  },\n  labelWrapper: {\n    ...StyleSheet.absoluteFillObject,\n  },\n  // eslint-disable-next-line react-native/no-color-literals\n  label: {\n    fontSize: 12,\n    textAlign: 'center',\n    backgroundColor: 'transparent',\n    ...(Platform.OS === 'web'\n      ? {\n          whiteSpace: 'nowrap',\n          alignSelf: 'center',\n        }\n      : null),\n  },\n  badgeContainer: {\n    position: 'absolute',\n    left: 0,\n    top: -2,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}