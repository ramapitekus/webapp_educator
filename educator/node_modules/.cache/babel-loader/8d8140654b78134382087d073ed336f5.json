{"ast":null,"code":"import { ResultReason } from \"microsoft-cognitiveservices-speech-sdk\";\n\nfunction sttFromMic(setResponse, commandDuringPlay) {\n  const sdk = require(\"microsoft-cognitiveservices-speech-sdk\");\n\n  const speechConfig = sdk.SpeechConfig.fromSubscription(\"2ed0fc03d2e441388c4fd35cc91c23b3\", \"eastus\");\n  speechConfig.speechRecognitionLanguage = \"en-US\";\n  const audioConfig = sdk.AudioConfig.fromDefaultMicrophoneInput();\n  const recognizer = new sdk.SpeechRecognizer(speechConfig, audioConfig);\n\n  async function startRecording() {\n    recognizer.startContinuousRecognitionAsync(); // Add error handling\n\n    recognizer.recognized = (_, e) => {\n      var result = e.result;\n\n      if (result.reason === ResultReason.RecognizedSpeech && result.text) {\n        console.log(result.text);\n        sendToAPI(\"http://localhost:5000/api/v1/models\", result.text, commandDuringPlay).then(response => {\n          console.log(\"Answer from the API:\\n\" + response.message + \"\\nAPI recognized following topic:\\n\" + response.topic);\n          setResponse(response);\n        });\n      } else {\n        console.log(\"ERROR: Speech was cancelled or could not be recognized. Ensure your microphone is working properly.\");\n      }\n    };\n  }\n\n  async function stopRecording() {\n    recognizer.stopContinuousRecognitionAsync();\n  }\n\n  return [startRecording, stopRecording];\n}\n\nasync function sendToAPI(url, message, commandDuringPlay) {\n  // Simple POST request with a JSON body using fetch\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      message: message,\n      commandDuringPlay: commandDuringPlay.current\n    })\n  };\n  let response = await fetch(url, requestOptions);\n  return response.json();\n}\n\nexport default sttFromMic;","map":{"version":3,"sources":["C:/Users/olesr/OneDrive/Documents/webapp_educ_2/educator/src/components/S2t.js"],"names":["ResultReason","sttFromMic","setResponse","commandDuringPlay","sdk","require","speechConfig","SpeechConfig","fromSubscription","speechRecognitionLanguage","audioConfig","AudioConfig","fromDefaultMicrophoneInput","recognizer","SpeechRecognizer","startRecording","startContinuousRecognitionAsync","recognized","_","e","result","reason","RecognizedSpeech","text","console","log","sendToAPI","then","response","message","topic","stopRecording","stopContinuousRecognitionAsync","url","requestOptions","method","headers","body","JSON","stringify","current","fetch","json"],"mappings":"AAAA,SAASA,YAAT,QAA6B,wCAA7B;;AAEA,SAASC,UAAT,CAAoBC,WAApB,EAAiCC,iBAAjC,EAAoD;AAClD,QAAMC,GAAG,GAAGC,OAAO,CAAC,wCAAD,CAAnB;;AACA,QAAMC,YAAY,GAAGF,GAAG,CAACG,YAAJ,CAAiBC,gBAAjB,CACnB,kCADmB,EAEnB,QAFmB,CAArB;AAIAF,EAAAA,YAAY,CAACG,yBAAb,GAAyC,OAAzC;AACA,QAAMC,WAAW,GAAGN,GAAG,CAACO,WAAJ,CAAgBC,0BAAhB,EAApB;AACA,QAAMC,UAAU,GAAG,IAAIT,GAAG,CAACU,gBAAR,CAAyBR,YAAzB,EAAuCI,WAAvC,CAAnB;;AAEA,iBAAeK,cAAf,GAAgC;AAC9BF,IAAAA,UAAU,CAACG,+BAAX,GAD8B,CAE9B;;AACAH,IAAAA,UAAU,CAACI,UAAX,GAAwB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAChC,UAAIC,MAAM,GAAGD,CAAC,CAACC,MAAf;;AACA,UAAIA,MAAM,CAACC,MAAP,KAAkBrB,YAAY,CAACsB,gBAA/B,IAAmDF,MAAM,CAACG,IAA9D,EAAoE;AAClEC,QAAAA,OAAO,CAACC,GAAR,CAAYL,MAAM,CAACG,IAAnB;AACAG,QAAAA,SAAS,CACP,qCADO,EAEPN,MAAM,CAACG,IAFA,EAGPpB,iBAHO,CAAT,CAIEwB,IAJF,CAIQC,QAAD,IAAc;AACnBJ,UAAAA,OAAO,CAACC,GAAR,CACE,2BACEG,QAAQ,CAACC,OADX,GAEE,qCAFF,GAGED,QAAQ,CAACE,KAJb;AAMA5B,UAAAA,WAAW,CAAC0B,QAAD,CAAX;AACD,SAZD;AAaD,OAfD,MAeO;AACLJ,QAAAA,OAAO,CAACC,GAAR,CACE,qGADF;AAGD;AACF,KAtBD;AAuBD;;AACD,iBAAeM,aAAf,GAA+B;AAC7BlB,IAAAA,UAAU,CAACmB,8BAAX;AACD;;AACD,SAAO,CAACjB,cAAD,EAAiBgB,aAAjB,CAAP;AACD;;AAED,eAAeL,SAAf,CAAyBO,GAAzB,EAA8BJ,OAA9B,EAAuC1B,iBAAvC,EAA0D;AACxD;AACA,QAAM+B,cAAc,GAAG;AACrBC,IAAAA,MAAM,EAAE,MADa;AAErBC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAFY;AAGrBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEV,MAAAA,OAAO,EAAEA,OAAX;AAAoB1B,MAAAA,iBAAiB,EAAEA,iBAAiB,CAACqC;AAAzD,KAAf;AAHe,GAAvB;AAMA,MAAIZ,QAAQ,GAAG,MAAMa,KAAK,CAACR,GAAD,EAAMC,cAAN,CAA1B;AACA,SAAON,QAAQ,CAACc,IAAT,EAAP;AACD;;AAED,eAAezC,UAAf","sourcesContent":["import { ResultReason } from \"microsoft-cognitiveservices-speech-sdk\";\r\n\r\nfunction sttFromMic(setResponse, commandDuringPlay) {\r\n  const sdk = require(\"microsoft-cognitiveservices-speech-sdk\");\r\n  const speechConfig = sdk.SpeechConfig.fromSubscription(\r\n    \"2ed0fc03d2e441388c4fd35cc91c23b3\",\r\n    \"eastus\"\r\n  );\r\n  speechConfig.speechRecognitionLanguage = \"en-US\";\r\n  const audioConfig = sdk.AudioConfig.fromDefaultMicrophoneInput();\r\n  const recognizer = new sdk.SpeechRecognizer(speechConfig, audioConfig);\r\n\r\n  async function startRecording() {\r\n    recognizer.startContinuousRecognitionAsync();\r\n    // Add error handling\r\n    recognizer.recognized = (_, e) => {\r\n      var result = e.result;\r\n      if (result.reason === ResultReason.RecognizedSpeech && result.text) {\r\n        console.log(result.text);\r\n        sendToAPI(\r\n          \"http://localhost:5000/api/v1/models\",\r\n          result.text,\r\n          commandDuringPlay\r\n        ).then((response) => {\r\n          console.log(\r\n            \"Answer from the API:\\n\" +\r\n              response.message +\r\n              \"\\nAPI recognized following topic:\\n\" +\r\n              response.topic\r\n          );\r\n          setResponse(response);\r\n        });\r\n      } else {\r\n        console.log(\r\n          \"ERROR: Speech was cancelled or could not be recognized. Ensure your microphone is working properly.\"\r\n        );\r\n      }\r\n    };\r\n  }\r\n  async function stopRecording() {\r\n    recognizer.stopContinuousRecognitionAsync();\r\n  }\r\n  return [startRecording, stopRecording];\r\n}\r\n\r\nasync function sendToAPI(url, message, commandDuringPlay) {\r\n  // Simple POST request with a JSON body using fetch\r\n  const requestOptions = {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({ message: message, commandDuringPlay: commandDuringPlay.current }),\r\n  };\r\n\r\n  let response = await fetch(url, requestOptions);\r\n  return response.json();\r\n}\r\n\r\nexport default sttFromMic;\r\n"]},"metadata":{},"sourceType":"module"}