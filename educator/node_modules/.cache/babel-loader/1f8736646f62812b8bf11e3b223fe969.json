{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport TextInputIcon, { IconAdornment } from './TextInputIcon';\nimport TextInputAffix, { AffixAdornment } from './TextInputAffix';\nimport { ADORNMENT_OFFSET, OUTLINED_INPUT_OFFSET } from '../constants';\nimport { AdornmentSide, AdornmentType, InputMode } from './enums';\nexport function getAdornmentConfig(_ref) {\n  let {\n    left,\n    right\n  } = _ref;\n  let adornmentConfig = [];\n\n  if (left || right) {\n    [{\n      side: AdornmentSide.Left,\n      adornment: left\n    }, {\n      side: AdornmentSide.Right,\n      adornment: right\n    }].forEach(_ref2 => {\n      let {\n        side,\n        adornment\n      } = _ref2;\n\n      if (adornment && /*#__PURE__*/React.isValidElement(adornment)) {\n        let type;\n\n        if (adornment.type === TextInputAffix) {\n          type = AdornmentType.Affix;\n        } else if (adornment.type === TextInputIcon) {\n          type = AdornmentType.Icon;\n        }\n\n        adornmentConfig.push({\n          side,\n          type\n        });\n      }\n    });\n  }\n\n  return adornmentConfig;\n}\nexport function getAdornmentStyleAdjustmentForNativeInput(_ref3) {\n  let {\n    adornmentConfig,\n    leftAffixWidth,\n    rightAffixWidth,\n    paddingHorizontal,\n    inputOffset = 0,\n    mode\n  } = _ref3;\n\n  if (adornmentConfig.length) {\n    const adornmentStyleAdjustmentForNativeInput = adornmentConfig.map(_ref4 => {\n      let {\n        type,\n        side\n      } = _ref4;\n      const isLeftSide = side === AdornmentSide.Left;\n      const inputModeAdornemntOffset = mode === InputMode.Outlined ? ADORNMENT_OFFSET + OUTLINED_INPUT_OFFSET : ADORNMENT_OFFSET;\n      const paddingKey = `padding${captalize(side)}`;\n      const affixWidth = isLeftSide ? leftAffixWidth : rightAffixWidth;\n      const padding = typeof paddingHorizontal === 'number' ? paddingHorizontal : inputModeAdornemntOffset;\n      const offset = affixWidth + padding;\n      const isAffix = type === AdornmentType.Affix;\n      const marginKey = `margin${captalize(side)}`;\n      return {\n        [marginKey]: isAffix ? 0 : offset,\n        [paddingKey]: isAffix ? offset : inputOffset\n      };\n    });\n    const allStyleAdjustmentsMerged = adornmentStyleAdjustmentForNativeInput.reduce((mergedStyles, currentStyle) => {\n      return { ...mergedStyles,\n        ...currentStyle\n      };\n    }, {});\n    return allStyleAdjustmentsMerged;\n  } else {\n    return [{}];\n  }\n}\n\nconst captalize = text => text.charAt(0).toUpperCase() + text.slice(1);\n\nconst TextInputAdornment = _ref5 => {\n  let {\n    adornmentConfig,\n    left,\n    right,\n    onAffixChange,\n    textStyle,\n    visible,\n    topPosition,\n    isTextInputFocused,\n    forceFocus,\n    paddingHorizontal\n  } = _ref5;\n\n  if (adornmentConfig.length) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, adornmentConfig.map(_ref6 => {\n      let {\n        type,\n        side\n      } = _ref6;\n      let inputAdornmentComponent;\n\n      if (side === AdornmentSide.Left) {\n        inputAdornmentComponent = left;\n      } else if (side === AdornmentSide.Right) {\n        inputAdornmentComponent = right;\n      }\n\n      const commonProps = {\n        key: side,\n        side: side,\n        testID: `${side}-${type}-adornment`,\n        isTextInputFocused,\n        paddingHorizontal\n      };\n\n      if (type === AdornmentType.Icon) {\n        return /*#__PURE__*/React.createElement(IconAdornment, _extends({}, commonProps, {\n          icon: inputAdornmentComponent,\n          topPosition: topPosition[AdornmentType.Icon],\n          forceFocus: forceFocus\n        }));\n      } else if (type === AdornmentType.Affix) {\n        return /*#__PURE__*/React.createElement(AffixAdornment, _extends({}, commonProps, {\n          topPosition: topPosition[AdornmentType.Affix][side],\n          affix: inputAdornmentComponent,\n          textStyle: textStyle,\n          onLayout: onAffixChange[side],\n          visible: visible\n        }));\n      } else {\n        return null;\n      }\n    }));\n  } else {\n    return null;\n  }\n};\n\nexport default TextInputAdornment;","map":{"version":3,"mappings":"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","names":["React","TextInputIcon","IconAdornment","TextInputAffix","AffixAdornment","ADORNMENT_OFFSET","OUTLINED_INPUT_OFFSET","AdornmentSide","AdornmentType","InputMode","getAdornmentConfig","left","right","adornmentConfig","side","Left","adornment","Right","forEach","isValidElement","type","Affix","Icon","push","getAdornmentStyleAdjustmentForNativeInput","leftAffixWidth","rightAffixWidth","paddingHorizontal","inputOffset","mode","length","adornmentStyleAdjustmentForNativeInput","map","isLeftSide","inputModeAdornemntOffset","Outlined","paddingKey","captalize","affixWidth","padding","offset","isAffix","marginKey","allStyleAdjustmentsMerged","reduce","mergedStyles","currentStyle","text","charAt","toUpperCase","slice","TextInputAdornment","onAffixChange","textStyle","visible","topPosition","isTextInputFocused","forceFocus","inputAdornmentComponent","commonProps","key","testID","icon","affix","onLayout"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\node_modules\\react-native-paper\\lib\\module\\components\\TextInput\\Adornment\\TextInputAdornment.tsx"],"sourcesContent":["import React from 'react';\nimport TextInputIcon, { IconAdornment } from './TextInputIcon';\nimport TextInputAffix, { AffixAdornment } from './TextInputAffix';\nimport { ADORNMENT_OFFSET, OUTLINED_INPUT_OFFSET } from '../constants';\nimport type {\n  LayoutChangeEvent,\n  TextStyle,\n  StyleProp,\n  Animated,\n} from 'react-native';\nimport type {\n  AdornmentConfig,\n  AdornmentStyleAdjustmentForNativeInput,\n} from './types';\nimport { AdornmentSide, AdornmentType, InputMode } from './enums';\n\nexport function getAdornmentConfig({\n  left,\n  right,\n}: {\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n}): Array<AdornmentConfig> {\n  let adornmentConfig: any[] = [];\n  if (left || right) {\n    [\n      { side: AdornmentSide.Left, adornment: left },\n      { side: AdornmentSide.Right, adornment: right },\n    ].forEach(({ side, adornment }) => {\n      if (adornment && React.isValidElement(adornment)) {\n        let type;\n        if (adornment.type === TextInputAffix) {\n          type = AdornmentType.Affix;\n        } else if (adornment.type === TextInputIcon) {\n          type = AdornmentType.Icon;\n        }\n        adornmentConfig.push({\n          side,\n          type,\n        });\n      }\n    });\n  }\n\n  return adornmentConfig;\n}\n\nexport function getAdornmentStyleAdjustmentForNativeInput({\n  adornmentConfig,\n  leftAffixWidth,\n  rightAffixWidth,\n  paddingHorizontal,\n  inputOffset = 0,\n  mode,\n}: {\n  inputOffset?: number;\n  adornmentConfig: AdornmentConfig[];\n  leftAffixWidth: number;\n  rightAffixWidth: number;\n  mode?: 'outlined' | 'flat';\n  paddingHorizontal?: number | string;\n}): AdornmentStyleAdjustmentForNativeInput | {} {\n  if (adornmentConfig.length) {\n    const adornmentStyleAdjustmentForNativeInput = adornmentConfig.map(\n      ({ type, side }: AdornmentConfig) => {\n        const isLeftSide = side === AdornmentSide.Left;\n        const inputModeAdornemntOffset =\n          mode === InputMode.Outlined\n            ? ADORNMENT_OFFSET + OUTLINED_INPUT_OFFSET\n            : ADORNMENT_OFFSET;\n        const paddingKey = `padding${captalize(side)}`;\n        const affixWidth = isLeftSide ? leftAffixWidth : rightAffixWidth;\n        const padding =\n          typeof paddingHorizontal === 'number'\n            ? paddingHorizontal\n            : inputModeAdornemntOffset;\n        const offset = affixWidth + padding;\n\n        const isAffix = type === AdornmentType.Affix;\n        const marginKey = `margin${captalize(side)}`;\n\n        return {\n          [marginKey]: isAffix ? 0 : offset,\n          [paddingKey]: isAffix ? offset : inputOffset,\n        };\n      }\n    );\n    const allStyleAdjustmentsMerged = adornmentStyleAdjustmentForNativeInput.reduce(\n      (mergedStyles, currentStyle) => {\n        return {\n          ...mergedStyles,\n          ...currentStyle,\n        };\n      },\n      {}\n    );\n    return allStyleAdjustmentsMerged;\n  } else {\n    return [{}];\n  }\n}\n\nconst captalize = (text: string) =>\n  text.charAt(0).toUpperCase() + text.slice(1);\n\nexport interface TextInputAdornmentProps {\n  forceFocus: () => void;\n  adornmentConfig: AdornmentConfig[];\n  topPosition: {\n    [AdornmentType.Affix]: {\n      [AdornmentSide.Left]: number | null;\n      [AdornmentSide.Right]: number | null;\n    };\n    [AdornmentType.Icon]: number;\n  };\n  onAffixChange: {\n    [AdornmentSide.Left]: (event: LayoutChangeEvent) => void;\n    [AdornmentSide.Right]: (event: LayoutChangeEvent) => void;\n  };\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n  textStyle?: StyleProp<TextStyle>;\n  visible?: Animated.Value;\n  isTextInputFocused: boolean;\n  paddingHorizontal?: number | string;\n}\n\nconst TextInputAdornment: React.FunctionComponent<TextInputAdornmentProps> = ({\n  adornmentConfig,\n  left,\n  right,\n  onAffixChange,\n  textStyle,\n  visible,\n  topPosition,\n  isTextInputFocused,\n  forceFocus,\n  paddingHorizontal,\n}) => {\n  if (adornmentConfig.length) {\n    return (\n      <>\n        {adornmentConfig.map(({ type, side }: AdornmentConfig) => {\n          let inputAdornmentComponent;\n          if (side === AdornmentSide.Left) {\n            inputAdornmentComponent = left;\n          } else if (side === AdornmentSide.Right) {\n            inputAdornmentComponent = right;\n          }\n\n          const commonProps = {\n            key: side,\n            side: side,\n            testID: `${side}-${type}-adornment`,\n            isTextInputFocused,\n            paddingHorizontal,\n          };\n          if (type === AdornmentType.Icon) {\n            return (\n              <IconAdornment\n                {...commonProps}\n                icon={inputAdornmentComponent}\n                topPosition={topPosition[AdornmentType.Icon]}\n                forceFocus={forceFocus}\n              />\n            );\n          } else if (type === AdornmentType.Affix) {\n            return (\n              <AffixAdornment\n                {...commonProps}\n                topPosition={topPosition[AdornmentType.Affix][side]}\n                affix={inputAdornmentComponent}\n                textStyle={textStyle}\n                onLayout={onAffixChange[side]}\n                visible={visible}\n              />\n            );\n          } else {\n            return null;\n          }\n        })}\n      </>\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default TextInputAdornment;\n"]},"metadata":{},"sourceType":"module"}