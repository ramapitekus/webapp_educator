{"ast":null,"code":"import React from 'react';\nimport color from 'color';\nimport { Text, StyleSheet, Animated } from 'react-native';\nimport { withTheme } from '../../../core/theming';\nimport { AdornmentSide } from './enums';\nconst AFFIX_OFFSET = 12;\nconst AffixContext = /*#__PURE__*/React.createContext({\n  textStyle: {\n    fontFamily: '',\n    color: ''\n  },\n  topPosition: null,\n  side: AdornmentSide.Left\n});\n\nconst AffixAdornment = _ref => {\n  let {\n    affix,\n    side,\n    textStyle,\n    topPosition,\n    onLayout,\n    visible,\n    paddingHorizontal\n  } = _ref;\n  return /*#__PURE__*/React.createElement(AffixContext.Provider, {\n    value: {\n      side,\n      textStyle,\n      topPosition,\n      onLayout,\n      visible,\n      paddingHorizontal\n    }\n  }, affix);\n};\n/**\n * A component to render a leading / trailing text in the TextInput\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-outline.affix.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *   return (\n *     <TextInput\n *       mode=\"outlined\"\n *       label=\"Outlined input\"\n *       placeholder=\"Type something\"\n *       right={<TextInput.Affix text=\"/100\" />}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\n\nconst TextInputAffix = _ref2 => {\n  let {\n    text,\n    textStyle: labelStyle,\n    theme\n  } = _ref2;\n  const {\n    textStyle,\n    onLayout,\n    topPosition,\n    side,\n    visible,\n    paddingHorizontal\n  } = React.useContext(AffixContext);\n  const textColor = color(theme.colors.text).alpha(theme.dark ? 0.7 : 0.54).rgb().string();\n  const offset = typeof paddingHorizontal === 'number' ? paddingHorizontal : AFFIX_OFFSET;\n  const style = {\n    top: topPosition,\n    [side]: offset\n  };\n  return /*#__PURE__*/React.createElement(Animated.View, {\n    style: [styles.container, style, {\n      opacity: (visible === null || visible === void 0 ? void 0 : visible.interpolate({\n        inputRange: [0, 1],\n        outputRange: [1, 0]\n      })) || 1\n    }],\n    onLayout: onLayout\n  }, /*#__PURE__*/React.createElement(Text, {\n    style: [{\n      color: textColor\n    }, textStyle, labelStyle]\n  }, text));\n};\n\nTextInputAffix.displayName = 'TextInput.Affix';\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\nexport default withTheme(TextInputAffix); // @component-docs ignore-next-line\n\nexport { TextInputAffix, AffixAdornment };","map":{"version":3,"mappings":"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","names":["React","color","Text","StyleSheet","Animated","withTheme","AdornmentSide","AFFIX_OFFSET","AffixContext","createContext","textStyle","fontFamily","topPosition","side","Left","AffixAdornment","affix","onLayout","visible","paddingHorizontal","Provider","value","TextInputAffix","text","labelStyle","theme","useContext","textColor","colors","alpha","dark","rgb","string","offset","style","top","View","styles","container","opacity","interpolate","inputRange","outputRange","displayName","create","position","justifyContent","alignItems"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\node_modules\\react-native-paper\\lib\\module\\components\\TextInput\\Adornment\\TextInputAffix.tsx"],"sourcesContent":["import React from 'react';\nimport color from 'color';\nimport {\n  Text,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  LayoutChangeEvent,\n  Animated,\n  ViewStyle,\n} from 'react-native';\n\nimport { withTheme } from '../../../core/theming';\nimport { AdornmentSide } from './enums';\n\nconst AFFIX_OFFSET = 12;\n\ntype Props = {\n  /**\n   * Text to show.\n   */\n  text: string;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  /**\n   * Style that is passed to the Text element.\n   */\n  textStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\ntype ContextState = {\n  topPosition: number | null;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  visible?: Animated.Value;\n  textStyle?: StyleProp<TextStyle>;\n  side: AdornmentSide;\n  paddingHorizontal?: number | string;\n};\n\nconst AffixContext = React.createContext<ContextState>({\n  textStyle: { fontFamily: '', color: '' },\n  topPosition: null,\n  side: AdornmentSide.Left,\n});\n\nconst AffixAdornment: React.FunctionComponent<\n  {\n    affix: React.ReactNode;\n    testID: string;\n  } & ContextState\n> = ({\n  affix,\n  side,\n  textStyle,\n  topPosition,\n  onLayout,\n  visible,\n  paddingHorizontal,\n}) => {\n  return (\n    <AffixContext.Provider\n      value={{\n        side,\n        textStyle,\n        topPosition,\n        onLayout,\n        visible,\n        paddingHorizontal,\n      }}\n    >\n      {affix}\n    </AffixContext.Provider>\n  );\n};\n\n/**\n * A component to render a leading / trailing text in the TextInput\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-outline.affix.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *   return (\n *     <TextInput\n *       mode=\"outlined\"\n *       label=\"Outlined input\"\n *       placeholder=\"Type something\"\n *       right={<TextInput.Affix text=\"/100\" />}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nconst TextInputAffix = ({ text, textStyle: labelStyle, theme }: Props) => {\n  const {\n    textStyle,\n    onLayout,\n    topPosition,\n    side,\n    visible,\n    paddingHorizontal,\n  } = React.useContext(AffixContext);\n  const textColor = color(theme.colors.text)\n    .alpha(theme.dark ? 0.7 : 0.54)\n    .rgb()\n    .string();\n\n  const offset =\n    typeof paddingHorizontal === 'number' ? paddingHorizontal : AFFIX_OFFSET;\n\n  const style = {\n    top: topPosition,\n    [side]: offset,\n  } as ViewStyle;\n\n  return (\n    <Animated.View\n      style={[\n        styles.container,\n        style,\n        {\n          opacity:\n            visible?.interpolate({\n              inputRange: [0, 1],\n              outputRange: [1, 0],\n            }) || 1,\n        },\n      ]}\n      onLayout={onLayout}\n    >\n      <Text style={[{ color: textColor }, textStyle, labelStyle]}>{text}</Text>\n    </Animated.View>\n  );\n};\nTextInputAffix.displayName = 'TextInput.Affix';\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default withTheme(TextInputAffix);\n\n// @component-docs ignore-next-line\nexport { TextInputAffix, AffixAdornment };\n"]},"metadata":{},"sourceType":"module"}