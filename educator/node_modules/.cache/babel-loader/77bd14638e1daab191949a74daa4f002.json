{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport { Platform, StyleSheet, TextInput, I18nManager } from 'react-native';\nimport color from 'color';\nimport IconButton from './IconButton';\nimport Surface from './Surface';\nimport { withTheme } from '../core/theming';\nimport MaterialCommunityIcon from './MaterialCommunityIcon';\n/**\n * Searchbar is a simple input box where users can type search queries.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/searchbar.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Searchbar } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [searchQuery, setSearchQuery] = React.useState('');\n *\n *   const onChangeSearch = query => setSearchQuery(query);\n *\n *   return (\n *     <Searchbar\n *       placeholder=\"Search\"\n *       onChangeText={onChangeSearch}\n *       value={searchQuery}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n\n * ```\n */\n\nconst Searchbar = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    clearAccessibilityLabel = 'clear',\n    clearIcon,\n    icon,\n    iconColor: customIconColor,\n    inputStyle,\n    onIconPress,\n    placeholder,\n    searchAccessibilityLabel = 'search',\n    style,\n    theme,\n    value,\n    ...rest\n  } = _ref;\n  const root = React.useRef(null);\n  React.useImperativeHandle(ref, () => {\n    const input = root.current;\n\n    if (input) {\n      return {\n        focus: () => input.focus(),\n        clear: () => input.clear(),\n        setNativeProps: args => input.setNativeProps(args),\n        isFocused: () => input.isFocused(),\n        blur: () => input.blur()\n      };\n    }\n\n    const noop = () => {\n      throw new Error('TextInput is not available');\n    };\n\n    return {\n      focus: noop,\n      clear: noop,\n      setNativeProps: noop,\n      isFocused: noop,\n      blur: noop\n    };\n  });\n\n  const handleClearPress = () => {\n    var _root$current, _rest$onChangeText;\n\n    (_root$current = root.current) === null || _root$current === void 0 ? void 0 : _root$current.clear();\n    (_rest$onChangeText = rest.onChangeText) === null || _rest$onChangeText === void 0 ? void 0 : _rest$onChangeText.call(rest, '');\n  };\n\n  const {\n    colors,\n    roundness,\n    dark,\n    fonts\n  } = theme;\n  const textColor = colors.text;\n  const font = fonts.regular;\n  const iconColor = customIconColor || (dark ? textColor : color(textColor).alpha(0.54).rgb().string());\n  const rippleColor = color(textColor).alpha(0.32).rgb().string();\n  return /*#__PURE__*/React.createElement(Surface, {\n    style: [{\n      borderRadius: roundness,\n      elevation: 4\n    }, styles.container, style]\n  }, /*#__PURE__*/React.createElement(IconButton // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n  , {\n    accessibilityTraits: \"button\",\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    borderless: true,\n    rippleColor: rippleColor,\n    onPress: onIconPress,\n    color: iconColor,\n    icon: icon || (_ref2 => {\n      let {\n        size,\n        color\n      } = _ref2;\n      return /*#__PURE__*/React.createElement(MaterialCommunityIcon, {\n        name: \"magnify\",\n        color: color,\n        size: size,\n        direction: I18nManager.isRTL ? 'rtl' : 'ltr'\n      });\n    }),\n    accessibilityLabel: searchAccessibilityLabel\n  }), /*#__PURE__*/React.createElement(TextInput, _extends({\n    style: [styles.input, {\n      color: textColor,\n      ...font,\n      ...Platform.select({\n        web: {\n          outline: 'none'\n        }\n      })\n    }, inputStyle],\n    placeholder: placeholder || '',\n    placeholderTextColor: colors.placeholder,\n    selectionColor: colors.primary,\n    underlineColorAndroid: \"transparent\",\n    returnKeyType: \"search\",\n    keyboardAppearance: dark ? 'dark' : 'light' // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n    ,\n    accessibilityTraits: \"search\",\n    accessibilityRole: \"search\",\n    ref: root,\n    value: value\n  }, rest)), /*#__PURE__*/React.createElement(IconButton, {\n    borderless: true,\n    disabled: !value,\n    accessibilityLabel: clearAccessibilityLabel,\n    color: value ? iconColor : 'rgba(255, 255, 255, 0)',\n    rippleColor: rippleColor,\n    onPress: handleClearPress,\n    icon: clearIcon || (_ref3 => {\n      let {\n        size,\n        color\n      } = _ref3;\n      return /*#__PURE__*/React.createElement(MaterialCommunityIcon, {\n        name: \"close\",\n        color: color,\n        size: size,\n        direction: I18nManager.isRTL ? 'rtl' : 'ltr'\n      });\n    }) // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n    ,\n    accessibilityTraits: \"button\",\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\"\n  }));\n});\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  input: {\n    flex: 1,\n    fontSize: 18,\n    paddingLeft: 8,\n    alignSelf: 'stretch',\n    textAlign: I18nManager.isRTL ? 'right' : 'left',\n    minWidth: 0\n  }\n});\nexport default withTheme(Searchbar);","map":{"version":3,"mappings":"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","names":["React","Platform","StyleSheet","TextInput","I18nManager","color","IconButton","Surface","withTheme","MaterialCommunityIcon","Searchbar","forwardRef","ref","clearAccessibilityLabel","clearIcon","icon","iconColor","customIconColor","inputStyle","onIconPress","placeholder","searchAccessibilityLabel","style","theme","value","rest","root","useRef","useImperativeHandle","input","current","focus","clear","setNativeProps","args","isFocused","blur","noop","Error","handleClearPress","onChangeText","colors","roundness","dark","fonts","textColor","text","font","regular","alpha","rgb","string","rippleColor","borderRadius","elevation","styles","container","accessibilityTraits","accessibilityComponentType","accessibilityRole","borderless","onPress","size","name","direction","isRTL","accessibilityLabel","select","web","outline","placeholderTextColor","selectionColor","primary","underlineColorAndroid","returnKeyType","keyboardAppearance","disabled","create","flexDirection","alignItems","flex","fontSize","paddingLeft","alignSelf","textAlign","minWidth"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\node_modules\\react-native-paper\\lib\\module\\components\\Searchbar.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Platform,\n  StyleSheet,\n  StyleProp,\n  TextInput,\n  I18nManager,\n  TextInputProps,\n  ViewStyle,\n  TextStyle,\n} from 'react-native';\n\nimport color from 'color';\nimport IconButton from './IconButton';\nimport Surface from './Surface';\nimport { withTheme } from '../core/theming';\nimport type { IconSource } from './Icon';\nimport MaterialCommunityIcon from './MaterialCommunityIcon';\n\ntype Props = React.ComponentPropsWithRef<typeof TextInput> & {\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  clearAccessibilityLabel?: string;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  searchAccessibilityLabel?: string;\n  /**\n   * Hint text shown when the input is empty.\n   */\n  placeholder?: string;\n  /**\n   * The value of the text input.\n   */\n  value: string;\n  /**\n   * Icon name for the left icon button (see `onIconPress`).\n   */\n  icon?: IconSource;\n  /**\n   * Callback that is called when the text input's text changes.\n   */\n  onChangeText?: (query: string) => void;\n  /**\n   * Callback to execute if we want the left icon to act as button.\n   */\n  onIconPress?: () => void;\n  /**\n   * Set style of the TextInput component inside the searchbar\n   */\n  inputStyle?: StyleProp<TextStyle>;\n  style?: StyleProp<ViewStyle>;\n\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Custom color for icon, default will be derived from theme\n   */\n  iconColor?: string;\n  /**\n   * Custom icon for clear button, default will be icon close\n   */\n  clearIcon?: IconSource;\n};\n\ntype TextInputHandles = Pick<\n  TextInput,\n  'setNativeProps' | 'isFocused' | 'clear' | 'blur' | 'focus'\n>;\n\n/**\n * Searchbar is a simple input box where users can type search queries.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/searchbar.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Searchbar } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [searchQuery, setSearchQuery] = React.useState('');\n *\n *   const onChangeSearch = query => setSearchQuery(query);\n *\n *   return (\n *     <Searchbar\n *       placeholder=\"Search\"\n *       onChangeText={onChangeSearch}\n *       value={searchQuery}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n\n * ```\n */\nconst Searchbar = React.forwardRef<TextInputHandles, Props>(\n  (\n    {\n      clearAccessibilityLabel = 'clear',\n      clearIcon,\n      icon,\n      iconColor: customIconColor,\n      inputStyle,\n      onIconPress,\n      placeholder,\n      searchAccessibilityLabel = 'search',\n      style,\n      theme,\n      value,\n      ...rest\n    }: Props,\n    ref\n  ) => {\n    const root = React.useRef<TextInput>(null);\n\n    React.useImperativeHandle(ref, () => {\n      const input = root.current;\n\n      if (input) {\n        return {\n          focus: () => input.focus(),\n          clear: () => input.clear(),\n          setNativeProps: (args: TextInputProps) => input.setNativeProps(args),\n          isFocused: () => input.isFocused(),\n          blur: () => input.blur(),\n        };\n      }\n\n      const noop = () => {\n        throw new Error('TextInput is not available');\n      };\n\n      return {\n        focus: noop,\n        clear: noop,\n        setNativeProps: noop,\n        isFocused: noop,\n        blur: noop,\n      };\n    });\n\n    const handleClearPress = () => {\n      root.current?.clear();\n      rest.onChangeText?.('');\n    };\n\n    const { colors, roundness, dark, fonts } = theme;\n    const textColor = colors.text;\n    const font = fonts.regular;\n    const iconColor =\n      customIconColor ||\n      (dark ? textColor : color(textColor).alpha(0.54).rgb().string());\n    const rippleColor = color(textColor).alpha(0.32).rgb().string();\n\n    return (\n      <Surface\n        style={[\n          { borderRadius: roundness, elevation: 4 },\n          styles.container,\n          style,\n        ]}\n      >\n        <IconButton\n          // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n          accessibilityTraits=\"button\"\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n          borderless\n          rippleColor={rippleColor}\n          onPress={onIconPress}\n          color={iconColor}\n          icon={\n            icon ||\n            (({ size, color }) => (\n              <MaterialCommunityIcon\n                name=\"magnify\"\n                color={color}\n                size={size}\n                direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n              />\n            ))\n          }\n          accessibilityLabel={searchAccessibilityLabel}\n        />\n        <TextInput\n          style={[\n            styles.input,\n            {\n              color: textColor,\n              ...font,\n              ...Platform.select({ web: { outline: 'none' } }),\n            },\n            inputStyle,\n          ]}\n          placeholder={placeholder || ''}\n          placeholderTextColor={colors.placeholder}\n          selectionColor={colors.primary}\n          underlineColorAndroid=\"transparent\"\n          returnKeyType=\"search\"\n          keyboardAppearance={dark ? 'dark' : 'light'}\n          // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n          accessibilityTraits=\"search\"\n          accessibilityRole=\"search\"\n          ref={root}\n          value={value}\n          {...rest}\n        />\n        <IconButton\n          borderless\n          disabled={!value}\n          accessibilityLabel={clearAccessibilityLabel}\n          color={value ? iconColor : 'rgba(255, 255, 255, 0)'}\n          rippleColor={rippleColor}\n          onPress={handleClearPress}\n          icon={\n            clearIcon ||\n            (({ size, color }) => (\n              <MaterialCommunityIcon\n                name=\"close\"\n                color={color}\n                size={size}\n                direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n              />\n            ))\n          }\n          // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n          accessibilityTraits=\"button\"\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n        />\n      </Surface>\n    );\n  }\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  input: {\n    flex: 1,\n    fontSize: 18,\n    paddingLeft: 8,\n    alignSelf: 'stretch',\n    textAlign: I18nManager.isRTL ? 'right' : 'left',\n    minWidth: 0,\n  },\n});\n\nexport default withTheme(Searchbar);\n"]},"metadata":{},"sourceType":"module"}