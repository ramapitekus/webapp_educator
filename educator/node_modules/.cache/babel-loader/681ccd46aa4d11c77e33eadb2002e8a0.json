{"ast":null,"code":"import color from 'color';\nimport { Animated } from 'react-native';\nimport DarkTheme from './DarkTheme';\n\nconst isAnimatedValue = it => it instanceof Animated.Value;\n\nexport default function overlay(elevation) {\n  let surfaceColor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DarkTheme.colors.surface;\n\n  if (isAnimatedValue(elevation)) {\n    const inputRange = [0, 1, 2, 3, 8, 24]; // @ts-expect-error: TS doesn't seem to refine the type correctly\n\n    return elevation.interpolate({\n      inputRange,\n      outputRange: inputRange.map(elevation => {\n        return calculateColor(surfaceColor, elevation);\n      })\n    });\n  } // @ts-expect-error: TS doesn't seem to refine the type correctly\n\n\n  return calculateColor(surfaceColor, elevation);\n}\n\nfunction calculateColor(surfaceColor) {\n  let elevation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  let overlayTransparency;\n\n  if (elevation >= 1 && elevation <= 24) {\n    overlayTransparency = elevationOverlayTransparency[elevation];\n  } else if (elevation > 24) {\n    overlayTransparency = elevationOverlayTransparency[24];\n  } else {\n    overlayTransparency = elevationOverlayTransparency[1];\n  }\n\n  return color(surfaceColor).mix(color('white'), overlayTransparency * 0.01).hex();\n}\n\nconst elevationOverlayTransparency = {\n  1: 5,\n  2: 7,\n  3: 8,\n  4: 9,\n  5: 10,\n  6: 11,\n  7: 11.5,\n  8: 12,\n  9: 12.5,\n  10: 13,\n  11: 13.5,\n  12: 14,\n  13: 14.25,\n  14: 14.5,\n  15: 14.75,\n  16: 15,\n  17: 15.12,\n  18: 15.24,\n  19: 15.36,\n  20: 15.48,\n  21: 15.6,\n  22: 15.72,\n  23: 15.84,\n  24: 16\n};","map":{"version":3,"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAEA,MAAMC,eAAe,GACnBC,EADsB,IAEGA,EAAE,YAAYH,QAAQ,CAACI,KAFlD;;AAIA,eAAe,SAASC,OAAT,CACbC,SADa,EAG+C;AAAA,MAD5DC,YAC4D,uEADrCN,SAAS,CAACO,MAAVP,CAAiBQ,OACoB;;AAC5D,MAAIP,eAAe,CAACI,SAAD,CAAnB,EAAgC;AAC9B,UAAMI,UAAU,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,EAAhB,CAAnB,CAD8B,CAG9B;;AACA,WAAOJ,SAAS,CAACK,WAAVL,CAAsB;AAC3BI,gBAD2B;AAE3BE,iBAAW,EAAEF,UAAU,CAACG,GAAXH,CAAgBJ,SAAD,IAAe;AACzC,eAAOQ,cAAc,CAACP,YAAD,EAAeD,SAAf,CAArB;AADW;AAFc,KAAtBA,CAAP;AAL0D,IAa5D;;;AACA,SAAOQ,cAAc,CAACP,YAAD,EAAeD,SAAf,CAArB;AACD;;AAED,SAASQ,cAAT,CAAwBP,YAAxB,EAAqE;AAAA,MAAvBD,SAAuB,uEAAH,CAAG;AACnE,MAAIS,mBAAJ;;AACA,MAAIT,SAAS,IAAI,CAAbA,IAAkBA,SAAS,IAAI,EAAnC,EAAuC;AACrCS,uBAAmB,GAAGC,4BAA4B,CAACV,SAAD,CAAlDS;AADF,SAEO,IAAIT,SAAS,GAAG,EAAhB,EAAoB;AACzBS,uBAAmB,GAAGC,4BAA4B,CAAC,EAAD,CAAlDD;AADK,SAEA;AACLA,uBAAmB,GAAGC,4BAA4B,CAAC,CAAD,CAAlDD;AACD;;AACD,SAAOhB,KAAK,CAACQ,YAAD,CAALR,CACJkB,GADIlB,CACAA,KAAK,CAAC,OAAD,CADLA,EACgBgB,mBAAmB,GAAG,IADtChB,EAEJmB,GAFInB,EAAP;AAGD;;AAED,MAAMiB,4BAAoD,GAAG;AAC3D,KAAG,CADwD;AAE3D,KAAG,CAFwD;AAG3D,KAAG,CAHwD;AAI3D,KAAG,CAJwD;AAK3D,KAAG,EALwD;AAM3D,KAAG,EANwD;AAO3D,KAAG,IAPwD;AAQ3D,KAAG,EARwD;AAS3D,KAAG,IATwD;AAU3D,MAAI,EAVuD;AAW3D,MAAI,IAXuD;AAY3D,MAAI,EAZuD;AAa3D,MAAI,KAbuD;AAc3D,MAAI,IAduD;AAe3D,MAAI,KAfuD;AAgB3D,MAAI,EAhBuD;AAiB3D,MAAI,KAjBuD;AAkB3D,MAAI,KAlBuD;AAmB3D,MAAI,KAnBuD;AAoB3D,MAAI,KApBuD;AAqB3D,MAAI,IArBuD;AAsB3D,MAAI,KAtBuD;AAuB3D,MAAI,KAvBuD;AAwB3D,MAAI;AAxBuD,CAA7D","names":["color","Animated","DarkTheme","isAnimatedValue","it","Value","overlay","elevation","surfaceColor","colors","surface","inputRange","interpolate","outputRange","map","calculateColor","overlayTransparency","elevationOverlayTransparency","mix","hex"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\node_modules\\react-native-paper\\lib\\module\\styles\\overlay.tsx"],"sourcesContent":["import color from 'color';\nimport { Animated } from 'react-native';\nimport DarkTheme from './DarkTheme';\n\nconst isAnimatedValue = (\n  it: number | Animated.AnimatedInterpolation\n): it is Animated.Value => it instanceof Animated.Value;\n\nexport default function overlay<T extends Animated.Value | number>(\n  elevation: T,\n  surfaceColor: string = DarkTheme.colors.surface\n): T extends number ? string : Animated.AnimatedInterpolation {\n  if (isAnimatedValue(elevation)) {\n    const inputRange = [0, 1, 2, 3, 8, 24];\n\n    // @ts-expect-error: TS doesn't seem to refine the type correctly\n    return elevation.interpolate({\n      inputRange,\n      outputRange: inputRange.map((elevation) => {\n        return calculateColor(surfaceColor, elevation);\n      }),\n    });\n  }\n\n  // @ts-expect-error: TS doesn't seem to refine the type correctly\n  return calculateColor(surfaceColor, elevation);\n}\n\nfunction calculateColor(surfaceColor: string, elevation: number = 1) {\n  let overlayTransparency: number;\n  if (elevation >= 1 && elevation <= 24) {\n    overlayTransparency = elevationOverlayTransparency[elevation];\n  } else if (elevation > 24) {\n    overlayTransparency = elevationOverlayTransparency[24];\n  } else {\n    overlayTransparency = elevationOverlayTransparency[1];\n  }\n  return color(surfaceColor)\n    .mix(color('white'), overlayTransparency * 0.01)\n    .hex();\n}\n\nconst elevationOverlayTransparency: Record<string, number> = {\n  1: 5,\n  2: 7,\n  3: 8,\n  4: 9,\n  5: 10,\n  6: 11,\n  7: 11.5,\n  8: 12,\n  9: 12.5,\n  10: 13,\n  11: 13.5,\n  12: 14,\n  13: 14.25,\n  14: 14.5,\n  15: 14.75,\n  16: 15,\n  17: 15.12,\n  18: 15.24,\n  19: 15.36,\n  20: 15.48,\n  21: 15.6,\n  22: 15.72,\n  23: 15.84,\n  24: 16,\n};\n"]},"metadata":{},"sourceType":"module"}