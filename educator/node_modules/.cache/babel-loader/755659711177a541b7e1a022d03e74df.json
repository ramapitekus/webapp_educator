{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { RecognitionResult } from \"./Exports\";\n/**\r\n * Defines result of speech recognition.\r\n * @class SpeechRecognitionResult\r\n */\n\nexport class SpeechRecognitionResult extends RecognitionResult {\n  /**\r\n   * Creates and initializes an instance of this class.\r\n   * @constructor\r\n   * @public\r\n   * @param {string} resultId - The result id.\r\n   * @param {ResultReason} reason - The reason.\r\n   * @param {string} text - The recognized text.\r\n   * @param {number} duration - The duration.\r\n   * @param {number} offset - The offset into the stream.\r\n   * @param {string} language - Primary Language detected, if provided.\r\n   * @param {string} languageDetectionConfidence - Primary Language confidence (\"Unknown,\" \"Low,\" \"Medium,\" \"High\"...), if provided.\r\n   * @param {string} speakerId - speaker id for conversation transcription, if provided.\r\n   * @param {string} errorDetails - Error details, if provided.\r\n   * @param {string} json - Additional Json, if provided.\r\n   * @param {PropertyCollection} properties - Additional properties, if provided.\r\n   */\n  constructor(resultId, reason, text, duration, offset, language, languageDetectionConfidence, speakerId, errorDetails, json, properties) {\n    super(resultId, reason, text, duration, offset, language, languageDetectionConfidence, errorDetails, json, properties);\n    this.privSpeakerId = speakerId;\n  }\n  /**\r\n   * speaker id from conversation transcription/id scenarios\r\n   * @member SpeechRecognitionResult.prototype.speakerId\r\n   * @function\r\n   * @public\r\n   * @returns {string} id of speaker in given result\r\n   */\n\n\n  get speakerId() {\n    return this.privSpeakerId;\n  }\n\n}","map":{"version":3,"mappings":"AAAA;AACA;AAEA,SAA6BA,iBAA7B,QAAoE,WAApE;AAEA;;;;;AAIA,OAAM,MAAOC,uBAAP,SAAuCD,iBAAvC,CAAwD;AAE1D;;;;;;;;;;;;;;;;AAgBAE,cAAmBC,QAAnB,EAAsCC,MAAtC,EAA6DC,IAA7D,EACmBC,QADnB,EACsCC,MADtC,EACuDC,QADvD,EAEmBC,2BAFnB,EAEyDC,SAFzD,EAE6EC,YAF7E,EAGmBC,IAHnB,EAGkCC,UAHlC,EAGiE;AAC7D,UAAMV,QAAN,EAAgBC,MAAhB,EAAwBC,IAAxB,EAA8BC,QAA9B,EAAwCC,MAAxC,EAAgDC,QAAhD,EAA0DC,2BAA1D,EAAuFE,YAAvF,EAAqGC,IAArG,EAA2GC,UAA3G;AACA,SAAKC,aAAL,GAAqBJ,SAArB;AACH;AAED;;;;;;;;;AAOoB,MAATA,SAAS;AAChB,WAAO,KAAKI,aAAZ;AACH;;AAnCyD","names":["RecognitionResult","SpeechRecognitionResult","constructor","resultId","reason","text","duration","offset","language","languageDetectionConfidence","speakerId","errorDetails","json","properties","privSpeakerId"],"sources":["C:\\Users\\ozgur\\Documents\\VSCodeProjects\\webapp_educator\\educator\\node_modules\\microsoft-cognitiveservices-speech-sdk\\distrib\\es2015\\src\\sdk\\src\\sdk\\SpeechRecognitionResult.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, RecognitionResult, ResultReason } from \"./Exports\";\r\n\r\n/**\r\n * Defines result of speech recognition.\r\n * @class SpeechRecognitionResult\r\n */\r\nexport class SpeechRecognitionResult extends RecognitionResult {\r\n    private readonly privSpeakerId: string;\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @public\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} text - The recognized text.\r\n     * @param {number} duration - The duration.\r\n     * @param {number} offset - The offset into the stream.\r\n     * @param {string} language - Primary Language detected, if provided.\r\n     * @param {string} languageDetectionConfidence - Primary Language confidence (\"Unknown,\" \"Low,\" \"Medium,\" \"High\"...), if provided.\r\n     * @param {string} speakerId - speaker id for conversation transcription, if provided.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {string} json - Additional Json, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    public constructor(resultId?: string, reason?: ResultReason, text?: string,\r\n                       duration?: number, offset?: number, language?: string,\r\n                       languageDetectionConfidence?: string, speakerId?: string, errorDetails?: string,\r\n                       json?: string, properties?: PropertyCollection) {\r\n        super(resultId, reason, text, duration, offset, language, languageDetectionConfidence, errorDetails, json, properties);\r\n        this.privSpeakerId = speakerId;\r\n    }\r\n\r\n    /**\r\n     * speaker id from conversation transcription/id scenarios\r\n     * @member SpeechRecognitionResult.prototype.speakerId\r\n     * @function\r\n     * @public\r\n     * @returns {string} id of speaker in given result\r\n     */\r\n    public get speakerId(): string {\r\n        return this.privSpeakerId;\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}