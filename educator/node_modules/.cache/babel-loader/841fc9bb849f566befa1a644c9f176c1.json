{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport { grey400, grey800, grey50, white, black } from '../styles/colors';\nimport { NativeModules, Platform, Switch as NativeSwitch } from 'react-native';\nimport setColor from 'color';\nimport { withTheme } from '../core/theming';\nconst version = NativeModules.PlatformConstants ? NativeModules.PlatformConstants.reactNativeVersion : undefined;\n/**\n * Switch is a visual toggle between two mutually exclusive states — on and off.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/switch-enabled.android.png\" />\n *     <figcaption>Android (enabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-disabled.android.png\" />\n *     <figcaption>Android (disabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-enabled.ios.png\" />\n *     <figcaption>iOS (enabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-disabled.ios.png\" />\n *     <figcaption>iOS (disabled)</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Switch } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [isSwitchOn, setIsSwitchOn] = React.useState(false);\n *\n *   const onToggleSwitch = () => setIsSwitchOn(!isSwitchOn);\n *\n *   return <Switch value={isSwitchOn} onValueChange={onToggleSwitch} />;\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nconst Switch = _ref => {\n  let {\n    value,\n    disabled,\n    onValueChange,\n    color,\n    theme,\n    ...rest\n  } = _ref;\n  const checkedColor = color || theme.colors.accent;\n  const onTintColor = Platform.OS === 'ios' ? checkedColor : disabled ? theme.dark ? setColor(white).alpha(0.1).rgb().string() : setColor(black).alpha(0.12).rgb().string() : setColor(checkedColor).alpha(0.5).rgb().string();\n  const thumbTintColor = Platform.OS === 'ios' ? undefined : disabled ? theme.dark ? grey800 : grey400 : value ? checkedColor : theme.dark ? grey400 : grey50;\n  const props = version && version.major === 0 && version.minor <= 56 ? {\n    onTintColor,\n    thumbTintColor\n  } : Platform.OS === 'web' ? {\n    activeTrackColor: onTintColor,\n    thumbColor: thumbTintColor,\n    activeThumbColor: checkedColor\n  } : {\n    thumbColor: thumbTintColor,\n    trackColor: {\n      true: onTintColor,\n      false: ''\n    }\n  };\n  return /*#__PURE__*/React.createElement(NativeSwitch, _extends({\n    value: value,\n    disabled: disabled,\n    onValueChange: disabled ? undefined : onValueChange\n  }, props, rest));\n};\n\nexport default withTheme(Switch);","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,OAAT,EAAkBC,OAAlB,EAA2BC,MAA3B,EAAmCC,KAAnC,EAA0CC,KAA1C,QAAuD,kBAAvD;AACA,SACEC,aADF,EAEEC,QAFF,EAIEC,MAAM,IAAIC,YAJZ,QAMO,cANP;AAOA,OAAOC,QAAP,MAAqB,OAArB;AACA,SAASC,SAAT,QAA0B,iBAA1B;AAEA,MAAMC,OAAO,GAAGN,aAAa,CAACO,iBAAdP,GACZA,aAAa,CAACO,iBAAdP,CAAgCQ,kBADpBR,GAEZS,SAFJ;AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMP,MAAM,GAAG,QAOF;AAAA,MAPG;AACdQ,SADc;AAEdC,YAFc;AAGdC,iBAHc;AAIdC,SAJc;AAKdC,SALc;AAMd,OAAGC;AANW,GAOH;AACX,QAAMC,YAAY,GAAGH,KAAK,IAAIC,KAAK,CAACG,MAANH,CAAaI,MAA3C;AAEA,QAAMC,WAAW,GACflB,QAAQ,CAACmB,EAATnB,KAAgB,KAAhBA,GACIe,YADJf,GAEIU,QAAQ,GACRG,KAAK,CAACO,IAANP,GACEV,QAAQ,CAACN,KAAD,CAARM,CAAgBkB,KAAhBlB,CAAsB,GAAtBA,EAA2BmB,GAA3BnB,GAAiCoB,MAAjCpB,EADFU,GAEEV,QAAQ,CAACL,KAAD,CAARK,CAAgBkB,KAAhBlB,CAAsB,IAAtBA,EAA4BmB,GAA5BnB,GAAkCoB,MAAlCpB,EAHM,GAIRA,QAAQ,CAACY,YAAD,CAARZ,CAAuBkB,KAAvBlB,CAA6B,GAA7BA,EAAkCmB,GAAlCnB,GAAwCoB,MAAxCpB,EAPN;AASA,QAAMqB,cAAc,GAClBxB,QAAQ,CAACmB,EAATnB,KAAgB,KAAhBA,GACIQ,SADJR,GAEIU,QAAQ,GACRG,KAAK,CAACO,IAANP,GACElB,OADFkB,GAEEnB,OAHM,GAIRe,KAAK,GACLM,YADK,GAELF,KAAK,CAACO,IAANP,GACAnB,OADAmB,GAEAjB,MAXN;AAaA,QAAM6B,KAAK,GACTpB,OAAO,IAAIA,OAAO,CAACqB,KAARrB,KAAkB,CAA7BA,IAAkCA,OAAO,CAACsB,KAARtB,IAAiB,EAAnDA,GACI;AACEa,eADF;AAEEM;AAFF,GADJnB,GAKIL,QAAQ,CAACmB,EAATnB,KAAgB,KAAhBA,GACA;AACE4B,oBAAgB,EAAEV,WADpB;AAEEW,cAAU,EAAEL,cAFd;AAGEM,oBAAgB,EAAEf;AAHpB,GADAf,GAMA;AACE6B,cAAU,EAAEL,cADd;AAEEO,cAAU,EAAE;AACVC,UAAI,EAAEd,WADI;AAEVe,WAAK,EAAE;AAFG;AAFd,GAZN;AAoBA,sBACExC,oBAACS,YAAD;AACEO,SAAK,EAAEA,KADT;AAEEC,YAAQ,EAAEA,QAFZ;AAGEC,iBAAa,EAAED,QAAQ,GAAGF,SAAH,GAAeG;AAHxC,KAIMc,KAJN,EAKMX,IALN,EADF;AApDF;;AA+DA,eAAeV,SAAS,CAACH,MAAD,CAAxB","names":["React","grey400","grey800","grey50","white","black","NativeModules","Platform","Switch","NativeSwitch","setColor","withTheme","version","PlatformConstants","reactNativeVersion","undefined","value","disabled","onValueChange","color","theme","rest","checkedColor","colors","accent","onTintColor","OS","dark","alpha","rgb","string","thumbTintColor","props","major","minor","activeTrackColor","thumbColor","activeThumbColor","trackColor","true","false"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\node_modules\\react-native-paper\\lib\\module\\components\\Switch.tsx"],"sourcesContent":["import * as React from 'react';\nimport { grey400, grey800, grey50, white, black } from '../styles/colors';\nimport {\n  NativeModules,\n  Platform,\n  StyleProp,\n  Switch as NativeSwitch,\n  ViewStyle,\n} from 'react-native';\nimport setColor from 'color';\nimport { withTheme } from '../core/theming';\n\nconst version = NativeModules.PlatformConstants\n  ? NativeModules.PlatformConstants.reactNativeVersion\n  : undefined;\n\ntype Props = React.ComponentPropsWithRef<typeof NativeSwitch> & {\n  /**\n   * Disable toggling the switch.\n   */\n  disabled?: boolean;\n  /**\n   * Value of the switch, true means 'on', false means 'off'.\n   */\n  value?: boolean;\n  /**\n   * Custom color for switch.\n   */\n  color?: string;\n  /**\n   * Callback called with the new value when it changes.\n   */\n  onValueChange?: Function;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Switch is a visual toggle between two mutually exclusive states — on and off.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/switch-enabled.android.png\" />\n *     <figcaption>Android (enabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-disabled.android.png\" />\n *     <figcaption>Android (disabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-enabled.ios.png\" />\n *     <figcaption>iOS (enabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-disabled.ios.png\" />\n *     <figcaption>iOS (disabled)</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Switch } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [isSwitchOn, setIsSwitchOn] = React.useState(false);\n *\n *   const onToggleSwitch = () => setIsSwitchOn(!isSwitchOn);\n *\n *   return <Switch value={isSwitchOn} onValueChange={onToggleSwitch} />;\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst Switch = ({\n  value,\n  disabled,\n  onValueChange,\n  color,\n  theme,\n  ...rest\n}: Props) => {\n  const checkedColor = color || theme.colors.accent;\n\n  const onTintColor =\n    Platform.OS === 'ios'\n      ? checkedColor\n      : disabled\n      ? theme.dark\n        ? setColor(white).alpha(0.1).rgb().string()\n        : setColor(black).alpha(0.12).rgb().string()\n      : setColor(checkedColor).alpha(0.5).rgb().string();\n\n  const thumbTintColor =\n    Platform.OS === 'ios'\n      ? undefined\n      : disabled\n      ? theme.dark\n        ? grey800\n        : grey400\n      : value\n      ? checkedColor\n      : theme.dark\n      ? grey400\n      : grey50;\n\n  const props =\n    version && version.major === 0 && version.minor <= 56\n      ? {\n          onTintColor,\n          thumbTintColor,\n        }\n      : Platform.OS === 'web'\n      ? {\n          activeTrackColor: onTintColor,\n          thumbColor: thumbTintColor,\n          activeThumbColor: checkedColor,\n        }\n      : {\n          thumbColor: thumbTintColor,\n          trackColor: {\n            true: onTintColor,\n            false: '',\n          },\n        };\n\n  return (\n    <NativeSwitch\n      value={value}\n      disabled={disabled}\n      onValueChange={disabled ? undefined : onValueChange}\n      {...props}\n      {...rest}\n    />\n  );\n};\n\nexport default withTheme(Switch);\n"]},"metadata":{},"sourceType":"module"}