{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { CognitiveSubscriptionKeyAuthentication, CognitiveTokenAuthentication, Context, OS, ServiceRecognizerBase, SpeechServiceConfig } from \"../common.speech/Exports\";\nimport { Deferred, marshalPromiseToCallbacks } from \"../common/Exports\";\nimport { Contracts } from \"./Contracts\";\nimport { AudioConfig, PropertyId } from \"./Exports\";\n/**\r\n * Defines the base class Recognizer which mainly contains common event handlers.\r\n * @class Recognizer\r\n */\n\nexport class Recognizer {\n  /**\r\n   * Creates and initializes an instance of a Recognizer\r\n   * @constructor\r\n   * @param {AudioConfig} audioInput - An optional audio input stream associated with the recognizer\r\n   */\n  constructor(audioConfig, properties, connectionFactory) {\n    this.audioConfig = audioConfig !== undefined ? audioConfig : AudioConfig.fromDefaultMicrophoneInput();\n    this.privDisposed = false;\n    this.privProperties = properties.clone();\n    this.privConnectionFactory = connectionFactory;\n    this.implCommonRecognizerSetup();\n  }\n  /**\r\n   * Dispose of associated resources.\r\n   * @member Recognizer.prototype.close\r\n   * @function\r\n   * @public\r\n   */\n\n\n  close(cb, errorCb) {\n    Contracts.throwIfDisposed(this.privDisposed);\n    marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\n  }\n  /**\r\n   * @Internal\r\n   * Internal data member to support fromRecognizer* pattern methods on other classes.\r\n   * Do not use externally, object returned will change without warning or notice.\r\n   */\n\n\n  get internalData() {\n    return this.privReco;\n  }\n  /**\r\n   * This method performs cleanup of resources.\r\n   * The Boolean parameter disposing indicates whether the method is called\r\n   * from Dispose (if disposing is true) or from the finalizer (if disposing is false).\r\n   * Derived classes should override this method to dispose resource if needed.\r\n   * @member Recognizer.prototype.dispose\r\n   * @function\r\n   * @public\r\n   * @param {boolean} disposing - Flag to request disposal.\r\n   */\n\n\n  dispose(disposing) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.privDisposed) {\n        return;\n      }\n\n      this.privDisposed = true;\n\n      if (disposing) {\n        if (this.privReco) {\n          yield this.privReco.audioSource.turnOff();\n          yield this.privReco.dispose();\n        }\n      }\n    });\n  }\n  /**\r\n   * This method returns the current state of the telemetry setting.\r\n   * @member Recognizer.prototype.telemetryEnabled\r\n   * @function\r\n   * @public\r\n   * @returns true if the telemetry is enabled, false otherwise.\r\n   */\n\n\n  static get telemetryEnabled() {\n    return ServiceRecognizerBase.telemetryDataEnabled;\n  }\n  /**\r\n   * This method globally enables or disables telemetry.\r\n   * @member Recognizer.prototype.enableTelemetry\r\n   * @function\r\n   * @public\r\n   * @param enabled - Global setting for telemetry collection.\r\n   * If set to true, telemetry information like microphone errors,\r\n   * recognition errors are collected and sent to Microsoft.\r\n   * If set to false, no telemetry is sent to Microsoft.\r\n   */\n\n  /* tslint:disable:member-ordering */\n\n\n  static enableTelemetry(enabled) {\n    ServiceRecognizerBase.telemetryDataEnabled = enabled;\n  } // Does the generic recognizer setup that is common across all recognizer types.\n\n\n  implCommonRecognizerSetup() {\n    let osPlatform = typeof window !== \"undefined\" ? \"Browser\" : \"Node\";\n    let osName = \"unknown\";\n    let osVersion = \"unknown\";\n\n    if (typeof navigator !== \"undefined\") {\n      osPlatform = osPlatform + \"/\" + navigator.platform;\n      osName = navigator.userAgent;\n      osVersion = navigator.appVersion;\n    }\n\n    const recognizerConfig = this.createRecognizerConfig(new SpeechServiceConfig(new Context(new OS(osPlatform, osName, osVersion))));\n    this.privReco = this.createServiceRecognizer(Recognizer.getAuthFromProperties(this.privProperties), this.privConnectionFactory, this.audioConfig, recognizerConfig);\n  }\n\n  recognizeOnceAsyncImpl(recognitionMode) {\n    return __awaiter(this, void 0, void 0, function* () {\n      Contracts.throwIfDisposed(this.privDisposed);\n      const ret = new Deferred();\n      yield this.implRecognizerStop();\n      yield this.privReco.recognize(recognitionMode, ret.resolve, ret.reject);\n      const result = yield ret.promise;\n      yield this.implRecognizerStop();\n      return result;\n    });\n  }\n\n  startContinuousRecognitionAsyncImpl(recognitionMode) {\n    return __awaiter(this, void 0, void 0, function* () {\n      Contracts.throwIfDisposed(this.privDisposed);\n      yield this.implRecognizerStop();\n      yield this.privReco.recognize(recognitionMode, undefined, undefined);\n    });\n  }\n\n  stopContinuousRecognitionAsyncImpl() {\n    return __awaiter(this, void 0, void 0, function* () {\n      Contracts.throwIfDisposed(this.privDisposed);\n      yield this.implRecognizerStop();\n    });\n  }\n\n  implRecognizerStop() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.privReco) {\n        yield this.privReco.stopRecognizing();\n      }\n\n      return;\n    });\n  }\n\n  static getAuthFromProperties(properties) {\n    const subscriptionKey = properties.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\n    const authentication = subscriptionKey && subscriptionKey !== \"\" ? new CognitiveSubscriptionKeyAuthentication(subscriptionKey) : new CognitiveTokenAuthentication(authFetchEventId => {\n      const authorizationToken = properties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\n      return Promise.resolve(authorizationToken);\n    }, authFetchEventId => {\n      const authorizationToken = properties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\n      return Promise.resolve(authorizationToken);\n    });\n    return authentication;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["CognitiveSubscriptionKeyAuthentication","CognitiveTokenAuthentication","Context","OS","ServiceRecognizerBase","SpeechServiceConfig","Deferred","marshalPromiseToCallbacks","Contracts","AudioConfig","PropertyId","Recognizer","constructor","audioConfig","properties","connectionFactory","undefined","fromDefaultMicrophoneInput","privDisposed","privProperties","clone","privConnectionFactory","implCommonRecognizerSetup","close","cb","errorCb","throwIfDisposed","dispose","internalData","privReco","disposing","audioSource","turnOff","telemetryEnabled","telemetryDataEnabled","enableTelemetry","enabled","osPlatform","window","osName","osVersion","navigator","platform","userAgent","appVersion","recognizerConfig","createRecognizerConfig","createServiceRecognizer","getAuthFromProperties","recognizeOnceAsyncImpl","recognitionMode","ret","implRecognizerStop","recognize","resolve","reject","result","promise","startContinuousRecognitionAsyncImpl","stopContinuousRecognitionAsyncImpl","stopRecognizing","subscriptionKey","getProperty","SpeechServiceConnection_Key","authentication","authFetchEventId","authorizationToken","SpeechServiceAuthorization_Token","Promise"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\node_modules\\microsoft-cognitiveservices-speech-sdk\\distrib\\es2015\\src\\sdk\\src\\sdk\\Recognizer.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CognitiveSubscriptionKeyAuthentication,\r\n    CognitiveTokenAuthentication,\r\n    Context,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    OS,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    Deferred,\r\n    marshalPromiseToCallbacks\r\n} from \"../common/Exports\";\r\nimport {\r\n    Contracts\r\n} from \"./Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    Connection,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    RecognitionEventArgs,\r\n    SessionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Defines the base class Recognizer which mainly contains common event handlers.\r\n * @class Recognizer\r\n */\r\nexport abstract class Recognizer {\r\n    private privDisposed: boolean;\r\n    protected audioConfig: AudioConfig;\r\n    protected privReco: ServiceRecognizerBase;\r\n    protected privProperties: PropertyCollection;\r\n    private privConnectionFactory: IConnectionFactory;\r\n\r\n    /**\r\n     * Creates and initializes an instance of a Recognizer\r\n     * @constructor\r\n     * @param {AudioConfig} audioInput - An optional audio input stream associated with the recognizer\r\n     */\r\n    protected constructor(audioConfig: AudioConfig, properties: PropertyCollection, connectionFactory: IConnectionFactory) {\r\n        this.audioConfig = (audioConfig !== undefined) ? audioConfig : AudioConfig.fromDefaultMicrophoneInput();\r\n        this.privDisposed = false;\r\n        this.privProperties = properties.clone();\r\n        this.privConnectionFactory = connectionFactory;\r\n        this.implCommonRecognizerSetup();\r\n    }\r\n\r\n    /**\r\n     * Defines event handler for session started events.\r\n     * @member Recognizer.prototype.sessionStarted\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStarted: (sender: Recognizer, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for session stopped events.\r\n     * @member Recognizer.prototype.sessionStopped\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStopped: (sender: Recognizer, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for speech started events.\r\n     * @member Recognizer.prototype.speechStartDetected\r\n     * @function\r\n     * @public\r\n     */\r\n    public speechStartDetected: (sender: Recognizer, event: RecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for speech stopped events.\r\n     * @member Recognizer.prototype.speechEndDetected\r\n     * @function\r\n     * @public\r\n     */\r\n    public speechEndDetected: (sender: Recognizer, event: RecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member Recognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * @Internal\r\n     * Internal data member to support fromRecognizer* pattern methods on other classes.\r\n     * Do not use externally, object returned will change without warning or notice.\r\n     */\r\n    public get internalData(): object {\r\n        return this.privReco;\r\n    }\r\n\r\n    /**\r\n     * This method performs cleanup of resources.\r\n     * The Boolean parameter disposing indicates whether the method is called\r\n     * from Dispose (if disposing is true) or from the finalizer (if disposing is false).\r\n     * Derived classes should override this method to dispose resource if needed.\r\n     * @member Recognizer.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - Flag to request disposal.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposed) {\r\n            return;\r\n        }\r\n\r\n        this.privDisposed = true;\r\n\r\n        if (disposing) {\r\n            if (this.privReco) {\r\n                await this.privReco.audioSource.turnOff();\r\n                await this.privReco.dispose();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This method returns the current state of the telemetry setting.\r\n     * @member Recognizer.prototype.telemetryEnabled\r\n     * @function\r\n     * @public\r\n     * @returns true if the telemetry is enabled, false otherwise.\r\n     */\r\n    public static get telemetryEnabled(): boolean {\r\n        return ServiceRecognizerBase.telemetryDataEnabled;\r\n    }\r\n\r\n    /**\r\n     * This method globally enables or disables telemetry.\r\n     * @member Recognizer.prototype.enableTelemetry\r\n     * @function\r\n     * @public\r\n     * @param enabled - Global setting for telemetry collection.\r\n     * If set to true, telemetry information like microphone errors,\r\n     * recognition errors are collected and sent to Microsoft.\r\n     * If set to false, no telemetry is sent to Microsoft.\r\n     */\r\n    /* tslint:disable:member-ordering */\r\n    public static enableTelemetry(enabled: boolean): void {\r\n        ServiceRecognizerBase.telemetryDataEnabled = enabled;\r\n    }\r\n\r\n    //\r\n    // ################################################################################################################\r\n    // IMPLEMENTATION.\r\n    // Move to independent class\r\n    // ################################################################################################################\r\n    //\r\n    protected abstract createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig;\r\n\r\n    // Creates the correct service recognizer for the type\r\n    protected abstract createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase;\r\n\r\n    // Does the generic recognizer setup that is common across all recognizer types.\r\n    protected implCommonRecognizerSetup(): void {\r\n\r\n        let osPlatform = (typeof window !== \"undefined\") ? \"Browser\" : \"Node\";\r\n        let osName = \"unknown\";\r\n        let osVersion = \"unknown\";\r\n\r\n        if (typeof navigator !== \"undefined\") {\r\n            osPlatform = osPlatform + \"/\" + navigator.platform;\r\n            osName = navigator.userAgent;\r\n            osVersion = navigator.appVersion;\r\n        }\r\n\r\n        const recognizerConfig = this.createRecognizerConfig(\r\n            new SpeechServiceConfig(\r\n                new Context(new OS(osPlatform, osName, osVersion))));\r\n\r\n        this.privReco = this.createServiceRecognizer(\r\n            Recognizer.getAuthFromProperties(this.privProperties),\r\n            this.privConnectionFactory,\r\n            this.audioConfig,\r\n            recognizerConfig);\r\n    }\r\n\r\n    protected async recognizeOnceAsyncImpl(recognitionMode: RecognitionMode): Promise<SpeechRecognitionResult> {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n        const ret: Deferred<SpeechRecognitionResult> = new Deferred<SpeechRecognitionResult>();\r\n\r\n        await this.implRecognizerStop();\r\n        await this.privReco.recognize(recognitionMode, ret.resolve, ret.reject);\r\n        const result: SpeechRecognitionResult = await ret.promise;\r\n        await this.implRecognizerStop();\r\n\r\n        return result;\r\n\r\n    }\r\n\r\n    protected async startContinuousRecognitionAsyncImpl(recognitionMode: RecognitionMode): Promise<void> {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n\r\n        await this.implRecognizerStop();\r\n        await this.privReco.recognize(recognitionMode, undefined, undefined);\r\n    }\r\n\r\n    protected async stopContinuousRecognitionAsyncImpl(): Promise<void> {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n        await this.implRecognizerStop();\r\n    }\r\n\r\n    protected async implRecognizerStop(): Promise<void> {\r\n        if (this.privReco) {\r\n            await this.privReco.stopRecognizing();\r\n        }\r\n        return;\r\n    }\r\n\r\n    protected static getAuthFromProperties(properties: PropertyCollection): IAuthentication {\r\n        const subscriptionKey = properties.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\r\n        const authentication = (subscriptionKey && subscriptionKey !== \"\") ?\r\n            new CognitiveSubscriptionKeyAuthentication(subscriptionKey) :\r\n            new CognitiveTokenAuthentication(\r\n                (authFetchEventId: string): Promise<string> => {\r\n                    const authorizationToken = properties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                    return Promise.resolve(authorizationToken);\r\n                },\r\n                (authFetchEventId: string): Promise<string> => {\r\n                    const authorizationToken = properties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                    return Promise.resolve(authorizationToken);\r\n                });\r\n\r\n        return authentication;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}