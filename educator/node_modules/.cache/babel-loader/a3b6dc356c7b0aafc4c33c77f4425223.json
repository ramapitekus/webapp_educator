{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { RestMessageAdapter, RestRequestType } from \"../../common.browser/Exports\";\nimport { Contracts } from \"../../sdk/Contracts\";\nimport { PropertyId } from \"../../sdk/Exports\";\nimport { ConversationConnectionConfig } from \"./ConversationConnectionConfig\";\nexport class ConversationManager {\n  constructor() {\n    //\n    this.privRequestParams = ConversationConnectionConfig.configParams;\n    this.privErrors = ConversationConnectionConfig.restErrors;\n    this.privHost = ConversationConnectionConfig.host;\n    this.privApiVersion = ConversationConnectionConfig.apiVersion;\n    this.privRestPath = ConversationConnectionConfig.restPath;\n    this.privRestAdapter = new RestMessageAdapter({});\n  }\n  /**\r\n   * Make a POST request to the Conversation Manager service endpoint to create or join a conversation.\r\n   * @param args\r\n   * @param conversationCode\r\n   * @param callback\r\n   * @param errorCallback\r\n   */\n\n\n  createOrJoin(args, conversationCode, cb, err) {\n    try {\n      Contracts.throwIfNullOrUndefined(args, \"args\");\n      const languageCode = args.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, ConversationConnectionConfig.defaultLanguageCode);\n      const nickname = args.getProperty(PropertyId.ConversationTranslator_Name, \"conversation_host\");\n      const endpointHost = args.getProperty(PropertyId.ConversationTranslator_Host, this.privHost);\n      const correlationId = args.getProperty(PropertyId.ConversationTranslator_CorrelationId);\n      const subscriptionKey = args.getProperty(PropertyId.SpeechServiceConnection_Key);\n      const subscriptionRegion = args.getProperty(PropertyId.SpeechServiceConnection_Region);\n      const authToken = args.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n      Contracts.throwIfNullOrWhitespace(languageCode, \"languageCode\");\n      Contracts.throwIfNullOrWhitespace(nickname, \"nickname\");\n      Contracts.throwIfNullOrWhitespace(endpointHost, \"endpointHost\");\n      const queryParams = {};\n      queryParams[this.privRequestParams.apiVersion] = this.privApiVersion;\n      queryParams[this.privRequestParams.languageCode] = languageCode;\n      queryParams[this.privRequestParams.nickname] = nickname;\n      const headers = {};\n\n      if (correlationId) {\n        headers[this.privRequestParams.correlationId] = correlationId;\n      }\n\n      headers[this.privRequestParams.clientAppId] = ConversationConnectionConfig.clientAppId;\n\n      if (conversationCode !== undefined) {\n        queryParams[this.privRequestParams.roomId] = conversationCode;\n      } else {\n        Contracts.throwIfNullOrUndefined(subscriptionRegion, this.privErrors.authInvalidSubscriptionRegion);\n        headers[this.privRequestParams.subscriptionRegion] = subscriptionRegion;\n\n        if (subscriptionKey) {\n          headers[this.privRequestParams.subscriptionKey] = subscriptionKey;\n        } else if (authToken) {\n          headers[this.privRequestParams.authorization] = `Bearer ${authToken}`;\n        } else {\n          Contracts.throwIfNullOrUndefined(subscriptionKey, this.privErrors.authInvalidSubscriptionKey);\n        }\n      }\n\n      const config = {};\n      config.headers = headers;\n      this.privRestAdapter.options = config;\n      const endpoint = `https://${endpointHost}${this.privRestPath}`; // TODO: support a proxy and certificate validation\n\n      this.privRestAdapter.request(RestRequestType.Post, endpoint, queryParams, null).then(response => {\n        const requestId = RestMessageAdapter.extractHeaderValue(this.privRequestParams.requestId, response.headers);\n\n        if (!response.ok) {\n          if (!!err) {\n            // get the error\n            let errorMessage = this.privErrors.invalidCreateJoinConversationResponse.replace(\"{status}\", response.status.toString());\n            let errMessageRaw;\n\n            try {\n              errMessageRaw = JSON.parse(response.data);\n              errorMessage += ` [${errMessageRaw.error.code}: ${errMessageRaw.error.message}]`;\n            } catch (e) {\n              errorMessage += ` [${response.data}]`;\n            }\n\n            if (requestId) {\n              errorMessage += ` ${requestId}`;\n            }\n\n            err(errorMessage);\n          }\n\n          return;\n        }\n\n        const conversation = JSON.parse(response.data);\n\n        if (conversation) {\n          conversation.requestId = requestId;\n        }\n\n        if (!!cb) {\n          try {\n            cb(conversation);\n          } catch (e) {\n            if (!!err) {\n              err(e);\n            }\n          }\n\n          cb = undefined;\n        }\n        /* tslint:disable:no-empty */\n\n      }).catch(e => {});\n    } catch (error) {\n      if (!!err) {\n        if (error instanceof Error) {\n          const typedError = error;\n          err(typedError.name + \": \" + typedError.message);\n        } else {\n          err(error);\n        }\n      }\n    }\n  }\n  /**\r\n   * Make a DELETE request to the Conversation Manager service endpoint to leave the conversation.\r\n   * @param args\r\n   * @param sessionToken\r\n   * @param callback\r\n   */\n\n\n  leave(args, sessionToken) {\n    return new Promise((resolve, reject) => {\n      try {\n        Contracts.throwIfNullOrUndefined(args, this.privErrors.invalidArgs.replace(\"{arg}\", \"config\"));\n        Contracts.throwIfNullOrWhitespace(sessionToken, this.privErrors.invalidArgs.replace(\"{arg}\", \"token\"));\n        const endpointHost = args.getProperty(PropertyId.ConversationTranslator_Host, this.privHost);\n        const correlationId = args.getProperty(PropertyId.ConversationTranslator_CorrelationId);\n        const queryParams = {};\n        queryParams[this.privRequestParams.apiVersion] = this.privApiVersion;\n        queryParams[this.privRequestParams.sessionToken] = sessionToken;\n        const headers = {};\n\n        if (correlationId) {\n          headers[this.privRequestParams.correlationId] = correlationId;\n        }\n\n        const config = {};\n        config.headers = headers;\n        this.privRestAdapter.options = config;\n        const endpoint = `https://${endpointHost}${this.privRestPath}`; // TODO: support a proxy and certificate validation\n\n        this.privRestAdapter.request(RestRequestType.Delete, endpoint, queryParams, null).then(response => {\n          if (!response.ok) {// ignore errors on delete\n          }\n\n          resolve();\n          /* tslint:disable:no-empty */\n        }).catch(e => {});\n      } catch (error) {\n        if (error instanceof Error) {\n          const typedError = error;\n          reject(typedError.name + \": \" + typedError.message);\n        } else {\n          reject(error);\n        }\n      }\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["RestMessageAdapter","RestRequestType","Contracts","PropertyId","ConversationConnectionConfig","ConversationManager","constructor","privRequestParams","configParams","privErrors","restErrors","privHost","host","privApiVersion","apiVersion","privRestPath","restPath","privRestAdapter","createOrJoin","args","conversationCode","cb","err","throwIfNullOrUndefined","languageCode","getProperty","SpeechServiceConnection_RecoLanguage","defaultLanguageCode","nickname","ConversationTranslator_Name","endpointHost","ConversationTranslator_Host","correlationId","ConversationTranslator_CorrelationId","subscriptionKey","SpeechServiceConnection_Key","subscriptionRegion","SpeechServiceConnection_Region","authToken","SpeechServiceAuthorization_Token","throwIfNullOrWhitespace","queryParams","headers","clientAppId","undefined","roomId","authInvalidSubscriptionRegion","authorization","authInvalidSubscriptionKey","config","options","endpoint","request","Post","then","response","requestId","extractHeaderValue","ok","errorMessage","invalidCreateJoinConversationResponse","replace","status","toString","errMessageRaw","JSON","parse","data","error","code","message","e","conversation","catch","Error","typedError","name","leave","sessionToken","Promise","resolve","reject","invalidArgs","Delete"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\node_modules\\microsoft-cognitiveservices-speech-sdk\\distrib\\es2015\\src\\common.speech\\Transcription\\src\\common.speech\\Transcription\\ConversationManager.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IRequestOptions,\r\n    IRestParams,\r\n    IRestResponse,\r\n    RestMessageAdapter,\r\n    RestRequestType\r\n} from \"../../common.browser/Exports\";\r\nimport { IErrorMessages, IStringDictionary } from \"../../common/Exports\";\r\nimport { Contracts } from \"../../sdk/Contracts\";\r\nimport { PropertyCollection, PropertyId } from \"../../sdk/Exports\";\r\nimport { ConversationConnectionConfig } from \"./ConversationConnectionConfig\";\r\nimport { IConversationResponseError, IInternalConversation, IResponse } from \"./ConversationTranslatorInterfaces\";\r\n\r\nexport class ConversationManager {\r\n\r\n    private privRequestParams: IRestParams;\r\n    private privErrors: IErrorMessages;\r\n    private privHost: string;\r\n    private privApiVersion: string;\r\n    private privRestPath: string;\r\n    private privRestAdapter: RestMessageAdapter;\r\n\r\n    public constructor() {\r\n        //\r\n        this.privRequestParams = ConversationConnectionConfig.configParams;\r\n        this.privErrors = ConversationConnectionConfig.restErrors;\r\n        this.privHost = ConversationConnectionConfig.host;\r\n        this.privApiVersion = ConversationConnectionConfig.apiVersion;\r\n        this.privRestPath = ConversationConnectionConfig.restPath;\r\n        this.privRestAdapter = new RestMessageAdapter({});\r\n    }\r\n\r\n    /**\r\n     * Make a POST request to the Conversation Manager service endpoint to create or join a conversation.\r\n     * @param args\r\n     * @param conversationCode\r\n     * @param callback\r\n     * @param errorCallback\r\n     */\r\n    public createOrJoin(args: PropertyCollection, conversationCode: string, cb?: any, err?: any): void {\r\n\r\n        try {\r\n\r\n            Contracts.throwIfNullOrUndefined(args, \"args\");\r\n\r\n            const languageCode: string = args.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, ConversationConnectionConfig.defaultLanguageCode);\r\n            const nickname: string = args.getProperty(PropertyId.ConversationTranslator_Name, \"conversation_host\");\r\n            const endpointHost: string = args.getProperty(PropertyId.ConversationTranslator_Host, this.privHost);\r\n            const correlationId: string = args.getProperty(PropertyId.ConversationTranslator_CorrelationId);\r\n            const subscriptionKey: string = args.getProperty(PropertyId.SpeechServiceConnection_Key);\r\n            const subscriptionRegion: string = args.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n            const authToken: string = args.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n\r\n            Contracts.throwIfNullOrWhitespace(languageCode, \"languageCode\");\r\n            Contracts.throwIfNullOrWhitespace(nickname, \"nickname\");\r\n            Contracts.throwIfNullOrWhitespace(endpointHost, \"endpointHost\");\r\n\r\n            const queryParams: IStringDictionary<string> = {};\r\n            queryParams[this.privRequestParams.apiVersion] = this.privApiVersion;\r\n            queryParams[this.privRequestParams.languageCode] = languageCode;\r\n            queryParams[this.privRequestParams.nickname] = nickname;\r\n\r\n            const headers: IStringDictionary<string> = {};\r\n            if (correlationId) {\r\n                headers[this.privRequestParams.correlationId] = correlationId;\r\n            }\r\n            headers[this.privRequestParams.clientAppId] = ConversationConnectionConfig.clientAppId;\r\n\r\n            if (conversationCode !== undefined) {\r\n                queryParams[this.privRequestParams.roomId] = conversationCode;\r\n            } else {\r\n                Contracts.throwIfNullOrUndefined(subscriptionRegion, this.privErrors.authInvalidSubscriptionRegion);\r\n                headers[this.privRequestParams.subscriptionRegion] = subscriptionRegion;\r\n                if (subscriptionKey) {\r\n                    headers[this.privRequestParams.subscriptionKey] = subscriptionKey;\r\n                } else if (authToken) {\r\n                    headers[this.privRequestParams.authorization] = `Bearer ${authToken}`;\r\n                } else {\r\n                    Contracts.throwIfNullOrUndefined(subscriptionKey, this.privErrors.authInvalidSubscriptionKey);\r\n                }\r\n            }\r\n\r\n            const config: IRequestOptions = {};\r\n            config.headers = headers;\r\n            this.privRestAdapter.options = config;\r\n\r\n            const endpoint: string = `https://${endpointHost}${this.privRestPath}`;\r\n\r\n            // TODO: support a proxy and certificate validation\r\n            this.privRestAdapter.request(RestRequestType.Post, endpoint, queryParams, null).then((response: IRestResponse) => {\r\n\r\n                const requestId: string = RestMessageAdapter.extractHeaderValue(this.privRequestParams.requestId, response.headers);\r\n\r\n                if (!response.ok) {\r\n                    if (!!err) {\r\n                        // get the error\r\n                        let errorMessage: string = this.privErrors.invalidCreateJoinConversationResponse.replace(\"{status}\", response.status.toString());\r\n                        let errMessageRaw: IConversationResponseError;\r\n                        try {\r\n                            errMessageRaw = JSON.parse(response.data) as IConversationResponseError;\r\n                            errorMessage += ` [${errMessageRaw.error.code}: ${errMessageRaw.error.message}]`;\r\n                        } catch (e) {\r\n                            errorMessage += ` [${response.data}]`;\r\n                        }\r\n                        if (requestId) {\r\n                            errorMessage += ` ${requestId}`;\r\n                        }\r\n\r\n                        err(errorMessage);\r\n                    }\r\n                    return;\r\n                }\r\n                const conversation: IInternalConversation = JSON.parse(response.data) as IInternalConversation;\r\n                if (conversation) {\r\n                    conversation.requestId = requestId;\r\n                }\r\n                if (!!cb) {\r\n                    try {\r\n                        cb(conversation);\r\n                    } catch (e) {\r\n                        if (!!err) {\r\n                            err(e);\r\n                        }\r\n                    }\r\n                    cb = undefined;\r\n                }\r\n            /* tslint:disable:no-empty */\r\n            }).catch( (e: any) => {});\r\n\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Make a DELETE request to the Conversation Manager service endpoint to leave the conversation.\r\n     * @param args\r\n     * @param sessionToken\r\n     * @param callback\r\n     */\r\n    public leave(args: PropertyCollection, sessionToken: string): Promise<void> {\r\n        return new Promise<void>((resolve: () => void, reject: (reason: string) => void): void => {\r\n            try {\r\n\r\n                Contracts.throwIfNullOrUndefined(args, this.privErrors.invalidArgs.replace(\"{arg}\", \"config\"));\r\n                Contracts.throwIfNullOrWhitespace(sessionToken, this.privErrors.invalidArgs.replace(\"{arg}\", \"token\"));\r\n\r\n                const endpointHost: string = args.getProperty(PropertyId.ConversationTranslator_Host, this.privHost);\r\n                const correlationId: string = args.getProperty(PropertyId.ConversationTranslator_CorrelationId);\r\n\r\n                const queryParams: IStringDictionary<string> = {};\r\n                queryParams[this.privRequestParams.apiVersion] = this.privApiVersion;\r\n                queryParams[this.privRequestParams.sessionToken] = sessionToken;\r\n\r\n                const headers: IStringDictionary<string> = {};\r\n                if (correlationId) {\r\n                    headers[this.privRequestParams.correlationId] = correlationId;\r\n                }\r\n\r\n                const config: IRequestOptions = {};\r\n                config.headers = headers;\r\n                this.privRestAdapter.options = config;\r\n\r\n                const endpoint: string = `https://${endpointHost}${this.privRestPath}`;\r\n\r\n                // TODO: support a proxy and certificate validation\r\n                this.privRestAdapter.request(RestRequestType.Delete, endpoint, queryParams, null).then((response: IRestResponse) => {\r\n\r\n                    if (!response.ok) {\r\n                        // ignore errors on delete\r\n                    }\r\n\r\n                    resolve();\r\n                /* tslint:disable:no-empty */\r\n                }).catch( (e: any) => {});\r\n\r\n            } catch (error) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    reject(typedError.name + \": \" + typedError.message);\r\n\r\n                } else {\r\n                    reject(error);\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}