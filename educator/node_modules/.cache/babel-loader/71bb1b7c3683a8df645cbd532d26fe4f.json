{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { SpeechSynthesisOutputFormat } from \"../SpeechSynthesisOutputFormat\";\nimport { AudioFormatTag, AudioStreamFormatImpl } from \"./AudioStreamFormat\";\n/**\r\n * @private\r\n * @class AudioOutputFormatImpl\r\n * Updated in version 1.17.0\r\n */\n// tslint:disable-next-line:max-classes-per-file\n\nexport class AudioOutputFormatImpl extends AudioStreamFormatImpl {\n  /**\r\n   * Creates an instance with the given values.\r\n   * @constructor\r\n   * @param formatTag\r\n   * @param {number} channels - Number of channels.\r\n   * @param {number} samplesPerSec - Samples per second.\r\n   * @param {number} avgBytesPerSec - Average bytes per second.\r\n   * @param {number} blockAlign - Block alignment.\r\n   * @param {number} bitsPerSample - Bits per sample.\r\n   * @param {string} audioFormatString - Audio format string\r\n   * @param {string} requestAudioFormatString - Audio format string sent to service.\r\n   * @param {boolean} hasHeader - If the format has header or not.\r\n   */\n  constructor(formatTag, channels, samplesPerSec, avgBytesPerSec, blockAlign, bitsPerSample, audioFormatString, requestAudioFormatString, hasHeader) {\n    super(samplesPerSec, bitsPerSample, channels, formatTag);\n    this.formatTag = formatTag;\n    this.avgBytesPerSec = avgBytesPerSec;\n    this.blockAlign = blockAlign;\n    this.priAudioFormatString = audioFormatString;\n    this.priRequestAudioFormatString = requestAudioFormatString;\n    this.priHasHeader = hasHeader;\n  }\n\n  static fromSpeechSynthesisOutputFormat(speechSynthesisOutputFormat) {\n    if (speechSynthesisOutputFormat === undefined) {\n      return AudioOutputFormatImpl.getDefaultOutputFormat();\n    }\n\n    return AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(AudioOutputFormatImpl.SpeechSynthesisOutputFormatToString[speechSynthesisOutputFormat]);\n  }\n\n  static fromSpeechSynthesisOutputFormatString(speechSynthesisOutputFormatString) {\n    switch (speechSynthesisOutputFormatString) {\n      case \"raw-8khz-8bit-mono-mulaw\":\n        return new AudioOutputFormatImpl(AudioFormatTag.MuLaw, 1, 8000, 8000, 1, 8, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"riff-16khz-16kbps-mono-siren\":\n        return new AudioOutputFormatImpl(AudioFormatTag.Siren, 1, 16000, 2000, 40, 0, speechSynthesisOutputFormatString, \"audio-16khz-16kbps-mono-siren\", true);\n\n      case \"audio-16khz-16kbps-mono-siren\":\n        return new AudioOutputFormatImpl(AudioFormatTag.Siren, 1, 16000, 2000, 40, 0, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"audio-16khz-32kbitrate-mono-mp3\":\n        return new AudioOutputFormatImpl(AudioFormatTag.MP3, 1, 16000, 32 << 7, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"audio-16khz-128kbitrate-mono-mp3\":\n        return new AudioOutputFormatImpl(AudioFormatTag.MP3, 1, 16000, 128 << 7, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"audio-16khz-64kbitrate-mono-mp3\":\n        return new AudioOutputFormatImpl(AudioFormatTag.MP3, 1, 16000, 64 << 7, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"audio-24khz-48kbitrate-mono-mp3\":\n        return new AudioOutputFormatImpl(AudioFormatTag.MP3, 1, 24000, 48 << 7, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"audio-24khz-96kbitrate-mono-mp3\":\n        return new AudioOutputFormatImpl(AudioFormatTag.MP3, 1, 24000, 96 << 7, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"audio-24khz-160kbitrate-mono-mp3\":\n        return new AudioOutputFormatImpl(AudioFormatTag.MP3, 1, 24000, 160 << 7, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"raw-16khz-16bit-mono-truesilk\":\n        return new AudioOutputFormatImpl(AudioFormatTag.SILKSkype, 1, 16000, 32000, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"riff-8khz-16bit-mono-pcm\":\n        return new AudioOutputFormatImpl(AudioFormatTag.PCM, 1, 8000, 16000, 2, 16, speechSynthesisOutputFormatString, \"raw-8khz-16bit-mono-pcm\", true);\n\n      case \"riff-24khz-16bit-mono-pcm\":\n        return new AudioOutputFormatImpl(AudioFormatTag.PCM, 1, 24000, 48000, 2, 16, speechSynthesisOutputFormatString, \"raw-24khz-16bit-mono-pcm\", true);\n\n      case \"riff-8khz-8bit-mono-mulaw\":\n        return new AudioOutputFormatImpl(AudioFormatTag.MuLaw, 1, 8000, 8000, 1, 8, speechSynthesisOutputFormatString, \"raw-8khz-8bit-mono-mulaw\", true);\n\n      case \"raw-16khz-16bit-mono-pcm\":\n        return new AudioOutputFormatImpl(AudioFormatTag.PCM, 1, 16000, 32000, 2, 16, speechSynthesisOutputFormatString, \"raw-16khz-16bit-mono-pcm\", false);\n\n      case \"raw-24khz-16bit-mono-pcm\":\n        return new AudioOutputFormatImpl(AudioFormatTag.PCM, 1, 24000, 48000, 2, 16, speechSynthesisOutputFormatString, \"raw-24khz-16bit-mono-pcm\", false);\n\n      case \"raw-8khz-16bit-mono-pcm\":\n        return new AudioOutputFormatImpl(AudioFormatTag.PCM, 1, 8000, 16000, 2, 16, speechSynthesisOutputFormatString, \"raw-8khz-16bit-mono-pcm\", false);\n\n      case \"ogg-16khz-16bit-mono-opus\":\n        return new AudioOutputFormatImpl(AudioFormatTag.OGG_OPUS, 1, 16000, 8192, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"ogg-24khz-16bit-mono-opus\":\n        return new AudioOutputFormatImpl(AudioFormatTag.OGG_OPUS, 1, 24000, 8192, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"raw-48khz-16bit-mono-pcm\":\n        return new AudioOutputFormatImpl(AudioFormatTag.PCM, 1, 48000, 96000, 2, 16, speechSynthesisOutputFormatString, \"raw-48khz-16bit-mono-pcm\", false);\n\n      case \"riff-48khz-16bit-mono-pcm\":\n        return new AudioOutputFormatImpl(AudioFormatTag.PCM, 1, 48000, 96000, 2, 16, speechSynthesisOutputFormatString, \"raw-48khz-16bit-mono-pcm\", true);\n\n      case \"audio-48khz-96kbitrate-mono-mp3\":\n        return new AudioOutputFormatImpl(AudioFormatTag.MP3, 1, 48000, 96 << 7, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"audio-48khz-192kbitrate-mono-mp3\":\n        return new AudioOutputFormatImpl(AudioFormatTag.MP3, 1, 48000, 192 << 7, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"ogg-48khz-16bit-mono-opus\":\n        return new AudioOutputFormatImpl(AudioFormatTag.OGG_OPUS, 1, 48000, 12000, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"webm-16khz-16bit-mono-opus\":\n        return new AudioOutputFormatImpl(AudioFormatTag.WEBM_OPUS, 1, 16000, 4000, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"webm-24khz-16bit-mono-opus\":\n        return new AudioOutputFormatImpl(AudioFormatTag.WEBM_OPUS, 1, 24000, 6000, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"webm-24khz-16bit-24kbps-mono-opus\":\n        return new AudioOutputFormatImpl(AudioFormatTag.WEBM_OPUS, 1, 24000, 3000, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"audio-16khz-16bit-32kbps-mono-opus\":\n        return new AudioOutputFormatImpl(AudioFormatTag.OPUS, 1, 16000, 4000, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"audio-24khz-16bit-48kbps-mono-opus\":\n        return new AudioOutputFormatImpl(AudioFormatTag.OPUS, 1, 24000, 6000, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"audio-24khz-16bit-24kbps-mono-opus\":\n        return new AudioOutputFormatImpl(AudioFormatTag.OPUS, 1, 24000, 3000, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"audio-24khz-16bit-mono-flac\":\n        return new AudioOutputFormatImpl(AudioFormatTag.FLAC, 1, 24000, 24000, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"audio-48khz-16bit-mono-flac\":\n        return new AudioOutputFormatImpl(AudioFormatTag.FLAC, 1, 48000, 30000, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"raw-24khz-16bit-mono-truesilk\":\n        return new AudioOutputFormatImpl(AudioFormatTag.SILKSkype, 1, 24000, 48000, 2, 16, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"raw-8khz-8bit-mono-alaw\":\n        return new AudioOutputFormatImpl(AudioFormatTag.ALaw, 1, 8000, 8000, 1, 8, speechSynthesisOutputFormatString, speechSynthesisOutputFormatString, false);\n\n      case \"riff-8khz-8bit-mono-alaw\":\n        return new AudioOutputFormatImpl(AudioFormatTag.ALaw, 1, 8000, 8000, 1, 8, speechSynthesisOutputFormatString, \"raw-8khz-8bit-mono-alaw\", true);\n\n      case \"riff-16khz-16bit-mono-pcm\":\n      default:\n        return new AudioOutputFormatImpl(AudioFormatTag.PCM, 1, 16000, 32000, 2, 16, \"riff-16khz-16bit-mono-pcm\", \"raw-16khz-16bit-mono-pcm\", true);\n    }\n  }\n\n  static getDefaultOutputFormat() {\n    return AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(typeof window !== \"undefined\" ? \"audio-24khz-48kbitrate-mono-mp3\" : \"riff-16khz-16bit-mono-pcm\");\n  }\n  /**\r\n   * Specifies if this audio output format has a header\r\n   * @boolean AudioOutputFormatImpl.prototype.hasHeader\r\n   * @function\r\n   * @public\r\n   */\n\n\n  get hasHeader() {\n    return this.priHasHeader;\n  }\n  /**\r\n   * Specifies the header of this format\r\n   * @ArrayBuffer AudioOutputFormatImpl.prototype.header\r\n   * @function\r\n   * @public\r\n   */\n\n\n  get header() {\n    if (this.hasHeader) {\n      return this.privHeader;\n    }\n\n    return undefined;\n  }\n  /**\r\n   * Updates the header based on the audio length\r\n   * @member AudioOutputFormatImpl.updateHeader\r\n   * @function\r\n   * @public\r\n   * @param {number} audioLength - the audio length\r\n   */\n\n\n  updateHeader(audioLength) {\n    if (this.priHasHeader) {\n      const view = new DataView(this.privHeader);\n      view.setUint32(40, audioLength, true);\n    }\n  }\n  /**\r\n   * Specifies the audio format string to be sent to the service\r\n   * @string AudioOutputFormatImpl.prototype.requestAudioFormatString\r\n   * @function\r\n   * @public\r\n   */\n\n\n  get requestAudioFormatString() {\n    return this.priRequestAudioFormatString;\n  }\n\n}\nAudioOutputFormatImpl.SpeechSynthesisOutputFormatToString = {\n  [SpeechSynthesisOutputFormat.Raw8Khz8BitMonoMULaw]: \"raw-8khz-8bit-mono-mulaw\",\n  [SpeechSynthesisOutputFormat.Riff16Khz16KbpsMonoSiren]: \"riff-16khz-16kbps-mono-siren\",\n  [SpeechSynthesisOutputFormat.Audio16Khz16KbpsMonoSiren]: \"audio-16khz-16kbps-mono-siren\",\n  [SpeechSynthesisOutputFormat.Audio16Khz32KBitRateMonoMp3]: \"audio-16khz-32kbitrate-mono-mp3\",\n  [SpeechSynthesisOutputFormat.Audio16Khz128KBitRateMonoMp3]: \"audio-16khz-128kbitrate-mono-mp3\",\n  [SpeechSynthesisOutputFormat.Audio16Khz64KBitRateMonoMp3]: \"audio-16khz-64kbitrate-mono-mp3\",\n  [SpeechSynthesisOutputFormat.Audio24Khz48KBitRateMonoMp3]: \"audio-24khz-48kbitrate-mono-mp3\",\n  [SpeechSynthesisOutputFormat.Audio24Khz96KBitRateMonoMp3]: \"audio-24khz-96kbitrate-mono-mp3\",\n  [SpeechSynthesisOutputFormat.Audio24Khz160KBitRateMonoMp3]: \"audio-24khz-160kbitrate-mono-mp3\",\n  [SpeechSynthesisOutputFormat.Raw16Khz16BitMonoTrueSilk]: \"raw-16khz-16bit-mono-truesilk\",\n  [SpeechSynthesisOutputFormat.Riff16Khz16BitMonoPcm]: \"riff-16khz-16bit-mono-pcm\",\n  [SpeechSynthesisOutputFormat.Riff8Khz16BitMonoPcm]: \"riff-8khz-16bit-mono-pcm\",\n  [SpeechSynthesisOutputFormat.Riff24Khz16BitMonoPcm]: \"riff-24khz-16bit-mono-pcm\",\n  [SpeechSynthesisOutputFormat.Riff8Khz8BitMonoMULaw]: \"riff-8khz-8bit-mono-mulaw\",\n  [SpeechSynthesisOutputFormat.Raw16Khz16BitMonoPcm]: \"raw-16khz-16bit-mono-pcm\",\n  [SpeechSynthesisOutputFormat.Raw24Khz16BitMonoPcm]: \"raw-24khz-16bit-mono-pcm\",\n  [SpeechSynthesisOutputFormat.Raw8Khz16BitMonoPcm]: \"raw-8khz-16bit-mono-pcm\",\n  [SpeechSynthesisOutputFormat.Ogg16Khz16BitMonoOpus]: \"ogg-16khz-16bit-mono-opus\",\n  [SpeechSynthesisOutputFormat.Ogg24Khz16BitMonoOpus]: \"ogg-24khz-16bit-mono-opus\",\n  [SpeechSynthesisOutputFormat.Raw48Khz16BitMonoPcm]: \"raw-48khz-16bit-mono-pcm\",\n  [SpeechSynthesisOutputFormat.Riff48Khz16BitMonoPcm]: \"riff-48khz-16bit-mono-pcm\",\n  [SpeechSynthesisOutputFormat.Audio48Khz96KBitRateMonoMp3]: \"audio-48khz-96kbitrate-mono-mp3\",\n  [SpeechSynthesisOutputFormat.Audio48Khz192KBitRateMonoMp3]: \"audio-48khz-192kbitrate-mono-mp3\",\n  [SpeechSynthesisOutputFormat.Ogg48Khz16BitMonoOpus]: \"ogg-48khz-16bit-mono-opus\",\n  [SpeechSynthesisOutputFormat.Webm16Khz16BitMonoOpus]: \"webm-16khz-16bit-mono-opus\",\n  [SpeechSynthesisOutputFormat.Webm24Khz16BitMonoOpus]: \"webm-24khz-16bit-mono-opus\",\n  [SpeechSynthesisOutputFormat.Webm24Khz16Bit24KbpsMonoOpus]: \"webm-24khz-16bit-24kbps-mono-opus\",\n  [SpeechSynthesisOutputFormat.Raw24Khz16BitMonoTrueSilk]: \"raw-24khz-16bit-mono-truesilk\",\n  [SpeechSynthesisOutputFormat.Raw8Khz8BitMonoALaw]: \"raw-8khz-8bit-mono-alaw\",\n  [SpeechSynthesisOutputFormat.Riff8Khz8BitMonoALaw]: \"riff-8khz-8bit-mono-alaw\",\n  [SpeechSynthesisOutputFormat.Audio16Khz16Bit32KbpsMonoOpus]: \"audio-16khz-16bit-32kbps-mono-opus\",\n  [SpeechSynthesisOutputFormat.Audio24Khz16Bit48KbpsMonoOpus]: \"audio-24khz-16bit-48kbps-mono-opus\",\n  [SpeechSynthesisOutputFormat.Audio24Khz16Bit24KbpsMonoOpus]: \"audio-24khz-16bit-24kbps-mono-opus\"\n};","map":{"version":3,"mappings":"AAAA;AACA;AAGA,SAASA,2BAAT,QAA4C,gCAA5C;AACA,SAASC,cAAT,EAAyBC,qBAAzB,QAAsD,qBAAtD;AAEA;;;;;AAKA;;AACA,OAAM,MAAOC,qBAAP,SAAqCD,qBAArC,CAA0D;AA4C5D;;;;;;;;;;;;;AAaAE,cAAmBC,SAAnB,EACmBC,QADnB,EAEmBC,aAFnB,EAGmBC,cAHnB,EAImBC,UAJnB,EAKmBC,aALnB,EAMmBC,iBANnB,EAOmBC,wBAPnB,EAQmBC,SARnB,EAQqC;AACjC,UAAMN,aAAN,EAAqBG,aAArB,EAAoCJ,QAApC,EAA8CD,SAA9C;AACA,SAAKA,SAAL,GAAiBA,SAAjB;AACA,SAAKG,cAAL,GAAsBA,cAAtB;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKK,oBAAL,GAA4BH,iBAA5B;AACA,SAAKI,2BAAL,GAAmCH,wBAAnC;AACA,SAAKI,YAAL,GAAoBH,SAApB;AACH;;AAE4C,SAA/BI,+BAA+B,CAACC,2BAAD,EAA0D;AACnG,QAAIA,2BAA2B,KAAKC,SAApC,EAA+C;AAC3C,aAAOhB,qBAAqB,CAACiB,sBAAtB,EAAP;AACH;;AACD,WAAOjB,qBAAqB,CAACkB,qCAAtB,CACHlB,qBAAqB,CAACmB,mCAAtB,CAA0DJ,2BAA1D,CADG,CAAP;AAEH;;AAEkD,SAArCG,qCAAqC,CAACE,iCAAD,EAA0C;AACzF,YAAQA,iCAAR;AACI,WAAK,0BAAL;AACI,eAAO,IAAIpB,qBAAJ,CACHF,cAAc,CAACuB,KADZ,EAEH,CAFG,EAGH,IAHG,EAIH,IAJG,EAKH,CALG,EAMH,CANG,EAOHD,iCAPG,EAQHA,iCARG,EASH,KATG,CAAP;;AAUJ,WAAK,8BAAL;AACI,eAAO,IAAIpB,qBAAJ,CACHF,cAAc,CAACwB,KADZ,EAEH,CAFG,EAGH,KAHG,EAIH,IAJG,EAKH,EALG,EAMH,CANG,EAOHF,iCAPG,EAQH,+BARG,EASH,IATG,CAAP;;AAUJ,WAAK,+BAAL;AACI,eAAO,IAAIpB,qBAAJ,CACHF,cAAc,CAACwB,KADZ,EAEH,CAFG,EAGH,KAHG,EAIH,IAJG,EAKH,EALG,EAMH,CANG,EAOHF,iCAPG,EAQHA,iCARG,EASH,KATG,CAAP;;AAUJ,WAAK,iCAAL;AACI,eAAO,IAAIpB,qBAAJ,CACHF,cAAc,CAACyB,GADZ,EAEH,CAFG,EAGH,KAHG,EAIH,MAAM,CAJH,EAKH,CALG,EAMH,EANG,EAOHH,iCAPG,EAQHA,iCARG,EASH,KATG,CAAP;;AAUJ,WAAK,kCAAL;AACI,eAAO,IAAIpB,qBAAJ,CACHF,cAAc,CAACyB,GADZ,EAEH,CAFG,EAGH,KAHG,EAIH,OAAO,CAJJ,EAKH,CALG,EAMH,EANG,EAOHH,iCAPG,EAQHA,iCARG,EASH,KATG,CAAP;;AAUJ,WAAK,iCAAL;AACI,eAAO,IAAIpB,qBAAJ,CACHF,cAAc,CAACyB,GADZ,EAEH,CAFG,EAGH,KAHG,EAIH,MAAM,CAJH,EAKH,CALG,EAMH,EANG,EAOHH,iCAPG,EAQHA,iCARG,EASH,KATG,CAAP;;AAUJ,WAAK,iCAAL;AACI,eAAO,IAAIpB,qBAAJ,CACHF,cAAc,CAACyB,GADZ,EAEH,CAFG,EAGH,KAHG,EAIH,MAAM,CAJH,EAKH,CALG,EAMH,EANG,EAOHH,iCAPG,EAQHA,iCARG,EASH,KATG,CAAP;;AAUJ,WAAK,iCAAL;AACI,eAAO,IAAIpB,qBAAJ,CACHF,cAAc,CAACyB,GADZ,EAEH,CAFG,EAGH,KAHG,EAIH,MAAM,CAJH,EAKH,CALG,EAMH,EANG,EAOHH,iCAPG,EAQHA,iCARG,EASH,KATG,CAAP;;AAUJ,WAAK,kCAAL;AACI,eAAO,IAAIpB,qBAAJ,CACHF,cAAc,CAACyB,GADZ,EAEH,CAFG,EAGH,KAHG,EAIH,OAAO,CAJJ,EAKH,CALG,EAMH,EANG,EAOHH,iCAPG,EAQHA,iCARG,EASH,KATG,CAAP;;AAUJ,WAAK,+BAAL;AACI,eAAO,IAAIpB,qBAAJ,CACHF,cAAc,CAAC0B,SADZ,EAEH,CAFG,EAGH,KAHG,EAIH,KAJG,EAKH,CALG,EAMH,EANG,EAOHJ,iCAPG,EAQHA,iCARG,EASH,KATG,CAAP;;AAWJ,WAAK,0BAAL;AACI,eAAO,IAAIpB,qBAAJ,CACHF,cAAc,CAAC2B,GADZ,EAEH,CAFG,EAGH,IAHG,EAIH,KAJG,EAKH,CALG,EAMH,EANG,EAOHL,iCAPG,EAQH,yBARG,EASH,IATG,CAAP;;AAUJ,WAAK,2BAAL;AACI,eAAO,IAAIpB,qBAAJ,CACHF,cAAc,CAAC2B,GADZ,EAEH,CAFG,EAGH,KAHG,EAIH,KAJG,EAKH,CALG,EAMH,EANG,EAOHL,iCAPG,EAQH,0BARG,EASH,IATG,CAAP;;AAUJ,WAAK,2BAAL;AACI,eAAO,IAAIpB,qBAAJ,CACHF,cAAc,CAACuB,KADZ,EAEH,CAFG,EAGH,IAHG,EAIH,IAJG,EAKH,CALG,EAMH,CANG,EAOHD,iCAPG,EAQH,0BARG,EASH,IATG,CAAP;;AAUJ,WAAK,0BAAL;AACI,eAAO,IAAIpB,qBAAJ,CACHF,cAAc,CAAC2B,GADZ,EAEH,CAFG,EAGH,KAHG,EAIH,KAJG,EAKH,CALG,EAMH,EANG,EAOHL,iCAPG,EAQH,0BARG,EASH,KATG,CAAP;;AAUJ,WAAK,0BAAL;AACI,eAAO,IAAIpB,qBAAJ,CACHF,cAAc,CAAC2B,GADZ,EAEH,CAFG,EAGH,KAHG,EAIH,KAJG,EAKH,CALG,EAMH,EANG,EAOHL,iCAPG,EAQH,0BARG,EASH,KATG,CAAP;;AAUJ,WAAK,yBAAL;AACI,eAAO,IAAIpB,qBAAJ,CACHF,cAAc,CAAC2B,GADZ,EAEH,CAFG,EAGH,IAHG,EAIH,KAJG,EAKH,CALG,EAMH,EANG,EAOHL,iCAPG,EAQH,yBARG,EASH,KATG,CAAP;;AAUJ,WAAK,2BAAL;AACI,eAAO,IAAIpB,qBAAJ,CACHF,cAAc,CAAC4B,QADZ,EAEH,CAFG,EAGH,KAHG,EAIH,IAJG,EAKH,CALG,EAMH,EANG,EAOHN,iCAPG,EAQHA,iCARG,EASH,KATG,CAAP;;AAUJ,WAAK,2BAAL;AACI,eAAO,IAAIpB,qBAAJ,CACHF,cAAc,CAAC4B,QADZ,EAEH,CAFG,EAGH,KAHG,EAIH,IAJG,EAKH,CALG,EAMH,EANG,EAOHN,iCAPG,EAQHA,iCARG,EASH,KATG,CAAP;;AAUJ,WAAK,0BAAL;AACI,eAAO,IAAIpB,qBAAJ,CACHF,cAAc,CAAC2B,GADZ,EAEH,CAFG,EAGH,KAHG,EAIH,KAJG,EAKH,CALG,EAMH,EANG,EAOHL,iCAPG,EAQH,0BARG,EASH,KATG,CAAP;;AAUJ,WAAK,2BAAL;AACI,eAAO,IAAIpB,qBAAJ,CACHF,cAAc,CAAC2B,GADZ,EAEH,CAFG,EAGH,KAHG,EAIH,KAJG,EAKH,CALG,EAMH,EANG,EAOHL,iCAPG,EAQH,0BARG,EASH,IATG,CAAP;;AAUJ,WAAK,iCAAL;AACI,eAAO,IAAIpB,qBAAJ,CACHF,cAAc,CAACyB,GADZ,EAEH,CAFG,EAGH,KAHG,EAIH,MAAM,CAJH,EAKH,CALG,EAMH,EANG,EAOHH,iCAPG,EAQHA,iCARG,EASH,KATG,CAAP;;AAUJ,WAAK,kCAAL;AACI,eAAO,IAAIpB,qBAAJ,CACHF,cAAc,CAACyB,GADZ,EAEH,CAFG,EAGH,KAHG,EAIH,OAAO,CAJJ,EAKH,CALG,EAMH,EANG,EAOHH,iCAPG,EAQHA,iCARG,EASH,KATG,CAAP;;AAUJ,WAAK,2BAAL;AACI,eAAO,IAAIpB,qBAAJ,CACHF,cAAc,CAAC4B,QADZ,EAEH,CAFG,EAGH,KAHG,EAIH,KAJG,EAKH,CALG,EAMH,EANG,EAOHN,iCAPG,EAQHA,iCARG,EASH,KATG,CAAP;;AAUJ,WAAK,4BAAL;AACI,eAAO,IAAIpB,qBAAJ,CACHF,cAAc,CAAC6B,SADZ,EAEH,CAFG,EAGH,KAHG,EAIH,IAJG,EAKH,CALG,EAMH,EANG,EAOHP,iCAPG,EAQHA,iCARG,EASH,KATG,CAAP;;AAUJ,WAAK,4BAAL;AACI,eAAO,IAAIpB,qBAAJ,CACHF,cAAc,CAAC6B,SADZ,EAEH,CAFG,EAGH,KAHG,EAIH,IAJG,EAKH,CALG,EAMH,EANG,EAOHP,iCAPG,EAQHA,iCARG,EASH,KATG,CAAP;;AAUJ,WAAK,mCAAL;AACI,eAAO,IAAIpB,qBAAJ,CACHF,cAAc,CAAC6B,SADZ,EAEH,CAFG,EAGH,KAHG,EAIH,IAJG,EAKH,CALG,EAMH,EANG,EAOHP,iCAPG,EAQHA,iCARG,EASH,KATG,CAAP;;AAUJ,WAAK,oCAAL;AACI,eAAO,IAAIpB,qBAAJ,CACHF,cAAc,CAAC8B,IADZ,EAEH,CAFG,EAGH,KAHG,EAIH,IAJG,EAKH,CALG,EAMH,EANG,EAOHR,iCAPG,EAQHA,iCARG,EASH,KATG,CAAP;;AAUJ,WAAK,oCAAL;AACI,eAAO,IAAIpB,qBAAJ,CACHF,cAAc,CAAC8B,IADZ,EAEH,CAFG,EAGH,KAHG,EAIH,IAJG,EAKH,CALG,EAMH,EANG,EAOHR,iCAPG,EAQHA,iCARG,EASH,KATG,CAAP;;AAUJ,WAAK,oCAAL;AACI,eAAO,IAAIpB,qBAAJ,CACHF,cAAc,CAAC8B,IADZ,EAEH,CAFG,EAGH,KAHG,EAIH,IAJG,EAKH,CALG,EAMH,EANG,EAOHR,iCAPG,EAQHA,iCARG,EASH,KATG,CAAP;;AAUJ,WAAK,6BAAL;AACI,eAAO,IAAIpB,qBAAJ,CACHF,cAAc,CAAC+B,IADZ,EAEH,CAFG,EAGH,KAHG,EAIH,KAJG,EAKH,CALG,EAMH,EANG,EAOHT,iCAPG,EAQHA,iCARG,EASH,KATG,CAAP;;AAUJ,WAAK,6BAAL;AACI,eAAO,IAAIpB,qBAAJ,CACHF,cAAc,CAAC+B,IADZ,EAEH,CAFG,EAGH,KAHG,EAIH,KAJG,EAKH,CALG,EAMH,EANG,EAOHT,iCAPG,EAQHA,iCARG,EASH,KATG,CAAP;;AAUJ,WAAK,+BAAL;AACI,eAAO,IAAIpB,qBAAJ,CACHF,cAAc,CAAC0B,SADZ,EAEH,CAFG,EAGH,KAHG,EAIH,KAJG,EAKH,CALG,EAMH,EANG,EAOHJ,iCAPG,EAQHA,iCARG,EASH,KATG,CAAP;;AAUJ,WAAK,yBAAL;AACI,eAAO,IAAIpB,qBAAJ,CACHF,cAAc,CAACgC,IADZ,EAEH,CAFG,EAGH,IAHG,EAIH,IAJG,EAKH,CALG,EAMH,CANG,EAOHV,iCAPG,EAQHA,iCARG,EASH,KATG,CAAP;;AAUJ,WAAK,0BAAL;AACI,eAAO,IAAIpB,qBAAJ,CACHF,cAAc,CAACgC,IADZ,EAEH,CAFG,EAGH,IAHG,EAIH,IAJG,EAKH,CALG,EAMH,CANG,EAOHV,iCAPG,EAQH,yBARG,EASH,IATG,CAAP;;AAUJ,WAAK,2BAAL;AACA;AACI,eAAO,IAAIpB,qBAAJ,CACHF,cAAc,CAAC2B,GADZ,EAEH,CAFG,EAGH,KAHG,EAIH,KAJG,EAKH,CALG,EAMH,EANG,EAOH,2BAPG,EAQH,0BARG,EASH,IATG,CAAP;AA1XR;AAqYH;;AAEmC,SAAtBR,sBAAsB;AAChC,WAAOjB,qBAAqB,CAACkB,qCAAtB,CACF,OAAOa,MAAP,KAAkB,WAAnB,GAAkC,iCAAlC,GAAsE,2BADnE,CAAP;AAEH;AAUD;;;;;;;;AAMoB,MAATrB,SAAS;AAChB,WAAO,KAAKG,YAAZ;AACH;AAED;;;;;;;;AAMiB,MAANmB,MAAM;AACb,QAAI,KAAKtB,SAAT,EAAoB;AAChB,aAAO,KAAKuB,UAAZ;AACH;;AACD,WAAOjB,SAAP;AACH;AAED;;;;;;;;;AAOOkB,cAAY,CAACC,WAAD,EAAoB;AACnC,QAAI,KAAKtB,YAAT,EAAuB;AACnB,YAAMuB,IAAI,GAAG,IAAIC,QAAJ,CAAa,KAAKJ,UAAlB,CAAb;AACAG,UAAI,CAACE,SAAL,CAAe,EAAf,EAAmBH,WAAnB,EAAgC,IAAhC;AACH;AACJ;AAED;;;;;;;;AAMmC,MAAxB1B,wBAAwB;AAC/B,WAAO,KAAKG,2BAAZ;AACH;;AArhB2D;AAC9CZ,4DAAiE;AAC3E,GAACH,2BAA2B,CAAC0C,oBAA7B,GAAoD,0BADuB;AAE3E,GAAC1C,2BAA2B,CAAC2C,wBAA7B,GAAwD,8BAFmB;AAG3E,GAAC3C,2BAA2B,CAAC4C,yBAA7B,GAAyD,+BAHkB;AAI3E,GAAC5C,2BAA2B,CAAC6C,2BAA7B,GAA2D,iCAJgB;AAK3E,GAAC7C,2BAA2B,CAAC8C,4BAA7B,GAA4D,kCALe;AAM3E,GAAC9C,2BAA2B,CAAC+C,2BAA7B,GAA2D,iCANgB;AAO3E,GAAC/C,2BAA2B,CAACgD,2BAA7B,GAA2D,iCAPgB;AAQ3E,GAAChD,2BAA2B,CAACiD,2BAA7B,GAA2D,iCARgB;AAS3E,GAACjD,2BAA2B,CAACkD,4BAA7B,GAA4D,kCATe;AAU3E,GAAClD,2BAA2B,CAACmD,yBAA7B,GAAyD,+BAVkB;AAW3E,GAACnD,2BAA2B,CAACoD,qBAA7B,GAAqD,2BAXsB;AAY3E,GAACpD,2BAA2B,CAACqD,oBAA7B,GAAoD,0BAZuB;AAa3E,GAACrD,2BAA2B,CAACsD,qBAA7B,GAAqD,2BAbsB;AAc3E,GAACtD,2BAA2B,CAACuD,qBAA7B,GAAqD,2BAdsB;AAe3E,GAACvD,2BAA2B,CAACwD,oBAA7B,GAAoD,0BAfuB;AAgB3E,GAACxD,2BAA2B,CAACyD,oBAA7B,GAAoD,0BAhBuB;AAiB3E,GAACzD,2BAA2B,CAAC0D,mBAA7B,GAAmD,yBAjBwB;AAkB3E,GAAC1D,2BAA2B,CAAC2D,qBAA7B,GAAqD,2BAlBsB;AAmB3E,GAAC3D,2BAA2B,CAAC4D,qBAA7B,GAAqD,2BAnBsB;AAoB3E,GAAC5D,2BAA2B,CAAC6D,oBAA7B,GAAoD,0BApBuB;AAqB3E,GAAC7D,2BAA2B,CAAC8D,qBAA7B,GAAqD,2BArBsB;AAsB3E,GAAC9D,2BAA2B,CAAC+D,2BAA7B,GAA2D,iCAtBgB;AAuB3E,GAAC/D,2BAA2B,CAACgE,4BAA7B,GAA4D,kCAvBe;AAwB3E,GAAChE,2BAA2B,CAACiE,qBAA7B,GAAqD,2BAxBsB;AAyB3E,GAACjE,2BAA2B,CAACkE,sBAA7B,GAAsD,4BAzBqB;AA0B3E,GAAClE,2BAA2B,CAACmE,sBAA7B,GAAsD,4BA1BqB;AA2B3E,GAACnE,2BAA2B,CAACoE,4BAA7B,GAA4D,mCA3Be;AA4B3E,GAACpE,2BAA2B,CAACqE,yBAA7B,GAAyD,+BA5BkB;AA6B3E,GAACrE,2BAA2B,CAACsE,mBAA7B,GAAmD,yBA7BwB;AA8B3E,GAACtE,2BAA2B,CAACuE,oBAA7B,GAAoD,0BA9BuB;AA+B3E,GAACvE,2BAA2B,CAACwE,6BAA7B,GAA6D,oCA/Bc;AAgC3E,GAACxE,2BAA2B,CAACyE,6BAA7B,GAA6D,oCAhCc;AAiC3E,GAACzE,2BAA2B,CAAC0E,6BAA7B,GAA6D;AAjCc,CAAjE","names":["SpeechSynthesisOutputFormat","AudioFormatTag","AudioStreamFormatImpl","AudioOutputFormatImpl","constructor","formatTag","channels","samplesPerSec","avgBytesPerSec","blockAlign","bitsPerSample","audioFormatString","requestAudioFormatString","hasHeader","priAudioFormatString","priRequestAudioFormatString","priHasHeader","fromSpeechSynthesisOutputFormat","speechSynthesisOutputFormat","undefined","getDefaultOutputFormat","fromSpeechSynthesisOutputFormatString","SpeechSynthesisOutputFormatToString","speechSynthesisOutputFormatString","MuLaw","Siren","MP3","SILKSkype","PCM","OGG_OPUS","WEBM_OPUS","OPUS","FLAC","ALaw","window","header","privHeader","updateHeader","audioLength","view","DataView","setUint32","Raw8Khz8BitMonoMULaw","Riff16Khz16KbpsMonoSiren","Audio16Khz16KbpsMonoSiren","Audio16Khz32KBitRateMonoMp3","Audio16Khz128KBitRateMonoMp3","Audio16Khz64KBitRateMonoMp3","Audio24Khz48KBitRateMonoMp3","Audio24Khz96KBitRateMonoMp3","Audio24Khz160KBitRateMonoMp3","Raw16Khz16BitMonoTrueSilk","Riff16Khz16BitMonoPcm","Riff8Khz16BitMonoPcm","Riff24Khz16BitMonoPcm","Riff8Khz8BitMonoMULaw","Raw16Khz16BitMonoPcm","Raw24Khz16BitMonoPcm","Raw8Khz16BitMonoPcm","Ogg16Khz16BitMonoOpus","Ogg24Khz16BitMonoOpus","Raw48Khz16BitMonoPcm","Riff48Khz16BitMonoPcm","Audio48Khz96KBitRateMonoMp3","Audio48Khz192KBitRateMonoMp3","Ogg48Khz16BitMonoOpus","Webm16Khz16BitMonoOpus","Webm24Khz16BitMonoOpus","Webm24Khz16Bit24KbpsMonoOpus","Raw24Khz16BitMonoTrueSilk","Raw8Khz8BitMonoALaw","Riff8Khz8BitMonoALaw","Audio16Khz16Bit32KbpsMonoOpus","Audio24Khz16Bit48KbpsMonoOpus","Audio24Khz16Bit24KbpsMonoOpus"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ_2\\educator\\node_modules\\microsoft-cognitiveservices-speech-sdk\\distrib\\es2015\\src\\sdk\\Audio\\src\\sdk\\Audio\\AudioOutputFormat.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { INumberDictionary } from \"../../common/Exports\";\r\nimport { SpeechSynthesisOutputFormat } from \"../SpeechSynthesisOutputFormat\";\r\nimport { AudioFormatTag, AudioStreamFormatImpl } from \"./AudioStreamFormat\";\r\n\r\n/**\r\n * @private\r\n * @class AudioOutputFormatImpl\r\n * Updated in version 1.17.0\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class AudioOutputFormatImpl extends AudioStreamFormatImpl {\r\n    public static SpeechSynthesisOutputFormatToString: INumberDictionary<string> = {\r\n        [SpeechSynthesisOutputFormat.Raw8Khz8BitMonoMULaw]: \"raw-8khz-8bit-mono-mulaw\",\r\n        [SpeechSynthesisOutputFormat.Riff16Khz16KbpsMonoSiren]: \"riff-16khz-16kbps-mono-siren\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz16KbpsMonoSiren]: \"audio-16khz-16kbps-mono-siren\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz32KBitRateMonoMp3]: \"audio-16khz-32kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz128KBitRateMonoMp3]: \"audio-16khz-128kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz64KBitRateMonoMp3]: \"audio-16khz-64kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz48KBitRateMonoMp3]: \"audio-24khz-48kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz96KBitRateMonoMp3]: \"audio-24khz-96kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz160KBitRateMonoMp3]: \"audio-24khz-160kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Raw16Khz16BitMonoTrueSilk]: \"raw-16khz-16bit-mono-truesilk\",\r\n        [SpeechSynthesisOutputFormat.Riff16Khz16BitMonoPcm]: \"riff-16khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff8Khz16BitMonoPcm]: \"riff-8khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff24Khz16BitMonoPcm]: \"riff-24khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff8Khz8BitMonoMULaw]: \"riff-8khz-8bit-mono-mulaw\",\r\n        [SpeechSynthesisOutputFormat.Raw16Khz16BitMonoPcm]: \"raw-16khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Raw24Khz16BitMonoPcm]: \"raw-24khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Raw8Khz16BitMonoPcm]: \"raw-8khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Ogg16Khz16BitMonoOpus]: \"ogg-16khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Ogg24Khz16BitMonoOpus]: \"ogg-24khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Raw48Khz16BitMonoPcm]: \"raw-48khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff48Khz16BitMonoPcm]: \"riff-48khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Audio48Khz96KBitRateMonoMp3]: \"audio-48khz-96kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio48Khz192KBitRateMonoMp3]: \"audio-48khz-192kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Ogg48Khz16BitMonoOpus]: \"ogg-48khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Webm16Khz16BitMonoOpus]: \"webm-16khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Webm24Khz16BitMonoOpus]: \"webm-24khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Webm24Khz16Bit24KbpsMonoOpus]: \"webm-24khz-16bit-24kbps-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Raw24Khz16BitMonoTrueSilk]: \"raw-24khz-16bit-mono-truesilk\",\r\n        [SpeechSynthesisOutputFormat.Raw8Khz8BitMonoALaw]: \"raw-8khz-8bit-mono-alaw\",\r\n        [SpeechSynthesisOutputFormat.Riff8Khz8BitMonoALaw]: \"riff-8khz-8bit-mono-alaw\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz16Bit32KbpsMonoOpus]: \"audio-16khz-16bit-32kbps-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz16Bit48KbpsMonoOpus]: \"audio-24khz-16bit-48kbps-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz16Bit24KbpsMonoOpus]: \"audio-24khz-16bit-24kbps-mono-opus\",\r\n    };\r\n    private priAudioFormatString: string;\r\n    /**\r\n     * audio format string for synthesis request, which may differ from priAudioFormatString.\r\n     * e.g. for riff format, we will request raw format and add a header in SDK side.\r\n     */\r\n    private readonly priRequestAudioFormatString: string;\r\n    private readonly priHasHeader: boolean;\r\n\r\n    /**\r\n     * Creates an instance with the given values.\r\n     * @constructor\r\n     * @param formatTag\r\n     * @param {number} channels - Number of channels.\r\n     * @param {number} samplesPerSec - Samples per second.\r\n     * @param {number} avgBytesPerSec - Average bytes per second.\r\n     * @param {number} blockAlign - Block alignment.\r\n     * @param {number} bitsPerSample - Bits per sample.\r\n     * @param {string} audioFormatString - Audio format string\r\n     * @param {string} requestAudioFormatString - Audio format string sent to service.\r\n     * @param {boolean} hasHeader - If the format has header or not.\r\n     */\r\n    public constructor(formatTag: AudioFormatTag,\r\n                       channels: number,\r\n                       samplesPerSec: number,\r\n                       avgBytesPerSec: number,\r\n                       blockAlign: number,\r\n                       bitsPerSample: number,\r\n                       audioFormatString: string,\r\n                       requestAudioFormatString: string,\r\n                       hasHeader: boolean) {\r\n        super(samplesPerSec, bitsPerSample, channels, formatTag);\r\n        this.formatTag = formatTag;\r\n        this.avgBytesPerSec = avgBytesPerSec;\r\n        this.blockAlign = blockAlign;\r\n        this.priAudioFormatString = audioFormatString;\r\n        this.priRequestAudioFormatString = requestAudioFormatString;\r\n        this.priHasHeader = hasHeader;\r\n    }\r\n\r\n    public static fromSpeechSynthesisOutputFormat(speechSynthesisOutputFormat?: SpeechSynthesisOutputFormat): AudioOutputFormatImpl {\r\n        if (speechSynthesisOutputFormat === undefined) {\r\n            return AudioOutputFormatImpl.getDefaultOutputFormat();\r\n        }\r\n        return AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(\r\n            AudioOutputFormatImpl.SpeechSynthesisOutputFormatToString[speechSynthesisOutputFormat]);\r\n    }\r\n\r\n    public static fromSpeechSynthesisOutputFormatString(speechSynthesisOutputFormatString: string): AudioOutputFormatImpl {\r\n        switch (speechSynthesisOutputFormatString) {\r\n            case \"raw-8khz-8bit-mono-mulaw\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MuLaw,\r\n                    1,\r\n                    8000,\r\n                    8000,\r\n                    1,\r\n                    8,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"riff-16khz-16kbps-mono-siren\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.Siren,\r\n                    1,\r\n                    16000,\r\n                    2000,\r\n                    40,\r\n                    0,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"audio-16khz-16kbps-mono-siren\",\r\n                    true);\r\n            case \"audio-16khz-16kbps-mono-siren\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.Siren,\r\n                    1,\r\n                    16000,\r\n                    2000,\r\n                    40,\r\n                    0,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-16khz-32kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    16000,\r\n                    32 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-16khz-128kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    16000,\r\n                    128 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-16khz-64kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    16000,\r\n                    64 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-48kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    24000,\r\n                    48 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-96kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    24000,\r\n                    96 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-160kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    24000,\r\n                    160 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"raw-16khz-16bit-mono-truesilk\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.SILKSkype,\r\n                    1,\r\n                    16000,\r\n                    32000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n\r\n            case \"riff-8khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    8000,\r\n                    16000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-8khz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"riff-24khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    24000,\r\n                    48000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-24khz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"riff-8khz-8bit-mono-mulaw\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MuLaw,\r\n                    1,\r\n                    8000,\r\n                    8000,\r\n                    1,\r\n                    8,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-8khz-8bit-mono-mulaw\",\r\n                    true);\r\n            case \"raw-16khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    16000,\r\n                    32000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-16khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"raw-24khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    24000,\r\n                    48000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-24khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"raw-8khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    8000,\r\n                    16000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-8khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"ogg-16khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OGG_OPUS,\r\n                    1,\r\n                    16000,\r\n                    8192,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"ogg-24khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OGG_OPUS,\r\n                    1,\r\n                    24000,\r\n                    8192,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"raw-48khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    48000,\r\n                    96000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-48khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"riff-48khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    48000,\r\n                    96000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-48khz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"audio-48khz-96kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    48000,\r\n                    96 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-48khz-192kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    48000,\r\n                    192 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"ogg-48khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OGG_OPUS,\r\n                    1,\r\n                    48000,\r\n                    12000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"webm-16khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.WEBM_OPUS,\r\n                    1,\r\n                    16000,\r\n                    4000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"webm-24khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.WEBM_OPUS,\r\n                    1,\r\n                    24000,\r\n                    6000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"webm-24khz-16bit-24kbps-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.WEBM_OPUS,\r\n                    1,\r\n                    24000,\r\n                    3000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-16khz-16bit-32kbps-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OPUS,\r\n                    1,\r\n                    16000,\r\n                    4000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-16bit-48kbps-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OPUS,\r\n                    1,\r\n                    24000,\r\n                    6000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-16bit-24kbps-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OPUS,\r\n                    1,\r\n                    24000,\r\n                    3000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-16bit-mono-flac\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.FLAC,\r\n                    1,\r\n                    24000,\r\n                    24000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-48khz-16bit-mono-flac\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.FLAC,\r\n                    1,\r\n                    48000,\r\n                    30000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"raw-24khz-16bit-mono-truesilk\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.SILKSkype,\r\n                    1,\r\n                    24000,\r\n                    48000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"raw-8khz-8bit-mono-alaw\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.ALaw,\r\n                    1,\r\n                    8000,\r\n                    8000,\r\n                    1,\r\n                    8,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"riff-8khz-8bit-mono-alaw\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.ALaw,\r\n                    1,\r\n                    8000,\r\n                    8000,\r\n                    1,\r\n                    8,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-8khz-8bit-mono-alaw\",\r\n                    true);\r\n            case \"riff-16khz-16bit-mono-pcm\":\r\n            default:\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    16000,\r\n                    32000,\r\n                    2,\r\n                    16,\r\n                    \"riff-16khz-16bit-mono-pcm\",\r\n                    \"raw-16khz-16bit-mono-pcm\",\r\n                    true);\r\n        }\r\n    }\r\n\r\n    public static getDefaultOutputFormat(): AudioOutputFormatImpl {\r\n        return AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(\r\n            (typeof window !== \"undefined\") ? \"audio-24khz-48kbitrate-mono-mp3\" : \"riff-16khz-16bit-mono-pcm\");\r\n    }\r\n\r\n    /**\r\n     * The format tag of the audio\r\n     * @AudioFormatTag AudioOutputFormatImpl.prototype.formatTag\r\n     * @function\r\n     * @public\r\n     */\r\n    public formatTag: AudioFormatTag;\r\n\r\n    /**\r\n     * Specifies if this audio output format has a header\r\n     * @boolean AudioOutputFormatImpl.prototype.hasHeader\r\n     * @function\r\n     * @public\r\n     */\r\n    public get hasHeader(): boolean {\r\n        return this.priHasHeader;\r\n    }\r\n\r\n    /**\r\n     * Specifies the header of this format\r\n     * @ArrayBuffer AudioOutputFormatImpl.prototype.header\r\n     * @function\r\n     * @public\r\n     */\r\n    public get header(): ArrayBuffer {\r\n        if (this.hasHeader) {\r\n            return this.privHeader;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Updates the header based on the audio length\r\n     * @member AudioOutputFormatImpl.updateHeader\r\n     * @function\r\n     * @public\r\n     * @param {number} audioLength - the audio length\r\n     */\r\n    public updateHeader(audioLength: number): void {\r\n        if (this.priHasHeader) {\r\n            const view = new DataView(this.privHeader);\r\n            view.setUint32(40, audioLength, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Specifies the audio format string to be sent to the service\r\n     * @string AudioOutputFormatImpl.prototype.requestAudioFormatString\r\n     * @function\r\n     * @public\r\n     */\r\n    public get requestAudioFormatString(): string {\r\n        return this.priRequestAudioFormatString;\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}