{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport { View, Platform, StyleSheet } from 'react-native';\nimport color from 'color';\nimport AppbarContent from './AppbarContent';\nimport AppbarAction from './AppbarAction';\nimport AppbarBackAction from './AppbarBackAction';\nimport Surface from '../Surface';\nimport { withTheme } from '../../core/theming';\nimport { black, white } from '../../styles/colors';\nimport overlay from '../../styles/overlay';\nexport const DEFAULT_APPBAR_HEIGHT = 56;\n/**\n * A component to display action items in a bar. It can be placed at the top or bottom.\n * The top bar usually contains the screen title, controls such as navigation buttons, menu button etc.\n * The bottom bar usually provides access to a drawer and up to four actions.\n *\n * By default Appbar uses primary color as a background, in dark theme with `adaptive` mode it will use surface colour instead.\n * See [Dark Theme](https://callstack.github.io/react-native-paper/theming.html#dark-theme) for more informations\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/appbar.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Appbar } from 'react-native-paper';\n * import { StyleSheet } from 'react-native';\n *\n * const MyComponent = () => (\n *  <Appbar style={styles.bottom}>\n *    <Appbar.Action\n *      icon=\"archive\"\n *      onPress={() => console.log('Pressed archive')}\n *     />\n *     <Appbar.Action icon=\"mail\" onPress={() => console.log('Pressed mail')} />\n *     <Appbar.Action icon=\"label\" onPress={() => console.log('Pressed label')} />\n *     <Appbar.Action\n *       icon=\"delete\"\n *       onPress={() => console.log('Pressed delete')}\n *     />\n *   </Appbar>\n *  );\n *\n * export default MyComponent\n *\n * const styles = StyleSheet.create({\n *   bottom: {\n *     position: 'absolute',\n *     left: 0,\n *     right: 0,\n *     bottom: 0,\n *   },\n * });\n * ```\n */\n\nconst Appbar = _ref => {\n  let {\n    children,\n    dark,\n    style,\n    theme,\n    ...rest\n  } = _ref;\n  const {\n    colors,\n    dark: isDarkTheme,\n    mode\n  } = theme;\n  const {\n    backgroundColor: customBackground,\n    elevation = 4,\n    ...restStyle\n  } = StyleSheet.flatten(style) || {};\n  let isDark;\n  const backgroundColor = customBackground ? customBackground : isDarkTheme && mode === 'adaptive' ? overlay(elevation, colors.surface) : colors.primary;\n\n  if (typeof dark === 'boolean') {\n    isDark = dark;\n  } else {\n    isDark = backgroundColor === 'transparent' ? false : typeof backgroundColor === 'string' ? !color(backgroundColor).isLight() : true;\n  }\n\n  let shouldCenterContent = false;\n  let shouldAddLeftSpacing = false;\n  let shouldAddRightSpacing = false;\n\n  if (Platform.OS === 'ios') {\n    let hasAppbarContent = false;\n    let leftItemsCount = 0;\n    let rightItemsCount = 0;\n    React.Children.forEach(children, child => {\n      if ( /*#__PURE__*/React.isValidElement(child)) {\n        if (child.type === AppbarContent) {\n          hasAppbarContent = true;\n        } else if (hasAppbarContent) {\n          rightItemsCount++;\n        } else {\n          leftItemsCount++;\n        }\n      }\n    });\n    shouldCenterContent = hasAppbarContent && leftItemsCount < 2 && rightItemsCount < 2;\n    shouldAddLeftSpacing = shouldCenterContent && leftItemsCount === 0;\n    shouldAddRightSpacing = shouldCenterContent && rightItemsCount === 0;\n  }\n\n  return /*#__PURE__*/React.createElement(Surface, _extends({\n    style: [{\n      backgroundColor\n    }, styles.appbar, {\n      elevation\n    }, restStyle]\n  }, rest), shouldAddLeftSpacing ? /*#__PURE__*/React.createElement(View, {\n    style: styles.spacing\n  }) : null, React.Children.toArray(children).filter(child => child != null && typeof child !== 'boolean').map((child, i) => {\n    if (! /*#__PURE__*/React.isValidElement(child) || ![AppbarContent, AppbarAction, AppbarBackAction].includes( // @ts-expect-error: TypeScript complains about the type of type but it doesn't matter\n    child.type)) {\n      return child;\n    }\n\n    const props = {\n      color: typeof child.props.color !== 'undefined' ? child.props.color : isDark ? white : black\n    };\n\n    if (child.type === AppbarContent) {\n      props.style = [// Since content is not first item, add extra left margin\n      i !== 0 && {\n        marginLeft: 8\n      }, shouldCenterContent && {\n        alignItems: 'center'\n      }, child.props.style];\n    }\n\n    return /*#__PURE__*/React.cloneElement(child, props);\n  }), shouldAddRightSpacing ? /*#__PURE__*/React.createElement(View, {\n    style: styles.spacing\n  }) : null);\n};\n\nconst styles = StyleSheet.create({\n  appbar: {\n    height: DEFAULT_APPBAR_HEIGHT,\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 4,\n    elevation: 4\n  },\n  spacing: {\n    width: 48\n  }\n});\nexport default withTheme(Appbar); // @component-docs ignore-next-line\n\nconst AppbarWithTheme = withTheme(Appbar); // @component-docs ignore-next-line\n\nexport { AppbarWithTheme as Appbar };","map":{"version":3,"mappings":"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","names":["React","View","Platform","StyleSheet","color","AppbarContent","AppbarAction","AppbarBackAction","Surface","withTheme","black","white","overlay","DEFAULT_APPBAR_HEIGHT","Appbar","children","dark","style","theme","rest","colors","isDarkTheme","mode","backgroundColor","customBackground","elevation","restStyle","flatten","isDark","surface","primary","isLight","shouldCenterContent","shouldAddLeftSpacing","shouldAddRightSpacing","OS","hasAppbarContent","leftItemsCount","rightItemsCount","Children","forEach","child","isValidElement","type","styles","appbar","spacing","toArray","filter","map","i","includes","props","marginLeft","alignItems","cloneElement","create","height","flexDirection","paddingHorizontal","width","AppbarWithTheme"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\node_modules\\react-native-paper\\lib\\module\\components\\Appbar\\Appbar.tsx"],"sourcesContent":["import * as React from 'react';\nimport { View, ViewStyle, Platform, StyleSheet, StyleProp } from 'react-native';\nimport color from 'color';\n\nimport AppbarContent from './AppbarContent';\nimport AppbarAction from './AppbarAction';\nimport AppbarBackAction from './AppbarBackAction';\nimport Surface from '../Surface';\nimport { withTheme } from '../../core/theming';\nimport { black, white } from '../../styles/colors';\nimport overlay from '../../styles/overlay';\n\ntype Props = Partial<React.ComponentPropsWithRef<typeof View>> & {\n  /**\n   * Whether the background color is a dark color. A dark appbar will render light text and vice-versa.\n   */\n  dark?: boolean;\n  /**\n   * Content of the `Appbar`.\n   */\n  children: React.ReactNode;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  style?: StyleProp<ViewStyle>;\n};\n\nexport const DEFAULT_APPBAR_HEIGHT = 56;\n\n/**\n * A component to display action items in a bar. It can be placed at the top or bottom.\n * The top bar usually contains the screen title, controls such as navigation buttons, menu button etc.\n * The bottom bar usually provides access to a drawer and up to four actions.\n *\n * By default Appbar uses primary color as a background, in dark theme with `adaptive` mode it will use surface colour instead.\n * See [Dark Theme](https://callstack.github.io/react-native-paper/theming.html#dark-theme) for more informations\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/appbar.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Appbar } from 'react-native-paper';\n * import { StyleSheet } from 'react-native';\n *\n * const MyComponent = () => (\n *  <Appbar style={styles.bottom}>\n *    <Appbar.Action\n *      icon=\"archive\"\n *      onPress={() => console.log('Pressed archive')}\n *     />\n *     <Appbar.Action icon=\"mail\" onPress={() => console.log('Pressed mail')} />\n *     <Appbar.Action icon=\"label\" onPress={() => console.log('Pressed label')} />\n *     <Appbar.Action\n *       icon=\"delete\"\n *       onPress={() => console.log('Pressed delete')}\n *     />\n *   </Appbar>\n *  );\n *\n * export default MyComponent\n *\n * const styles = StyleSheet.create({\n *   bottom: {\n *     position: 'absolute',\n *     left: 0,\n *     right: 0,\n *     bottom: 0,\n *   },\n * });\n * ```\n */\nconst Appbar = ({ children, dark, style, theme, ...rest }: Props) => {\n  const { colors, dark: isDarkTheme, mode } = theme;\n  const {\n    backgroundColor: customBackground,\n    elevation = 4,\n    ...restStyle\n  }: ViewStyle = StyleSheet.flatten(style) || {};\n\n  let isDark: boolean;\n\n  const backgroundColor = customBackground\n    ? customBackground\n    : isDarkTheme && mode === 'adaptive'\n    ? overlay(elevation, colors.surface)\n    : colors.primary;\n  if (typeof dark === 'boolean') {\n    isDark = dark;\n  } else {\n    isDark =\n      backgroundColor === 'transparent'\n        ? false\n        : typeof backgroundColor === 'string'\n        ? !color(backgroundColor).isLight()\n        : true;\n  }\n\n  let shouldCenterContent = false;\n  let shouldAddLeftSpacing = false;\n  let shouldAddRightSpacing = false;\n  if (Platform.OS === 'ios') {\n    let hasAppbarContent = false;\n    let leftItemsCount = 0;\n    let rightItemsCount = 0;\n\n    React.Children.forEach(children, (child) => {\n      if (React.isValidElement(child)) {\n        if (child.type === AppbarContent) {\n          hasAppbarContent = true;\n        } else if (hasAppbarContent) {\n          rightItemsCount++;\n        } else {\n          leftItemsCount++;\n        }\n      }\n    });\n\n    shouldCenterContent =\n      hasAppbarContent && leftItemsCount < 2 && rightItemsCount < 2;\n    shouldAddLeftSpacing = shouldCenterContent && leftItemsCount === 0;\n    shouldAddRightSpacing = shouldCenterContent && rightItemsCount === 0;\n  }\n  return (\n    <Surface\n      style={[{ backgroundColor }, styles.appbar, { elevation }, restStyle]}\n      {...rest}\n    >\n      {shouldAddLeftSpacing ? <View style={styles.spacing} /> : null}\n      {React.Children.toArray(children)\n        .filter((child) => child != null && typeof child !== 'boolean')\n        .map((child, i) => {\n          if (\n            !React.isValidElement(child) ||\n            ![AppbarContent, AppbarAction, AppbarBackAction].includes(\n              // @ts-expect-error: TypeScript complains about the type of type but it doesn't matter\n              child.type\n            )\n          ) {\n            return child;\n          }\n\n          const props: { color?: string; style?: StyleProp<ViewStyle> } = {\n            color:\n              typeof child.props.color !== 'undefined'\n                ? child.props.color\n                : isDark\n                ? white\n                : black,\n          };\n\n          if (child.type === AppbarContent) {\n            props.style = [\n              // Since content is not first item, add extra left margin\n              i !== 0 && { marginLeft: 8 },\n              shouldCenterContent && { alignItems: 'center' },\n              child.props.style,\n            ];\n          }\n          return React.cloneElement(child, props);\n        })}\n      {shouldAddRightSpacing ? <View style={styles.spacing} /> : null}\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  appbar: {\n    height: DEFAULT_APPBAR_HEIGHT,\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 4,\n    elevation: 4,\n  },\n  spacing: {\n    width: 48,\n  },\n});\n\nexport default withTheme(Appbar);\n\n// @component-docs ignore-next-line\nconst AppbarWithTheme = withTheme(Appbar);\n// @component-docs ignore-next-line\nexport { AppbarWithTheme as Appbar };\n"]},"metadata":{},"sourceType":"module"}