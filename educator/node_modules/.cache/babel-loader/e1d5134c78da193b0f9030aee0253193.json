{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { EventType, PlatformEvent } from \"./PlatformEvent\";\nexport class ServiceEvent extends PlatformEvent {\n  constructor(eventName, jsonstring) {\n    let eventType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : EventType.Info;\n    super(eventName, eventType);\n    this.privJsonResult = jsonstring;\n  }\n\n  get jsonString() {\n    return this.privJsonResult;\n  }\n\n}\nexport class ConnectionEvent extends PlatformEvent {\n  constructor(eventName, connectionId) {\n    let eventType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : EventType.Info;\n    super(eventName, eventType);\n    this.privConnectionId = connectionId;\n  }\n\n  get connectionId() {\n    return this.privConnectionId;\n  }\n\n}\nexport class ConnectionStartEvent extends ConnectionEvent {\n  constructor(connectionId, uri, headers) {\n    super(\"ConnectionStartEvent\", connectionId);\n    this.privUri = uri;\n    this.privHeaders = headers;\n  }\n\n  get uri() {\n    return this.privUri;\n  }\n\n  get headers() {\n    return this.privHeaders;\n  }\n\n}\nexport class ConnectionEstablishedEvent extends ConnectionEvent {\n  constructor(connectionId, metadata) {\n    super(\"ConnectionEstablishedEvent\", connectionId);\n  }\n\n}\nexport class ConnectionClosedEvent extends ConnectionEvent {\n  constructor(connectionId, statusCode, reason) {\n    super(\"ConnectionClosedEvent\", connectionId, EventType.Debug);\n    this.privReason = reason;\n    this.privStatusCode = statusCode;\n  }\n\n  get reason() {\n    return this.privReason;\n  }\n\n  get statusCode() {\n    return this.privStatusCode;\n  }\n\n}\nexport class ConnectionErrorEvent extends ConnectionEvent {\n  constructor(connectionId, message, type) {\n    super(\"ConnectionErrorEvent\", connectionId, EventType.Debug);\n    this.privMessage = message;\n    this.privType = type;\n  }\n\n  get message() {\n    return this.privMessage;\n  }\n\n  get type() {\n    return this.privType;\n  }\n\n}\nexport class ConnectionEstablishErrorEvent extends ConnectionEvent {\n  constructor(connectionId, statuscode, reason) {\n    super(\"ConnectionEstablishErrorEvent\", connectionId, EventType.Error);\n    this.privStatusCode = statuscode;\n    this.privReason = reason;\n  }\n\n  get reason() {\n    return this.privReason;\n  }\n\n  get statusCode() {\n    return this.privStatusCode;\n  }\n\n}\nexport class ConnectionMessageReceivedEvent extends ConnectionEvent {\n  constructor(connectionId, networkReceivedTimeISO, message) {\n    super(\"ConnectionMessageReceivedEvent\", connectionId);\n    this.privNetworkReceivedTime = networkReceivedTimeISO;\n    this.privMessage = message;\n  }\n\n  get networkReceivedTime() {\n    return this.privNetworkReceivedTime;\n  }\n\n  get message() {\n    return this.privMessage;\n  }\n\n}\nexport class ConnectionMessageSentEvent extends ConnectionEvent {\n  constructor(connectionId, networkSentTimeISO, message) {\n    super(\"ConnectionMessageSentEvent\", connectionId);\n    this.privNetworkSentTime = networkSentTimeISO;\n    this.privMessage = message;\n  }\n\n  get networkSentTime() {\n    return this.privNetworkSentTime;\n  }\n\n  get message() {\n    return this.privMessage;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["EventType","PlatformEvent","ServiceEvent","constructor","eventName","jsonstring","eventType","Info","privJsonResult","jsonString","ConnectionEvent","connectionId","privConnectionId","ConnectionStartEvent","uri","headers","privUri","privHeaders","ConnectionEstablishedEvent","metadata","ConnectionClosedEvent","statusCode","reason","Debug","privReason","privStatusCode","ConnectionErrorEvent","message","type","privMessage","privType","ConnectionEstablishErrorEvent","statuscode","Error","ConnectionMessageReceivedEvent","networkReceivedTimeISO","privNetworkReceivedTime","networkReceivedTime","ConnectionMessageSentEvent","networkSentTimeISO","privNetworkSentTime","networkSentTime"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ_2\\educator\\node_modules\\microsoft-cognitiveservices-speech-sdk\\distrib\\es2015\\src\\common\\src\\common\\ConnectionEvents.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// tslint:disable:max-classes-per-file\r\n\r\nimport { ConnectionMessage } from \"./ConnectionMessage\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\nimport { EventType, PlatformEvent } from \"./PlatformEvent\";\r\n\r\nexport class ServiceEvent extends PlatformEvent {\r\n    private privJsonResult: string;\r\n\r\n    constructor(eventName: string, jsonstring: string, eventType: EventType = EventType.Info) {\r\n      super(eventName, eventType);\r\n      this.privJsonResult = jsonstring;\r\n    }\r\n\r\n    public get jsonString(): string {\r\n        return this.privJsonResult;\r\n    }\r\n}\r\n\r\nexport class ConnectionEvent extends PlatformEvent {\r\n    private privConnectionId: string;\r\n\r\n    constructor(eventName: string, connectionId: string, eventType: EventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n        this.privConnectionId = connectionId;\r\n    }\r\n\r\n    public get connectionId(): string {\r\n        return this.privConnectionId;\r\n    }\r\n}\r\n\r\nexport class ConnectionStartEvent extends ConnectionEvent {\r\n    private privUri: string;\r\n    private privHeaders: IStringDictionary<string>;\r\n\r\n    constructor(connectionId: string, uri: string, headers?: IStringDictionary<string>) {\r\n        super(\"ConnectionStartEvent\", connectionId);\r\n        this.privUri = uri;\r\n        this.privHeaders = headers;\r\n    }\r\n\r\n    public get uri(): string {\r\n        return this.privUri;\r\n    }\r\n\r\n    public get headers(): IStringDictionary<string> {\r\n        return this.privHeaders;\r\n    }\r\n}\r\n\r\nexport class ConnectionEstablishedEvent extends ConnectionEvent {\r\n    constructor(connectionId: string, metadata?: IStringDictionary<string>) {\r\n        super(\"ConnectionEstablishedEvent\", connectionId);\r\n    }\r\n}\r\n\r\nexport class ConnectionClosedEvent extends ConnectionEvent {\r\n    private privReason: string;\r\n    private privStatusCode: number;\r\n\r\n    constructor(connectionId: string, statusCode: number, reason: string) {\r\n        super(\"ConnectionClosedEvent\", connectionId, EventType.Debug);\r\n        this.privReason = reason;\r\n        this.privStatusCode = statusCode;\r\n    }\r\n\r\n    public get reason(): string {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get statusCode(): number {\r\n        return this.privStatusCode;\r\n    }\r\n}\r\n\r\nexport class ConnectionErrorEvent extends ConnectionEvent {\r\n    private readonly privMessage: string;\r\n    private readonly privType: string;\r\n\r\n    constructor(connectionId: string, message: string, type: string) {\r\n        super(\"ConnectionErrorEvent\", connectionId, EventType.Debug);\r\n        this.privMessage = message;\r\n        this.privType = type;\r\n    }\r\n\r\n    public get message(): string {\r\n        return this.privMessage;\r\n    }\r\n\r\n    public get type(): string {\r\n        return this.privType;\r\n    }\r\n}\r\n\r\nexport class ConnectionEstablishErrorEvent extends ConnectionEvent {\r\n    private privStatusCode: number;\r\n    private privReason: string;\r\n\r\n    constructor(connectionId: string, statuscode: number, reason: string) {\r\n        super(\"ConnectionEstablishErrorEvent\", connectionId, EventType.Error);\r\n        this.privStatusCode = statuscode;\r\n        this.privReason = reason;\r\n    }\r\n\r\n    public get reason(): string {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get statusCode(): number {\r\n        return this.privStatusCode;\r\n    }\r\n}\r\n\r\nexport class ConnectionMessageReceivedEvent extends ConnectionEvent {\r\n    private privNetworkReceivedTime: string;\r\n    private privMessage: ConnectionMessage;\r\n\r\n    constructor(connectionId: string, networkReceivedTimeISO: string, message: ConnectionMessage) {\r\n        super(\"ConnectionMessageReceivedEvent\", connectionId);\r\n        this.privNetworkReceivedTime = networkReceivedTimeISO;\r\n        this.privMessage = message;\r\n    }\r\n\r\n    public get networkReceivedTime(): string {\r\n        return this.privNetworkReceivedTime;\r\n    }\r\n\r\n    public get message(): ConnectionMessage {\r\n        return this.privMessage;\r\n    }\r\n}\r\n\r\nexport class ConnectionMessageSentEvent extends ConnectionEvent {\r\n    private privNetworkSentTime: string;\r\n    private privMessage: ConnectionMessage;\r\n\r\n    constructor(connectionId: string, networkSentTimeISO: string, message: ConnectionMessage) {\r\n        super(\"ConnectionMessageSentEvent\", connectionId);\r\n        this.privNetworkSentTime = networkSentTimeISO;\r\n        this.privMessage = message;\r\n    }\r\n\r\n    public get networkSentTime(): string {\r\n        return this.privNetworkSentTime;\r\n    }\r\n\r\n    public get message(): ConnectionMessage {\r\n        return this.privMessage;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}