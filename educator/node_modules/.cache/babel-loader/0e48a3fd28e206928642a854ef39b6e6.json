{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport ActivityIndicator from './ActivityIndicator';\nimport Icon from './Icon';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport TouchableRipple from './TouchableRipple/TouchableRipple';\nimport { black, white } from '../styles/colors';\nimport { withTheme } from '../core/theming';\n/**\n * A button is component that the user can press to trigger an action.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/button-1.png\" />\n *     <figcaption>Text button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-2.png\" />\n *     <figcaption>Outlined button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-3.png\" />\n *     <figcaption>Contained button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Button } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Button icon=\"camera\" mode=\"contained\" onPress={() => console.log('Pressed')}>\n *     Press me\n *   </Button>\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nconst Button = _ref => {\n  let {\n    disabled,\n    compact,\n    mode = 'text',\n    dark,\n    loading,\n    icon,\n    color: buttonColor,\n    children,\n    uppercase = true,\n    accessibilityLabel,\n    accessibilityHint,\n    onPress,\n    onLongPress,\n    style,\n    theme,\n    contentStyle,\n    labelStyle,\n    testID,\n    accessible,\n    ...rest\n  } = _ref;\n\n  var _StyleSheet$flatten;\n\n  const {\n    current: elevation\n  } = React.useRef(new Animated.Value(mode === 'contained' ? 2 : 0));\n  React.useEffect(() => {\n    elevation.setValue(mode === 'contained' ? 2 : 0);\n  }, [mode, elevation]);\n\n  const handlePressIn = () => {\n    if (mode === 'contained') {\n      const {\n        scale\n      } = theme.animation;\n      Animated.timing(elevation, {\n        toValue: 8,\n        duration: 200 * scale,\n        useNativeDriver: true\n      }).start();\n    }\n  };\n\n  const handlePressOut = () => {\n    if (mode === 'contained') {\n      const {\n        scale\n      } = theme.animation;\n      Animated.timing(elevation, {\n        toValue: 2,\n        duration: 150 * scale,\n        useNativeDriver: true\n      }).start();\n    }\n  };\n\n  const {\n    colors,\n    roundness\n  } = theme;\n  const font = theme.fonts.medium;\n  let backgroundColor, borderColor, textColor, borderWidth;\n\n  if (mode === 'contained') {\n    if (disabled) {\n      backgroundColor = color(theme.dark ? white : black).alpha(0.12).rgb().string();\n    } else if (buttonColor) {\n      backgroundColor = buttonColor;\n    } else {\n      backgroundColor = colors.primary;\n    }\n  } else {\n    backgroundColor = 'transparent';\n  }\n\n  if (mode === 'outlined') {\n    borderColor = color(theme.dark ? white : black).alpha(0.29).rgb().string();\n    borderWidth = StyleSheet.hairlineWidth;\n  } else {\n    borderColor = 'transparent';\n    borderWidth = 0;\n  }\n\n  if (disabled) {\n    textColor = color(theme.dark ? white : black).alpha(0.32).rgb().string();\n  } else if (mode === 'contained') {\n    let isDark;\n\n    if (typeof dark === 'boolean') {\n      isDark = dark;\n    } else {\n      isDark = backgroundColor === 'transparent' ? false : !color(backgroundColor).isLight();\n    }\n\n    textColor = isDark ? white : black;\n  } else if (buttonColor) {\n    textColor = buttonColor;\n  } else {\n    textColor = colors.primary;\n  }\n\n  const rippleColor = color(textColor).alpha(0.32).rgb().string();\n  const buttonStyle = {\n    backgroundColor,\n    borderColor,\n    borderWidth,\n    borderRadius: roundness\n  };\n  const touchableStyle = {\n    borderRadius: style ? (StyleSheet.flatten(style) || {}).borderRadius || roundness : roundness\n  };\n  const {\n    color: customLabelColor,\n    fontSize: customLabelSize\n  } = StyleSheet.flatten(labelStyle) || {};\n  const textStyle = {\n    color: textColor,\n    ...font\n  };\n  const elevationRes = disabled || mode !== 'contained' ? 0 : elevation;\n  const iconStyle = ((_StyleSheet$flatten = StyleSheet.flatten(contentStyle)) === null || _StyleSheet$flatten === void 0 ? void 0 : _StyleSheet$flatten.flexDirection) === 'row-reverse' ? styles.iconReverse : styles.icon;\n  return /*#__PURE__*/React.createElement(Surface, _extends({}, rest, {\n    style: [styles.button, compact && styles.compact, {\n      elevation: elevationRes\n    }, buttonStyle, style]\n  }), /*#__PURE__*/React.createElement(TouchableRipple, {\n    borderless: true,\n    delayPressIn: 0,\n    onPress: onPress,\n    onLongPress: onLongPress,\n    onPressIn: handlePressIn,\n    onPressOut: handlePressOut,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityHint: accessibilityHint // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n    ,\n    accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      disabled\n    },\n    accessible: accessible,\n    disabled: disabled,\n    rippleColor: rippleColor,\n    style: touchableStyle,\n    testID: testID\n  }, /*#__PURE__*/React.createElement(View, {\n    style: [styles.content, contentStyle]\n  }, icon && loading !== true ? /*#__PURE__*/React.createElement(View, {\n    style: iconStyle\n  }, /*#__PURE__*/React.createElement(Icon, {\n    source: icon,\n    size: customLabelSize !== null && customLabelSize !== void 0 ? customLabelSize : 16,\n    color: typeof customLabelColor === 'string' ? customLabelColor : textColor\n  })) : null, loading ? /*#__PURE__*/React.createElement(ActivityIndicator, {\n    size: customLabelSize !== null && customLabelSize !== void 0 ? customLabelSize : 16,\n    color: typeof customLabelColor === 'string' ? customLabelColor : textColor,\n    style: iconStyle\n  }) : null, /*#__PURE__*/React.createElement(Text, {\n    selectable: false,\n    numberOfLines: 1,\n    style: [styles.label, compact && styles.compactLabel, uppercase && styles.uppercaseLabel, textStyle, font, labelStyle]\n  }, children))));\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    minWidth: 64,\n    borderStyle: 'solid'\n  },\n  compact: {\n    minWidth: 'auto'\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  icon: {\n    marginLeft: 12,\n    marginRight: -4\n  },\n  iconReverse: {\n    marginRight: 12,\n    marginLeft: -4\n  },\n  label: {\n    textAlign: 'center',\n    letterSpacing: 1,\n    marginVertical: 9,\n    marginHorizontal: 16\n  },\n  compactLabel: {\n    marginHorizontal: 8\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase'\n  }\n});\nexport default withTheme(Button);","map":{"version":3,"mappings":"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","names":["React","Animated","View","StyleSheet","color","ActivityIndicator","Icon","Surface","Text","TouchableRipple","black","white","withTheme","Button","disabled","compact","mode","dark","loading","icon","buttonColor","children","uppercase","accessibilityLabel","accessibilityHint","onPress","onLongPress","style","theme","contentStyle","labelStyle","testID","accessible","rest","current","elevation","useRef","Value","useEffect","setValue","handlePressIn","scale","animation","timing","toValue","duration","useNativeDriver","start","handlePressOut","colors","roundness","font","fonts","medium","backgroundColor","borderColor","textColor","borderWidth","alpha","rgb","string","primary","hairlineWidth","isDark","isLight","rippleColor","buttonStyle","borderRadius","touchableStyle","flatten","customLabelColor","fontSize","customLabelSize","textStyle","elevationRes","iconStyle","flexDirection","styles","iconReverse","button","borderless","delayPressIn","onPressIn","onPressOut","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","content","source","size","selectable","numberOfLines","label","compactLabel","uppercaseLabel","create","minWidth","borderStyle","alignItems","justifyContent","marginLeft","marginRight","textAlign","letterSpacing","marginVertical","marginHorizontal","textTransform"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\node_modules\\react-native-paper\\lib\\module\\components\\Button.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n} from 'react-native';\nimport color from 'color';\n\nimport ActivityIndicator from './ActivityIndicator';\nimport Icon, { IconSource } from './Icon';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport TouchableRipple from './TouchableRipple/TouchableRipple';\nimport { black, white } from '../styles/colors';\nimport { withTheme } from '../core/theming';\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Mode of the button. You can change the mode to adjust the styling to give it desired emphasis.\n   * - `text` - flat button without background or outline (low emphasis)\n   * - `outlined` - button with an outline (medium emphasis)\n   * - `contained` - button with a background color and elevation shadow (high emphasis)\n   */\n  mode?: 'text' | 'outlined' | 'contained';\n  /**\n   * Whether the color is a dark color. A dark button will render light text and vice-versa. Only applicable for `contained` mode.\n   */\n  dark?: boolean;\n  /**\n   * Use a compact look, useful for `text` buttons in a row.\n   */\n  compact?: boolean;\n  /**\n   * Custom text color for flat button, or background color for contained button.\n   */\n  color?: string;\n  /**\n   * Whether to show a loading indicator.\n   */\n  loading?: boolean;\n  /**\n   * Icon to display for the `Button`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Label text of the button.\n   */\n  children: React.ReactNode;\n  /**\n   * Make the label text uppercased. Note that this won't work if you pass React elements as children.\n   */\n  uppercase?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility hint for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityHint?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Style of button's inner content.\n   * Use this prop to apply custom height and width and to set the icon on the right with `flexDirection: 'row-reverse'`.\n   */\n  contentStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style for the button text.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * A button is component that the user can press to trigger an action.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/button-1.png\" />\n *     <figcaption>Text button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-2.png\" />\n *     <figcaption>Outlined button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-3.png\" />\n *     <figcaption>Contained button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Button } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Button icon=\"camera\" mode=\"contained\" onPress={() => console.log('Pressed')}>\n *     Press me\n *   </Button>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Button = ({\n  disabled,\n  compact,\n  mode = 'text',\n  dark,\n  loading,\n  icon,\n  color: buttonColor,\n  children,\n  uppercase = true,\n  accessibilityLabel,\n  accessibilityHint,\n  onPress,\n  onLongPress,\n  style,\n  theme,\n  contentStyle,\n  labelStyle,\n  testID,\n  accessible,\n  ...rest\n}: Props) => {\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(mode === 'contained' ? 2 : 0)\n  );\n  React.useEffect(() => {\n    elevation.setValue(mode === 'contained' ? 2 : 0);\n  }, [mode, elevation]);\n\n  const handlePressIn = () => {\n    if (mode === 'contained') {\n      const { scale } = theme.animation;\n      Animated.timing(elevation, {\n        toValue: 8,\n        duration: 200 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  };\n\n  const handlePressOut = () => {\n    if (mode === 'contained') {\n      const { scale } = theme.animation;\n      Animated.timing(elevation, {\n        toValue: 2,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  };\n\n  const { colors, roundness } = theme;\n  const font = theme.fonts.medium;\n\n  let backgroundColor: string,\n    borderColor: string,\n    textColor: string,\n    borderWidth: number;\n\n  if (mode === 'contained') {\n    if (disabled) {\n      backgroundColor = color(theme.dark ? white : black)\n        .alpha(0.12)\n        .rgb()\n        .string();\n    } else if (buttonColor) {\n      backgroundColor = buttonColor;\n    } else {\n      backgroundColor = colors.primary;\n    }\n  } else {\n    backgroundColor = 'transparent';\n  }\n\n  if (mode === 'outlined') {\n    borderColor = color(theme.dark ? white : black)\n      .alpha(0.29)\n      .rgb()\n      .string();\n    borderWidth = StyleSheet.hairlineWidth;\n  } else {\n    borderColor = 'transparent';\n    borderWidth = 0;\n  }\n\n  if (disabled) {\n    textColor = color(theme.dark ? white : black)\n      .alpha(0.32)\n      .rgb()\n      .string();\n  } else if (mode === 'contained') {\n    let isDark;\n\n    if (typeof dark === 'boolean') {\n      isDark = dark;\n    } else {\n      isDark =\n        backgroundColor === 'transparent'\n          ? false\n          : !color(backgroundColor).isLight();\n    }\n\n    textColor = isDark ? white : black;\n  } else if (buttonColor) {\n    textColor = buttonColor;\n  } else {\n    textColor = colors.primary;\n  }\n\n  const rippleColor = color(textColor).alpha(0.32).rgb().string();\n  const buttonStyle = {\n    backgroundColor,\n    borderColor,\n    borderWidth,\n    borderRadius: roundness,\n  };\n  const touchableStyle = {\n    borderRadius: style\n      ? ((StyleSheet.flatten(style) || {}) as ViewStyle).borderRadius ||\n        roundness\n      : roundness,\n  };\n\n  const { color: customLabelColor, fontSize: customLabelSize } =\n    StyleSheet.flatten(labelStyle) || {};\n\n  const textStyle = { color: textColor, ...font };\n  const elevationRes = disabled || mode !== 'contained' ? 0 : elevation;\n  const iconStyle =\n    StyleSheet.flatten(contentStyle)?.flexDirection === 'row-reverse'\n      ? styles.iconReverse\n      : styles.icon;\n\n  return (\n    <Surface\n      {...rest}\n      style={[\n        styles.button,\n        compact && styles.compact,\n        { elevation: elevationRes } as ViewStyle,\n        buttonStyle,\n        style,\n      ]}\n    >\n      <TouchableRipple\n        borderless\n        delayPressIn={0}\n        onPress={onPress}\n        onLongPress={onLongPress}\n        onPressIn={handlePressIn}\n        onPressOut={handlePressOut}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityHint={accessibilityHint}\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={{ disabled }}\n        accessible={accessible}\n        disabled={disabled}\n        rippleColor={rippleColor}\n        style={touchableStyle}\n        testID={testID}\n      >\n        <View style={[styles.content, contentStyle]}>\n          {icon && loading !== true ? (\n            <View style={iconStyle}>\n              <Icon\n                source={icon}\n                size={customLabelSize ?? 16}\n                color={\n                  typeof customLabelColor === 'string'\n                    ? customLabelColor\n                    : textColor\n                }\n              />\n            </View>\n          ) : null}\n          {loading ? (\n            <ActivityIndicator\n              size={customLabelSize ?? 16}\n              color={\n                typeof customLabelColor === 'string'\n                  ? customLabelColor\n                  : textColor\n              }\n              style={iconStyle}\n            />\n          ) : null}\n          <Text\n            selectable={false}\n            numberOfLines={1}\n            style={[\n              styles.label,\n              compact && styles.compactLabel,\n              uppercase && styles.uppercaseLabel,\n              textStyle,\n              font,\n              labelStyle,\n            ]}\n          >\n            {children}\n          </Text>\n        </View>\n      </TouchableRipple>\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    minWidth: 64,\n    borderStyle: 'solid',\n  },\n  compact: {\n    minWidth: 'auto',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  icon: {\n    marginLeft: 12,\n    marginRight: -4,\n  },\n  iconReverse: {\n    marginRight: 12,\n    marginLeft: -4,\n  },\n  label: {\n    textAlign: 'center',\n    letterSpacing: 1,\n    marginVertical: 9,\n    marginHorizontal: 16,\n  },\n  compactLabel: {\n    marginHorizontal: 8,\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase',\n  },\n});\n\nexport default withTheme(Button);\n"]},"metadata":{},"sourceType":"module"}