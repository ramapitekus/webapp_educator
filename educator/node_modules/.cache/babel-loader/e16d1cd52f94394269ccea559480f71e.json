{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { TranscriberRecognizer } from \"../../common.speech/Exports\";\nimport { marshalPromiseToCallbacks } from \"../../common/Exports\";\nimport { Contracts } from \"../Contracts\";\nimport { PropertyCollection, PropertyId } from \"../Exports\";\nexport class ConversationTranscriber {\n  /**\n   * ConversationTranscriber constructor.\n   * @constructor\n   * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\n   */\n  constructor(audioConfig) {\n    this.privAudioConfig = audioConfig;\n    this.privProperties = new PropertyCollection();\n    this.privRecognizer = undefined;\n    this.privDisposedRecognizer = false;\n  }\n  /**\n   * @param {Conversation} converation - conversation to be recognized\n   */\n\n\n  joinConversationAsync(conversation, cb, err) {\n    const conversationImpl = conversation;\n    Contracts.throwIfNullOrUndefined(conversationImpl, \"Conversation\"); // ref the conversation object\n    // create recognizer and subscribe to recognizer events\n\n    this.privRecognizer = new TranscriberRecognizer(conversation.config, this.privAudioConfig);\n    Contracts.throwIfNullOrUndefined(this.privRecognizer, \"Recognizer\");\n    this.privRecognizer.connectCallbacks(this);\n    marshalPromiseToCallbacks(conversationImpl.connectTranscriberRecognizer(this.privRecognizer), cb, err);\n  }\n  /**\n   * Gets the authorization token used to communicate with the service.\n   * @member ConversationTranscriber.prototype.authorizationToken\n   * @function\n   * @public\n   * @returns {string} Authorization token.\n   */\n\n\n  get authorizationToken() {\n    return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n  }\n  /**\n   * Gets/Sets the authorization token used to communicate with the service.\n   * @member ConversationTranscriber.prototype.authorizationToken\n   * @function\n   * @public\n   * @param {string} token - Authorization token.\n   */\n\n\n  set authorizationToken(token) {\n    Contracts.throwIfNullOrWhitespace(token, \"token\");\n    this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\n  }\n  /**\n   * Gets the spoken language of recognition.\n   * @member ConversationTranscriber.prototype.speechRecognitionLanguage\n   * @function\n   * @public\n   * @returns {string} The spoken language of recognition.\n   */\n\n\n  get speechRecognitionLanguage() {\n    Contracts.throwIfDisposed(this.privDisposedRecognizer);\n    return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\n  }\n  /**\n   * The collection of properties and their values defined for this ConversationTranscriber.\n   * @member ConversationTranscriber.prototype.properties\n   * @function\n   * @public\n   * @returns {PropertyCollection} The collection of properties and their values defined for this ConversationTranscriber.\n   */\n\n\n  get properties() {\n    return this.privProperties;\n  }\n  /**\n   * Starts conversation transcription, until stopTranscribingAsync() is called.\n   * User must subscribe to events to receive transcription results.\n   * @member ConversationTranscriber.prototype.startTranscribingAsync\n   * @function\n   * @public\n   * @param cb - Callback invoked once the transcription has started.\n   * @param err - Callback invoked in case of an error.\n   */\n\n\n  startTranscribingAsync(cb, err) {\n    this.privRecognizer.startContinuousRecognitionAsync(cb, err);\n  }\n  /**\n   * Starts conversation transcription, until stopTranscribingAsync() is called.\n   * User must subscribe to events to receive transcription results.\n   * @member ConversationTranscriber.prototype.stopTranscribingAsync\n   * @function\n   * @public\n   * @param cb - Callback invoked once the transcription has started.\n   * @param err - Callback invoked in case of an error.\n   */\n\n\n  stopTranscribingAsync(cb, err) {\n    this.privRecognizer.stopContinuousRecognitionAsync(cb, err);\n  }\n  /**\n   * Leave the current conversation. After this is called, you will no longer receive any events.\n   */\n\n\n  leaveConversationAsync(cb, err) {\n    this.privRecognizer.disconnectCallbacks();\n    marshalPromiseToCallbacks((() => __awaiter(this, void 0, void 0, function* () {\n      return;\n    }))(), cb, err);\n  }\n  /**\n   * closes all external resources held by an instance of this class.\n   * @member ConversationTranscriber.prototype.close\n   * @function\n   * @public\n   */\n\n\n  close(cb, errorCb) {\n    Contracts.throwIfDisposed(this.privDisposedRecognizer);\n    marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\n  }\n  /**\n   * Disposes any resources held by the object.\n   * @member ConversationTranscriber.prototype.dispose\n   * @function\n   * @public\n   * @param {boolean} disposing - true if disposing the object.\n   */\n\n\n  dispose(disposing) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.privDisposedRecognizer) {\n        return;\n      }\n\n      if (!!this.privRecognizer) {\n        yield this.privRecognizer.close();\n        this.privRecognizer = undefined;\n      }\n\n      if (disposing) {\n        this.privDisposedRecognizer = true;\n      }\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["TranscriberRecognizer","marshalPromiseToCallbacks","Contracts","PropertyCollection","PropertyId","ConversationTranscriber","constructor","audioConfig","privAudioConfig","privProperties","privRecognizer","undefined","privDisposedRecognizer","joinConversationAsync","conversation","cb","err","conversationImpl","throwIfNullOrUndefined","config","connectCallbacks","connectTranscriberRecognizer","authorizationToken","properties","getProperty","SpeechServiceAuthorization_Token","token","throwIfNullOrWhitespace","setProperty","speechRecognitionLanguage","throwIfDisposed","SpeechServiceConnection_RecoLanguage","startTranscribingAsync","startContinuousRecognitionAsync","stopTranscribingAsync","stopContinuousRecognitionAsync","leaveConversationAsync","disconnectCallbacks","__awaiter","close","errorCb","dispose","disposing"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\node_modules\\microsoft-cognitiveservices-speech-sdk\\distrib\\es2015\\src\\sdk\\Transcription\\src\\sdk\\Transcription\\ConversationTranscriber.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { TranscriberRecognizer } from \"../../common.speech/Exports\";\r\nimport { marshalPromiseToCallbacks } from \"../../common/Exports\";\r\nimport { Contracts } from \"../Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    CancellationEventArgs,\r\n    ConversationTranscriptionEventArgs,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SessionEventArgs,\r\n} from \"../Exports\";\r\nimport {\r\n    ConversationHandler,\r\n    ConversationImpl,\r\n    ConversationTranscriptionHandler,\r\n} from \"./Exports\";\r\nimport { Callback, IConversation } from \"./IConversation\";\r\n\r\nexport class ConversationTranscriber implements ConversationTranscriptionHandler {\r\n    private privDisposedRecognizer: boolean;\r\n    private privRecognizer: TranscriberRecognizer;\r\n    private privProperties: PropertyCollection;\r\n    protected privAudioConfig: AudioConfig;\r\n\r\n    /**\r\n     * ConversationTranscriber constructor.\r\n     * @constructor\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public constructor(audioConfig?: AudioConfig) {\r\n        this.privAudioConfig = audioConfig;\r\n        this.privProperties = new PropertyCollection();\r\n        this.privRecognizer = undefined;\r\n        this.privDisposedRecognizer = false;\r\n    }\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during the conversation.\r\n     * @member ConversationTranscriber.prototype.conversationCanceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public conversationCanceled: (sender: ConversationHandler, event: CancellationEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during transcription.\r\n     * @member ConversationTranscriber.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: ConversationHandler, event: CancellationEventArgs) => void;\r\n\r\n    /**\r\n     * @param {Conversation} converation - conversation to be recognized\r\n     */\r\n    public joinConversationAsync(conversation: IConversation, cb?: Callback, err?: Callback): void {\r\n        const conversationImpl = conversation as ConversationImpl;\r\n        Contracts.throwIfNullOrUndefined(conversationImpl, \"Conversation\");\r\n\r\n        // ref the conversation object\r\n        // create recognizer and subscribe to recognizer events\r\n        this.privRecognizer = new TranscriberRecognizer(conversation.config, this.privAudioConfig);\r\n        Contracts.throwIfNullOrUndefined(this.privRecognizer, \"Recognizer\");\r\n        this.privRecognizer.connectCallbacks(this);\r\n\r\n        marshalPromiseToCallbacks(conversationImpl.connectTranscriberRecognizer(this.privRecognizer), cb, err);\r\n    }\r\n\r\n     /**\r\n      * The event recognized signals that a final conversation transcription result is received.\r\n      * @member ConversationTranscriber.prototype.transcribed\r\n      * @function\r\n      * @public\r\n      */\r\n    public transcribed: (sender: ConversationTranscriptionHandler, event: ConversationTranscriptionEventArgs) => void;\r\n\r\n     /**\r\n      * The event recognizing signals that an intermediate conversation transcription result is received.\r\n      * @member ConversationTranscriber.prototype.transcribing\r\n      * @function\r\n      * @public\r\n      */\r\n    public transcribing: (sender: ConversationTranscriptionHandler, event: ConversationTranscriptionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for session started events.\r\n     * @member ConversationTranscriber.prototype.sessionStarted\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStarted: (sender: ConversationHandler, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for session stopped events.\r\n     * @member ConversationTranscriber.prototype.sessionStopped\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStopped: (sender: ConversationHandler, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for conversation started events.\r\n     * @member ConversationTranscriber.prototype.conversationStarted\r\n     * @function\r\n     * @public\r\n     */\r\n    public conversationStarted: (sender: ConversationHandler, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for conversation stopped events.\r\n     * @member ConversationTranscriber.prototype.conversationStopped\r\n     * @function\r\n     * @public\r\n     */\r\n    public conversationStopped: (sender: ConversationHandler, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member ConversationTranscriber.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member ConversationTranscriber.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * Gets the spoken language of recognition.\r\n     * @member ConversationTranscriber.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} The spoken language of recognition.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this ConversationTranscriber.\r\n     * @member ConversationTranscriber.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this ConversationTranscriber.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Starts conversation transcription, until stopTranscribingAsync() is called.\r\n     * User must subscribe to events to receive transcription results.\r\n     * @member ConversationTranscriber.prototype.startTranscribingAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the transcription has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startTranscribingAsync(cb?: Callback, err?: Callback): void {\r\n        this.privRecognizer.startContinuousRecognitionAsync(cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts conversation transcription, until stopTranscribingAsync() is called.\r\n     * User must subscribe to events to receive transcription results.\r\n     * @member ConversationTranscriber.prototype.stopTranscribingAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the transcription has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopTranscribingAsync(cb?: Callback, err?: Callback): void {\r\n        this.privRecognizer.stopContinuousRecognitionAsync(cb, err);\r\n    }\r\n\r\n    /**\r\n     * Leave the current conversation. After this is called, you will no longer receive any events.\r\n     */\r\n    public leaveConversationAsync(cb?: Callback, err?: Callback): void {\r\n        this.privRecognizer.disconnectCallbacks();\r\n        marshalPromiseToCallbacks((async (): Promise<void> => { return; })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member ConversationTranscriber.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * Disposes any resources held by the object.\r\n     * @member ConversationTranscriber.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - true if disposing the object.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedRecognizer) {\r\n            return;\r\n        }\r\n        if (!!this.privRecognizer) {\r\n            await this.privRecognizer.close();\r\n            this.privRecognizer = undefined;\r\n        }\r\n        if (disposing) {\r\n            this.privDisposedRecognizer = true;\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}