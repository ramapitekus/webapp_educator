{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport { Animated, Easing, Platform, StyleSheet, View } from 'react-native';\nimport { withTheme } from '../core/theming';\nconst DURATION = 2400;\n/**\n * Activity indicator is used to present progress of some activity in the app.\n * It can be used as a drop-in for the ActivityIndicator shipped with React Native.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/activity-indicator.gif\" style=\"width: 100px;\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ActivityIndicator, Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <ActivityIndicator animating={true} color={Colors.red800} />\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nconst ActivityIndicator = _ref => {\n  let {\n    animating = true,\n    color: indicatorColor,\n    hidesWhenStopped = true,\n    size: indicatorSize = 'small',\n    style,\n    theme,\n    ...rest\n  } = _ref;\n  const {\n    current: timer\n  } = React.useRef(new Animated.Value(0));\n  const {\n    current: fade\n  } = React.useRef(new Animated.Value(!animating && hidesWhenStopped ? 0 : 1));\n  const rotation = React.useRef(undefined);\n  const {\n    animation: {\n      scale\n    }\n  } = theme;\n  const startRotation = React.useCallback(() => {\n    // Show indicator\n    Animated.timing(fade, {\n      duration: 200 * scale,\n      toValue: 1,\n      isInteraction: false,\n      useNativeDriver: true\n    }).start(); // Circular animation in loop\n\n    if (rotation.current) {\n      timer.setValue(0); // $FlowFixMe\n\n      Animated.loop(rotation.current).start();\n    }\n  }, [scale, fade, timer]);\n\n  const stopRotation = () => {\n    if (rotation.current) {\n      rotation.current.stop();\n    }\n  };\n\n  React.useEffect(() => {\n    if (rotation.current === undefined) {\n      // Circular animation in loop\n      rotation.current = Animated.timing(timer, {\n        duration: DURATION,\n        easing: Easing.linear,\n        // Animated.loop does not work if useNativeDriver is true on web\n        useNativeDriver: Platform.OS !== 'web',\n        toValue: 1,\n        isInteraction: false\n      });\n    }\n\n    if (animating) {\n      startRotation();\n    } else if (hidesWhenStopped) {\n      // Hide indicator first and then stop rotation\n      Animated.timing(fade, {\n        duration: 200 * scale,\n        toValue: 0,\n        useNativeDriver: true,\n        isInteraction: false\n      }).start(stopRotation);\n    } else {\n      stopRotation();\n    }\n  }, [animating, fade, hidesWhenStopped, startRotation, scale, timer]);\n  const color = indicatorColor || theme.colors.primary;\n  const size = typeof indicatorSize === 'string' ? indicatorSize === 'small' ? 24 : 48 : indicatorSize ? indicatorSize : 24;\n  const frames = 60 * DURATION / 1000;\n  const easing = Easing.bezier(0.4, 0.0, 0.7, 1.0);\n  const containerStyle = {\n    width: size,\n    height: size / 2,\n    overflow: 'hidden'\n  };\n  return /*#__PURE__*/React.createElement(View, _extends({\n    style: [styles.container, style]\n  }, rest, {\n    accessible: true,\n    accessibilityRole: \"progressbar\",\n    accessibilityState: {\n      busy: animating\n    }\n  }), /*#__PURE__*/React.createElement(Animated.View, {\n    style: [{\n      width: size,\n      height: size,\n      opacity: fade\n    }],\n    collapsable: false\n  }, [0, 1].map(index => {\n    // Thanks to https://github.com/n4kz/react-native-indicators for the great work\n    const inputRange = Array.from(new Array(frames), (_, frameIndex) => frameIndex / (frames - 1));\n    const outputRange = Array.from(new Array(frames), (_, frameIndex) => {\n      let progress = 2 * frameIndex / (frames - 1);\n      const rotation = index ? +(360 - 15) : -(180 - 15);\n\n      if (progress > 1.0) {\n        progress = 2.0 - progress;\n      }\n\n      const direction = index ? -1 : +1;\n      return `${direction * (180 - 30) * easing(progress) + rotation}deg`;\n    });\n    const layerStyle = {\n      width: size,\n      height: size,\n      transform: [{\n        rotate: timer.interpolate({\n          inputRange: [0, 1],\n          outputRange: [`${0 + 30 + 15}deg`, `${2 * 360 + 30 + 15}deg`]\n        })\n      }]\n    };\n    const viewportStyle = {\n      width: size,\n      height: size,\n      transform: [{\n        translateY: index ? -size / 2 : 0\n      }, {\n        rotate: timer.interpolate({\n          inputRange,\n          outputRange\n        })\n      }]\n    };\n    const offsetStyle = index ? {\n      top: size / 2\n    } : null;\n    const lineStyle = {\n      width: size,\n      height: size,\n      borderColor: color,\n      borderWidth: size / 10,\n      borderRadius: size / 2\n    };\n    return /*#__PURE__*/React.createElement(Animated.View, {\n      key: index,\n      style: [styles.layer]\n    }, /*#__PURE__*/React.createElement(Animated.View, {\n      style: layerStyle\n    }, /*#__PURE__*/React.createElement(Animated.View, {\n      style: [containerStyle, offsetStyle],\n      collapsable: false\n    }, /*#__PURE__*/React.createElement(Animated.View, {\n      style: viewportStyle\n    }, /*#__PURE__*/React.createElement(Animated.View, {\n      style: containerStyle,\n      collapsable: false\n    }, /*#__PURE__*/React.createElement(Animated.View, {\n      style: lineStyle\n    }))))));\n  })));\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  layer: { ...StyleSheet.absoluteFillObject,\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\nexport default withTheme(ActivityIndicator);","map":{"version":3,"mappings":"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","names":["React","Animated","Easing","Platform","StyleSheet","View","withTheme","DURATION","ActivityIndicator","animating","color","indicatorColor","hidesWhenStopped","size","indicatorSize","style","theme","rest","current","timer","useRef","Value","fade","rotation","undefined","animation","scale","startRotation","useCallback","timing","duration","toValue","isInteraction","useNativeDriver","start","setValue","loop","stopRotation","stop","useEffect","easing","linear","OS","colors","primary","frames","bezier","containerStyle","width","height","overflow","styles","container","accessible","accessibilityRole","accessibilityState","busy","opacity","collapsable","map","index","inputRange","Array","from","_","frameIndex","outputRange","progress","direction","layerStyle","transform","rotate","interpolate","viewportStyle","translateY","offsetStyle","top","lineStyle","borderColor","borderWidth","borderRadius","key","layer","create","justifyContent","alignItems","absoluteFillObject"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\node_modules\\react-native-paper\\lib\\module\\components\\ActivityIndicator.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  Easing,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport { withTheme } from '../core/theming';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Whether to show the indicator or hide it.\n   */\n  animating?: boolean;\n  /**\n   * The color of the spinner.\n   */\n  color?: string;\n  /**\n   * Size of the indicator.\n   */\n  size?: 'small' | 'large' | number;\n  /**\n   * Whether the indicator should hide when not animating.\n   */\n  hidesWhenStopped?: boolean;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\nconst DURATION = 2400;\n\n/**\n * Activity indicator is used to present progress of some activity in the app.\n * It can be used as a drop-in for the ActivityIndicator shipped with React Native.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/activity-indicator.gif\" style=\"width: 100px;\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ActivityIndicator, Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <ActivityIndicator animating={true} color={Colors.red800} />\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst ActivityIndicator = ({\n  animating = true,\n  color: indicatorColor,\n  hidesWhenStopped = true,\n  size: indicatorSize = 'small',\n  style,\n  theme,\n  ...rest\n}: Props) => {\n  const { current: timer } = React.useRef<Animated.Value>(\n    new Animated.Value(0)\n  );\n  const { current: fade } = React.useRef<Animated.Value>(\n    new Animated.Value(!animating && hidesWhenStopped ? 0 : 1)\n  );\n\n  const rotation = React.useRef<Animated.CompositeAnimation | undefined>(\n    undefined\n  );\n\n  const {\n    animation: { scale },\n  } = theme;\n\n  const startRotation = React.useCallback(() => {\n    // Show indicator\n    Animated.timing(fade, {\n      duration: 200 * scale,\n      toValue: 1,\n      isInteraction: false,\n      useNativeDriver: true,\n    }).start();\n\n    // Circular animation in loop\n    if (rotation.current) {\n      timer.setValue(0);\n      // $FlowFixMe\n      Animated.loop(rotation.current).start();\n    }\n  }, [scale, fade, timer]);\n\n  const stopRotation = () => {\n    if (rotation.current) {\n      rotation.current.stop();\n    }\n  };\n\n  React.useEffect(() => {\n    if (rotation.current === undefined) {\n      // Circular animation in loop\n      rotation.current = Animated.timing(timer, {\n        duration: DURATION,\n        easing: Easing.linear,\n        // Animated.loop does not work if useNativeDriver is true on web\n        useNativeDriver: Platform.OS !== 'web',\n        toValue: 1,\n        isInteraction: false,\n      });\n    }\n\n    if (animating) {\n      startRotation();\n    } else if (hidesWhenStopped) {\n      // Hide indicator first and then stop rotation\n      Animated.timing(fade, {\n        duration: 200 * scale,\n        toValue: 0,\n        useNativeDriver: true,\n        isInteraction: false,\n      }).start(stopRotation);\n    } else {\n      stopRotation();\n    }\n  }, [animating, fade, hidesWhenStopped, startRotation, scale, timer]);\n\n  const color = indicatorColor || theme.colors.primary;\n  const size =\n    typeof indicatorSize === 'string'\n      ? indicatorSize === 'small'\n        ? 24\n        : 48\n      : indicatorSize\n      ? indicatorSize\n      : 24;\n\n  const frames = (60 * DURATION) / 1000;\n  const easing = Easing.bezier(0.4, 0.0, 0.7, 1.0);\n  const containerStyle = {\n    width: size,\n    height: size / 2,\n    overflow: 'hidden' as const,\n  };\n\n  return (\n    <View\n      style={[styles.container, style]}\n      {...rest}\n      accessible\n      accessibilityRole=\"progressbar\"\n      accessibilityState={{ busy: animating }}\n    >\n      <Animated.View\n        style={[{ width: size, height: size, opacity: fade }]}\n        collapsable={false}\n      >\n        {[0, 1].map((index) => {\n          // Thanks to https://github.com/n4kz/react-native-indicators for the great work\n          const inputRange = Array.from(\n            new Array(frames),\n            (_, frameIndex) => frameIndex / (frames - 1)\n          );\n          const outputRange = Array.from(new Array(frames), (_, frameIndex) => {\n            let progress = (2 * frameIndex) / (frames - 1);\n            const rotation = index ? +(360 - 15) : -(180 - 15);\n\n            if (progress > 1.0) {\n              progress = 2.0 - progress;\n            }\n\n            const direction = index ? -1 : +1;\n\n            return `${direction * (180 - 30) * easing(progress) + rotation}deg`;\n          });\n\n          const layerStyle = {\n            width: size,\n            height: size,\n            transform: [\n              {\n                rotate: timer.interpolate({\n                  inputRange: [0, 1],\n                  outputRange: [`${0 + 30 + 15}deg`, `${2 * 360 + 30 + 15}deg`],\n                }),\n              },\n            ],\n          };\n\n          const viewportStyle = {\n            width: size,\n            height: size,\n            transform: [\n              {\n                translateY: index ? -size / 2 : 0,\n              },\n              {\n                rotate: timer.interpolate({ inputRange, outputRange }),\n              },\n            ],\n          };\n\n          const offsetStyle = index ? { top: size / 2 } : null;\n\n          const lineStyle = {\n            width: size,\n            height: size,\n            borderColor: color,\n            borderWidth: size / 10,\n            borderRadius: size / 2,\n          };\n\n          return (\n            <Animated.View key={index} style={[styles.layer]}>\n              <Animated.View style={layerStyle}>\n                <Animated.View\n                  style={[containerStyle, offsetStyle]}\n                  collapsable={false}\n                >\n                  <Animated.View style={viewportStyle}>\n                    <Animated.View style={containerStyle} collapsable={false}>\n                      <Animated.View style={lineStyle} />\n                    </Animated.View>\n                  </Animated.View>\n                </Animated.View>\n              </Animated.View>\n            </Animated.View>\n          );\n        })}\n      </Animated.View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n\n  layer: {\n    ...StyleSheet.absoluteFillObject,\n\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default withTheme(ActivityIndicator);\n"]},"metadata":{},"sourceType":"module"}