{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ObjectDisposedError } from \"./Error\";\nimport { createNoDashGuid } from \"./Guid\";\nexport class EventSource {\n  constructor(metadata) {\n    this.privEventListeners = {};\n    this.privIsDisposed = false;\n\n    this.onEvent = event => {\n      if (this.isDisposed()) {\n        throw new ObjectDisposedError(\"EventSource\");\n      }\n\n      if (this.metadata) {\n        for (const paramName in this.metadata) {\n          if (paramName) {\n            if (event.metadata) {\n              if (!event.metadata[paramName]) {\n                event.metadata[paramName] = this.metadata[paramName];\n              }\n            }\n          }\n        }\n      }\n\n      for (const eventId in this.privEventListeners) {\n        if (eventId && this.privEventListeners[eventId]) {\n          this.privEventListeners[eventId](event);\n        }\n      }\n    };\n\n    this.attach = onEventCallback => {\n      const id = createNoDashGuid();\n      this.privEventListeners[id] = onEventCallback;\n      return {\n        detach: () => {\n          delete this.privEventListeners[id];\n          return Promise.resolve();\n        }\n      };\n    };\n\n    this.attachListener = listener => {\n      return this.attach(listener.onEvent);\n    };\n\n    this.isDisposed = () => {\n      return this.privIsDisposed;\n    };\n\n    this.dispose = () => {\n      this.privEventListeners = null;\n      this.privIsDisposed = true;\n    };\n\n    this.privMetadata = metadata;\n  }\n\n  get metadata() {\n    return this.privMetadata;\n  }\n\n}","map":{"version":3,"mappings":"AAAA;AACA;AAEA,SAASA,mBAAT,QAAoC,SAApC;AACA,SAASC,gBAAT,QAAiC,QAAjC;AAMA,OAAM,MAAOC,WAAP,CAAkB;AAKpBC,cAAYC,QAAZ,EAAgD;AAJxC,8BAAiE,EAAjE;AAEA,0BAA0B,KAA1B;;AAMD,mBAAWC,KAAD,IAAwB;AACrC,UAAI,KAAKC,UAAL,EAAJ,EAAuB;AACnB,cAAO,IAAIN,mBAAJ,CAAwB,aAAxB,CAAP;AACH;;AAED,UAAI,KAAKI,QAAT,EAAmB;AACf,aAAK,MAAMG,SAAX,IAAwB,KAAKH,QAA7B,EAAuC;AACnC,cAAIG,SAAJ,EAAe;AACX,gBAAIF,KAAK,CAACD,QAAV,EAAoB;AAChB,kBAAI,CAACC,KAAK,CAACD,QAAN,CAAeG,SAAf,CAAL,EAAgC;AAC5BF,qBAAK,CAACD,QAAN,CAAeG,SAAf,IAA4B,KAAKH,QAAL,CAAcG,SAAd,CAA5B;AACH;AACJ;AACJ;AACJ;AACJ;;AAED,WAAK,MAAMC,OAAX,IAAsB,KAAKC,kBAA3B,EAA+C;AAC3C,YAAID,OAAO,IAAI,KAAKC,kBAAL,CAAwBD,OAAxB,CAAf,EAAiD;AAC7C,eAAKC,kBAAL,CAAwBD,OAAxB,EAAiCH,KAAjC;AACH;AACJ;AACJ,KAtBM;;AAwBA,kBAAUK,eAAD,IAA0D;AACtE,YAAMC,EAAE,GAAGV,gBAAgB,EAA3B;AACA,WAAKQ,kBAAL,CAAwBE,EAAxB,IAA8BD,eAA9B;AACA,aAAO;AACHE,cAAM,EAAE,MAAK;AACT,iBAAO,KAAKH,kBAAL,CAAwBE,EAAxB,CAAP;AACA,iBAAOE,OAAO,CAACC,OAAR,EAAP;AACH;AAJE,OAAP;AAMH,KATM;;AAWA,0BAAkBC,QAAD,IAAkD;AACtE,aAAO,KAAKC,MAAL,CAAYD,QAAQ,CAACE,OAArB,CAAP;AACH,KAFM;;AAIA,sBAAa,MAAc;AAC9B,aAAO,KAAKC,cAAZ;AACH,KAFM;;AAIA,mBAAU,MAAW;AACxB,WAAKT,kBAAL,GAA0B,IAA1B;AACA,WAAKS,cAAL,GAAsB,IAAtB;AACH,KAHM;;AA9CH,SAAKC,YAAL,GAAoBf,QAApB;AACH;;AAkDkB,MAARA,QAAQ;AACf,WAAO,KAAKe,YAAZ;AACH;;AA3DmB","names":["ObjectDisposedError","createNoDashGuid","EventSource","constructor","metadata","event","isDisposed","paramName","eventId","privEventListeners","onEventCallback","id","detach","Promise","resolve","listener","attach","onEvent","privIsDisposed","privMetadata"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\node_modules\\microsoft-cognitiveservices-speech-sdk\\distrib\\es2015\\src\\common\\src\\common\\EventSource.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ObjectDisposedError } from \"./Error\";\r\nimport { createNoDashGuid } from \"./Guid\";\r\nimport { IDetachable } from \"./IDetachable\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\nimport { IEventListener, IEventSource } from \"./IEventSource\";\r\nimport { PlatformEvent } from \"./PlatformEvent\";\r\n\r\nexport class EventSource<TEvent extends PlatformEvent> implements IEventSource<TEvent> {\r\n    private privEventListeners: IStringDictionary<(event: TEvent) => void> = {};\r\n    private privMetadata: IStringDictionary<string>;\r\n    private privIsDisposed: boolean = false;\r\n\r\n    constructor(metadata?: IStringDictionary<string>) {\r\n        this.privMetadata = metadata;\r\n    }\r\n\r\n    public onEvent = (event: TEvent): void => {\r\n        if (this.isDisposed()) {\r\n            throw (new ObjectDisposedError(\"EventSource\"));\r\n        }\r\n\r\n        if (this.metadata) {\r\n            for (const paramName in this.metadata) {\r\n                if (paramName) {\r\n                    if (event.metadata) {\r\n                        if (!event.metadata[paramName]) {\r\n                            event.metadata[paramName] = this.metadata[paramName];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        for (const eventId in this.privEventListeners) {\r\n            if (eventId && this.privEventListeners[eventId]) {\r\n                this.privEventListeners[eventId](event);\r\n            }\r\n        }\r\n    }\r\n\r\n    public attach = (onEventCallback: (event: TEvent) => void): IDetachable => {\r\n        const id = createNoDashGuid();\r\n        this.privEventListeners[id] = onEventCallback;\r\n        return {\r\n            detach: () => {\r\n                delete this.privEventListeners[id];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public attachListener = (listener: IEventListener<TEvent>): IDetachable => {\r\n        return this.attach(listener.onEvent);\r\n    }\r\n\r\n    public isDisposed = (): boolean => {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose = (): void => {\r\n        this.privEventListeners = null;\r\n        this.privIsDisposed = true;\r\n    }\r\n\r\n    public get metadata(): IStringDictionary<string> {\r\n        return this.privMetadata;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}