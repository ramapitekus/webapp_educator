{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n// Multi-device Conversation is a Preview feature.\nimport { PropertyCollection } from \"../Exports\";\nexport class User {\n  constructor(userId) {\n    this.privUserId = userId;\n  }\n\n  get userId() {\n    return this.privUserId;\n  }\n\n} // tslint:disable-next-line: max-classes-per-file\n\nexport class Participant {\n  constructor(id, avatar, displayName, isHost, isMuted, isUsingTts, preferredLanguage, voice) {\n    this.privId = id;\n    this.privAvatar = avatar;\n    this.privDisplayName = displayName;\n    this.privIsHost = isHost;\n    this.privIsMuted = isMuted;\n    this.privIsUsingTts = isUsingTts;\n    this.privPreferredLanguage = preferredLanguage;\n    this.privVoice = voice;\n    this.privProperties = new PropertyCollection();\n  }\n\n  static From(id, language, voice) {\n    return new Participant(id, \"\", id, false, false, false, language, voice);\n  }\n\n  get avatar() {\n    return this.privAvatar;\n  }\n\n  get displayName() {\n    return this.privDisplayName;\n  }\n\n  get id() {\n    return this.privId;\n  }\n\n  get preferredLanguage() {\n    return this.privPreferredLanguage;\n  }\n\n  get isHost() {\n    return this.privIsHost;\n  }\n\n  get isMuted() {\n    return this.privIsMuted;\n  }\n\n  get isUsingTts() {\n    return this.privIsUsingTts;\n  }\n\n  get voice() {\n    return this.privVoice;\n  }\n\n  get properties() {\n    return this.privProperties;\n  }\n\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA;AAEA,SAASA,kBAAT,QAAmC,YAAnC;AAWA,OAAM,MAAOC,IAAP,CAAW;AAGbC,cAAYC,MAAZ,EAA0B;AACtB,SAAKC,UAAL,GAAkBD,MAAlB;AACH;;AAEgB,MAANA,MAAM;AACb,WAAO,KAAKC,UAAZ;AACH;;AATY,C,CAiDjB;;AACA,OAAM,MAAOC,WAAP,CAAkB;AAWpBH,cAAYI,EAAZ,EAAwBC,MAAxB,EAAwCC,WAAxC,EAA6DC,MAA7D,EAA8EC,OAA9E,EAAgGC,UAAhG,EAAqHC,iBAArH,EAAgJC,KAAhJ,EAA8J;AAC1J,SAAKC,MAAL,GAAcR,EAAd;AACA,SAAKS,UAAL,GAAkBR,MAAlB;AACA,SAAKS,eAAL,GAAuBR,WAAvB;AACA,SAAKS,UAAL,GAAkBR,MAAlB;AACA,SAAKS,WAAL,GAAmBR,OAAnB;AACA,SAAKS,cAAL,GAAsBR,UAAtB;AACA,SAAKS,qBAAL,GAA6BR,iBAA7B;AACA,SAAKS,SAAL,GAAiBR,KAAjB;AACA,SAAKS,cAAL,GAAsB,IAAItB,kBAAJ,EAAtB;AACH;;AAEiB,SAAJuB,IAAI,CAACjB,EAAD,EAAakB,QAAb,EAA+BX,KAA/B,EAA4C;AAC1D,WAAO,IAAIR,WAAJ,CAAgBC,EAAhB,EAAoB,EAApB,EAAwBA,EAAxB,EAA4B,KAA5B,EAAmC,KAAnC,EAA0C,KAA1C,EAAiDkB,QAAjD,EAA2DX,KAA3D,CAAP;AACH;;AAEgB,MAANN,MAAM;AACb,WAAO,KAAKQ,UAAZ;AACH;;AAEqB,MAAXP,WAAW;AAClB,WAAO,KAAKQ,eAAZ;AACH;;AAEY,MAAFV,EAAE;AACT,WAAO,KAAKQ,MAAZ;AACH;;AAE2B,MAAjBF,iBAAiB;AACxB,WAAO,KAAKQ,qBAAZ;AACH;;AAEgB,MAANX,MAAM;AACb,WAAO,KAAKQ,UAAZ;AACH;;AAEiB,MAAPP,OAAO;AACd,WAAO,KAAKQ,WAAZ;AACH;;AAEoB,MAAVP,UAAU;AACjB,WAAO,KAAKQ,cAAZ;AACH;;AAEe,MAALN,KAAK;AACZ,WAAO,KAAKQ,SAAZ;AACH;;AAEoB,MAAVI,UAAU;AACjB,WAAO,KAAKH,cAAZ;AACH;;AA7DmB","names":["PropertyCollection","User","constructor","userId","privUserId","Participant","id","avatar","displayName","isHost","isMuted","isUsingTts","preferredLanguage","voice","privId","privAvatar","privDisplayName","privIsHost","privIsMuted","privIsUsingTts","privPreferredLanguage","privVoice","privProperties","From","language","properties"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ_2\\educator\\node_modules\\microsoft-cognitiveservices-speech-sdk\\distrib\\es2015\\src\\sdk\\Transcription\\src\\sdk\\Transcription\\IParticipant.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { PropertyCollection } from \"../Exports\";\r\n\r\n/**\r\n * Represents a user in a conversation.\r\n * Added in version 1.4.0\r\n */\r\nexport interface IUser {\r\n    /** Gets the user's ID */\r\n    readonly userId: string;\r\n}\r\n\r\nexport class User implements IUser {\r\n    private privUserId: string;\r\n\r\n    constructor(userId: string) {\r\n        this.privUserId = userId;\r\n    }\r\n\r\n    public get userId(): string {\r\n        return this.privUserId;\r\n    }\r\n}\r\n\r\nexport interface VoiceSignature {\r\n    Version: number;\r\n    Tag: string;\r\n    Data: string;\r\n}\r\n\r\nexport interface TranscriptionParticipant {\r\n    /** The unique identifier for the participant. */\r\n    readonly id: string;\r\n    /** The participant's preferred spoken language. */\r\n    readonly preferredLanguage: string;\r\n    /** The participant's voice signature */\r\n    readonly voice: string;\r\n}\r\n\r\n/**\r\n * Represents a participant in a conversation.\r\n * Added in version 1.4.0\r\n */\r\nexport interface IParticipant extends TranscriptionParticipant {\r\n    /** Gets the colour of the user's avatar as an HTML hex string (e.g. FF0000 for red). */\r\n    readonly avatar: string;\r\n    /**\r\n     * The participant's display name. Please note that there may be more than one participant\r\n     * with the same name. You can use <see cref=\"Id\"/> property to tell them apart.\r\n     */\r\n    readonly displayName: string;\r\n    /** Gets whether or not this participant is the host. */\r\n    readonly isHost: boolean;\r\n    /** Gets whether or not this participant is muted. */\r\n    readonly isMuted: boolean;\r\n    /** Gets whether or not the participant is using Text To Speech (TTS). */\r\n    readonly isUsingTts: boolean;\r\n    /** Contains properties of the participant. */\r\n    readonly properties: PropertyCollection;\r\n}\r\n\r\n// tslint:disable-next-line: max-classes-per-file\r\nexport class Participant implements IParticipant {\r\n    private privAvatar: string;\r\n    private privDisplayName: string;\r\n    private privId: string;\r\n    private privIsHost: boolean;\r\n    private privIsMuted: boolean;\r\n    private privIsUsingTts: boolean;\r\n    private privPreferredLanguage: string;\r\n    private privVoice: string;\r\n    private privProperties: PropertyCollection;\r\n\r\n    constructor(id: string, avatar: string, displayName: string, isHost: boolean, isMuted: boolean, isUsingTts: boolean, preferredLanguage: string, voice?: string) {\r\n        this.privId = id;\r\n        this.privAvatar = avatar;\r\n        this.privDisplayName = displayName;\r\n        this.privIsHost = isHost;\r\n        this.privIsMuted = isMuted;\r\n        this.privIsUsingTts = isUsingTts;\r\n        this.privPreferredLanguage = preferredLanguage;\r\n        this.privVoice = voice;\r\n        this.privProperties = new PropertyCollection();\r\n    }\r\n\r\n    public static From(id: string, language: string, voice: string): IParticipant {\r\n        return new Participant(id, \"\", id, false, false, false, language, voice);\r\n    }\r\n\r\n    public get avatar(): string {\r\n        return this.privAvatar;\r\n    }\r\n\r\n    public get displayName(): string {\r\n        return this.privDisplayName;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public get preferredLanguage(): string {\r\n        return this.privPreferredLanguage;\r\n    }\r\n\r\n    public get isHost(): boolean {\r\n        return this.privIsHost;\r\n    }\r\n\r\n    public get isMuted(): boolean {\r\n        return this.privIsMuted;\r\n    }\r\n\r\n    public get isUsingTts(): boolean {\r\n        return this.privIsUsingTts;\r\n    }\r\n\r\n    public get voice(): string {\r\n        return this.privVoice;\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}