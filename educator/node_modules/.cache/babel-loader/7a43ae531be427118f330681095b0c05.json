{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ProxyInfo, WebsocketConnection } from \"../common.browser/Exports\";\nimport { PropertyId } from \"../sdk/Exports\";\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\nimport { WebsocketMessageFormatter } from \"./Exports\";\nimport { HeaderNames } from \"./HeaderNames\";\nexport class IntentConnectionFactory extends ConnectionFactoryBase {\n  constructor() {\n    super(...arguments);\n\n    this.create = (config, authInfo, connectionId) => {\n      let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint);\n\n      if (!endpoint) {\n        const region = config.parameters.getProperty(PropertyId.SpeechServiceConnection_IntentRegion);\n        const hostSuffix = ConnectionFactoryBase.getHostSuffix(region);\n        const host = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".sr.speech\" + hostSuffix);\n        endpoint = host + \"/speech/recognition/interactive/cognitiveservices/v1\";\n      }\n\n      const queryParams = {\n        format: \"simple\",\n        language: config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage)\n      };\n      this.setCommonUrlParams(config, queryParams, endpoint);\n      const headers = {};\n\n      if (authInfo.token !== undefined && authInfo.token !== \"\") {\n        headers[authInfo.headerName] = authInfo.token;\n      }\n\n      headers[HeaderNames.ConnectionId] = connectionId;\n      config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\n      const enableCompression = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\n      return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\n    };\n  }\n\n  getSpeechRegionFromIntentRegion(intentRegion) {\n    switch (intentRegion) {\n      case \"West US\":\n      case \"US West\":\n      case \"westus\":\n        return \"uswest\";\n\n      case \"West US 2\":\n      case \"US West 2\":\n      case \"westus2\":\n        return \"uswest2\";\n\n      case \"South Central US\":\n      case \"US South Central\":\n      case \"southcentralus\":\n        return \"ussouthcentral\";\n\n      case \"West Central US\":\n      case \"US West Central\":\n      case \"westcentralus\":\n        return \"uswestcentral\";\n\n      case \"East US\":\n      case \"US East\":\n      case \"eastus\":\n        return \"useast\";\n\n      case \"East US 2\":\n      case \"US East 2\":\n      case \"eastus2\":\n        return \"useast2\";\n\n      case \"West Europe\":\n      case \"Europe West\":\n      case \"westeurope\":\n        return \"europewest\";\n\n      case \"North Europe\":\n      case \"Europe North\":\n      case \"northeurope\":\n        return \"europenorth\";\n\n      case \"Brazil South\":\n      case \"South Brazil\":\n      case \"southbrazil\":\n        return \"brazilsouth\";\n\n      case \"Australia East\":\n      case \"East Australia\":\n      case \"eastaustralia\":\n        return \"australiaeast\";\n\n      case \"Southeast Asia\":\n      case \"Asia Southeast\":\n      case \"southeastasia\":\n        return \"asiasoutheast\";\n\n      case \"East Asia\":\n      case \"Asia East\":\n      case \"eastasia\":\n        return \"asiaeast\";\n\n      default:\n        return intentRegion;\n    }\n  }\n\n}","map":{"version":3,"mappings":"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","names":["ProxyInfo","WebsocketConnection","PropertyId","ConnectionFactoryBase","WebsocketMessageFormatter","HeaderNames","IntentConnectionFactory","constructor","config","authInfo","connectionId","endpoint","parameters","getProperty","SpeechServiceConnection_Endpoint","region","SpeechServiceConnection_IntentRegion","hostSuffix","getHostSuffix","host","SpeechServiceConnection_Host","queryParams","format","language","SpeechServiceConnection_RecoLanguage","setCommonUrlParams","headers","token","undefined","headerName","ConnectionId","setProperty","SpeechServiceConnection_Url","enableCompression","fromRecognizerConfig","getSpeechRegionFromIntentRegion","intentRegion"],"sources":["C:\\Users\\ozgur\\Documents\\VSCodeProjects\\webapp_educator\\educator\\node_modules\\microsoft-cognitiveservices-speech-sdk\\distrib\\es2015\\src\\common.speech\\src\\common.speech\\IntentConnectionFactory.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports\";\r\nimport {\r\n    PropertyId\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase\";\r\nimport {\r\n    AuthInfo,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter,\r\n} from \"./Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\n\r\nexport class IntentConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    public create = (\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection => {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint);\r\n        if (!endpoint) {\r\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_IntentRegion);\r\n            const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n            const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".sr.speech\" + hostSuffix);\r\n            endpoint = host + \"/speech/recognition/interactive/cognitiveservices/v1\";\r\n        }\r\n\r\n        const queryParams: IStringDictionary<string> = {\r\n            format: \"simple\",\r\n            language: config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\r\n        };\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n\r\n    private getSpeechRegionFromIntentRegion(intentRegion: string): string {\r\n        switch (intentRegion) {\r\n            case \"West US\":\r\n            case \"US West\":\r\n            case \"westus\":\r\n                return \"uswest\";\r\n            case \"West US 2\":\r\n            case \"US West 2\":\r\n            case \"westus2\":\r\n                return \"uswest2\";\r\n            case \"South Central US\":\r\n            case \"US South Central\":\r\n            case \"southcentralus\":\r\n                return \"ussouthcentral\";\r\n            case \"West Central US\":\r\n            case \"US West Central\":\r\n            case \"westcentralus\":\r\n                return \"uswestcentral\";\r\n            case \"East US\":\r\n            case \"US East\":\r\n            case \"eastus\":\r\n                return \"useast\";\r\n            case \"East US 2\":\r\n            case \"US East 2\":\r\n            case \"eastus2\":\r\n                return \"useast2\";\r\n            case \"West Europe\":\r\n            case \"Europe West\":\r\n            case \"westeurope\":\r\n                return \"europewest\";\r\n            case \"North Europe\":\r\n            case \"Europe North\":\r\n            case \"northeurope\":\r\n                return \"europenorth\";\r\n            case \"Brazil South\":\r\n            case \"South Brazil\":\r\n            case \"southbrazil\":\r\n                return \"brazilsouth\";\r\n            case \"Australia East\":\r\n            case \"East Australia\":\r\n            case \"eastaustralia\":\r\n                return \"australiaeast\";\r\n            case \"Southeast Asia\":\r\n            case \"Asia Southeast\":\r\n            case \"southeastasia\":\r\n                return \"asiasoutheast\";\r\n            case \"East Asia\":\r\n            case \"Asia East\":\r\n            case \"eastasia\":\r\n                return \"asiaeast\";\r\n            default:\r\n                return intentRegion;\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}