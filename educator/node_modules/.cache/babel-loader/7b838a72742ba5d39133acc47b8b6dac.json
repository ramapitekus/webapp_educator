{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { RecognitionMode, RecognizerConfig, TranslationConnectionFactory, TranslationServiceRecognizer } from \"../common.speech/Exports\";\nimport { marshalPromiseToCallbacks } from \"../common/Exports\";\nimport { Connection } from \"./Connection\";\nimport { Contracts } from \"./Contracts\";\nimport { PropertyId, Recognizer } from \"./Exports\";\n/**\r\n * Translation recognizer\r\n * @class TranslationRecognizer\r\n */\n\nexport class TranslationRecognizer extends Recognizer {\n  /**\r\n   * Initializes an instance of the TranslationRecognizer.\r\n   * @constructor\r\n   * @param {SpeechTranslationConfig} speechConfig - Set of properties to configure this recognizer.\r\n   * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer\r\n   */\n  constructor(speechConfig, audioConfig) {\n    const configImpl = speechConfig;\n    Contracts.throwIfNull(configImpl, \"speechConfig\");\n    super(audioConfig, configImpl.properties, new TranslationConnectionFactory());\n    this.privDisposedTranslationRecognizer = false;\n\n    if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined) !== undefined) {\n      Contracts.throwIfNullOrWhitespace(this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice), PropertyId[PropertyId.SpeechServiceConnection_TranslationVoice]);\n    }\n\n    Contracts.throwIfNullOrWhitespace(this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages), PropertyId[PropertyId.SpeechServiceConnection_TranslationToLanguages]);\n    Contracts.throwIfNullOrWhitespace(this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage), PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\n  }\n  /**\r\n   * Gets the language name that was set when the recognizer was created.\r\n   * @member TranslationRecognizer.prototype.speechRecognitionLanguage\r\n   * @function\r\n   * @public\r\n   * @returns {string} Gets the language name that was set when the recognizer was created.\r\n   */\n\n\n  get speechRecognitionLanguage() {\n    Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\n    return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\n  }\n  /**\r\n   * Gets target languages for translation that were set when the recognizer was created.\r\n   * The language is specified in BCP-47 format. The translation will provide translated text for each of language.\r\n   * @member TranslationRecognizer.prototype.targetLanguages\r\n   * @function\r\n   * @public\r\n   * @returns {string[]} Gets target languages for translation that were set when the recognizer was created.\r\n   */\n\n\n  get targetLanguages() {\n    Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\n    return this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\n  }\n  /**\r\n   * Gets the name of output voice.\r\n   * @member TranslationRecognizer.prototype.voiceName\r\n   * @function\r\n   * @public\r\n   * @returns {string} the name of output voice.\r\n   */\n\n\n  get voiceName() {\n    Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\n    return this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined);\n  }\n  /**\r\n   * Gets the authorization token used to communicate with the service.\r\n   * @member TranslationRecognizer.prototype.authorizationToken\r\n   * @function\r\n   * @public\r\n   * @returns {string} Authorization token.\r\n   */\n\n\n  get authorizationToken() {\n    return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n  }\n  /**\r\n   * Gets/Sets the authorization token used to communicate with the service.\r\n   * @member TranslationRecognizer.prototype.authorizationToken\r\n   * @function\r\n   * @public\r\n   * @param {string} value - Authorization token.\r\n   */\n\n\n  set authorizationToken(value) {\n    this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\n  }\n  /**\r\n   * The collection of properties and their values defined for this TranslationRecognizer.\r\n   * @member TranslationRecognizer.prototype.properties\r\n   * @function\r\n   * @public\r\n   * @returns {PropertyCollection} The collection of properties and their values defined for this TranslationRecognizer.\r\n   */\n\n\n  get properties() {\n    return this.privProperties;\n  }\n  /**\r\n   * Starts recognition and translation, and stops after the first utterance is recognized.\r\n   * The task returns the translation text as result.\r\n   * Note: recognizeOnceAsync returns when the first utterance has been recognized, so it is suitableonly\r\n   *       for single shot recognition like command or query. For long-running recognition,\r\n   *       use startContinuousRecognitionAsync() instead.\r\n   * @member TranslationRecognizer.prototype.recognizeOnceAsync\r\n   * @function\r\n   * @public\r\n   * @param cb - Callback that received the result when the translation has completed.\r\n   * @param err - Callback invoked in case of an error.\r\n   */\n\n\n  recognizeOnceAsync(cb, err) {\n    Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\n    marshalPromiseToCallbacks(this.recognizeOnceAsyncImpl(RecognitionMode.Conversation), cb, err);\n  }\n  /**\r\n   * Starts recognition and translation, until stopContinuousRecognitionAsync() is called.\r\n   * User must subscribe to events to receive translation results.\r\n   * @member TranslationRecognizer.prototype.startContinuousRecognitionAsync\r\n   * @function\r\n   * @public\r\n   * @param cb - Callback that received the translation has started.\r\n   * @param err - Callback invoked in case of an error.\r\n   */\n\n\n  startContinuousRecognitionAsync(cb, err) {\n    marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\n  }\n  /**\r\n   * Stops continuous recognition and translation.\r\n   * @member TranslationRecognizer.prototype.stopContinuousRecognitionAsync\r\n   * @function\r\n   * @public\r\n   * @param cb - Callback that received the translation has stopped.\r\n   * @param err - Callback invoked in case of an error.\r\n   */\n\n\n  stopContinuousRecognitionAsync(cb, err) {\n    marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\n  }\n  /**\r\n   * dynamically remove a language from list of target language\r\n   * (can be used while recognition is ongoing)\r\n   * @member TranslationRecognizer.prototype.removeTargetLanguage\r\n   * @function\r\n   * @param lang - language to be removed\r\n   * @public\r\n   */\n\n\n  removeTargetLanguage(lang) {\n    Contracts.throwIfNullOrUndefined(lang, \"language to be removed\");\n\n    if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\n      const languages = this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\n      const index = languages.indexOf(lang);\n\n      if (index > -1) {\n        languages.splice(index, 1);\n        this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\n        this.updateLanguages(languages);\n      }\n    }\n  }\n  /**\r\n   * dynamically add a language to list of target language\r\n   * (can be used while recognition is ongoing)\r\n   * @member TranslationRecognizer.prototype.addTargetLanguage\r\n   * @function\r\n   * @param lang - language to be added\r\n   * @public\r\n   */\n\n\n  addTargetLanguage(lang) {\n    Contracts.throwIfNullOrUndefined(lang, \"language to be added\");\n    let languages = [];\n\n    if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\n      languages = this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\n\n      if (!languages.includes(lang)) {\n        languages.push(lang);\n        this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\n      }\n    } else {\n      this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, lang);\n      languages = [lang];\n    }\n\n    this.updateLanguages(languages);\n  }\n  /**\r\n   * closes all external resources held by an instance of this class.\r\n   * @member TranslationRecognizer.prototype.close\r\n   * @function\r\n   * @public\r\n   */\n\n\n  close(cb, errorCb) {\n    Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\n    marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\n  }\n  /**\r\n   * handles ConnectionEstablishedEvent for conversation translation scenarios.\r\n   * @member TranslationRecognizer.prototype.onConnection\r\n   * @function\r\n   * @public\r\n   */\n\n  /* tslint:disable:no-empty */\n\n\n  onConnection() {}\n  /**\r\n   * handles disconnection events for conversation translation scenarios.\r\n   * @member TranslationRecognizer.prototype.onDisconnection\r\n   * @function\r\n   * @public\r\n   */\n\n  /* tslint:disable:no-empty */\n\n\n  onDisconnection() {\n    return __awaiter(this, void 0, void 0, function* () {});\n  }\n\n  dispose(disposing) {\n    const _super = Object.create(null, {\n      dispose: {\n        get: () => super.dispose\n      }\n    });\n\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.privDisposedTranslationRecognizer) {\n        return;\n      }\n\n      this.privDisposedTranslationRecognizer = true;\n\n      if (disposing) {\n        yield this.implRecognizerStop();\n        yield _super.dispose.call(this, disposing);\n      }\n    });\n  }\n\n  createRecognizerConfig(speechConfig) {\n    return new RecognizerConfig(speechConfig, this.properties);\n  }\n\n  createServiceRecognizer(authentication, connectionFactory, audioConfig, recognizerConfig) {\n    const configImpl = audioConfig;\n    return new TranslationServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\n  }\n\n  updateLanguages(languages) {\n    const conn = Connection.fromRecognizer(this);\n\n    if (!!conn) {\n      conn.setMessageProperty(\"speech.context\", \"translationcontext\", {\n        to: languages\n      });\n      conn.sendMessageAsync(\"event\", JSON.stringify({\n        id: \"translation\",\n        name: \"updateLanguage\",\n        to: languages\n      }));\n    }\n  }\n\n}","map":{"version":3,"mappings":"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","names":["RecognitionMode","RecognizerConfig","TranslationConnectionFactory","TranslationServiceRecognizer","marshalPromiseToCallbacks","Connection","Contracts","PropertyId","Recognizer","TranslationRecognizer","constructor","speechConfig","audioConfig","configImpl","throwIfNull","properties","privDisposedTranslationRecognizer","getProperty","SpeechServiceConnection_TranslationVoice","undefined","throwIfNullOrWhitespace","SpeechServiceConnection_TranslationToLanguages","SpeechServiceConnection_RecoLanguage","speechRecognitionLanguage","throwIfDisposed","targetLanguages","split","voiceName","authorizationToken","SpeechServiceAuthorization_Token","value","setProperty","privProperties","recognizeOnceAsync","cb","err","recognizeOnceAsyncImpl","Conversation","startContinuousRecognitionAsync","startContinuousRecognitionAsyncImpl","stopContinuousRecognitionAsync","stopContinuousRecognitionAsyncImpl","removeTargetLanguage","lang","throwIfNullOrUndefined","languages","index","indexOf","splice","join","updateLanguages","addTargetLanguage","includes","push","close","errorCb","dispose","onConnection","onDisconnection","disposing","implRecognizerStop","_super","call","createRecognizerConfig","createServiceRecognizer","authentication","connectionFactory","recognizerConfig","conn","fromRecognizer","setMessageProperty","to","sendMessageAsync","JSON","stringify","id","name"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ_2\\educator\\node_modules\\microsoft-cognitiveservices-speech-sdk\\distrib\\es2015\\src\\sdk\\src\\sdk\\TranslationRecognizer.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n    TranslationConnectionFactory,\r\n    TranslationServiceRecognizer,\r\n} from \"../common.speech/Exports\";\r\nimport { marshalPromiseToCallbacks } from \"../common/Exports\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { Connection } from \"./Connection\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    TranslationRecognitionCanceledEventArgs,\r\n    TranslationRecognitionEventArgs,\r\n    TranslationRecognitionResult,\r\n    TranslationSynthesisEventArgs,\r\n} from \"./Exports\";\r\nimport { SpeechTranslationConfig, SpeechTranslationConfigImpl } from \"./SpeechTranslationConfig\";\r\n\r\n/**\r\n * Translation recognizer\r\n * @class TranslationRecognizer\r\n */\r\nexport class TranslationRecognizer extends Recognizer {\r\n    private privDisposedTranslationRecognizer: boolean;\r\n\r\n    /**\r\n     * Initializes an instance of the TranslationRecognizer.\r\n     * @constructor\r\n     * @param {SpeechTranslationConfig} speechConfig - Set of properties to configure this recognizer.\r\n     * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechTranslationConfig, audioConfig?: AudioConfig) {\r\n        const configImpl = speechConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(configImpl, \"speechConfig\");\r\n\r\n        super(audioConfig, configImpl.properties, new TranslationConnectionFactory());\r\n\r\n        this.privDisposedTranslationRecognizer = false;\r\n\r\n        if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined) !== undefined) {\r\n            Contracts.throwIfNullOrWhitespace(\r\n                this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice),\r\n                PropertyId[PropertyId.SpeechServiceConnection_TranslationVoice]);\r\n        }\r\n\r\n        Contracts.throwIfNullOrWhitespace(\r\n            this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages),\r\n            PropertyId[PropertyId.SpeechServiceConnection_TranslationToLanguages]);\r\n\r\n        Contracts.throwIfNullOrWhitespace(this.properties.getProperty(\r\n            PropertyId.SpeechServiceConnection_RecoLanguage),\r\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n    }\r\n\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member TranslationRecognizer.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: TranslationRecognizer, event: TranslationRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member TranslationRecognizer.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: TranslationRecognizer, event: TranslationRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member TranslationRecognizer.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: TranslationRecognizer, event: TranslationRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * The event synthesizing signals that a translation synthesis result is received.\r\n     * @member TranslationRecognizer.prototype.synthesizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesizing: (sender: TranslationRecognizer, event: TranslationSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Gets the language name that was set when the recognizer was created.\r\n     * @member TranslationRecognizer.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} Gets the language name that was set when the recognizer was created.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets target languages for translation that were set when the recognizer was created.\r\n     * The language is specified in BCP-47 format. The translation will provide translated text for each of language.\r\n     * @member TranslationRecognizer.prototype.targetLanguages\r\n     * @function\r\n     * @public\r\n     * @returns {string[]} Gets target languages for translation that were set when the recognizer was created.\r\n     */\r\n    public get targetLanguages(): string[] {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n    }\r\n\r\n    /**\r\n     * Gets the name of output voice.\r\n     * @member TranslationRecognizer.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @returns {string} the name of output voice.\r\n     */\r\n    public get voiceName(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined);\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member TranslationRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member TranslationRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - Authorization token.\r\n     */\r\n    public set authorizationToken(value: string) {\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this TranslationRecognizer.\r\n     * @member TranslationRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this TranslationRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Starts recognition and translation, and stops after the first utterance is recognized.\r\n     * The task returns the translation text as result.\r\n     * Note: recognizeOnceAsync returns when the first utterance has been recognized, so it is suitableonly\r\n     *       for single shot recognition like command or query. For long-running recognition,\r\n     *       use startContinuousRecognitionAsync() instead.\r\n     * @member TranslationRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the result when the translation has completed.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public recognizeOnceAsync(cb?: (e: TranslationRecognitionResult) => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n        marshalPromiseToCallbacks(this.recognizeOnceAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts recognition and translation, until stopContinuousRecognitionAsync() is called.\r\n     * User must subscribe to events to receive translation results.\r\n     * @member TranslationRecognizer.prototype.startContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the translation has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stops continuous recognition and translation.\r\n     * @member TranslationRecognizer.prototype.stopContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the translation has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * dynamically remove a language from list of target language\r\n     * (can be used while recognition is ongoing)\r\n     * @member TranslationRecognizer.prototype.removeTargetLanguage\r\n     * @function\r\n     * @param lang - language to be removed\r\n     * @public\r\n     */\r\n    public removeTargetLanguage(lang: string): void {\r\n        Contracts.throwIfNullOrUndefined(lang, \"language to be removed\");\r\n        if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\r\n            const languages: string[] = this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n            const index: number = languages.indexOf(lang);\r\n            if (index > -1) {\r\n                languages.splice(index, 1);\r\n                this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\r\n                this.updateLanguages(languages);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * dynamically add a language to list of target language\r\n     * (can be used while recognition is ongoing)\r\n     * @member TranslationRecognizer.prototype.addTargetLanguage\r\n     * @function\r\n     * @param lang - language to be added\r\n     * @public\r\n     */\r\n    public addTargetLanguage(lang: string): void {\r\n        Contracts.throwIfNullOrUndefined(lang, \"language to be added\");\r\n        let languages: string[] = [];\r\n        if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\r\n            languages = this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n            if (!languages.includes(lang)) {\r\n                languages.push(lang);\r\n                this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\r\n            }\r\n        } else {\r\n            this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, lang);\r\n            languages = [lang];\r\n        }\r\n        this.updateLanguages(languages);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member TranslationRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * handles ConnectionEstablishedEvent for conversation translation scenarios.\r\n     * @member TranslationRecognizer.prototype.onConnection\r\n     * @function\r\n     * @public\r\n     */\r\n    /* tslint:disable:no-empty */\r\n    public onConnection(): void { }\r\n\r\n    /**\r\n     * handles disconnection events for conversation translation scenarios.\r\n     * @member TranslationRecognizer.prototype.onDisconnection\r\n     * @function\r\n     * @public\r\n     */\r\n    /* tslint:disable:no-empty */\r\n    public async onDisconnection(): Promise<void> { }\r\n\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedTranslationRecognizer) {\r\n            return;\r\n        }\r\n\r\n        this.privDisposedTranslationRecognizer = true;\r\n\r\n        if (disposing) {\r\n            await this.implRecognizerStop();\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.properties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n\r\n        return new TranslationServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\r\n    }\r\n\r\n    private updateLanguages(languages: string[]): void {\r\n        const conn: Connection = Connection.fromRecognizer(this);\r\n        if (!!conn) {\r\n            conn.setMessageProperty(\"speech.context\", \"translationcontext\", {to: languages});\r\n            conn.sendMessageAsync(\"event\", JSON.stringify({\r\n                id: \"translation\",\r\n                name: \"updateLanguage\",\r\n                to: languages\r\n                }));\r\n        }\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}