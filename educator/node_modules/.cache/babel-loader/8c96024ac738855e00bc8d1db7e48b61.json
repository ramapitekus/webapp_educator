{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar _a;\n\nimport { ProxyInfo, WebsocketConnection } from \"../common.browser/Exports\";\nimport { OutputFormatPropertyName } from \"../common.speech/Exports\";\nimport { DialogServiceConfig, OutputFormat, PropertyId } from \"../sdk/Exports\";\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\nimport { WebsocketMessageFormatter } from \"./Exports\";\nimport { HeaderNames } from \"./HeaderNames\";\nimport { QueryParameterNames } from \"./QueryParameterNames\";\nexport class DialogConnectionFactory extends ConnectionFactoryBase {\n  constructor() {\n    super(...arguments);\n\n    this.create = (config, authInfo, connectionId) => {\n      const applicationId = config.parameters.getProperty(PropertyId.Conversation_ApplicationId, \"\");\n      const dialogType = config.parameters.getProperty(PropertyId.Conversation_DialogType);\n      const region = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region);\n      const language = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, \"en-US\");\n      const requestTurnStatus = config.parameters.getProperty(PropertyId.Conversation_Request_Bot_Status_Messages, \"true\");\n      const queryParams = {};\n      queryParams[HeaderNames.ConnectionId] = connectionId;\n      queryParams[QueryParameterNames.Format] = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\n      queryParams[QueryParameterNames.Language] = language;\n      queryParams[QueryParameterNames.RequestBotStatusMessages] = requestTurnStatus;\n\n      if (applicationId) {\n        queryParams[QueryParameterNames.BotId] = applicationId;\n\n        if (dialogType === DialogServiceConfig.DialogTypes.CustomCommands) {\n          queryParams[HeaderNames.CustomCommandsAppId] = applicationId;\n        }\n      }\n\n      const resourceInfix = dialogType === DialogServiceConfig.DialogTypes.CustomCommands ? \"commands/\" : \"\";\n      const version = dialogType === DialogServiceConfig.DialogTypes.CustomCommands ? \"v1\" : dialogType === DialogServiceConfig.DialogTypes.BotFramework ? \"v3\" : \"v0\";\n      const headers = {};\n\n      if (authInfo.token != null && authInfo.token !== \"\") {\n        headers[authInfo.headerName] = authInfo.token;\n      } // The URL used for connection is chosen in a priority order of specification:\n      //  1. If a custom endpoint is provided, that URL is used verbatim.\n      //  2. If a custom host is provided (e.g. \"wss://my.custom.endpoint.com:1123\"), a URL is constructed from it.\n      //  3. If no custom connection details are provided, a URL is constructed from default values.\n\n\n      let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, \"\");\n\n      if (!endpoint) {\n        const hostSuffix = ConnectionFactoryBase.getHostSuffix(region);\n        const host = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, `wss://${region}.${DialogConnectionFactory.Constants.BaseUrl}${hostSuffix}`);\n        const standardizedHost = host.endsWith(\"/\") ? host : host + \"/\";\n        endpoint = `${standardizedHost}${resourceInfix}${DialogConnectionFactory.Constants.ApiKey}/${version}`;\n      }\n\n      this.setCommonUrlParams(config, queryParams, endpoint);\n      const enableCompression = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\n      return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\n    };\n  }\n\n}\nDialogConnectionFactory.Constants = (_a = class {}, _a.ApiKey = \"api\", _a.BaseUrl = \"convai.speech\", _a);","map":{"version":3,"mappings":"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","names":["ProxyInfo","WebsocketConnection","OutputFormatPropertyName","DialogServiceConfig","OutputFormat","PropertyId","ConnectionFactoryBase","WebsocketMessageFormatter","HeaderNames","QueryParameterNames","DialogConnectionFactory","constructor","config","authInfo","connectionId","applicationId","parameters","getProperty","Conversation_ApplicationId","dialogType","Conversation_DialogType","region","SpeechServiceConnection_Region","language","SpeechServiceConnection_RecoLanguage","requestTurnStatus","Conversation_Request_Bot_Status_Messages","queryParams","ConnectionId","Format","Simple","toLowerCase","Language","RequestBotStatusMessages","BotId","DialogTypes","CustomCommands","CustomCommandsAppId","resourceInfix","version","BotFramework","headers","token","headerName","endpoint","SpeechServiceConnection_Endpoint","hostSuffix","getHostSuffix","host","SpeechServiceConnection_Host","Constants","BaseUrl","standardizedHost","endsWith","ApiKey","setCommonUrlParams","enableCompression","fromRecognizerConfig","_a"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\node_modules\\microsoft-cognitiveservices-speech-sdk\\distrib\\es2015\\src\\common.speech\\src\\common.speech\\DialogConnectorFactory.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports\";\r\nimport { OutputFormatPropertyName } from \"../common.speech/Exports\";\r\nimport { IConnection, IStringDictionary } from \"../common/Exports\";\r\nimport { DialogServiceConfig, OutputFormat, PropertyId } from \"../sdk/Exports\";\r\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\r\nimport { AuthInfo, RecognizerConfig, WebsocketMessageFormatter } from \"./Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { QueryParameterNames } from \"./QueryParameterNames\";\r\n\r\nexport class DialogConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    private static Constants: any = class {\r\n        private static ApiKey: string = \"api\";\r\n        private static BaseUrl: string = \"convai.speech\";\r\n    };\r\n\r\n    public create = (\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection => {\r\n\r\n        const applicationId: string = config.parameters.getProperty(PropertyId.Conversation_ApplicationId, \"\");\r\n        const dialogType: string = config.parameters.getProperty(PropertyId.Conversation_DialogType);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, \"en-US\");\r\n        const requestTurnStatus: string = config.parameters.getProperty(PropertyId.Conversation_Request_Bot_Status_Messages, \"true\");\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n        queryParams[HeaderNames.ConnectionId] = connectionId;\r\n        queryParams[QueryParameterNames.Format] = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\r\n        queryParams[QueryParameterNames.Language] = language;\r\n        queryParams[QueryParameterNames.RequestBotStatusMessages] = requestTurnStatus;\r\n        if (applicationId) {\r\n            queryParams[QueryParameterNames.BotId] = applicationId;\r\n            if (dialogType === DialogServiceConfig.DialogTypes.CustomCommands) {\r\n                queryParams[HeaderNames.CustomCommandsAppId] = applicationId;\r\n            }\r\n        }\r\n\r\n        const resourceInfix: string =\r\n            dialogType === DialogServiceConfig.DialogTypes.CustomCommands ? \"commands/\"\r\n            : \"\";\r\n        const version: string =\r\n            dialogType === DialogServiceConfig.DialogTypes.CustomCommands ? \"v1\"\r\n            : dialogType === DialogServiceConfig.DialogTypes.BotFramework ? \"v3\"\r\n            : \"v0\";\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n\r\n        if (authInfo.token != null && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n\r\n        // The URL used for connection is chosen in a priority order of specification:\r\n        //  1. If a custom endpoint is provided, that URL is used verbatim.\r\n        //  2. If a custom host is provided (e.g. \"wss://my.custom.endpoint.com:1123\"), a URL is constructed from it.\r\n        //  3. If no custom connection details are provided, a URL is constructed from default values.\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, \"\");\r\n        if (!endpoint) {\r\n            const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n            const host: string = config.parameters.getProperty(\r\n                PropertyId.SpeechServiceConnection_Host,\r\n                `wss://${region}.${DialogConnectionFactory.Constants.BaseUrl}${hostSuffix}`);\r\n            const standardizedHost: string = host.endsWith(\"/\") ? host : host + \"/\";\r\n            endpoint = `${standardizedHost}${resourceInfix}${DialogConnectionFactory.Constants.ApiKey}/${version}`;\r\n        }\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}