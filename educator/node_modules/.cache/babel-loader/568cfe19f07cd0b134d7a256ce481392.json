{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { CancellationErrorCode, CancellationReason, ResultReason } from \"../sdk/Exports\";\nimport { RecognitionStatus } from \"./Exports\";\nexport class EnumTranslation {\n  static implTranslateRecognitionResult(recognitionStatus) {\n    let reason = ResultReason.Canceled;\n\n    switch (recognitionStatus) {\n      case RecognitionStatus.Success:\n        reason = ResultReason.RecognizedSpeech;\n        break;\n\n      case RecognitionStatus.NoMatch:\n      case RecognitionStatus.InitialSilenceTimeout:\n      case RecognitionStatus.BabbleTimeout:\n      case RecognitionStatus.EndOfDictation:\n        reason = ResultReason.NoMatch;\n        break;\n\n      case RecognitionStatus.Error:\n      case RecognitionStatus.BadRequest:\n      case RecognitionStatus.Forbidden:\n      default:\n        reason = ResultReason.Canceled;\n        break;\n    }\n\n    return reason;\n  }\n\n  static implTranslateCancelResult(recognitionStatus) {\n    let reason = CancellationReason.EndOfStream;\n\n    switch (recognitionStatus) {\n      case RecognitionStatus.Success:\n      case RecognitionStatus.EndOfDictation:\n      case RecognitionStatus.NoMatch:\n        reason = CancellationReason.EndOfStream;\n        break;\n\n      case RecognitionStatus.InitialSilenceTimeout:\n      case RecognitionStatus.BabbleTimeout:\n      case RecognitionStatus.Error:\n      case RecognitionStatus.BadRequest:\n      case RecognitionStatus.Forbidden:\n      default:\n        reason = CancellationReason.Error;\n        break;\n    }\n\n    return reason;\n  }\n\n  static implTranslateCancelErrorCode(recognitionStatus) {\n    let reason = CancellationErrorCode.NoError;\n\n    switch (recognitionStatus) {\n      case RecognitionStatus.Error:\n        reason = CancellationErrorCode.ServiceError;\n        break;\n\n      case RecognitionStatus.TooManyRequests:\n        reason = CancellationErrorCode.TooManyRequests;\n        break;\n\n      case RecognitionStatus.BadRequest:\n        reason = CancellationErrorCode.BadRequestParameters;\n        break;\n\n      case RecognitionStatus.Forbidden:\n        reason = CancellationErrorCode.Forbidden;\n        break;\n\n      default:\n        reason = CancellationErrorCode.NoError;\n        break;\n    }\n\n    return reason;\n  }\n\n  static implTranslateErrorDetails(cancellationErrorCode) {\n    let errorDetails = \"The speech service encountered an internal error and could not continue.\";\n\n    switch (cancellationErrorCode) {\n      case CancellationErrorCode.Forbidden:\n        errorDetails = \"The recognizer is using a free subscription that ran out of quota.\";\n        break;\n\n      case CancellationErrorCode.BadRequestParameters:\n        errorDetails = \"Invalid parameter or unsupported audio format in the request.\";\n        break;\n\n      case CancellationErrorCode.TooManyRequests:\n        errorDetails = \"The number of parallel requests exceeded the number of allowed concurrent transcriptions.\";\n        break;\n\n      default:\n        break;\n    }\n\n    return errorDetails;\n  }\n\n}","map":{"version":3,"mappings":"AAAA;AACA;AAEA,SACIA,qBADJ,EAEIC,kBAFJ,EAGIC,YAHJ,QAIO,gBAJP;AAKA,SAASC,iBAAT,QAAkC,WAAlC;AAEA,OAAM,MAAOC,eAAP,CAAsB;AACoB,SAA9BC,8BAA8B,CAACC,iBAAD,EAAqC;AAC7E,QAAIC,MAAM,GAAGL,YAAY,CAACM,QAA1B;;AACA,YAAQF,iBAAR;AACI,WAAKH,iBAAiB,CAACM,OAAvB;AACIF,cAAM,GAAGL,YAAY,CAACQ,gBAAtB;AACA;;AACJ,WAAKP,iBAAiB,CAACQ,OAAvB;AACA,WAAKR,iBAAiB,CAACS,qBAAvB;AACA,WAAKT,iBAAiB,CAACU,aAAvB;AACA,WAAKV,iBAAiB,CAACW,cAAvB;AACIP,cAAM,GAAGL,YAAY,CAACS,OAAtB;AACA;;AACJ,WAAKR,iBAAiB,CAACY,KAAvB;AACA,WAAKZ,iBAAiB,CAACa,UAAvB;AACA,WAAKb,iBAAiB,CAACc,SAAvB;AACA;AACIV,cAAM,GAAGL,YAAY,CAACM,QAAtB;AACA;AAfR;;AAiBA,WAAOD,MAAP;AACH;;AAEsC,SAAzBW,yBAAyB,CAACZ,iBAAD,EAAqC;AACxE,QAAIC,MAAM,GAAGN,kBAAkB,CAACkB,WAAhC;;AACA,YAAQb,iBAAR;AACI,WAAKH,iBAAiB,CAACM,OAAvB;AACA,WAAKN,iBAAiB,CAACW,cAAvB;AACA,WAAKX,iBAAiB,CAACQ,OAAvB;AACIJ,cAAM,GAAGN,kBAAkB,CAACkB,WAA5B;AACA;;AACJ,WAAKhB,iBAAiB,CAACS,qBAAvB;AACA,WAAKT,iBAAiB,CAACU,aAAvB;AACA,WAAKV,iBAAiB,CAACY,KAAvB;AACA,WAAKZ,iBAAiB,CAACa,UAAvB;AACA,WAAKb,iBAAiB,CAACc,SAAvB;AACA;AACIV,cAAM,GAAGN,kBAAkB,CAACc,KAA5B;AACA;AAbR;;AAeA,WAAOR,MAAP;AACH;;AAEyC,SAA5Ba,4BAA4B,CAACd,iBAAD,EAAqC;AAC3E,QAAIC,MAAM,GAA0BP,qBAAqB,CAACqB,OAA1D;;AACA,YAAQf,iBAAR;AACI,WAAKH,iBAAiB,CAACY,KAAvB;AACIR,cAAM,GAAGP,qBAAqB,CAACsB,YAA/B;AACA;;AACJ,WAAKnB,iBAAiB,CAACoB,eAAvB;AACIhB,cAAM,GAAGP,qBAAqB,CAACuB,eAA/B;AACA;;AACJ,WAAKpB,iBAAiB,CAACa,UAAvB;AACIT,cAAM,GAAGP,qBAAqB,CAACwB,oBAA/B;AACA;;AACJ,WAAKrB,iBAAiB,CAACc,SAAvB;AACIV,cAAM,GAAGP,qBAAqB,CAACiB,SAA/B;AACA;;AACJ;AACIV,cAAM,GAAGP,qBAAqB,CAACqB,OAA/B;AACA;AAfR;;AAkBA,WAAOd,MAAP;AAEH;;AAEsC,SAAzBkB,yBAAyB,CAACC,qBAAD,EAA6C;AAChF,QAAIC,YAAY,GAAW,0EAA3B;;AACA,YAAQD,qBAAR;AACI,WAAK1B,qBAAqB,CAACiB,SAA3B;AACIU,oBAAY,GAAG,oEAAf;AACA;;AACJ,WAAK3B,qBAAqB,CAACwB,oBAA3B;AACIG,oBAAY,GAAG,+DAAf;AACA;;AACJ,WAAK3B,qBAAqB,CAACuB,eAA3B;AACII,oBAAY,GAAG,2FAAf;AACA;;AACJ;AACI;AAXR;;AAaA,WAAOA,YAAP;AACH;;AAnFuB","names":["CancellationErrorCode","CancellationReason","ResultReason","RecognitionStatus","EnumTranslation","implTranslateRecognitionResult","recognitionStatus","reason","Canceled","Success","RecognizedSpeech","NoMatch","InitialSilenceTimeout","BabbleTimeout","EndOfDictation","Error","BadRequest","Forbidden","implTranslateCancelResult","EndOfStream","implTranslateCancelErrorCode","NoError","ServiceError","TooManyRequests","BadRequestParameters","implTranslateErrorDetails","cancellationErrorCode","errorDetails"],"sources":["C:\\Users\\ozgur\\Documents\\VSCodeProjects\\webapp_educator\\educator\\node_modules\\microsoft-cognitiveservices-speech-sdk\\distrib\\es2015\\src\\common.speech\\src\\common.speech\\EnumTranslation.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    ResultReason\r\n} from \"../sdk/Exports\";\r\nimport { RecognitionStatus } from \"./Exports\";\r\n\r\nexport class EnumTranslation {\r\n    public static implTranslateRecognitionResult(recognitionStatus: RecognitionStatus): ResultReason {\r\n        let reason = ResultReason.Canceled;\r\n        switch (recognitionStatus) {\r\n            case RecognitionStatus.Success:\r\n                reason = ResultReason.RecognizedSpeech;\r\n                break;\r\n            case RecognitionStatus.NoMatch:\r\n            case RecognitionStatus.InitialSilenceTimeout:\r\n            case RecognitionStatus.BabbleTimeout:\r\n            case RecognitionStatus.EndOfDictation:\r\n                reason = ResultReason.NoMatch;\r\n                break;\r\n            case RecognitionStatus.Error:\r\n            case RecognitionStatus.BadRequest:\r\n            case RecognitionStatus.Forbidden:\r\n            default:\r\n                reason = ResultReason.Canceled;\r\n                break;\r\n        }\r\n        return reason;\r\n    }\r\n\r\n    public static implTranslateCancelResult(recognitionStatus: RecognitionStatus): CancellationReason {\r\n        let reason = CancellationReason.EndOfStream;\r\n        switch (recognitionStatus) {\r\n            case RecognitionStatus.Success:\r\n            case RecognitionStatus.EndOfDictation:\r\n            case RecognitionStatus.NoMatch:\r\n                reason = CancellationReason.EndOfStream;\r\n                break;\r\n            case RecognitionStatus.InitialSilenceTimeout:\r\n            case RecognitionStatus.BabbleTimeout:\r\n            case RecognitionStatus.Error:\r\n            case RecognitionStatus.BadRequest:\r\n            case RecognitionStatus.Forbidden:\r\n            default:\r\n                reason = CancellationReason.Error;\r\n                break;\r\n        }\r\n        return reason;\r\n    }\r\n\r\n    public static implTranslateCancelErrorCode(recognitionStatus: RecognitionStatus): CancellationErrorCode {\r\n        let reason: CancellationErrorCode = CancellationErrorCode.NoError;\r\n        switch (recognitionStatus) {\r\n            case RecognitionStatus.Error:\r\n                reason = CancellationErrorCode.ServiceError;\r\n                break;\r\n            case RecognitionStatus.TooManyRequests:\r\n                reason = CancellationErrorCode.TooManyRequests;\r\n                break;\r\n            case RecognitionStatus.BadRequest:\r\n                reason = CancellationErrorCode.BadRequestParameters;\r\n                break;\r\n            case RecognitionStatus.Forbidden:\r\n                reason = CancellationErrorCode.Forbidden;\r\n                break;\r\n            default:\r\n                reason = CancellationErrorCode.NoError;\r\n                break;\r\n        }\r\n\r\n        return reason;\r\n\r\n    }\r\n\r\n    public static implTranslateErrorDetails(cancellationErrorCode: CancellationErrorCode): string {\r\n        let errorDetails: string = \"The speech service encountered an internal error and could not continue.\";\r\n        switch (cancellationErrorCode) {\r\n            case CancellationErrorCode.Forbidden:\r\n                errorDetails = \"The recognizer is using a free subscription that ran out of quota.\";\r\n                break;\r\n            case CancellationErrorCode.BadRequestParameters:\r\n                errorDetails = \"Invalid parameter or unsupported audio format in the request.\";\r\n                break;\r\n            case CancellationErrorCode.TooManyRequests:\r\n                errorDetails = \"The number of parallel requests exceeded the number of allowed concurrent transcriptions.\";\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return errorDetails;\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}