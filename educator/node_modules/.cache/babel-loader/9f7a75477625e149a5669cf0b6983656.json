{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport { RadioButtonContext } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nconst BORDER_WIDTH = 2;\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for Android, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\n\nconst RadioButtonAndroid = _ref => {\n  let {\n    disabled,\n    onPress,\n    theme,\n    value,\n    status,\n    testID,\n    ...rest\n  } = _ref;\n  const {\n    current: borderAnim\n  } = React.useRef(new Animated.Value(BORDER_WIDTH));\n  const {\n    current: radioAnim\n  } = React.useRef(new Animated.Value(1));\n  const isFirstRendering = React.useRef(true);\n  const {\n    scale\n  } = theme.animation;\n  React.useEffect(() => {\n    // Do not run animation on very first rendering\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n\n    if (status === 'checked') {\n      radioAnim.setValue(1.2);\n      Animated.timing(radioAnim, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: true\n      }).start();\n    } else {\n      borderAnim.setValue(10);\n      Animated.timing(borderAnim, {\n        toValue: BORDER_WIDTH,\n        duration: 150 * scale,\n        useNativeDriver: false\n      }).start();\n    }\n  }, [status, borderAnim, radioAnim, scale]);\n  const checkedColor = rest.color || theme.colors.accent;\n  const uncheckedColor = rest.uncheckedColor || color(theme.colors.text).alpha(theme.dark ? 0.7 : 0.54).rgb().string();\n  let rippleColor, radioColor;\n  return /*#__PURE__*/React.createElement(RadioButtonContext.Consumer, null, context => {\n    const checked = isChecked({\n      contextValue: context === null || context === void 0 ? void 0 : context.value,\n      status,\n      value\n    }) === 'checked';\n\n    if (disabled) {\n      rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n      radioColor = theme.colors.disabled;\n    } else {\n      rippleColor = color(checkedColor).fade(0.32).rgb().string();\n      radioColor = checked ? checkedColor : uncheckedColor;\n    }\n\n    return /*#__PURE__*/React.createElement(TouchableRipple, _extends({}, rest, {\n      borderless: true,\n      rippleColor: rippleColor,\n      onPress: disabled ? undefined : () => {\n        handlePress({\n          onPress,\n          onValueChange: context === null || context === void 0 ? void 0 : context.onValueChange,\n          value\n        });\n      } // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n      ,\n      accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n      accessibilityComponentType: checked ? 'radiobutton_checked' : 'radiobutton_unchecked',\n      accessibilityRole: \"radio\",\n      accessibilityState: {\n        disabled,\n        checked\n      },\n      accessibilityLiveRegion: \"polite\",\n      style: styles.container,\n      testID: testID\n    }), /*#__PURE__*/React.createElement(Animated.View, {\n      style: [styles.radio, {\n        borderColor: radioColor,\n        borderWidth: borderAnim\n      }]\n    }, checked ? /*#__PURE__*/React.createElement(View, {\n      style: [StyleSheet.absoluteFill, styles.radioContainer]\n    }, /*#__PURE__*/React.createElement(Animated.View, {\n      style: [styles.dot, {\n        backgroundColor: radioColor,\n        transform: [{\n          scale: radioAnim\n        }]\n      }]\n    })) : null));\n  });\n};\n\nRadioButtonAndroid.displayName = 'RadioButton.Android';\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18\n  },\n  radioContainer: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  radio: {\n    height: 20,\n    width: 20,\n    borderRadius: 10,\n    margin: 8\n  },\n  dot: {\n    height: 10,\n    width: 10,\n    borderRadius: 5\n  }\n});\nexport default withTheme(RadioButtonAndroid); // @component-docs ignore-next-line\n\nconst RadioButtonAndroidWithTheme = withTheme(RadioButtonAndroid); // @component-docs ignore-next-line\n\nexport { RadioButtonAndroidWithTheme as RadioButtonAndroid };","map":{"version":3,"mappings":"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","names":["React","Animated","View","StyleSheet","color","RadioButtonContext","handlePress","isChecked","TouchableRipple","withTheme","BORDER_WIDTH","RadioButtonAndroid","disabled","onPress","theme","value","status","testID","rest","current","borderAnim","useRef","Value","radioAnim","isFirstRendering","scale","animation","useEffect","setValue","timing","toValue","duration","useNativeDriver","start","checkedColor","colors","accent","uncheckedColor","text","alpha","dark","rgb","string","rippleColor","radioColor","Consumer","context","checked","contextValue","fade","borderless","undefined","onValueChange","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","accessibilityLiveRegion","style","styles","container","radio","borderColor","borderWidth","absoluteFill","radioContainer","dot","backgroundColor","transform","displayName","create","borderRadius","alignItems","justifyContent","height","width","margin","RadioButtonAndroidWithTheme"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\node_modules\\react-native-paper\\lib\\module\\components\\RadioButton\\RadioButtonAndroid.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Value of the radio button\n   */\n  value: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (param?: any) => void;\n  /**\n   * Custom color for unchecked radio.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\nconst BORDER_WIDTH = 2;\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for Android, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst RadioButtonAndroid = ({\n  disabled,\n  onPress,\n  theme,\n  value,\n  status,\n  testID,\n  ...rest\n}: Props) => {\n  const { current: borderAnim } = React.useRef<Animated.Value>(\n    new Animated.Value(BORDER_WIDTH)\n  );\n\n  const { current: radioAnim } = React.useRef<Animated.Value>(\n    new Animated.Value(1)\n  );\n\n  const isFirstRendering = React.useRef<boolean>(true);\n\n  const { scale } = theme.animation;\n\n  React.useEffect(() => {\n    // Do not run animation on very first rendering\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n\n    if (status === 'checked') {\n      radioAnim.setValue(1.2);\n\n      Animated.timing(radioAnim, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      borderAnim.setValue(10);\n\n      Animated.timing(borderAnim, {\n        toValue: BORDER_WIDTH,\n        duration: 150 * scale,\n        useNativeDriver: false,\n      }).start();\n    }\n  }, [status, borderAnim, radioAnim, scale]);\n\n  const checkedColor = rest.color || theme.colors.accent;\n  const uncheckedColor =\n    rest.uncheckedColor ||\n    color(theme.colors.text)\n      .alpha(theme.dark ? 0.7 : 0.54)\n      .rgb()\n      .string();\n\n  let rippleColor: string, radioColor: string;\n\n  return (\n    <RadioButtonContext.Consumer>\n      {(context?: RadioButtonContextType) => {\n        const checked =\n          isChecked({\n            contextValue: context?.value,\n            status,\n            value,\n          }) === 'checked';\n\n        if (disabled) {\n          rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n          radioColor = theme.colors.disabled;\n        } else {\n          rippleColor = color(checkedColor).fade(0.32).rgb().string();\n          radioColor = checked ? checkedColor : uncheckedColor;\n        }\n\n        return (\n          <TouchableRipple\n            {...rest}\n            borderless\n            rippleColor={rippleColor}\n            onPress={\n              disabled\n                ? undefined\n                : () => {\n                    handlePress({\n                      onPress,\n                      onValueChange: context?.onValueChange,\n                      value,\n                    });\n                  }\n            }\n            // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n            accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n            accessibilityComponentType={\n              checked ? 'radiobutton_checked' : 'radiobutton_unchecked'\n            }\n            accessibilityRole=\"radio\"\n            accessibilityState={{ disabled, checked }}\n            accessibilityLiveRegion=\"polite\"\n            style={styles.container}\n            testID={testID}\n          >\n            <Animated.View\n              style={[\n                styles.radio,\n                {\n                  borderColor: radioColor,\n                  borderWidth: borderAnim,\n                },\n              ]}\n            >\n              {checked ? (\n                <View style={[StyleSheet.absoluteFill, styles.radioContainer]}>\n                  <Animated.View\n                    style={[\n                      styles.dot,\n                      {\n                        backgroundColor: radioColor,\n                        transform: [{ scale: radioAnim }],\n                      },\n                    ]}\n                  />\n                </View>\n              ) : null}\n            </Animated.View>\n          </TouchableRipple>\n        );\n      }}\n    </RadioButtonContext.Consumer>\n  );\n};\n\nRadioButtonAndroid.displayName = 'RadioButton.Android';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n  },\n  radioContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  radio: {\n    height: 20,\n    width: 20,\n    borderRadius: 10,\n    margin: 8,\n  },\n  dot: {\n    height: 10,\n    width: 10,\n    borderRadius: 5,\n  },\n});\n\nexport default withTheme(RadioButtonAndroid);\n\n// @component-docs ignore-next-line\nconst RadioButtonAndroidWithTheme = withTheme(RadioButtonAndroid);\n// @component-docs ignore-next-line\nexport { RadioButtonAndroidWithTheme as RadioButtonAndroid };\n"]},"metadata":{},"sourceType":"module"}