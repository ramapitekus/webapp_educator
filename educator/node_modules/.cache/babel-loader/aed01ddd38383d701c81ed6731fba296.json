{"ast":null,"code":"import * as React from 'react';\nimport { Animated, BackHandler, Easing, StyleSheet, TouchableWithoutFeedback, View } from 'react-native';\nimport { getStatusBarHeight, getBottomSpace } from 'react-native-iphone-x-helper';\nimport Surface from './Surface';\nimport { useTheme } from '../core/theming';\nimport useAnimatedValue from '../utils/useAnimatedValue';\nconst DEFAULT_DURATION = 220;\nconst TOP_INSET = getStatusBarHeight(true);\nconst BOTTOM_INSET = getBottomSpace();\n/**\n * The Modal component is a simple way to present content above an enclosing view.\n * To render the `Modal` above other components, you'll need to wrap it with the [`Portal`](portal.html) component.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/modal.gif\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Modal, Portal, Text, Button, Provider } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(false);\n *\n *   const showModal = () => setVisible(true);\n *   const hideModal = () => setVisible(false);\n *   const containerStyle = {backgroundColor: 'white', padding: 20};\n *\n *   return (\n *     <Provider>\n *       <Portal>\n *         <Modal visible={visible} onDismiss={hideModal} contentContainerStyle={containerStyle}>\n *           <Text>Example Modal.  Click outside this area to dismiss.</Text>\n *         </Modal>\n *       </Portal>\n *       <Button style={{marginTop: 30}} onPress={showModal}>\n *         Show\n *       </Button>\n *     </Provider>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nexport default function Modal(_ref) {\n  let {\n    dismissable = true,\n    visible = false,\n    overlayAccessibilityLabel = 'Close modal',\n    onDismiss,\n    children,\n    contentContainerStyle,\n    style\n  } = _ref;\n  const visibleRef = React.useRef(visible);\n  React.useEffect(() => {\n    visibleRef.current = visible;\n  });\n  const {\n    colors,\n    animation\n  } = useTheme();\n  const opacity = useAnimatedValue(visible ? 1 : 0);\n  const [rendered, setRendered] = React.useState(visible);\n\n  if (visible && !rendered) {\n    setRendered(true);\n  }\n\n  const handleBack = () => {\n    if (dismissable) {\n      hideModal();\n    }\n\n    return true;\n  };\n\n  const subscription = React.useRef(undefined);\n\n  const showModal = () => {\n    var _subscription$current;\n\n    if ((_subscription$current = subscription.current) !== null && _subscription$current !== void 0 && _subscription$current.remove) {\n      subscription.current.remove();\n    } else {\n      BackHandler.removeEventListener('hardwareBackPress', handleBack);\n    }\n\n    subscription.current = BackHandler.addEventListener('hardwareBackPress', handleBack);\n    const {\n      scale\n    } = animation;\n    Animated.timing(opacity, {\n      toValue: 1,\n      duration: scale * DEFAULT_DURATION,\n      easing: Easing.out(Easing.cubic),\n      useNativeDriver: true\n    }).start();\n  };\n\n  const hideModal = () => {\n    var _subscription$current2;\n\n    if ((_subscription$current2 = subscription.current) !== null && _subscription$current2 !== void 0 && _subscription$current2.remove) {\n      var _subscription$current3;\n\n      (_subscription$current3 = subscription.current) === null || _subscription$current3 === void 0 ? void 0 : _subscription$current3.remove();\n    } else {\n      BackHandler.removeEventListener('hardwareBackPress', handleBack);\n    }\n\n    const {\n      scale\n    } = animation;\n    Animated.timing(opacity, {\n      toValue: 0,\n      duration: scale * DEFAULT_DURATION,\n      easing: Easing.out(Easing.cubic),\n      useNativeDriver: true\n    }).start(_ref2 => {\n      let {\n        finished\n      } = _ref2;\n\n      if (!finished) {\n        return;\n      }\n\n      if (visible && onDismiss) {\n        onDismiss();\n      }\n\n      if (visibleRef.current) {\n        showModal();\n      } else {\n        setRendered(false);\n      }\n    });\n  };\n\n  const prevVisible = React.useRef(null);\n  React.useEffect(() => {\n    if (prevVisible.current !== visible) {\n      if (visible) {\n        showModal();\n      } else {\n        hideModal();\n      }\n    }\n\n    prevVisible.current = visible;\n  });\n  if (!rendered) return null;\n  return /*#__PURE__*/React.createElement(Animated.View, {\n    pointerEvents: visible ? 'auto' : 'none',\n    accessibilityViewIsModal: true,\n    accessibilityLiveRegion: \"polite\",\n    style: StyleSheet.absoluteFill,\n    onAccessibilityEscape: hideModal\n  }, /*#__PURE__*/React.createElement(TouchableWithoutFeedback, {\n    accessibilityLabel: overlayAccessibilityLabel,\n    accessibilityRole: \"button\",\n    disabled: !dismissable,\n    onPress: dismissable ? hideModal : undefined,\n    importantForAccessibility: \"no\"\n  }, /*#__PURE__*/React.createElement(Animated.View, {\n    style: [styles.backdrop, {\n      backgroundColor: colors.backdrop,\n      opacity\n    }]\n  })), /*#__PURE__*/React.createElement(View, {\n    style: [styles.wrapper, {\n      marginTop: TOP_INSET,\n      marginBottom: BOTTOM_INSET\n    }, style],\n    pointerEvents: \"box-none\"\n  }, /*#__PURE__*/React.createElement(Surface, {\n    style: [{\n      opacity\n    }, styles.content, contentContainerStyle]\n  }, children)));\n}\nconst styles = StyleSheet.create({\n  backdrop: {\n    flex: 1\n  },\n  wrapper: { ...StyleSheet.absoluteFillObject,\n    justifyContent: 'center'\n  },\n  content: {\n    backgroundColor: 'transparent',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"mappings":"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","names":["React","Animated","BackHandler","Easing","StyleSheet","TouchableWithoutFeedback","View","getStatusBarHeight","getBottomSpace","Surface","useTheme","useAnimatedValue","DEFAULT_DURATION","TOP_INSET","BOTTOM_INSET","Modal","dismissable","visible","overlayAccessibilityLabel","onDismiss","children","contentContainerStyle","style","visibleRef","useRef","useEffect","current","colors","animation","opacity","rendered","setRendered","useState","handleBack","hideModal","subscription","undefined","showModal","_subscription$current","remove","removeEventListener","addEventListener","scale","timing","toValue","duration","easing","out","cubic","useNativeDriver","start","_subscription$current2","finished","prevVisible","pointerEvents","accessibilityViewIsModal","accessibilityLiveRegion","absoluteFill","onAccessibilityEscape","accessibilityLabel","accessibilityRole","disabled","onPress","importantForAccessibility","styles","backdrop","backgroundColor","wrapper","marginTop","marginBottom","content","create","flex","absoluteFillObject","justifyContent"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\node_modules\\react-native-paper\\lib\\module\\components\\Modal.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  BackHandler,\n  Easing,\n  StyleProp,\n  StyleSheet,\n  TouchableWithoutFeedback,\n  ViewStyle,\n  View,\n  NativeEventSubscription,\n} from 'react-native';\nimport {\n  getStatusBarHeight,\n  getBottomSpace,\n} from 'react-native-iphone-x-helper';\nimport Surface from './Surface';\nimport { useTheme } from '../core/theming';\nimport useAnimatedValue from '../utils/useAnimatedValue';\n\ntype Props = {\n  /**\n   * Determines whether clicking outside the modal dismiss it.\n   */\n  dismissable?: boolean;\n  /**\n   * Callback that is called when the user dismisses the modal.\n   */\n  onDismiss?: () => void;\n  /**\n   * Accessibility label for the overlay. This is read by the screen reader when the user taps outside the modal.\n   */\n  overlayAccessibilityLabel?: string;\n  /**\n   * Determines Whether the modal is visible.\n   */\n  visible: boolean;\n  /**\n   * Content of the `Modal`.\n   */\n  children: React.ReactNode;\n  /**\n   * Style for the content of the modal\n   */\n  contentContainerStyle?: StyleProp<ViewStyle>;\n  /**\n   * Style for the wrapper of the modal.\n   * Use this prop to change the default wrapper style or to override safe area insets with marginTop and marginBottom.\n   */\n  style?: StyleProp<ViewStyle>;\n};\n\nconst DEFAULT_DURATION = 220;\nconst TOP_INSET = getStatusBarHeight(true);\nconst BOTTOM_INSET = getBottomSpace();\n\n/**\n * The Modal component is a simple way to present content above an enclosing view.\n * To render the `Modal` above other components, you'll need to wrap it with the [`Portal`](portal.html) component.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/modal.gif\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Modal, Portal, Text, Button, Provider } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(false);\n *\n *   const showModal = () => setVisible(true);\n *   const hideModal = () => setVisible(false);\n *   const containerStyle = {backgroundColor: 'white', padding: 20};\n *\n *   return (\n *     <Provider>\n *       <Portal>\n *         <Modal visible={visible} onDismiss={hideModal} contentContainerStyle={containerStyle}>\n *           <Text>Example Modal.  Click outside this area to dismiss.</Text>\n *         </Modal>\n *       </Portal>\n *       <Button style={{marginTop: 30}} onPress={showModal}>\n *         Show\n *       </Button>\n *     </Provider>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nexport default function Modal({\n  dismissable = true,\n  visible = false,\n  overlayAccessibilityLabel = 'Close modal',\n  onDismiss,\n  children,\n  contentContainerStyle,\n  style,\n}: Props) {\n  const visibleRef = React.useRef(visible);\n\n  React.useEffect(() => {\n    visibleRef.current = visible;\n  });\n\n  const { colors, animation } = useTheme();\n\n  const opacity = useAnimatedValue(visible ? 1 : 0);\n\n  const [rendered, setRendered] = React.useState(visible);\n\n  if (visible && !rendered) {\n    setRendered(true);\n  }\n\n  const handleBack = () => {\n    if (dismissable) {\n      hideModal();\n    }\n    return true;\n  };\n\n  const subscription = React.useRef<NativeEventSubscription | undefined>(\n    undefined\n  );\n\n  const showModal = () => {\n    if (subscription.current?.remove) {\n      subscription.current.remove();\n    } else {\n      BackHandler.removeEventListener('hardwareBackPress', handleBack);\n    }\n    subscription.current = BackHandler.addEventListener(\n      'hardwareBackPress',\n      handleBack\n    );\n\n    const { scale } = animation;\n\n    Animated.timing(opacity, {\n      toValue: 1,\n      duration: scale * DEFAULT_DURATION,\n      easing: Easing.out(Easing.cubic),\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const hideModal = () => {\n    if (subscription.current?.remove) {\n      subscription.current?.remove();\n    } else {\n      BackHandler.removeEventListener('hardwareBackPress', handleBack);\n    }\n\n    const { scale } = animation;\n\n    Animated.timing(opacity, {\n      toValue: 0,\n      duration: scale * DEFAULT_DURATION,\n      easing: Easing.out(Easing.cubic),\n      useNativeDriver: true,\n    }).start(({ finished }) => {\n      if (!finished) {\n        return;\n      }\n\n      if (visible && onDismiss) {\n        onDismiss();\n      }\n\n      if (visibleRef.current) {\n        showModal();\n      } else {\n        setRendered(false);\n      }\n    });\n  };\n\n  const prevVisible = React.useRef<boolean | null>(null);\n\n  React.useEffect(() => {\n    if (prevVisible.current !== visible) {\n      if (visible) {\n        showModal();\n      } else {\n        hideModal();\n      }\n    }\n    prevVisible.current = visible;\n  });\n\n  if (!rendered) return null;\n\n  return (\n    <Animated.View\n      pointerEvents={visible ? 'auto' : 'none'}\n      accessibilityViewIsModal\n      accessibilityLiveRegion=\"polite\"\n      style={StyleSheet.absoluteFill}\n      onAccessibilityEscape={hideModal}\n    >\n      <TouchableWithoutFeedback\n        accessibilityLabel={overlayAccessibilityLabel}\n        accessibilityRole=\"button\"\n        disabled={!dismissable}\n        onPress={dismissable ? hideModal : undefined}\n        importantForAccessibility=\"no\"\n      >\n        <Animated.View\n          style={[\n            styles.backdrop,\n            { backgroundColor: colors.backdrop, opacity },\n          ]}\n        />\n      </TouchableWithoutFeedback>\n      <View\n        style={[\n          styles.wrapper,\n          { marginTop: TOP_INSET, marginBottom: BOTTOM_INSET },\n          style,\n        ]}\n        pointerEvents=\"box-none\"\n      >\n        <Surface\n          style={\n            [{ opacity }, styles.content, contentContainerStyle] as StyleProp<\n              ViewStyle\n            >\n          }\n        >\n          {children}\n        </Surface>\n      </View>\n    </Animated.View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  backdrop: {\n    flex: 1,\n  },\n  wrapper: {\n    ...StyleSheet.absoluteFillObject,\n    justifyContent: 'center',\n  },\n  content: {\n    backgroundColor: 'transparent',\n    justifyContent: 'center',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}