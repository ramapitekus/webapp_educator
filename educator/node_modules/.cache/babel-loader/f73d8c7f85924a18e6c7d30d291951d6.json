{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { DialogConnectionFactory } from \"../common.speech/DialogConnectorFactory\";\nimport { DialogServiceAdapter, RecognitionMode, RecognizerConfig } from \"../common.speech/Exports\";\nimport { Deferred, marshalPromiseToCallbacks } from \"../common/Exports\";\nimport { Contracts } from \"./Contracts\";\nimport { Recognizer } from \"./Exports\";\nimport { PropertyId } from \"./PropertyId\";\n/**\r\n * Dialog Service Connector\r\n * @class DialogServiceConnector\r\n */\n\nexport class DialogServiceConnector extends Recognizer {\n  /**\r\n   * Initializes an instance of the DialogServiceConnector.\r\n   * @constructor\r\n   * @param {DialogServiceConfig} dialogConfig - Set of properties to configure this recognizer.\r\n   * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer\r\n   */\n  constructor(dialogConfig, audioConfig) {\n    const dialogServiceConfigImpl = dialogConfig;\n    Contracts.throwIfNull(dialogConfig, \"dialogConfig\");\n    super(audioConfig, dialogServiceConfigImpl.properties, new DialogConnectionFactory());\n    this.isTurnComplete = true;\n    this.privIsDisposed = false;\n    this.privProperties = dialogServiceConfigImpl.properties.clone();\n    const agentConfig = this.buildAgentConfig();\n    this.privReco.agentConfig.set(agentConfig);\n  }\n  /**\r\n   * Starts a connection to the service.\r\n   * Users can optionally call connect() to manually set up a connection in advance, before starting interactions.\r\n   *\r\n   * Note: On return, the connection might not be ready yet. Please subscribe to the Connected event to\r\n   * be notified when the connection is established.\r\n   * @member DialogServiceConnector.prototype.connect\r\n   * @function\r\n   * @public\r\n   */\n\n\n  connect(cb, err) {\n    marshalPromiseToCallbacks(this.privReco.connect(), cb, err);\n  }\n  /**\r\n   * Closes the connection the service.\r\n   * Users can optionally call disconnect() to manually shutdown the connection of the associated DialogServiceConnector.\r\n   *\r\n   * If disconnect() is called during a recognition, recognition will fail and cancel with an error.\r\n   */\n\n\n  disconnect(cb, err) {\n    marshalPromiseToCallbacks(this.privReco.disconnect(), cb, err);\n  }\n  /**\r\n   * Gets the authorization token used to communicate with the service.\r\n   * @member DialogServiceConnector.prototype.authorizationToken\r\n   * @function\r\n   * @public\r\n   * @returns {string} Authorization token.\r\n   */\n\n\n  get authorizationToken() {\n    return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n  }\n  /**\r\n   * Sets the authorization token used to communicate with the service.\r\n   * @member DialogServiceConnector.prototype.authorizationToken\r\n   * @function\r\n   * @public\r\n   * @param {string} token - Authorization token.\r\n   */\n\n\n  set authorizationToken(token) {\n    Contracts.throwIfNullOrWhitespace(token, \"token\");\n    this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\n  }\n  /**\r\n   * The collection of properties and their values defined for this DialogServiceConnector.\r\n   * @member DialogServiceConnector.prototype.properties\r\n   * @function\r\n   * @public\r\n   * @returns {PropertyCollection} The collection of properties and their values defined for this DialogServiceConnector.\r\n   */\n\n\n  get properties() {\n    return this.privProperties;\n  }\n  /** Gets the template for the activity generated by service from speech.\r\n   * Properties from the template will be stamped on the generated activity.\r\n   * It can be empty\r\n   */\n\n\n  get speechActivityTemplate() {\n    return this.properties.getProperty(PropertyId.Conversation_Speech_Activity_Template);\n  }\n  /** Sets the template for the activity generated by service from speech.\r\n   * Properties from the template will be stamped on the generated activity.\r\n   * It can be null or empty.\r\n   * Note: it has to be a valid Json object.\r\n   */\n\n\n  set speechActivityTemplate(speechActivityTemplate) {\n    this.properties.setProperty(PropertyId.Conversation_Speech_Activity_Template, speechActivityTemplate);\n  }\n  /**\r\n   * Starts recognition and stops after the first utterance is recognized.\r\n   * @member DialogServiceConnector.prototype.listenOnceAsync\r\n   * @function\r\n   * @public\r\n   * @param cb - Callback that received the result when the reco has completed.\r\n   * @param err - Callback invoked in case of an error.\r\n   */\n\n\n  listenOnceAsync(cb, err) {\n    if (this.isTurnComplete) {\n      Contracts.throwIfDisposed(this.privIsDisposed);\n\n      const callbackHolder = () => __awaiter(this, void 0, void 0, function* () {\n        yield this.privReco.connect();\n        yield this.implRecognizerStop();\n        this.isTurnComplete = false;\n        const ret = new Deferred();\n        yield this.privReco.recognize(RecognitionMode.Conversation, ret.resolve, ret.reject);\n        const e = yield ret.promise;\n        yield this.implRecognizerStop();\n        return e;\n      });\n\n      const retPromise = callbackHolder();\n      retPromise.catch(() => {\n        // Destroy the recognizer.\n\n        /* tslint:disable:no-empty */\n        // We've done all we can here.\n        this.dispose(true).catch(() => {});\n      });\n      marshalPromiseToCallbacks(retPromise.finally(() => {\n        this.isTurnComplete = true;\n      }), cb, err);\n    }\n  }\n\n  sendActivityAsync(activity, cb, errCb) {\n    marshalPromiseToCallbacks(this.privReco.sendMessage(activity), cb, errCb);\n  }\n  /**\r\n   * closes all external resources held by an instance of this class.\r\n   * @member DialogServiceConnector.prototype.close\r\n   * @function\r\n   * @public\r\n   */\n\n\n  close(cb, err) {\n    Contracts.throwIfDisposed(this.privIsDisposed);\n    marshalPromiseToCallbacks(this.dispose(true), cb, err);\n  }\n\n  dispose(disposing) {\n    const _super = Object.create(null, {\n      dispose: {\n        get: () => super.dispose\n      }\n    });\n\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.privIsDisposed) {\n        return;\n      }\n\n      if (disposing) {\n        this.privIsDisposed = true;\n        yield this.implRecognizerStop();\n        yield _super.dispose.call(this, disposing);\n      }\n    });\n  }\n\n  createRecognizerConfig(speechConfig) {\n    return new RecognizerConfig(speechConfig, this.privProperties);\n  }\n\n  createServiceRecognizer(authentication, connectionFactory, audioConfig, recognizerConfig) {\n    const audioSource = audioConfig;\n    return new DialogServiceAdapter(authentication, connectionFactory, audioSource, recognizerConfig, this);\n  }\n\n  buildAgentConfig() {\n    const communicationType = this.properties.getProperty(\"Conversation_Communication_Type\", \"Default\");\n    return {\n      botInfo: {\n        commType: communicationType,\n        commandsCulture: undefined,\n        connectionId: this.properties.getProperty(PropertyId.Conversation_Agent_Connection_Id),\n        conversationId: this.properties.getProperty(PropertyId.Conversation_Conversation_Id, undefined),\n        fromId: this.properties.getProperty(PropertyId.Conversation_From_Id, undefined),\n        ttsAudioFormat: this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)\n      },\n      version: 0.2\n    };\n  }\n\n}","map":{"version":3,"mappings":"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","names":["DialogConnectionFactory","DialogServiceAdapter","RecognitionMode","RecognizerConfig","Deferred","marshalPromiseToCallbacks","Contracts","Recognizer","PropertyId","DialogServiceConnector","constructor","dialogConfig","audioConfig","dialogServiceConfigImpl","throwIfNull","properties","isTurnComplete","privIsDisposed","privProperties","clone","agentConfig","buildAgentConfig","privReco","set","connect","cb","err","disconnect","authorizationToken","getProperty","SpeechServiceAuthorization_Token","token","throwIfNullOrWhitespace","setProperty","speechActivityTemplate","Conversation_Speech_Activity_Template","listenOnceAsync","throwIfDisposed","callbackHolder","__awaiter","implRecognizerStop","ret","recognize","Conversation","resolve","reject","e","promise","retPromise","catch","dispose","finally","sendActivityAsync","activity","errCb","sendMessage","close","disposing","_super","call","createRecognizerConfig","speechConfig","createServiceRecognizer","authentication","connectionFactory","recognizerConfig","audioSource","communicationType","botInfo","commType","commandsCulture","undefined","connectionId","Conversation_Agent_Connection_Id","conversationId","Conversation_Conversation_Id","fromId","Conversation_From_Id","ttsAudioFormat","SpeechServiceConnection_SynthOutputFormat","version"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ_2\\educator\\node_modules\\microsoft-cognitiveservices-speech-sdk\\distrib\\es2015\\src\\sdk\\src\\sdk\\DialogServiceConnector.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { DialogConnectionFactory } from \"../common.speech/DialogConnectorFactory\";\r\nimport {\r\n    DialogServiceAdapter,\r\n    IAgentConfig,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    Deferred,\r\n    marshalPromiseToCallbacks\r\n} from \"../common/Exports\";\r\nimport { ActivityReceivedEventArgs } from \"./ActivityReceivedEventArgs\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { AudioOutputFormatImpl } from \"./Audio/AudioOutputFormat\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport { DialogServiceConfig, DialogServiceConfigImpl } from \"./DialogServiceConfig\";\r\nimport {\r\n    AudioConfig,\r\n    PropertyCollection,\r\n    Recognizer,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult\r\n} from \"./Exports\";\r\nimport { PropertyId } from \"./PropertyId\";\r\nimport { TurnStatusReceivedEventArgs } from \"./TurnStatusReceivedEventArgs\";\r\n\r\n/**\r\n * Dialog Service Connector\r\n * @class DialogServiceConnector\r\n */\r\nexport class DialogServiceConnector extends Recognizer {\r\n    private privIsDisposed: boolean;\r\n    private isTurnComplete: boolean;\r\n\r\n    /**\r\n     * Initializes an instance of the DialogServiceConnector.\r\n     * @constructor\r\n     * @param {DialogServiceConfig} dialogConfig - Set of properties to configure this recognizer.\r\n     * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer\r\n     */\r\n    public constructor(dialogConfig: DialogServiceConfig, audioConfig?: AudioConfig) {\r\n        const dialogServiceConfigImpl = dialogConfig as DialogServiceConfigImpl;\r\n        Contracts.throwIfNull(dialogConfig, \"dialogConfig\");\r\n\r\n        super(audioConfig, dialogServiceConfigImpl.properties, new DialogConnectionFactory());\r\n\r\n        this.isTurnComplete = true;\r\n        this.privIsDisposed = false;\r\n        this.privProperties = dialogServiceConfigImpl.properties.clone();\r\n\r\n        const agentConfig = this.buildAgentConfig();\r\n        this.privReco.agentConfig.set(agentConfig);\r\n    }\r\n\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member DialogServiceConnector.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: DialogServiceConnector, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member DialogServiceConfig.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: DialogServiceConnector, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member DialogServiceConnector.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: DialogServiceConnector, event: SpeechRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * The event activityReceived signals that an activity has been received.\r\n     * @member DialogServiceConnector.prototype.activityReceived\r\n     * @function\r\n     * @public\r\n     */\r\n    public activityReceived: (sender: DialogServiceConnector, event: ActivityReceivedEventArgs) => void;\r\n\r\n    /**\r\n     * The event turnStatusReceived signals that a turn status message has been received. These messages are\r\n     * associated with both an interaction and a conversation. They are used to notify the client in the event\r\n     * of an interaction failure with the dialog backend, e.g. in the event of a network issue, timeout, crash,\r\n     * or other problem.\r\n     * @member DialogServiceConnector.prototype.turnStatusReceived\r\n     * @function\r\n     * @public\r\n     */\r\n    public turnStatusReceived: (sender: DialogServiceConnector, event: TurnStatusReceivedEventArgs) => void;\r\n\r\n    /**\r\n     * Starts a connection to the service.\r\n     * Users can optionally call connect() to manually set up a connection in advance, before starting interactions.\r\n     *\r\n     * Note: On return, the connection might not be ready yet. Please subscribe to the Connected event to\r\n     * be notified when the connection is established.\r\n     * @member DialogServiceConnector.prototype.connect\r\n     * @function\r\n     * @public\r\n     */\r\n    public connect(cb?: () => void, err?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks(this.privReco.connect(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Closes the connection the service.\r\n     * Users can optionally call disconnect() to manually shutdown the connection of the associated DialogServiceConnector.\r\n     *\r\n     * If disconnect() is called during a recognition, recognition will fail and cancel with an error.\r\n     */\r\n    public disconnect(cb?: () => void, err?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks(this.privReco.disconnect(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member DialogServiceConnector.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Sets the authorization token used to communicate with the service.\r\n     * @member DialogServiceConnector.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this DialogServiceConnector.\r\n     * @member DialogServiceConnector.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this DialogServiceConnector.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /** Gets the template for the activity generated by service from speech.\r\n     * Properties from the template will be stamped on the generated activity.\r\n     * It can be empty\r\n     */\r\n    public get speechActivityTemplate(): string {\r\n        return this.properties.getProperty(PropertyId.Conversation_Speech_Activity_Template);\r\n    }\r\n\r\n    /** Sets the template for the activity generated by service from speech.\r\n     * Properties from the template will be stamped on the generated activity.\r\n     * It can be null or empty.\r\n     * Note: it has to be a valid Json object.\r\n     */\r\n    public set speechActivityTemplate(speechActivityTemplate: string) {\r\n        this.properties.setProperty(PropertyId.Conversation_Speech_Activity_Template, speechActivityTemplate);\r\n    }\r\n\r\n    /**\r\n     * Starts recognition and stops after the first utterance is recognized.\r\n     * @member DialogServiceConnector.prototype.listenOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the result when the reco has completed.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public listenOnceAsync(cb?: (e: SpeechRecognitionResult) => void, err?: (e: string) => void): void {\r\n        if (this.isTurnComplete) {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            const callbackHolder = async (): Promise<SpeechRecognitionResult> => {\r\n                await this.privReco.connect();\r\n                await this.implRecognizerStop();\r\n                this.isTurnComplete = false;\r\n\r\n                const ret: Deferred<SpeechRecognitionResult> = new Deferred<SpeechRecognitionResult>();\r\n                await this.privReco.recognize(RecognitionMode.Conversation, ret.resolve, ret.reject);\r\n\r\n                const e: SpeechRecognitionResult = await ret.promise;\r\n                await this.implRecognizerStop();\r\n\r\n                return e;\r\n            };\r\n\r\n            const retPromise: Promise<SpeechRecognitionResult> = callbackHolder();\r\n\r\n            retPromise.catch(() => {\r\n                // Destroy the recognizer.\r\n                /* tslint:disable:no-empty */ // We've done all we can here.\r\n                this.dispose(true).catch(() => { });\r\n            });\r\n\r\n            marshalPromiseToCallbacks(retPromise.finally((): void => {\r\n                this.isTurnComplete = true;\r\n            }), cb, err);\r\n        }\r\n    }\r\n\r\n    public sendActivityAsync(activity: string, cb?: () => void, errCb?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks((this.privReco as DialogServiceAdapter).sendMessage(activity), cb, errCb);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member DialogServiceConnector.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, err?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privIsDisposed);\r\n\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, err);\r\n    }\r\n\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privIsDisposed) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privIsDisposed = true;\r\n            await this.implRecognizerStop();\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n\r\n        const audioSource: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n\r\n        return new DialogServiceAdapter(authentication, connectionFactory, audioSource, recognizerConfig, this);\r\n    }\r\n\r\n    private buildAgentConfig(): IAgentConfig {\r\n        const communicationType = this.properties.getProperty(\"Conversation_Communication_Type\", \"Default\");\r\n\r\n        return {\r\n            botInfo: {\r\n                commType: communicationType,\r\n                commandsCulture: undefined,\r\n                connectionId: this.properties.getProperty(PropertyId.Conversation_Agent_Connection_Id),\r\n                conversationId: this.properties.getProperty(PropertyId.Conversation_Conversation_Id, undefined),\r\n                fromId: this.properties.getProperty(PropertyId.Conversation_From_Id, undefined),\r\n                ttsAudioFormat: this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)\r\n            },\r\n            version: 0.2\r\n        };\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}