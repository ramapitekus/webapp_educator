{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport { StyleSheet, Animated, TouchableWithoutFeedback, View } from 'react-native';\nimport color from 'color';\nimport { white, black } from '../../styles/colors';\nimport CardContent from './CardContent';\nimport CardActions from './CardActions'; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nimport CardCover from './CardCover'; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nimport CardTitle from './CardTitle';\nimport Surface from '../Surface';\nimport { withTheme } from '../../core/theming';\n/**\n * A card is a sheet of material that serves as an entry point to more detailed information.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/card-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/card-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar, Button, Card, Title, Paragraph } from 'react-native-paper';\n *\n * const LeftContent = props => <Avatar.Icon {...props} icon=\"folder\" />\n *\n * const MyComponent = () => (\n *   <Card>\n *     <Card.Title title=\"Card Title\" subtitle=\"Card Subtitle\" left={LeftContent} />\n *     <Card.Content>\n *       <Title>Card title</Title>\n *       <Paragraph>Card content</Paragraph>\n *     </Card.Content>\n *     <Card.Cover source={{ uri: 'https://picsum.photos/700' }} />\n *     <Card.Actions>\n *       <Button>Cancel</Button>\n *       <Button>Ok</Button>\n *     </Card.Actions>\n *   </Card>\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nconst Card = _ref => {\n  let {\n    elevation: cardElevation = 1,\n    onLongPress,\n    onPress,\n    mode: cardMode = 'elevated',\n    children,\n    style,\n    theme,\n    testID,\n    accessible,\n    ...rest\n  } = _ref;\n  const {\n    current: elevation\n  } = React.useRef(new Animated.Value(cardElevation));\n  const {\n    animation,\n    dark,\n    mode,\n    roundness\n  } = theme;\n\n  const handlePressIn = () => {\n    const {\n      dark,\n      mode,\n      animation: {\n        scale\n      }\n    } = theme;\n    Animated.timing(elevation, {\n      toValue: 8,\n      duration: 150 * scale,\n      useNativeDriver: !dark || mode === 'exact'\n    }).start();\n  };\n\n  const handlePressOut = () => {\n    Animated.timing(elevation, {\n      toValue: cardElevation,\n      duration: 150 * animation.scale,\n      useNativeDriver: !dark || mode === 'exact'\n    }).start();\n  };\n\n  const total = React.Children.count(children);\n  const siblings = React.Children.map(children, child => /*#__PURE__*/React.isValidElement(child) && child.type ? child.type.displayName : null);\n  const borderColor = color(theme.dark ? white : black).alpha(0.12).rgb().string();\n  return /*#__PURE__*/React.createElement(Surface, _extends({\n    style: [{\n      borderRadius: roundness,\n      elevation,\n      borderColor\n    }, cardMode === 'outlined' ? styles.outlined : {}, style],\n    theme: theme\n  }, rest), /*#__PURE__*/React.createElement(TouchableWithoutFeedback, {\n    delayPressIn: 0,\n    disabled: !(onPress || onLongPress),\n    onLongPress: onLongPress,\n    onPress: onPress,\n    onPressIn: onPress || onLongPress ? handlePressIn : undefined,\n    onPressOut: onPress || onLongPress ? handlePressOut : undefined,\n    testID: testID,\n    accessible: accessible\n  }, /*#__PURE__*/React.createElement(View, {\n    style: styles.innerContainer\n  }, React.Children.map(children, (child, index) => /*#__PURE__*/React.isValidElement(child) ? /*#__PURE__*/React.cloneElement(child, {\n    index,\n    total,\n    siblings\n  }) : child))));\n}; // @component ./CardContent.tsx\n\n\nCard.Content = CardContent; // @component ./CardActions.tsx\n\nCard.Actions = CardActions; // @component ./CardCover.tsx\n\nCard.Cover = CardCover; // @component ./CardTitle.tsx\n\nCard.Title = CardTitle;\nconst styles = StyleSheet.create({\n  innerContainer: {\n    flexGrow: 1,\n    flexShrink: 1\n  },\n  outlined: {\n    elevation: 0,\n    borderWidth: 1\n  }\n});\nexport default withTheme(Card);","map":{"version":3,"mappings":"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","names":["React","StyleSheet","Animated","TouchableWithoutFeedback","View","color","white","black","CardContent","CardActions","CardCover","CardTitle","Surface","withTheme","Card","elevation","cardElevation","onLongPress","onPress","mode","cardMode","children","style","theme","testID","accessible","rest","current","useRef","Value","animation","dark","roundness","handlePressIn","scale","timing","toValue","duration","useNativeDriver","start","handlePressOut","total","Children","count","siblings","map","child","isValidElement","type","displayName","borderColor","alpha","rgb","string","borderRadius","styles","outlined","delayPressIn","disabled","onPressIn","undefined","onPressOut","innerContainer","index","cloneElement","Content","Actions","Cover","Title","create","flexGrow","flexShrink","borderWidth"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\node_modules\\react-native-paper\\lib\\module\\components\\Card\\Card.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  Animated,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport color from 'color';\nimport { white, black } from '../../styles/colors';\nimport CardContent from './CardContent';\nimport CardActions from './CardActions';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardCover, { CardCover as _CardCover } from './CardCover';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardTitle, { CardTitle as _CardTitle } from './CardTitle';\nimport Surface from '../Surface';\nimport { withTheme } from '../../core/theming';\n\ntype OutlinedCardProps = {\n  mode: 'outlined';\n  elevation?: never;\n};\n\ntype ElevatedCardProps = {\n  mode?: 'elevated';\n  elevation?: number;\n};\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Resting elevation of the card which controls the drop shadow.\n   */\n  elevation?: never | number;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Mode of the Card.\n   * - `elevated` - Card with elevation.\n   * - `outlined` - Card with an outline.\n   */\n  mode?: 'elevated' | 'outlined';\n  /**\n   * Content of the `Card`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Pass down testID from card props to touchable\n   */\n  testID?: string;\n  /**\n   * Pass down accessible from card props to touchable\n   */\n  accessible?: boolean;\n};\n\n/**\n * A card is a sheet of material that serves as an entry point to more detailed information.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/card-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/card-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar, Button, Card, Title, Paragraph } from 'react-native-paper';\n *\n * const LeftContent = props => <Avatar.Icon {...props} icon=\"folder\" />\n *\n * const MyComponent = () => (\n *   <Card>\n *     <Card.Title title=\"Card Title\" subtitle=\"Card Subtitle\" left={LeftContent} />\n *     <Card.Content>\n *       <Title>Card title</Title>\n *       <Paragraph>Card content</Paragraph>\n *     </Card.Content>\n *     <Card.Cover source={{ uri: 'https://picsum.photos/700' }} />\n *     <Card.Actions>\n *       <Button>Cancel</Button>\n *       <Button>Ok</Button>\n *     </Card.Actions>\n *   </Card>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Card = ({\n  elevation: cardElevation = 1,\n  onLongPress,\n  onPress,\n  mode: cardMode = 'elevated',\n  children,\n  style,\n  theme,\n  testID,\n  accessible,\n  ...rest\n}: (OutlinedCardProps | ElevatedCardProps) & Props) => {\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(cardElevation)\n  );\n  const { animation, dark, mode, roundness } = theme;\n\n  const handlePressIn = () => {\n    const {\n      dark,\n      mode,\n      animation: { scale },\n    } = theme;\n    Animated.timing(elevation, {\n      toValue: 8,\n      duration: 150 * scale,\n      useNativeDriver: !dark || mode === 'exact',\n    }).start();\n  };\n\n  const handlePressOut = () => {\n    Animated.timing(elevation, {\n      toValue: cardElevation,\n      duration: 150 * animation.scale,\n      useNativeDriver: !dark || mode === 'exact',\n    }).start();\n  };\n\n  const total = React.Children.count(children);\n  const siblings = React.Children.map(children, (child) =>\n    React.isValidElement(child) && child.type\n      ? (child.type as any).displayName\n      : null\n  );\n  const borderColor = color(theme.dark ? white : black)\n    .alpha(0.12)\n    .rgb()\n    .string();\n\n  return (\n    <Surface\n      style={[\n        { borderRadius: roundness, elevation, borderColor },\n        cardMode === 'outlined' ? styles.outlined : {},\n        style,\n      ]}\n      theme={theme}\n      {...rest}\n    >\n      <TouchableWithoutFeedback\n        delayPressIn={0}\n        disabled={!(onPress || onLongPress)}\n        onLongPress={onLongPress}\n        onPress={onPress}\n        onPressIn={onPress || onLongPress ? handlePressIn : undefined}\n        onPressOut={onPress || onLongPress ? handlePressOut : undefined}\n        testID={testID}\n        accessible={accessible}\n      >\n        <View style={styles.innerContainer}>\n          {React.Children.map(children, (child, index) =>\n            React.isValidElement(child)\n              ? React.cloneElement(child, {\n                  index,\n                  total,\n                  siblings,\n                })\n              : child\n          )}\n        </View>\n      </TouchableWithoutFeedback>\n    </Surface>\n  );\n};\n\n// @component ./CardContent.tsx\nCard.Content = CardContent;\n// @component ./CardActions.tsx\nCard.Actions = CardActions;\n// @component ./CardCover.tsx\nCard.Cover = CardCover;\n// @component ./CardTitle.tsx\nCard.Title = CardTitle;\n\nconst styles = StyleSheet.create({\n  innerContainer: {\n    flexGrow: 1,\n    flexShrink: 1,\n  },\n  outlined: {\n    elevation: 0,\n    borderWidth: 1,\n  },\n});\n\nexport default withTheme(Card);\n"]},"metadata":{},"sourceType":"module"}