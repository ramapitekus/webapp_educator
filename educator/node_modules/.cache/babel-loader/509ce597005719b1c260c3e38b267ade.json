{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\olesr\\\\OneDrive\\\\Documents\\\\webapp_educ\\\\educator\\\\src\\\\Recording.js\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Recording = () => {\n  _s();\n\n  const mediaRecorder = useRef(null);\n  const mediaChunks = useRef([]);\n  const stream = useRef(null);\n  const [mediaBlobUrl, setMediaBlobUrl] = useState(null);\n  const getMediaStream = useCallback(async () => {\n    const audioStream = await window.navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n    audioStream.getAudioTracks().forEach(audioTrack => audioStream.addTrack(audioTrack));\n    stream.current = audioStream;\n  }, []);\n\n  const onRecordingStop = () => {\n    console.log(mediaChunks.current);\n    const blobProperty = Object.assign({\n      type: mediaChunks.current.type\n    }, {\n      type: \"audio/wav\"\n    });\n    const blob = new Blob(mediaChunks.current, blobProperty);\n    const url = URL.createObjectURL(blob);\n    setMediaBlobUrl(url);\n  };\n\n  const pushChunk = _ref => {\n    let {\n      data\n    } = _ref;\n    mediaChunks.current.push(data);\n  };\n\n  const startRecording = async () => {\n    if (!stream.current) {\n      await getMediaStream();\n    }\n\n    if (stream.current) {\n      const isStreamEnded = stream.current.getTracks().some(track => track.readyState === \"ended\");\n\n      if (isStreamEnded) {\n        await getMediaStream();\n      }\n\n      mediaRecorder.current = new MediaRecorder(stream.current);\n      mediaRecorder.current.ondataavailable = pushChunk;\n      mediaRecorder.current.onstop = onRecordingStop;\n      mediaRecorder.current.start();\n    }\n  };\n\n  const stopRecording = () => {\n    if (mediaRecorder.current) {\n      if (mediaRecorder.current.state !== \"inactive\") {\n        mediaRecorder.current.stop();\n        stream.current && stream.current.getTracks().forEach(track => track.stop());\n        mediaChunks.current = [];\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startRecording,\n      children: \"Start Recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: stopRecording,\n      children: \"Stop Recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n      src: mediaBlobUrl,\n      controls: true,\n      autoPlay: true,\n      loop: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Recording, \"z1sMVFWoKx+Ch0q1AOkKLrQxqZs=\");\n\n_c = Recording;\nexport default Recording;\n\nvar _c;\n\n$RefreshReg$(_c, \"Recording\");","map":{"version":3,"sources":["C:/Users/olesr/OneDrive/Documents/webapp_educ/educator/src/Recording.js"],"names":["useCallback","useRef","useState","Recording","mediaRecorder","mediaChunks","stream","mediaBlobUrl","setMediaBlobUrl","getMediaStream","audioStream","window","navigator","mediaDevices","getUserMedia","audio","getAudioTracks","forEach","audioTrack","addTrack","current","onRecordingStop","console","log","blobProperty","Object","assign","type","blob","Blob","url","URL","createObjectURL","pushChunk","data","push","startRecording","isStreamEnded","getTracks","some","track","readyState","MediaRecorder","ondataavailable","onstop","start","stopRecording","state","stop"],"mappings":"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","sourcesContent":["import { useCallback, useRef, useState } from \"react\";\r\n\r\nconst Recording = () => {\r\n  const mediaRecorder = useRef(null);\r\n  const mediaChunks = useRef([]);\r\n  const stream = useRef(null);\r\n  const [mediaBlobUrl, setMediaBlobUrl] = useState(null);\r\n\r\n  const getMediaStream = useCallback(async () => {\r\n    const audioStream = await window.navigator.mediaDevices.getUserMedia({\r\n      audio: true,\r\n    });\r\n    audioStream\r\n      .getAudioTracks()\r\n      .forEach((audioTrack) => audioStream.addTrack(audioTrack));\r\n    stream.current = audioStream;\r\n  }, []);\r\n\r\n  const onRecordingStop = () => {\r\n    console.log(mediaChunks.current);\r\n    const blobProperty = Object.assign(\r\n      { type: mediaChunks.current.type },\r\n      { type: \"audio/wav\" }\r\n    );\r\n    const blob = new Blob(mediaChunks.current, blobProperty);\r\n    const url = URL.createObjectURL(blob);\r\n    setMediaBlobUrl(url);\r\n  };\r\n\r\n  const pushChunk = ({ data }) => {\r\n    mediaChunks.current.push(data);\r\n  };\r\n\r\n  const startRecording = async () => {\r\n    if (!stream.current) {\r\n      await getMediaStream();\r\n    }\r\n    if (stream.current) {\r\n      const isStreamEnded = stream.current\r\n        .getTracks()\r\n        .some((track) => track.readyState === \"ended\");\r\n      if (isStreamEnded) {\r\n        await getMediaStream();\r\n      }\r\n\r\n      mediaRecorder.current = new MediaRecorder(stream.current);\r\n      mediaRecorder.current.ondataavailable = pushChunk;\r\n      mediaRecorder.current.onstop = onRecordingStop;\r\n      mediaRecorder.current.start();\r\n    }\r\n  };\r\n\r\n  const stopRecording = () => {\r\n    if (mediaRecorder.current) {\r\n      if (mediaRecorder.current.state !== \"inactive\") {\r\n        mediaRecorder.current.stop();\r\n        stream.current &&\r\n          stream.current.getTracks().forEach((track) => track.stop());\r\n        mediaChunks.current = [];\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={startRecording}>Start Recording</button>\r\n      <button onClick={stopRecording}>Stop Recording</button>\r\n      <video src={mediaBlobUrl} controls autoPlay loop />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Recording;\r\n"]},"metadata":{},"sourceType":"module"}