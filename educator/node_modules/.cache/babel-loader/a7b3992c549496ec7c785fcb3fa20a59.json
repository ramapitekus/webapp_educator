{"ast":null,"code":"import \"./s2t.css\";\n\nfunction sttFromMic() {\n  const sdk = require(\"microsoft-cognitiveservices-speech-sdk\");\n\n  const speechConfig = sdk.SpeechConfig.fromSubscription(\"2ed0fc03d2e441388c4fd35cc91c23b3\", \"eastus\");\n  speechConfig.speechRecognitionLanguage = \"de-CH\";\n  const audioConfig = sdk.AudioConfig.fromDefaultMicrophoneInput();\n  const recognizer = new sdk.SpeechRecognizer(speechConfig, audioConfig);\n\n  async function startRecording() {\n    recognizer.startContinuousRecognitionAsync(); // Add error handling\n\n    recognizer.recognized = (_, e) => {\n      var result = e.result;\n      console.log(result.text);\n      sendToAPI(\"http://localhost:5000/api/v1/models\", result.text).then(response => {\n        console.log(\"Answer from the API:\\n\" + response.message);\n      });\n    };\n  }\n\n  async function stopRecording() {\n    recognizer.stopContinuousRecognitionAsync();\n  }\n\n  return [startRecording, stopRecording];\n} // separate functions for start and stop recording\n\n\nasync function sendToAPI(url, message) {\n  // Simple POST request with a JSON body using fetch\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      message: message\n    })\n  };\n  let response = await fetch(url, requestOptions);\n  return response.json();\n}\n\nexport default sttFromMic;","map":{"version":3,"sources":["C:/Users/olesr/OneDrive/Documents/webapp_educ/educator/src/components/S2t.js"],"names":["sttFromMic","sdk","require","speechConfig","SpeechConfig","fromSubscription","speechRecognitionLanguage","audioConfig","AudioConfig","fromDefaultMicrophoneInput","recognizer","SpeechRecognizer","startRecording","startContinuousRecognitionAsync","recognized","_","e","result","console","log","text","sendToAPI","then","response","message","stopRecording","stopContinuousRecognitionAsync","url","requestOptions","method","headers","body","JSON","stringify","fetch","json"],"mappings":"AAAA,OAAO,WAAP;;AAEA,SAASA,UAAT,GAAsB;AACpB,QAAMC,GAAG,GAAGC,OAAO,CAAC,wCAAD,CAAnB;;AACA,QAAMC,YAAY,GAAGF,GAAG,CAACG,YAAJ,CAAiBC,gBAAjB,CACnB,kCADmB,EAEnB,QAFmB,CAArB;AAIAF,EAAAA,YAAY,CAACG,yBAAb,GAAyC,OAAzC;AACA,QAAMC,WAAW,GAAGN,GAAG,CAACO,WAAJ,CAAgBC,0BAAhB,EAApB;AACA,QAAMC,UAAU,GAAG,IAAIT,GAAG,CAACU,gBAAR,CAAyBR,YAAzB,EAAuCI,WAAvC,CAAnB;;AAEA,iBAAeK,cAAf,GAAgC;AAC9BF,IAAAA,UAAU,CAACG,+BAAX,GAD8B,CAE9B;;AACAH,IAAAA,UAAU,CAACI,UAAX,GAAwB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAChC,UAAIC,MAAM,GAAGD,CAAC,CAACC,MAAf;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACG,IAAnB;AACAC,MAAAA,SAAS,CAAC,qCAAD,EAAwCJ,MAAM,CAACG,IAA/C,CAAT,CAA8DE,IAA9D,CACGC,QAAD,IAAc;AACZL,QAAAA,OAAO,CAACC,GAAR,CAAY,2BAA2BI,QAAQ,CAACC,OAAhD;AACD,OAHH;AAKD,KARD;AASD;;AACD,iBAAeC,aAAf,GAA+B;AAC7Bf,IAAAA,UAAU,CAACgB,8BAAX;AACD;;AACD,SAAO,CAACd,cAAD,EAAiBa,aAAjB,CAAP;AACD,C,CAED;;;AAEA,eAAeJ,SAAf,CAAyBM,GAAzB,EAA8BH,OAA9B,EAAuC;AACrC;AACA,QAAMI,cAAc,GAAG;AACrBC,IAAAA,MAAM,EAAE,MADa;AAErBC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAFY;AAGrBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAET,MAAAA,OAAO,EAAEA;AAAX,KAAf;AAHe,GAAvB;AAMA,MAAID,QAAQ,GAAG,MAAMW,KAAK,CAACP,GAAD,EAAMC,cAAN,CAA1B;AACA,SAAOL,QAAQ,CAACY,IAAT,EAAP;AACD;;AAED,eAAenC,UAAf","sourcesContent":["import \"./s2t.css\";\r\n\r\nfunction sttFromMic() {\r\n  const sdk = require(\"microsoft-cognitiveservices-speech-sdk\");\r\n  const speechConfig = sdk.SpeechConfig.fromSubscription(\r\n    \"2ed0fc03d2e441388c4fd35cc91c23b3\",\r\n    \"eastus\"\r\n  );\r\n  speechConfig.speechRecognitionLanguage = \"de-CH\";\r\n  const audioConfig = sdk.AudioConfig.fromDefaultMicrophoneInput();\r\n  const recognizer = new sdk.SpeechRecognizer(speechConfig, audioConfig);\r\n\r\n  async function startRecording() {\r\n    recognizer.startContinuousRecognitionAsync();\r\n    // Add error handling\r\n    recognizer.recognized = (_, e) => {\r\n      var result = e.result;\r\n      console.log(result.text);\r\n      sendToAPI(\"http://localhost:5000/api/v1/models\", result.text).then(\r\n        (response) => {\r\n          console.log(\"Answer from the API:\\n\" + response.message);\r\n        }\r\n      );\r\n    };\r\n  }\r\n  async function stopRecording() {\r\n    recognizer.stopContinuousRecognitionAsync();\r\n  }\r\n  return [startRecording, stopRecording];\r\n}\r\n\r\n// separate functions for start and stop recording\r\n\r\nasync function sendToAPI(url, message) {\r\n  // Simple POST request with a JSON body using fetch\r\n  const requestOptions = {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({ message: message }),\r\n  };\r\n\r\n  let response = await fetch(url, requestOptions);\r\n  return response.json();\r\n}\r\n\r\nexport default sttFromMic;\r\n"]},"metadata":{},"sourceType":"module"}