{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nexport var PromiseState;\n\n(function (PromiseState) {\n  PromiseState[PromiseState[\"None\"] = 0] = \"None\";\n  PromiseState[PromiseState[\"Resolved\"] = 1] = \"Resolved\";\n  PromiseState[PromiseState[\"Rejected\"] = 2] = \"Rejected\";\n})(PromiseState || (PromiseState = {}));\n\nexport class PromiseResult {\n  constructor(promiseResultEventSource) {\n    this.throwIfError = () => {\n      if (this.isError) {\n        throw this.error;\n      }\n    };\n\n    promiseResultEventSource.on(result => {\n      if (!this.privIsCompleted) {\n        this.privIsCompleted = true;\n        this.privIsError = false;\n        this.privResult = result;\n      }\n    }, error => {\n      if (!this.privIsCompleted) {\n        this.privIsCompleted = true;\n        this.privIsError = true;\n        this.privError = error;\n      }\n    });\n  }\n\n  get isCompleted() {\n    return this.privIsCompleted;\n  }\n\n  get isError() {\n    return this.privIsError;\n  }\n\n  get error() {\n    return this.privError;\n  }\n\n  get result() {\n    return this.privResult;\n  }\n\n}\nexport class PromiseResultEventSource {\n  constructor() {\n    this.setResult = result => {\n      this.privOnSetResult(result);\n    };\n\n    this.setError = error => {\n      this.privOnSetError(error);\n    };\n\n    this.on = (onSetResult, onSetError) => {\n      this.privOnSetResult = onSetResult;\n      this.privOnSetError = onSetError;\n    };\n  }\n\n}\nexport class Deferred {\n  constructor() {\n    this.resolve = result => {\n      this.privResolve(result);\n      return this;\n    };\n\n    this.reject = error => {\n      this.privReject(error);\n      return this;\n    };\n\n    this.privPromise = new Promise((resolve, reject) => {\n      this.privResolve = resolve;\n      this.privReject = reject;\n    });\n  }\n\n  get promise() {\n    return this.privPromise;\n  }\n\n}\nexport class Sink {\n  constructor() {\n    this.privState = PromiseState.None;\n    this.privPromiseResult = null;\n    this.privPromiseResultEvents = null;\n    this.privSuccessHandlers = [];\n    this.privErrorHandlers = [];\n\n    this.resolve = result => {\n      if (this.privState !== PromiseState.None) {\n        throw new Error(\"'Cannot resolve a completed promise'\");\n      }\n\n      this.privState = PromiseState.Resolved;\n      this.privPromiseResultEvents.setResult(result);\n\n      for (let i = 0; i < this.privSuccessHandlers.length; i++) {\n        this.executeSuccessCallback(result, this.privSuccessHandlers[i], this.privErrorHandlers[i]);\n      }\n\n      this.detachHandlers();\n    };\n\n    this.reject = error => {\n      if (this.privState !== PromiseState.None) {\n        throw new Error(\"'Cannot reject a completed promise'\");\n      }\n\n      this.privState = PromiseState.Rejected;\n      this.privPromiseResultEvents.setError(error);\n\n      for (const errorHandler of this.privErrorHandlers) {\n        this.executeErrorCallback(error, errorHandler);\n      }\n\n      this.detachHandlers();\n    };\n\n    this.on = (successCallback, errorCallback) => {\n      if (successCallback == null) {\n        successCallback = r => {\n          return;\n        };\n      }\n\n      if (this.privState === PromiseState.None) {\n        this.privSuccessHandlers.push(successCallback);\n        this.privErrorHandlers.push(errorCallback);\n      } else {\n        if (this.privState === PromiseState.Resolved) {\n          this.executeSuccessCallback(this.privPromiseResult.result, successCallback, errorCallback);\n        } else if (this.privState === PromiseState.Rejected) {\n          this.executeErrorCallback(this.privPromiseResult.error, errorCallback);\n        }\n\n        this.detachHandlers();\n      }\n    };\n\n    this.executeSuccessCallback = (result, successCallback, errorCallback) => {\n      try {\n        successCallback(result);\n      } catch (e) {\n        this.executeErrorCallback(`'Unhandled callback error: ${e}'`, errorCallback);\n      }\n    };\n\n    this.executeErrorCallback = (error, errorCallback) => {\n      if (errorCallback) {\n        try {\n          errorCallback(error);\n        } catch (e) {\n          throw new Error(`'Unhandled callback error: ${e}. InnerError: ${error}'`);\n        }\n      } else {\n        throw new Error(`'Unhandled error: ${error}'`);\n      }\n    };\n\n    this.detachHandlers = () => {\n      this.privErrorHandlers = [];\n      this.privSuccessHandlers = [];\n    };\n\n    this.privPromiseResultEvents = new PromiseResultEventSource();\n    this.privPromiseResult = new PromiseResult(this.privPromiseResultEvents);\n  }\n\n  get state() {\n    return this.privState;\n  }\n\n  get result() {\n    return this.privPromiseResult;\n  }\n\n}\nexport function marshalPromiseToCallbacks(promise, cb, err) {\n  promise.then(val => {\n    try {\n      if (!!cb) {\n        cb(val);\n      }\n    } catch (error) {\n      if (!!err) {\n        try {\n          if (error instanceof Error) {\n            const typedError = error;\n            err(typedError.name + \": \" + typedError.message);\n          } else {\n            err(error);\n          }\n          /* tslint:disable:no-empty */\n\n        } catch (error) {}\n      }\n    }\n  }, error => {\n    if (!!err) {\n      try {\n        if (error instanceof Error) {\n          const typedError = error;\n          err(typedError.name + \": \" + typedError.message);\n        } else {\n          err(error);\n        }\n        /* tslint:disable:no-empty */\n\n      } catch (error) {}\n    }\n  });\n}","map":{"version":3,"mappings":"AAAA;AACA;AAMA,WAAYA,YAAZ;;AAAA,WAAYA,YAAZ,EAAwB;AACpBA;AACAA;AACAA;AACH,CAJD,EAAYA,YAAY,KAAZA,YAAY,MAAxB;;AAcA,OAAM,MAAOC,aAAP,CAAoB;AAMtBC,cAAmBC,wBAAnB,EAAwE;AAgCjE,wBAAe,MAAW;AAC7B,UAAI,KAAKC,OAAT,EAAkB;AACd,cAAM,KAAKC,KAAX;AACH;AACJ,KAJM;;AA/BHF,4BAAwB,CAACG,EAAzB,CAA6BC,MAAD,IAAc;AACtC,UAAI,CAAC,KAAKC,eAAV,EAA2B;AACvB,aAAKA,eAAL,GAAuB,IAAvB;AACA,aAAKC,WAAL,GAAmB,KAAnB;AACA,aAAKC,UAAL,GAAkBH,MAAlB;AACH;AACJ,KAND,EAMIF,KAAD,IAAkB;AACjB,UAAI,CAAC,KAAKG,eAAV,EAA2B;AACvB,aAAKA,eAAL,GAAuB,IAAvB;AACA,aAAKC,WAAL,GAAmB,IAAnB;AACA,aAAKE,SAAL,GAAiBN,KAAjB;AACH;AACJ,KAZD;AAaH;;AAEqB,MAAXO,WAAW;AAClB,WAAO,KAAKJ,eAAZ;AACH;;AAEiB,MAAPJ,OAAO;AACd,WAAO,KAAKK,WAAZ;AACH;;AAEe,MAALJ,KAAK;AACZ,WAAO,KAAKM,SAAZ;AACH;;AAEgB,MAANJ,MAAM;AACb,WAAO,KAAKG,UAAZ;AACH;;AApCqB;AA6C1B,OAAM,MAAOG,wBAAP,CAA+B;AAArCX;AAKW,qBAAaK,MAAD,IAAoB;AACnC,WAAKO,eAAL,CAAqBP,MAArB;AACH,KAFM;;AAIA,oBAAYF,KAAD,IAAwB;AACtC,WAAKU,cAAL,CAAoBV,KAApB;AACH,KAFM;;AAIA,cAAK,CAACW,WAAD,EAAmCC,UAAnC,KAAgF;AACxF,WAAKH,eAAL,GAAuBE,WAAvB;AACA,WAAKD,cAAL,GAAsBE,UAAtB;AACH,KAHM;AAIV;;AAjBoC;AAmBrC,OAAM,MAAOC,QAAP,CAAe;AAKjBhB;AAWO,mBAAWK,MAAD,IAAwC;AACrD,WAAKY,WAAL,CAAiBZ,MAAjB;AACA,aAAO,IAAP;AACH,KAHM;;AAKA,kBAAUF,KAAD,IAA+B;AAC3C,WAAKe,UAAL,CAAgBf,KAAhB;AACA,aAAO,IAAP;AACH,KAHM;;AAfH,SAAKgB,WAAL,GAAmB,IAAIC,OAAJ,CAAe,CAACC,OAAD,EAA8BC,MAA9B,KAA+D;AAC7F,WAAKL,WAAL,GAAmBI,OAAnB;AACA,WAAKH,UAAL,GAAkBI,MAAlB;AACH,KAHkB,CAAnB;AAIH;;AAEiB,MAAPC,OAAO;AACd,WAAO,KAAKJ,WAAZ;AACH;;AAdgB;AA2BrB,OAAM,MAAOK,IAAP,CAAW;AAQbxB;AAPQ,qBAA0BF,YAAY,CAAC2B,IAAvC;AACA,6BAAsC,IAAtC;AACA,mCAAuD,IAAvD;AAEA,+BAA+C,EAA/C;AACA,6BAA6C,EAA7C;;AAeD,mBAAWpB,MAAD,IAAoB;AACjC,UAAI,KAAKqB,SAAL,KAAmB5B,YAAY,CAAC2B,IAApC,EAA0C;AACtC,cAAM,IAAIE,KAAJ,CAAU,sCAAV,CAAN;AACH;;AAED,WAAKD,SAAL,GAAiB5B,YAAY,CAAC8B,QAA9B;AACA,WAAKC,uBAAL,CAA6BC,SAA7B,CAAuCzB,MAAvC;;AAEA,WAAK,IAAI0B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,mBAAL,CAAyBC,MAA7C,EAAqDF,CAAC,EAAtD,EAA0D;AACtD,aAAKG,sBAAL,CAA4B7B,MAA5B,EAAoC,KAAK2B,mBAAL,CAAyBD,CAAzB,CAApC,EAAiE,KAAKI,iBAAL,CAAuBJ,CAAvB,CAAjE;AACH;;AAED,WAAKK,cAAL;AACH,KAbM;;AAeA,kBAAUjC,KAAD,IAAwB;AACpC,UAAI,KAAKuB,SAAL,KAAmB5B,YAAY,CAAC2B,IAApC,EAA0C;AACtC,cAAM,IAAIE,KAAJ,CAAU,qCAAV,CAAN;AACH;;AAED,WAAKD,SAAL,GAAiB5B,YAAY,CAACuC,QAA9B;AACA,WAAKR,uBAAL,CAA6BS,QAA7B,CAAsCnC,KAAtC;;AAEA,WAAK,MAAMoC,YAAX,IAA2B,KAAKJ,iBAAhC,EAAmD;AAC/C,aAAKK,oBAAL,CAA0BrC,KAA1B,EAAiCoC,YAAjC;AACH;;AAED,WAAKH,cAAL;AACH,KAbM;;AAeA,cAAK,CACRK,eADQ,EAERC,aAFQ,KAEwC;AAEhD,UAAID,eAAe,IAAI,IAAvB,EAA6B;AACzBA,uBAAe,GAAIE,CAAD,IAAS;AAAG;AAAS,SAAvC;AACH;;AAED,UAAI,KAAKjB,SAAL,KAAmB5B,YAAY,CAAC2B,IAApC,EAA0C;AACtC,aAAKO,mBAAL,CAAyBY,IAAzB,CAA8BH,eAA9B;AACA,aAAKN,iBAAL,CAAuBS,IAAvB,CAA4BF,aAA5B;AACH,OAHD,MAGO;AACH,YAAI,KAAKhB,SAAL,KAAmB5B,YAAY,CAAC8B,QAApC,EAA8C;AAC1C,eAAKM,sBAAL,CAA4B,KAAKW,iBAAL,CAAuBxC,MAAnD,EAA2DoC,eAA3D,EAA4EC,aAA5E;AACH,SAFD,MAEO,IAAI,KAAKhB,SAAL,KAAmB5B,YAAY,CAACuC,QAApC,EAA8C;AACjD,eAAKG,oBAAL,CAA0B,KAAKK,iBAAL,CAAuB1C,KAAjD,EAAwDuC,aAAxD;AACH;;AAED,aAAKN,cAAL;AACH;AACJ,KApBM;;AAsBC,kCAAyB,CAAC/B,MAAD,EAAYoC,eAAZ,EAAkDC,aAAlD,KAAkG;AAC/H,UAAI;AACAD,uBAAe,CAACpC,MAAD,CAAf;AACH,OAFD,CAEE,OAAOyC,CAAP,EAAU;AACR,aAAKN,oBAAL,CAA0B,8BAA8BM,CAAC,GAAzD,EAA8DJ,aAA9D;AACH;AACJ,KANO;;AAQA,gCAAuB,CAACvC,KAAD,EAAgBuC,aAAhB,KAAgE;AAC3F,UAAIA,aAAJ,EAAmB;AACf,YAAI;AACAA,uBAAa,CAACvC,KAAD,CAAb;AACH,SAFD,CAEE,OAAO2C,CAAP,EAAU;AACR,gBAAM,IAAInB,KAAJ,CAAU,8BAA8BmB,CAAC,iBAAiB3C,KAAK,GAA/D,CAAN;AACH;AACJ,OAND,MAMO;AACH,cAAM,IAAIwB,KAAJ,CAAU,qBAAqBxB,KAAK,GAApC,CAAN;AACH;AACJ,KAVO;;AAYA,0BAAiB,MAAW;AAChC,WAAKgC,iBAAL,GAAyB,EAAzB;AACA,WAAKH,mBAAL,GAA2B,EAA3B;AACH,KAHO;;AApFJ,SAAKH,uBAAL,GAA+B,IAAIlB,wBAAJ,EAA/B;AACA,SAAKkC,iBAAL,GAAyB,IAAI9C,aAAJ,CAAkB,KAAK8B,uBAAvB,CAAzB;AACH;;AAEe,MAALkB,KAAK;AACZ,WAAO,KAAKrB,SAAZ;AACH;;AAEgB,MAANrB,MAAM;AACb,WAAO,KAAKwC,iBAAZ;AACH;;AAnBY;AAmGjB,OAAM,SAAUG,yBAAV,CACFzB,OADE,EAEF0B,EAFE,EAGFC,GAHE,EAG2B;AAC7B3B,SAAO,CAAC4B,IAAR,CAAcC,GAAD,IAAiB;AAC1B,QAAI;AACA,UAAI,CAAC,CAACH,EAAN,EAAU;AACNA,UAAE,CAACG,GAAD,CAAF;AACH;AACJ,KAJD,CAIE,OAAOjD,KAAP,EAAc;AACZ,UAAI,CAAC,CAAC+C,GAAN,EAAW;AACP,YAAI;AACA,cAAI/C,KAAK,YAAYwB,KAArB,EAA4B;AACxB,kBAAM0B,UAAU,GAAUlD,KAA1B;AACA+C,eAAG,CAACG,UAAU,CAACC,IAAX,GAAkB,IAAlB,GAAyBD,UAAU,CAACE,OAArC,CAAH;AACH,WAHD,MAGO;AACHL,eAAG,CAAC/C,KAAD,CAAH;AACH;AACD;;AACH,SARD,CAQE,OAAOA,KAAP,EAAc,CAAG;AACtB;AACJ;AACJ,GAlBD,EAkBIA,KAAD,IAAqB;AACpB,QAAI,CAAC,CAAC+C,GAAN,EAAW;AACP,UAAI;AACA,YAAI/C,KAAK,YAAYwB,KAArB,EAA4B;AACxB,gBAAM0B,UAAU,GAAUlD,KAA1B;AACA+C,aAAG,CAACG,UAAU,CAACC,IAAX,GAAkB,IAAlB,GAAyBD,UAAU,CAACE,OAArC,CAAH;AACH,SAHD,MAGO;AACHL,aAAG,CAAC/C,KAAD,CAAH;AACH;AACD;;AACH,OARD,CAQE,OAAOA,KAAP,EAAc,CAAG;AACtB;AACJ,GA9BD;AA+BH","names":["PromiseState","PromiseResult","constructor","promiseResultEventSource","isError","error","on","result","privIsCompleted","privIsError","privResult","privError","isCompleted","PromiseResultEventSource","privOnSetResult","privOnSetError","onSetResult","onSetError","Deferred","privResolve","privReject","privPromise","Promise","resolve","reject","promise","Sink","None","privState","Error","Resolved","privPromiseResultEvents","setResult","i","privSuccessHandlers","length","executeSuccessCallback","privErrorHandlers","detachHandlers","Rejected","setError","errorHandler","executeErrorCallback","successCallback","errorCallback","r","push","privPromiseResult","e","state","marshalPromiseToCallbacks","cb","err","then","val","typedError","name","message"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\node_modules\\microsoft-cognitiveservices-speech-sdk\\distrib\\es2015\\src\\common\\src\\common\\Promise.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// tslint:disable:max-classes-per-file\r\n\r\nimport { ArgumentNullError } from \"./Error\";\r\n\r\nexport enum PromiseState {\r\n    None,\r\n    Resolved,\r\n    Rejected,\r\n}\r\n\r\nexport interface IDeferred<T> {\r\n    readonly promise: Promise<T>;\r\n\r\n    resolve(result: T): IDeferred<T>;\r\n\r\n    reject(error: string): IDeferred<T>;\r\n}\r\n\r\nexport class PromiseResult<T> {\r\n    protected privIsCompleted: boolean;\r\n    protected privIsError: boolean;\r\n    protected privError: string;\r\n    protected privResult: T;\r\n\r\n    public constructor(promiseResultEventSource: PromiseResultEventSource<T>) {\r\n        promiseResultEventSource.on((result: T) => {\r\n            if (!this.privIsCompleted) {\r\n                this.privIsCompleted = true;\r\n                this.privIsError = false;\r\n                this.privResult = result;\r\n            }\r\n        }, (error: string) => {\r\n            if (!this.privIsCompleted) {\r\n                this.privIsCompleted = true;\r\n                this.privIsError = true;\r\n                this.privError = error;\r\n            }\r\n        });\r\n    }\r\n\r\n    public get isCompleted(): boolean {\r\n        return this.privIsCompleted;\r\n    }\r\n\r\n    public get isError(): boolean {\r\n        return this.privIsError;\r\n    }\r\n\r\n    public get error(): string {\r\n        return this.privError;\r\n    }\r\n\r\n    public get result(): T {\r\n        return this.privResult;\r\n    }\r\n\r\n    public throwIfError = (): void => {\r\n        if (this.isError) {\r\n            throw this.error;\r\n        }\r\n    }\r\n}\r\n\r\nexport class PromiseResultEventSource<T>  {\r\n\r\n    private privOnSetResult: (result: T) => void;\r\n    private privOnSetError: (error: string) => void;\r\n\r\n    public setResult = (result: T): void => {\r\n        this.privOnSetResult(result);\r\n    }\r\n\r\n    public setError = (error: string): void => {\r\n        this.privOnSetError(error);\r\n    }\r\n\r\n    public on = (onSetResult: (result: T) => void, onSetError: (error: string) => void): void => {\r\n        this.privOnSetResult = onSetResult;\r\n        this.privOnSetError = onSetError;\r\n    }\r\n}\r\n\r\nexport class Deferred<T> implements IDeferred<T> {\r\n    private privPromise: Promise<T>;\r\n    private privResolve: (value?: T | PromiseLike<T>) => void;\r\n    private privReject: (reason?: any) => void;\r\n\r\n    public constructor() {\r\n        this.privPromise = new Promise<T>((resolve: (value: T) => void, reject: (reason: any) => void) => {\r\n            this.privResolve = resolve;\r\n            this.privReject = reject;\r\n        });\r\n    }\r\n\r\n    public get promise(): Promise<T> {\r\n        return this.privPromise;\r\n    }\r\n\r\n    public resolve = (result: T | Promise<T>): Deferred<T> => {\r\n        this.privResolve(result);\r\n        return this;\r\n    }\r\n\r\n    public reject = (error: string): Deferred<T> => {\r\n        this.privReject(error);\r\n        return this;\r\n    }\r\n}\r\n\r\nexport class Sink<T> {\r\n    private privState: PromiseState = PromiseState.None;\r\n    private privPromiseResult: PromiseResult<T> = null;\r\n    private privPromiseResultEvents: PromiseResultEventSource<T> = null;\r\n\r\n    private privSuccessHandlers: ((result: T) => void)[] = [];\r\n    private privErrorHandlers: ((e: string) => void)[] = [];\r\n\r\n    public constructor() {\r\n        this.privPromiseResultEvents = new PromiseResultEventSource();\r\n        this.privPromiseResult = new PromiseResult(this.privPromiseResultEvents);\r\n    }\r\n\r\n    public get state(): PromiseState {\r\n        return this.privState;\r\n    }\r\n\r\n    public get result(): PromiseResult<T> {\r\n        return this.privPromiseResult;\r\n    }\r\n\r\n    public resolve = (result: T): void => {\r\n        if (this.privState !== PromiseState.None) {\r\n            throw new Error(\"'Cannot resolve a completed promise'\");\r\n        }\r\n\r\n        this.privState = PromiseState.Resolved;\r\n        this.privPromiseResultEvents.setResult(result);\r\n\r\n        for (let i = 0; i < this.privSuccessHandlers.length; i++) {\r\n            this.executeSuccessCallback(result, this.privSuccessHandlers[i], this.privErrorHandlers[i]);\r\n        }\r\n\r\n        this.detachHandlers();\r\n    }\r\n\r\n    public reject = (error: string): void => {\r\n        if (this.privState !== PromiseState.None) {\r\n            throw new Error(\"'Cannot reject a completed promise'\");\r\n        }\r\n\r\n        this.privState = PromiseState.Rejected;\r\n        this.privPromiseResultEvents.setError(error);\r\n\r\n        for (const errorHandler of this.privErrorHandlers) {\r\n            this.executeErrorCallback(error, errorHandler);\r\n        }\r\n\r\n        this.detachHandlers();\r\n    }\r\n\r\n    public on = (\r\n        successCallback: (result: T) => void,\r\n        errorCallback: (error: string) => void): void => {\r\n\r\n        if (successCallback == null) {\r\n            successCallback = (r: T) => { return; };\r\n        }\r\n\r\n        if (this.privState === PromiseState.None) {\r\n            this.privSuccessHandlers.push(successCallback);\r\n            this.privErrorHandlers.push(errorCallback);\r\n        } else {\r\n            if (this.privState === PromiseState.Resolved) {\r\n                this.executeSuccessCallback(this.privPromiseResult.result, successCallback, errorCallback);\r\n            } else if (this.privState === PromiseState.Rejected) {\r\n                this.executeErrorCallback(this.privPromiseResult.error, errorCallback);\r\n            }\r\n\r\n            this.detachHandlers();\r\n        }\r\n    }\r\n\r\n    private executeSuccessCallback = (result: T, successCallback: (result: T) => void, errorCallback: (error: string) => void): void => {\r\n        try {\r\n            successCallback(result);\r\n        } catch (e) {\r\n            this.executeErrorCallback(`'Unhandled callback error: ${e}'`, errorCallback);\r\n        }\r\n    }\r\n\r\n    private executeErrorCallback = (error: string, errorCallback: (error: string) => void): void => {\r\n        if (errorCallback) {\r\n            try {\r\n                errorCallback(error);\r\n            } catch (e) {\r\n                throw new Error(`'Unhandled callback error: ${e}. InnerError: ${error}'`);\r\n            }\r\n        } else {\r\n            throw new Error(`'Unhandled error: ${error}'`);\r\n        }\r\n    }\r\n\r\n    private detachHandlers = (): void => {\r\n        this.privErrorHandlers = [];\r\n        this.privSuccessHandlers = [];\r\n    }\r\n}\r\n\r\nexport function marshalPromiseToCallbacks<T>(\r\n    promise: Promise<T>,\r\n    cb?: (value: T) => void,\r\n    err?: (error: string) => void): void {\r\n    promise.then((val: T): void => {\r\n        try {\r\n            if (!!cb) {\r\n                cb(val);\r\n            }\r\n        } catch (error) {\r\n            if (!!err) {\r\n                try {\r\n                    if (error instanceof Error) {\r\n                        const typedError: Error = error as Error;\r\n                        err(typedError.name + \": \" + typedError.message);\r\n                    } else {\r\n                        err(error);\r\n                    }\r\n                    /* tslint:disable:no-empty */\r\n                } catch (error) { }\r\n            }\r\n        }\r\n    }, (error: any): void => {\r\n        if (!!err) {\r\n            try {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error);\r\n                }\r\n                /* tslint:disable:no-empty */\r\n            } catch (error) { }\r\n        }\r\n    });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}