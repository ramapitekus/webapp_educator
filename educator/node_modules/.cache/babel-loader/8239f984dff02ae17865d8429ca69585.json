{"ast":null,"code":"import * as React from 'react';\nimport { Keyboard, Platform } from 'react-native';\nexport default function useIsKeyboardShown(_ref) {\n  let {\n    onShow,\n    onHide\n  } = _ref;\n  React.useEffect(() => {\n    let willShowSubscription;\n    let willHideSubscription;\n    let didShowSubscription;\n    let didHideSubscription;\n\n    if (Platform.OS === 'ios') {\n      willShowSubscription = Keyboard.addListener('keyboardWillShow', onShow);\n      willHideSubscription = Keyboard.addListener('keyboardWillHide', onHide);\n    } else {\n      didShowSubscription = Keyboard.addListener('keyboardDidShow', onShow);\n      didHideSubscription = Keyboard.addListener('keyboardDidHide', onHide);\n    }\n\n    return () => {\n      if (Platform.OS === 'ios') {\n        var _willShowSubscription, _willHideSubscription;\n\n        if ((_willShowSubscription = willShowSubscription) !== null && _willShowSubscription !== void 0 && _willShowSubscription.remove) {\n          willShowSubscription.remove();\n        } else {\n          Keyboard.removeListener('keyboardWillShow', onShow);\n        }\n\n        if ((_willHideSubscription = willHideSubscription) !== null && _willHideSubscription !== void 0 && _willHideSubscription.remove) {\n          willHideSubscription.remove();\n        } else {\n          Keyboard.removeListener('keyboardWillHide', onHide);\n        }\n      } else {\n        var _didShowSubscription, _didHideSubscription;\n\n        if ((_didShowSubscription = didShowSubscription) !== null && _didShowSubscription !== void 0 && _didShowSubscription.remove) {\n          didShowSubscription.remove();\n        } else {\n          Keyboard.removeListener('keyboardDidShow', onShow);\n        }\n\n        if ((_didHideSubscription = didHideSubscription) !== null && _didHideSubscription !== void 0 && _didHideSubscription.remove) {\n          didHideSubscription.remove();\n        } else {\n          Keyboard.removeListener('keyboardDidHide', onHide);\n        }\n      }\n    };\n  }, [onHide, onShow]);\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,EAA4CC,QAA5C,QAA4D,cAA5D;AAMA,eAAe,SAASC,kBAAT,OAAuD;AAAA,MAA3B;AAAEC,UAAF;AAAUC;AAAV,GAA2B;AACpEL,OAAK,CAACM,SAANN,CAAgB,MAAM;AACpB,QAAIO,oBAAJ;AACA,QAAIC,oBAAJ;AACA,QAAIC,mBAAJ;AACA,QAAIC,mBAAJ;;AAEA,QAAIR,QAAQ,CAACS,EAATT,KAAgB,KAApB,EAA2B;AACzBK,0BAAoB,GAAGN,QAAQ,CAACW,WAATX,CAAqB,kBAArBA,EAAyCG,MAAzCH,CAAvBM;AACAC,0BAAoB,GAAGP,QAAQ,CAACW,WAATX,CAAqB,kBAArBA,EAAyCI,MAAzCJ,CAAvBO;AAFF,WAGO;AACLC,yBAAmB,GAAGR,QAAQ,CAACW,WAATX,CAAqB,iBAArBA,EAAwCG,MAAxCH,CAAtBQ;AACAC,yBAAmB,GAAGT,QAAQ,CAACW,WAATX,CAAqB,iBAArBA,EAAwCI,MAAxCJ,CAAtBS;AACD;;AAED,WAAO,MAAM;AACX,UAAIR,QAAQ,CAACS,EAATT,KAAgB,KAApB,EAA2B;AAAA;;AACzB,qCAAIK,oBAAJ,kDAAIM,sBAAsBC,MAA1B,EAAkC;AAChCP,8BAAoB,CAACO,MAArBP;AADF,eAEO;AACLN,kBAAQ,CAACc,cAATd,CAAwB,kBAAxBA,EAA4CG,MAA5CH;AACD;;AAED,qCAAIO,oBAAJ,kDAAIQ,sBAAsBF,MAA1B,EAAkC;AAChCN,8BAAoB,CAACM,MAArBN;AADF,eAEO;AACLP,kBAAQ,CAACc,cAATd,CAAwB,kBAAxBA,EAA4CI,MAA5CJ;AACD;AAXH,aAYO;AAAA;;AACL,oCAAIQ,mBAAJ,iDAAIQ,qBAAqBH,MAAzB,EAAiC;AAC/BL,6BAAmB,CAACK,MAApBL;AADF,eAEO;AACLR,kBAAQ,CAACc,cAATd,CAAwB,iBAAxBA,EAA2CG,MAA3CH;AACD;;AAED,oCAAIS,mBAAJ,iDAAIQ,qBAAqBJ,MAAzB,EAAiC;AAC/BJ,6BAAmB,CAACI,MAApBJ;AADF,eAEO;AACLT,kBAAQ,CAACc,cAATd,CAAwB,iBAAxBA,EAA2CI,MAA3CJ;AACD;AACF;AAzBH;AAdF,KAyCG,CAACI,MAAD,EAASD,MAAT,CAzCHJ;AA0CD","names":["React","Keyboard","Platform","useIsKeyboardShown","onShow","onHide","useEffect","willShowSubscription","willHideSubscription","didShowSubscription","didHideSubscription","OS","addListener","_willShowSubscription","remove","removeListener","_willHideSubscription","_didShowSubscription","_didHideSubscription"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\node_modules\\react-native-paper\\lib\\module\\utils\\useIsKeyboardShown.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Keyboard, NativeEventSubscription, Platform } from 'react-native';\n\ntype Props = {\n  onShow: () => void;\n  onHide: () => void;\n};\nexport default function useIsKeyboardShown({ onShow, onHide }: Props) {\n  React.useEffect(() => {\n    let willShowSubscription: NativeEventSubscription | undefined;\n    let willHideSubscription: NativeEventSubscription | undefined;\n    let didShowSubscription: NativeEventSubscription | undefined;\n    let didHideSubscription: NativeEventSubscription | undefined;\n\n    if (Platform.OS === 'ios') {\n      willShowSubscription = Keyboard.addListener('keyboardWillShow', onShow);\n      willHideSubscription = Keyboard.addListener('keyboardWillHide', onHide);\n    } else {\n      didShowSubscription = Keyboard.addListener('keyboardDidShow', onShow);\n      didHideSubscription = Keyboard.addListener('keyboardDidHide', onHide);\n    }\n\n    return () => {\n      if (Platform.OS === 'ios') {\n        if (willShowSubscription?.remove) {\n          willShowSubscription.remove();\n        } else {\n          Keyboard.removeListener('keyboardWillShow', onShow);\n        }\n\n        if (willHideSubscription?.remove) {\n          willHideSubscription.remove();\n        } else {\n          Keyboard.removeListener('keyboardWillHide', onHide);\n        }\n      } else {\n        if (didShowSubscription?.remove) {\n          didShowSubscription.remove();\n        } else {\n          Keyboard.removeListener('keyboardDidShow', onShow);\n        }\n\n        if (didHideSubscription?.remove) {\n          didHideSubscription.remove();\n        } else {\n          Keyboard.removeListener('keyboardDidHide', onHide);\n        }\n      }\n    };\n  }, [onHide, onShow]);\n}\n"]},"metadata":{},"sourceType":"module"}