{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport color from 'color';\nimport * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport ActivityIndicator from '../ActivityIndicator';\nimport Surface from '../Surface';\nimport CrossFadeIcon from '../CrossFadeIcon';\nimport Icon from '../Icon';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { black, white } from '../../styles/colors';\nimport { withTheme } from '../../core/theming';\nimport getContrastingColor from '../../utils/getContrastingColor';\ngetContrastingColor;\n/**\n * A floating action button represents the primary action in an application.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/fab-1.png\" />\n *   <img src=\"screenshots/fab-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { StyleSheet } from 'react-native';\n * import { FAB } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <FAB\n *     style={styles.fab}\n *     small\n *     icon=\"plus\"\n *     onPress={() => console.log('Pressed')}\n *   />\n * );\n *\n * const styles = StyleSheet.create({\n *   fab: {\n *     position: 'absolute',\n *     margin: 16,\n *     right: 0,\n *     bottom: 0,\n *   },\n * })\n *\n * export default MyComponent;\n * ```\n */\n\nconst FAB = _ref => {\n  let {\n    small,\n    icon,\n    label,\n    accessibilityLabel = label,\n    accessibilityState,\n    animated = true,\n    color: customColor,\n    disabled,\n    onPress,\n    onLongPress,\n    theme,\n    style,\n    visible = true,\n    uppercase = true,\n    loading,\n    testID,\n    ...rest\n  } = _ref;\n  const {\n    current: visibility\n  } = React.useRef(new Animated.Value(visible ? 1 : 0));\n  const {\n    scale\n  } = theme.animation;\n  React.useEffect(() => {\n    if (visible) {\n      Animated.timing(visibility, {\n        toValue: 1,\n        duration: 200 * scale,\n        useNativeDriver: true\n      }).start();\n    } else {\n      Animated.timing(visibility, {\n        toValue: 0,\n        duration: 150 * scale,\n        useNativeDriver: true\n      }).start();\n    }\n  }, [visible, scale, visibility]);\n  const IconComponent = animated ? CrossFadeIcon : Icon;\n  const disabledColor = color(theme.dark ? white : black).alpha(0.12).rgb().string();\n  const {\n    backgroundColor = disabled ? disabledColor : theme.colors.accent\n  } = StyleSheet.flatten(style) || {};\n  let foregroundColor;\n\n  if (typeof customColor !== 'undefined') {\n    foregroundColor = customColor;\n  } else if (disabled) {\n    foregroundColor = color(theme.dark ? white : black).alpha(0.32).rgb().string();\n  } else {\n    foregroundColor = getContrastingColor(backgroundColor, white, 'rgba(0, 0, 0, .54)');\n  }\n\n  const rippleColor = color(foregroundColor).alpha(0.32).rgb().string();\n  return /*#__PURE__*/React.createElement(Surface, _extends({}, rest, {\n    style: [{\n      backgroundColor,\n      opacity: visibility,\n      transform: [{\n        scale: visibility\n      }]\n    }, styles.container, disabled && styles.disabled, style],\n    pointerEvents: visible ? 'auto' : 'none'\n  }), /*#__PURE__*/React.createElement(TouchableRipple, {\n    borderless: true,\n    onPress: onPress,\n    onLongPress: onLongPress,\n    rippleColor: rippleColor,\n    disabled: disabled,\n    accessibilityLabel: accessibilityLabel // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n    ,\n    accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: { ...accessibilityState,\n      disabled\n    },\n    style: styles.touchable,\n    testID: testID\n  }, /*#__PURE__*/React.createElement(View, {\n    style: [styles.content, label ? styles.extended : small ? styles.small : styles.standard],\n    pointerEvents: \"none\"\n  }, icon && loading !== true ? /*#__PURE__*/React.createElement(IconComponent, {\n    source: icon,\n    size: 24,\n    color: foregroundColor\n  }) : null, loading ? /*#__PURE__*/React.createElement(ActivityIndicator, {\n    size: 18,\n    color: foregroundColor\n  }) : null, label ? /*#__PURE__*/React.createElement(Text, {\n    selectable: false,\n    style: [styles.label, uppercase && styles.uppercaseLabel, {\n      color: foregroundColor,\n      ...theme.fonts.medium\n    }]\n  }, label) : null)));\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 28,\n    elevation: 6\n  },\n  touchable: {\n    borderRadius: 28\n  },\n  standard: {\n    height: 56,\n    width: 56\n  },\n  small: {\n    height: 40,\n    width: 40\n  },\n  extended: {\n    height: 48,\n    paddingHorizontal: 16\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  label: {\n    marginHorizontal: 8\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase'\n  },\n  disabled: {\n    elevation: 0\n  }\n});\nexport default withTheme(FAB); // @component-docs ignore-next-line\n\nconst FABWithTheme = withTheme(FAB); // @component-docs ignore-next-line\n\nexport { FABWithTheme as FAB };","map":{"version":3,"mappings":"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","names":["color","React","Animated","View","StyleSheet","ActivityIndicator","Surface","CrossFadeIcon","Icon","Text","TouchableRipple","black","white","withTheme","getContrastingColor","FAB","small","icon","label","accessibilityLabel","accessibilityState","animated","customColor","disabled","onPress","onLongPress","theme","style","visible","uppercase","loading","testID","rest","current","visibility","useRef","Value","scale","animation","useEffect","timing","toValue","duration","useNativeDriver","start","IconComponent","disabledColor","dark","alpha","rgb","string","backgroundColor","colors","accent","flatten","foregroundColor","rippleColor","opacity","transform","styles","container","pointerEvents","borderless","accessibilityTraits","accessibilityComponentType","accessibilityRole","touchable","content","extended","standard","source","size","selectable","uppercaseLabel","fonts","medium","create","borderRadius","elevation","height","width","paddingHorizontal","flexDirection","alignItems","justifyContent","marginHorizontal","textTransform","FABWithTheme"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\node_modules\\react-native-paper\\lib\\module\\components\\FAB\\FAB.tsx"],"sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport {\n  Animated,\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  AccessibilityState,\n} from 'react-native';\nimport ActivityIndicator from '../ActivityIndicator';\nimport Surface from '../Surface';\nimport CrossFadeIcon from '../CrossFadeIcon';\nimport Icon, { IconSource } from '../Icon';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { black, white } from '../../styles/colors';\nimport { withTheme } from '../../core/theming';\nimport getContrastingColor from '../../utils/getContrastingColor';\nimport type { $RemoveChildren } from '../../types';\n\ngetContrastingColor;\n\ntype Props = $RemoveChildren<typeof Surface> & {\n  /**\n   * Icon to display for the `FAB`.\n   */\n  icon: IconSource;\n  /**\n   * Optional label for extended `FAB`.\n   */\n  label?: string;\n  /**\n   * Make the label text uppercased.\n   */\n  uppercase?: boolean;\n  /**\n   * Accessibility label for the FAB. This is read by the screen reader when the user taps the FAB.\n   * Uses `label` by default if specified.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility state for the FAB. This is read by the screen reader when the user taps the FAB.\n   */\n  accessibilityState?: AccessibilityState;\n  /**\n   * Whether an icon change is animated.\n   */\n  animated?: boolean;\n  /**\n   *  Whether FAB is mini-sized, used to create visual continuity with other elements. This has no effect if `label` is specified.\n   */\n  small?: boolean;\n  /**\n   * Custom color for the icon and label of the `FAB`.\n   */\n  color?: string;\n  /**\n   * Whether `FAB` is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Whether `FAB` is currently visible.\n   */\n  visible?: boolean;\n  /**\n   * Whether to show a loading indicator.\n   */\n  loading?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  testID?: string;\n};\n\n/**\n * A floating action button represents the primary action in an application.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/fab-1.png\" />\n *   <img src=\"screenshots/fab-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { StyleSheet } from 'react-native';\n * import { FAB } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <FAB\n *     style={styles.fab}\n *     small\n *     icon=\"plus\"\n *     onPress={() => console.log('Pressed')}\n *   />\n * );\n *\n * const styles = StyleSheet.create({\n *   fab: {\n *     position: 'absolute',\n *     margin: 16,\n *     right: 0,\n *     bottom: 0,\n *   },\n * })\n *\n * export default MyComponent;\n * ```\n */\nconst FAB = ({\n  small,\n  icon,\n  label,\n  accessibilityLabel = label,\n  accessibilityState,\n  animated = true,\n  color: customColor,\n  disabled,\n  onPress,\n  onLongPress,\n  theme,\n  style,\n  visible = true,\n  uppercase = true,\n  loading,\n  testID,\n  ...rest\n}: Props) => {\n  const { current: visibility } = React.useRef<Animated.Value>(\n    new Animated.Value(visible ? 1 : 0)\n  );\n  const { scale } = theme.animation;\n\n  React.useEffect(() => {\n    if (visible) {\n      Animated.timing(visibility, {\n        toValue: 1,\n        duration: 200 * scale,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      Animated.timing(visibility, {\n        toValue: 0,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [visible, scale, visibility]);\n\n  const IconComponent = animated ? CrossFadeIcon : Icon;\n\n  const disabledColor = color(theme.dark ? white : black)\n    .alpha(0.12)\n    .rgb()\n    .string();\n\n  const {\n    backgroundColor = disabled ? disabledColor : theme.colors.accent,\n  } = (StyleSheet.flatten(style) || {}) as ViewStyle;\n\n  let foregroundColor;\n\n  if (typeof customColor !== 'undefined') {\n    foregroundColor = customColor;\n  } else if (disabled) {\n    foregroundColor = color(theme.dark ? white : black)\n      .alpha(0.32)\n      .rgb()\n      .string();\n  } else {\n    foregroundColor = getContrastingColor(\n      backgroundColor,\n      white,\n      'rgba(0, 0, 0, .54)'\n    );\n  }\n\n  const rippleColor = color(foregroundColor).alpha(0.32).rgb().string();\n\n  return (\n    <Surface\n      {...rest}\n      style={\n        [\n          {\n            backgroundColor,\n            opacity: visibility,\n            transform: [\n              {\n                scale: visibility,\n              },\n            ],\n          },\n          styles.container,\n          disabled && styles.disabled,\n          style,\n        ] as StyleProp<ViewStyle>\n      }\n      pointerEvents={visible ? 'auto' : 'none'}\n    >\n      <TouchableRipple\n        borderless\n        onPress={onPress}\n        onLongPress={onLongPress}\n        rippleColor={rippleColor}\n        disabled={disabled}\n        accessibilityLabel={accessibilityLabel}\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={{ ...accessibilityState, disabled }}\n        style={styles.touchable}\n        testID={testID}\n      >\n        <View\n          style={[\n            styles.content,\n            label ? styles.extended : small ? styles.small : styles.standard,\n          ]}\n          pointerEvents=\"none\"\n        >\n          {icon && loading !== true ? (\n            <IconComponent source={icon} size={24} color={foregroundColor} />\n          ) : null}\n          {loading ? (\n            <ActivityIndicator size={18} color={foregroundColor} />\n          ) : null}\n          {label ? (\n            <Text\n              selectable={false}\n              style={[\n                styles.label,\n                uppercase && styles.uppercaseLabel,\n                { color: foregroundColor, ...theme.fonts.medium },\n              ]}\n            >\n              {label}\n            </Text>\n          ) : null}\n        </View>\n      </TouchableRipple>\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 28,\n    elevation: 6,\n  },\n  touchable: {\n    borderRadius: 28,\n  },\n  standard: {\n    height: 56,\n    width: 56,\n  },\n  small: {\n    height: 40,\n    width: 40,\n  },\n  extended: {\n    height: 48,\n    paddingHorizontal: 16,\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  label: {\n    marginHorizontal: 8,\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase',\n  },\n  disabled: {\n    elevation: 0,\n  },\n});\n\nexport default withTheme(FAB);\n\n// @component-docs ignore-next-line\nconst FABWithTheme = withTheme(FAB);\n// @component-docs ignore-next-line\nexport { FABWithTheme as FAB };\n"]},"metadata":{},"sourceType":"module"}