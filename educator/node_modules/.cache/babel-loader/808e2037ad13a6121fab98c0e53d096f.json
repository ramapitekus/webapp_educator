{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { marshalPromiseToCallbacks } from \"../../common/Exports\";\nimport { Contracts } from \"../../sdk/Contracts\";\nimport { PropertyId, Recognizer } from \"../../sdk/Exports\";\nimport { RecognitionMode, RecognizerConfig, TranscriberConnectionFactory, TranscriptionServiceRecognizer } from \"../Exports\";\nexport class TranscriberRecognizer extends Recognizer {\n  /**\r\n   * TranscriberRecognizer constructor.\r\n   * @constructor\r\n   * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n   */\n  constructor(speechTranslationConfig, audioConfig) {\n    const speechTranslationConfigImpl = speechTranslationConfig;\n    Contracts.throwIfNull(speechTranslationConfigImpl, \"speechTranslationConfig\");\n    Contracts.throwIfNullOrWhitespace(speechTranslationConfigImpl.speechRecognitionLanguage, PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\n    super(audioConfig, speechTranslationConfigImpl.properties, new TranscriberConnectionFactory());\n    this.privDisposedRecognizer = false;\n  }\n\n  getConversationInfo() {\n    Contracts.throwIfNullOrUndefined(this.privConversation, \"Conversation\");\n    return this.privConversation.conversationInfo;\n  }\n\n  get authorizationToken() {\n    return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n  }\n\n  set authorizationToken(token) {\n    Contracts.throwIfNullOrWhitespace(token, \"token\");\n    this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\n  }\n\n  set conversation(c) {\n    Contracts.throwIfNullOrUndefined(c, \"Conversation\");\n    this.privConversation = c;\n  }\n\n  get speechRecognitionLanguage() {\n    Contracts.throwIfDisposed(this.privDisposedRecognizer);\n    return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\n  }\n\n  get properties() {\n    return this.privProperties;\n  }\n\n  startContinuousRecognitionAsync(cb, err) {\n    marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\n  }\n\n  stopContinuousRecognitionAsync(cb, err) {\n    marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\n  }\n\n  close() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.privDisposedRecognizer) {\n        yield this.dispose(true);\n      }\n    });\n  } // Push async join/leave conversation message via serviceRecognizer\n\n\n  pushConversationEvent(conversationInfo, command) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const reco = this.privReco;\n      Contracts.throwIfNullOrUndefined(reco, \"serviceRecognizer\");\n      yield reco.sendSpeechEventAsync(conversationInfo, command);\n    });\n  }\n\n  connectCallbacks(transcriber) {\n    this.canceled = (s, e) => {\n      if (!!transcriber.canceled) {\n        transcriber.canceled(transcriber, e);\n      }\n    };\n\n    this.conversationCanceled = (s, e) => {\n      if (!!transcriber.conversationCanceled) {\n        transcriber.conversationCanceled(transcriber, e);\n      }\n    };\n\n    this.recognizing = (s, e) => {\n      if (!!transcriber.transcribing) {\n        transcriber.transcribing(transcriber, e);\n      }\n    };\n\n    this.recognized = (s, e) => {\n      if (!!transcriber.transcribed) {\n        transcriber.transcribed(transcriber, e);\n      }\n    };\n\n    this.conversationStarted = (s, e) => {\n      if (!!transcriber.conversationStarted) {\n        transcriber.conversationStarted(transcriber, e);\n      }\n    };\n\n    this.conversationStopped = (s, e) => {\n      if (!!transcriber.conversationStopped) {\n        transcriber.conversationStopped(transcriber, e);\n      }\n    };\n\n    this.sessionStarted = (s, e) => {\n      if (!!transcriber.sessionStarted) {\n        transcriber.sessionStarted(transcriber, e);\n      }\n    };\n\n    this.sessionStopped = (s, e) => {\n      if (!!transcriber.sessionStopped) {\n        transcriber.sessionStopped(transcriber, e);\n      }\n    };\n  }\n\n  disconnectCallbacks() {\n    this.canceled = undefined;\n    this.recognizing = undefined;\n    this.recognized = undefined;\n    this.sessionStarted = undefined;\n    this.sessionStopped = undefined;\n    this.conversationCanceled = undefined;\n    this.conversationStarted = undefined;\n    this.conversationStopped = undefined;\n  }\n  /**\r\n   * Disposes any resources held by the object.\r\n   * @member ConversationTranscriber.prototype.dispose\r\n   * @function\r\n   * @public\r\n   * @param {boolean} disposing - true if disposing the object.\r\n   */\n\n\n  dispose(disposing) {\n    const _super = Object.create(null, {\n      dispose: {\n        get: () => super.dispose\n      }\n    });\n\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.privDisposedRecognizer) {\n        return;\n      }\n\n      if (disposing) {\n        this.privDisposedRecognizer = true;\n        yield this.implRecognizerStop();\n      }\n\n      yield _super.dispose.call(this, disposing);\n    });\n  }\n\n  createRecognizerConfig(speechConfig) {\n    return new RecognizerConfig(speechConfig, this.properties);\n  }\n\n  createServiceRecognizer(authentication, connectionFactory, audioConfig, recognizerConfig) {\n    const configImpl = audioConfig;\n    return new TranscriptionServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\n  }\n\n}","map":{"version":3,"mappings":"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","names":["marshalPromiseToCallbacks","Contracts","PropertyId","Recognizer","RecognitionMode","RecognizerConfig","TranscriberConnectionFactory","TranscriptionServiceRecognizer","TranscriberRecognizer","constructor","speechTranslationConfig","audioConfig","speechTranslationConfigImpl","throwIfNull","throwIfNullOrWhitespace","speechRecognitionLanguage","SpeechServiceConnection_RecoLanguage","properties","privDisposedRecognizer","getConversationInfo","throwIfNullOrUndefined","privConversation","conversationInfo","authorizationToken","getProperty","SpeechServiceAuthorization_Token","token","setProperty","conversation","c","throwIfDisposed","privProperties","startContinuousRecognitionAsync","cb","err","startContinuousRecognitionAsyncImpl","Conversation","stopContinuousRecognitionAsync","stopContinuousRecognitionAsyncImpl","close","dispose","pushConversationEvent","command","reco","privReco","sendSpeechEventAsync","connectCallbacks","transcriber","canceled","s","e","conversationCanceled","recognizing","transcribing","recognized","transcribed","conversationStarted","conversationStopped","sessionStarted","sessionStopped","disconnectCallbacks","undefined","disposing","implRecognizerStop","_super","call","createRecognizerConfig","speechConfig","createServiceRecognizer","authentication","connectionFactory","recognizerConfig","configImpl"],"sources":["C:\\Users\\ozgur\\Documents\\VSCodeProjects\\webapp_educator\\educator\\node_modules\\microsoft-cognitiveservices-speech-sdk\\distrib\\es2015\\src\\common.speech\\Transcription\\src\\common.speech\\Transcription\\TranscriberRecognizer.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { marshalPromiseToCallbacks } from \"../../common/Exports\";\r\nimport { AudioConfigImpl } from \"../../sdk/Audio/AudioConfig\";\r\nimport { Contracts } from \"../../sdk/Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    CancellationEventArgs,\r\n    Conversation,\r\n    ConversationInfo,\r\n    ConversationTranscriber,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SessionEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechTranslationConfig,\r\n    SpeechTranslationConfigImpl,\r\n} from \"../../sdk/Exports\";\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n    TranscriberConnectionFactory,\r\n    TranscriptionServiceRecognizer,\r\n} from \"../Exports\";\r\n\r\nexport class TranscriberRecognizer extends Recognizer {\r\n    private privDisposedRecognizer: boolean;\r\n    private privConversation: Conversation;\r\n\r\n    /**\r\n     * TranscriberRecognizer constructor.\r\n     * @constructor\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public constructor(speechTranslationConfig: SpeechTranslationConfig, audioConfig?: AudioConfig) {\r\n        const speechTranslationConfigImpl: SpeechTranslationConfigImpl = speechTranslationConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(speechTranslationConfigImpl, \"speechTranslationConfig\");\r\n\r\n        Contracts.throwIfNullOrWhitespace(\r\n            speechTranslationConfigImpl.speechRecognitionLanguage,\r\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n        super(audioConfig, speechTranslationConfigImpl.properties, new TranscriberConnectionFactory());\r\n        this.privDisposedRecognizer = false;\r\n    }\r\n\r\n    public recognizing: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    public recognized: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    public canceled: (sender: Recognizer, event: CancellationEventArgs) => void;\r\n\r\n    public conversationCanceled: (sender: Recognizer, event: CancellationEventArgs) => void;\r\n\r\n    public conversationStarted: (sender: Recognizer, event: SessionEventArgs) => void;\r\n\r\n    public conversationStopped: (sender: Recognizer, event: SessionEventArgs) => void;\r\n\r\n    public getConversationInfo(): ConversationInfo {\r\n        Contracts.throwIfNullOrUndefined(this.privConversation, \"Conversation\");\r\n        return this.privConversation.conversationInfo;\r\n    }\r\n\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    public set conversation(c: Conversation) {\r\n        Contracts.throwIfNullOrUndefined(c, \"Conversation\");\r\n        this.privConversation = c;\r\n    }\r\n\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    public async close(): Promise<void> {\r\n        if (!this.privDisposedRecognizer) {\r\n            await this.dispose(true);\r\n        }\r\n    }\r\n\r\n    // Push async join/leave conversation message via serviceRecognizer\r\n    public async pushConversationEvent(conversationInfo: ConversationInfo, command: string): Promise<void> {\r\n        const reco = (this.privReco) as TranscriptionServiceRecognizer;\r\n        Contracts.throwIfNullOrUndefined(reco, \"serviceRecognizer\");\r\n        await reco.sendSpeechEventAsync(conversationInfo, command);\r\n    }\r\n\r\n    public connectCallbacks(transcriber: ConversationTranscriber): void {\r\n        this.canceled = (s: any, e: CancellationEventArgs): void => {\r\n            if (!!transcriber.canceled) {\r\n                transcriber.canceled(transcriber, e);\r\n            }\r\n        };\r\n        this.conversationCanceled = (s: any, e: CancellationEventArgs): void => {\r\n            if (!!transcriber.conversationCanceled) {\r\n                transcriber.conversationCanceled(transcriber, e);\r\n            }\r\n        };\r\n        this.recognizing = (s: any, e: SpeechRecognitionEventArgs): void => {\r\n            if (!!transcriber.transcribing) {\r\n                transcriber.transcribing(transcriber, e);\r\n            }\r\n        };\r\n        this.recognized = (s: any, e: SpeechRecognitionEventArgs): void => {\r\n            if (!!transcriber.transcribed) {\r\n                transcriber.transcribed(transcriber, e);\r\n            }\r\n        };\r\n        this.conversationStarted = (s: any, e: SessionEventArgs): void => {\r\n            if (!!transcriber.conversationStarted) {\r\n                transcriber.conversationStarted(transcriber, e);\r\n            }\r\n        };\r\n        this.conversationStopped = (s: any, e: SessionEventArgs): void => {\r\n            if (!!transcriber.conversationStopped) {\r\n                transcriber.conversationStopped(transcriber, e);\r\n            }\r\n        };\r\n        this.sessionStarted = (s: any, e: SessionEventArgs): void => {\r\n            if (!!transcriber.sessionStarted) {\r\n                transcriber.sessionStarted(transcriber, e);\r\n            }\r\n        };\r\n        this.sessionStopped = (s: any, e: SessionEventArgs): void => {\r\n            if (!!transcriber.sessionStopped) {\r\n                transcriber.sessionStopped(transcriber, e);\r\n            }\r\n        };\r\n    }\r\n\r\n    public disconnectCallbacks(): void {\r\n        this.canceled = undefined;\r\n        this.recognizing = undefined;\r\n        this.recognized = undefined;\r\n        this.sessionStarted = undefined;\r\n        this.sessionStopped = undefined;\r\n        this.conversationCanceled = undefined;\r\n        this.conversationStarted = undefined;\r\n        this.conversationStopped = undefined;\r\n    }\r\n\r\n    /**\r\n     * Disposes any resources held by the object.\r\n     * @member ConversationTranscriber.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - true if disposing the object.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privDisposedRecognizer = true;\r\n            await this.implRecognizerStop();\r\n        }\r\n\r\n        await super.dispose(disposing);\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(\r\n            speechConfig,\r\n            this.properties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new TranscriptionServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}