{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { EventType } from \"../common/Exports\";\nexport class ConsoleLoggingListener {\n  constructor() {\n    let logLevelFilter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : EventType.Warning;\n\n    this.onEvent = event => {\n      if (event.eventType >= this.privLogLevelFilter) {\n        const log = this.toString(event);\n\n        switch (event.eventType) {\n          case EventType.Debug:\n            // tslint:disable-next-line:no-console\n            console.debug(log);\n            break;\n\n          case EventType.Info:\n            // tslint:disable-next-line:no-console\n            console.info(log);\n            break;\n\n          case EventType.Warning:\n            // tslint:disable-next-line:no-console\n            console.warn(log);\n            break;\n\n          case EventType.Error:\n            // tslint:disable-next-line:no-console\n            console.error(log);\n            break;\n\n          default:\n            // tslint:disable-next-line:no-console\n            console.log(log);\n            break;\n        }\n      }\n    };\n\n    this.toString = event => {\n      const logFragments = [`${event.EventTime}`, `${event.Name}`];\n\n      for (const prop in event) {\n        if (prop && event.hasOwnProperty(prop) && prop !== \"eventTime\" && prop !== \"eventType\" && prop !== \"eventId\" && prop !== \"name\" && prop !== \"constructor\") {\n          const value = event[prop];\n          let valueToLog = \"<NULL>\";\n\n          if (value !== undefined && value !== null) {\n            if (typeof value === \"number\" || typeof value === \"string\") {\n              valueToLog = value.toString();\n            } else {\n              valueToLog = JSON.stringify(value);\n            }\n          }\n\n          logFragments.push(`${prop}: ${valueToLog}`);\n        }\n      }\n\n      return logFragments.join(\" | \");\n    };\n\n    this.privLogLevelFilter = logLevelFilter;\n  }\n\n}","map":{"version":3,"mappings":"AAAA;AACA;AAEA,SAASA,SAAT,QAAyD,mBAAzD;AAEA,OAAM,MAAOC,sBAAP,CAA6B;AAG/BC,gBAAgE;AAAA,QAA7CC,cAA6C,uEAAjBH,SAAS,CAACI,OAAO;;AAIzD,mBAAWC,KAAD,IAA+B;AAC5C,UAAIA,KAAK,CAACC,SAAN,IAAmB,KAAKC,kBAA5B,EAAgD;AAC5C,cAAMC,GAAG,GAAG,KAAKC,QAAL,CAAcJ,KAAd,CAAZ;;AAEA,gBAAQA,KAAK,CAACC,SAAd;AACI,eAAKN,SAAS,CAACU,KAAf;AACI;AACAC,mBAAO,CAACC,KAAR,CAAcJ,GAAd;AACA;;AACJ,eAAKR,SAAS,CAACa,IAAf;AACI;AACAF,mBAAO,CAACG,IAAR,CAAaN,GAAb;AACA;;AACJ,eAAKR,SAAS,CAACI,OAAf;AACI;AACAO,mBAAO,CAACI,IAAR,CAAaP,GAAb;AACA;;AACJ,eAAKR,SAAS,CAACgB,KAAf;AACI;AACAL,mBAAO,CAACM,KAAR,CAAcT,GAAd;AACA;;AACJ;AACI;AACAG,mBAAO,CAACH,GAAR,CAAYA,GAAZ;AACA;AApBR;AAsBH;AACJ,KA3BM;;AA6BC,oBAAYH,KAAD,IAAuB;AACtC,YAAMa,YAAY,GAAG,CACjB,GAAGb,KAAK,CAACc,SAAS,EADD,EAEjB,GAAGd,KAAK,CAACe,IAAI,EAFI,CAArB;;AAKA,WAAK,MAAMC,IAAX,IAAmBhB,KAAnB,EAA0B;AACtB,YAAIgB,IAAI,IAAIhB,KAAK,CAACiB,cAAN,CAAqBD,IAArB,CAAR,IACAA,IAAI,KAAK,WADT,IACwBA,IAAI,KAAK,WADjC,IAEAA,IAAI,KAAK,SAFT,IAEsBA,IAAI,KAAK,MAF/B,IAGAA,IAAI,KAAK,aAHb,EAG4B;AACxB,gBAAME,KAAK,GAAGlB,KAAK,CAACgB,IAAD,CAAnB;AACA,cAAIG,UAAU,GAAG,QAAjB;;AACA,cAAID,KAAK,KAAKE,SAAV,IAAuBF,KAAK,KAAK,IAArC,EAA2C;AACvC,gBAAI,OAAQA,KAAR,KAAmB,QAAnB,IAA+B,OAAQA,KAAR,KAAmB,QAAtD,EAAgE;AAC5DC,wBAAU,GAAGD,KAAK,CAACd,QAAN,EAAb;AACH,aAFD,MAEO;AACHe,wBAAU,GAAGE,IAAI,CAACC,SAAL,CAAeJ,KAAf,CAAb;AACH;AACJ;;AAEDL,sBAAY,CAACU,IAAb,CAAkB,GAAGP,IAAI,KAAKG,UAAU,EAAxC;AACH;AAEJ;;AAED,aAAON,YAAY,CAACW,IAAb,CAAkB,KAAlB,CAAP;AACH,KA3BO;;AAhCJ,SAAKtB,kBAAL,GAA0BJ,cAA1B;AACH;;AAL8B","names":["EventType","ConsoleLoggingListener","constructor","logLevelFilter","Warning","event","eventType","privLogLevelFilter","log","toString","Debug","console","debug","Info","info","warn","Error","error","logFragments","EventTime","Name","prop","hasOwnProperty","value","valueToLog","undefined","JSON","stringify","push","join"],"sources":["C:\\Users\\ozgur\\Documents\\VSCodeProjects\\webapp_educator\\educator\\node_modules\\microsoft-cognitiveservices-speech-sdk\\distrib\\es2015\\src\\common.browser\\src\\common.browser\\ConsoleLoggingListener.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { EventType, IEventListener, PlatformEvent } from \"../common/Exports\";\r\n\r\nexport class ConsoleLoggingListener implements IEventListener<PlatformEvent> {\r\n    private privLogLevelFilter: EventType;\r\n\r\n    public constructor(logLevelFilter: EventType = EventType.Warning) {\r\n        this.privLogLevelFilter = logLevelFilter;\r\n    }\r\n\r\n    public onEvent = (event: PlatformEvent): void => {\r\n        if (event.eventType >= this.privLogLevelFilter) {\r\n            const log = this.toString(event);\r\n\r\n            switch (event.eventType) {\r\n                case EventType.Debug:\r\n                    // tslint:disable-next-line:no-console\r\n                    console.debug(log);\r\n                    break;\r\n                case EventType.Info:\r\n                    // tslint:disable-next-line:no-console\r\n                    console.info(log);\r\n                    break;\r\n                case EventType.Warning:\r\n                    // tslint:disable-next-line:no-console\r\n                    console.warn(log);\r\n                    break;\r\n                case EventType.Error:\r\n                    // tslint:disable-next-line:no-console\r\n                    console.error(log);\r\n                    break;\r\n                default:\r\n                    // tslint:disable-next-line:no-console\r\n                    console.log(log);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    private toString = (event: any): string => {\r\n        const logFragments = [\r\n            `${event.EventTime}`,\r\n            `${event.Name}`,\r\n        ];\r\n\r\n        for (const prop in event) {\r\n            if (prop && event.hasOwnProperty(prop) &&\r\n                prop !== \"eventTime\" && prop !== \"eventType\" &&\r\n                prop !== \"eventId\" && prop !== \"name\" &&\r\n                prop !== \"constructor\") {\r\n                const value = event[prop];\r\n                let valueToLog = \"<NULL>\";\r\n                if (value !== undefined && value !== null) {\r\n                    if (typeof (value) === \"number\" || typeof (value) === \"string\") {\r\n                        valueToLog = value.toString();\r\n                    } else {\r\n                        valueToLog = JSON.stringify(value);\r\n                    }\r\n                }\r\n\r\n                logFragments.push(`${prop}: ${valueToLog}`);\r\n            }\r\n\r\n        }\r\n\r\n        return logFragments.join(\" | \");\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}