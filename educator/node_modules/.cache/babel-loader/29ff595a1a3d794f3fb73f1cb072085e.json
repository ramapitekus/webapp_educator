{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport color from 'color';\nimport { Animated, View, StyleSheet, Easing, ScrollView, Text, Platform, I18nManager } from 'react-native';\nimport Surface from '../../Surface';\nimport Icon from '../../Icon';\nimport TouchableRipple from '../../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../../core/theming';\nimport { white, black } from '../../../styles/colors';\nimport AnimatedText from '../../Typography/AnimatedText';\nimport { getCombinedStyles } from './utils';\nconst SIZE = 56;\nconst BORDER_RADIUS = SIZE / 2;\nconst SCALE = 0.9;\n\nconst AnimatedFAB = _ref => {\n  let {\n    icon,\n    label,\n    accessibilityLabel = label,\n    accessibilityState,\n    color: customColor,\n    disabled,\n    onPress,\n    onLongPress,\n    theme,\n    style,\n    visible = true,\n    uppercase = true,\n    testID,\n    animateFrom = 'right',\n    extended = false,\n    iconMode = 'dynamic',\n    ...rest\n  } = _ref;\n  const isIOS = Platform.OS === 'ios';\n  const isAnimatedFromRight = animateFrom === 'right';\n  const isIconStatic = iconMode === 'static';\n  const {\n    isRTL\n  } = I18nManager;\n  const {\n    current: visibility\n  } = React.useRef(new Animated.Value(visible ? 1 : 0));\n  const {\n    current: animFAB\n  } = React.useRef(new Animated.Value(0));\n  const {\n    scale\n  } = theme.animation;\n  const [textWidth, setTextWidth] = React.useState(0);\n  const [textHeight, setTextHeight] = React.useState(0);\n  React.useEffect(() => {\n    if (visible) {\n      Animated.timing(visibility, {\n        toValue: 1,\n        duration: 200 * scale,\n        useNativeDriver: true\n      }).start();\n    } else {\n      Animated.timing(visibility, {\n        toValue: 0,\n        duration: 150 * scale,\n        useNativeDriver: true\n      }).start();\n    }\n  }, [visible, scale, visibility]);\n  const disabledColor = color(theme.dark ? white : black).alpha(0.12).rgb().string();\n  const {\n    backgroundColor = disabled ? disabledColor : theme.colors.accent\n  } = StyleSheet.flatten(style) || {};\n  let foregroundColor;\n\n  if (typeof customColor !== 'undefined') {\n    foregroundColor = customColor;\n  } else if (disabled) {\n    foregroundColor = color(theme.dark ? white : black).alpha(0.32).rgb().string();\n  } else {\n    foregroundColor = !color(backgroundColor).isLight() ? white : 'rgba(0, 0, 0, .54)';\n  }\n\n  const rippleColor = color(foregroundColor).alpha(0.32).rgb().string();\n  const extendedWidth = textWidth + 1.5 * SIZE;\n  const distance = isAnimatedFromRight ? -textWidth - BORDER_RADIUS : textWidth + BORDER_RADIUS;\n  React.useEffect(() => {\n    Animated.timing(animFAB, {\n      toValue: !extended ? 0 : distance,\n      duration: 150 * scale,\n      useNativeDriver: true,\n      easing: Easing.linear\n    }).start();\n  }, [animFAB, scale, distance, extended]);\n\n  const onTextLayout = _ref2 => {\n    let {\n      nativeEvent\n    } = _ref2;\n    const currentWidth = Math.ceil(nativeEvent.lines[0].width);\n    const currentHeight = Math.ceil(nativeEvent.lines[0].height);\n\n    if (currentWidth !== textWidth || currentHeight !== textHeight) {\n      setTextHeight(currentHeight);\n\n      if (isIOS) {\n        return setTextWidth(currentWidth - 12);\n      }\n\n      setTextWidth(currentWidth);\n    }\n  };\n\n  const propForDirection = right => {\n    if (isAnimatedFromRight) {\n      return right;\n    }\n\n    return right.reverse();\n  };\n\n  const combinedStyles = getCombinedStyles({\n    isAnimatedFromRight,\n    isIconStatic,\n    distance,\n    animFAB\n  });\n  return /*#__PURE__*/React.createElement(Surface, _extends({}, rest, {\n    style: [{\n      opacity: visibility,\n      transform: [{\n        scale: visibility\n      }],\n      elevation: isIOS ? 6 : 0\n    }, styles.container, disabled && styles.disabled, style]\n  }), /*#__PURE__*/React.createElement(Animated.View, {\n    style: [{\n      transform: [{\n        scaleY: animFAB.interpolate({\n          inputRange: propForDirection([distance, 0]),\n          outputRange: propForDirection([SCALE, 1])\n        })\n      }]\n    }, styles.standard]\n  }, /*#__PURE__*/React.createElement(View, {\n    style: [StyleSheet.absoluteFill, styles.shadowWrapper]\n  }, /*#__PURE__*/React.createElement(Animated.View, {\n    pointerEvents: \"none\",\n    style: [StyleSheet.absoluteFill, styles.shadow, {\n      width: extendedWidth,\n      opacity: animFAB.interpolate({\n        inputRange: propForDirection([distance, 0.9 * distance, 0]),\n        outputRange: propForDirection([1, 0.15, 0])\n      })\n    }]\n  }), /*#__PURE__*/React.createElement(Animated.View, {\n    pointerEvents: \"none\",\n    style: [StyleSheet.absoluteFill, styles.shadow, {\n      opacity: animFAB.interpolate({\n        inputRange: propForDirection([distance, 0.9 * distance, 0]),\n        outputRange: propForDirection([0, 0.85, 1])\n      }),\n      width: SIZE,\n      borderRadius: animFAB.interpolate({\n        inputRange: propForDirection([distance, 0]),\n        outputRange: propForDirection([SIZE / (extendedWidth / SIZE), BORDER_RADIUS])\n      })\n    }, combinedStyles.absoluteFill]\n  })), /*#__PURE__*/React.createElement(Animated.View, {\n    pointerEvents: \"box-none\",\n    style: [styles.innerWrapper]\n  }, /*#__PURE__*/React.createElement(Animated.View, {\n    style: [styles.standard, {\n      width: extendedWidth,\n      backgroundColor\n    }, combinedStyles.innerWrapper]\n  }, /*#__PURE__*/React.createElement(TouchableRipple, {\n    borderless: true,\n    onPress: onPress,\n    onLongPress: onLongPress,\n    rippleColor: rippleColor,\n    disabled: disabled,\n    accessibilityLabel: accessibilityLabel // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n    ,\n    accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: { ...accessibilityState,\n      disabled\n    },\n    testID: testID,\n    style: styles.touchable\n  }, /*#__PURE__*/React.createElement(View, {\n    style: [styles.standard, {\n      width: extendedWidth\n    }]\n  }))))), /*#__PURE__*/React.createElement(Animated.View, {\n    style: [styles.iconWrapper, combinedStyles.iconWrapper],\n    pointerEvents: \"none\"\n  }, /*#__PURE__*/React.createElement(Icon, {\n    source: icon,\n    size: 24,\n    color: foregroundColor\n  })), /*#__PURE__*/React.createElement(View, {\n    pointerEvents: \"none\"\n  }, /*#__PURE__*/React.createElement(AnimatedText, {\n    numberOfLines: 1,\n    onTextLayout: isIOS ? onTextLayout : undefined,\n    ellipsizeMode: 'tail',\n    style: [{\n      [isAnimatedFromRight || isRTL ? 'right' : 'left']: isIconStatic ? isIOS ? SIZE - 10 : SIZE - 12 : BORDER_RADIUS\n    }, {\n      minWidth: textWidth,\n      top: -BORDER_RADIUS - textHeight / 2,\n      opacity: animFAB.interpolate({\n        inputRange: propForDirection([distance, 0.7 * distance, 0]),\n        outputRange: propForDirection([1, 0, 0])\n      }),\n      transform: [{\n        translateX: animFAB.interpolate({\n          inputRange: propForDirection([distance, 0]),\n          outputRange: propForDirection([0, SIZE])\n        })\n      }]\n    }, styles.label, uppercase && styles.uppercaseLabel, {\n      color: foregroundColor,\n      ...theme.fonts.medium\n    }]\n  }, label)), !isIOS &&\n  /*#__PURE__*/\n  // Method `onTextLayout` on Android returns sizes of text visible on the screen,\n  // however during render the text in `FAB` isn't fully visible. In order to get\n  // proper text measurements there is a need to additionaly render that text, but\n  // wrapped in absolutely positioned `ScrollView` which height is 0.\n  React.createElement(ScrollView, {\n    style: styles.textPlaceholderContainer\n  }, /*#__PURE__*/React.createElement(Text, {\n    onTextLayout: onTextLayout\n  }, label)));\n};\n\nconst styles = StyleSheet.create({\n  standard: {\n    height: SIZE,\n    borderRadius: BORDER_RADIUS\n  },\n  disabled: {\n    elevation: 0\n  },\n  container: {\n    position: 'absolute',\n    backgroundColor: 'transparent',\n    borderRadius: BORDER_RADIUS\n  },\n  innerWrapper: {\n    flexDirection: 'row',\n    overflow: 'hidden',\n    borderRadius: BORDER_RADIUS\n  },\n  shadowWrapper: {\n    elevation: 0\n  },\n  shadow: {\n    elevation: 6,\n    borderRadius: BORDER_RADIUS\n  },\n  touchable: {\n    borderRadius: BORDER_RADIUS\n  },\n  iconWrapper: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    position: 'absolute',\n    height: SIZE,\n    width: SIZE\n  },\n  label: {\n    position: 'absolute'\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase'\n  },\n  textPlaceholderContainer: {\n    height: 0,\n    position: 'absolute'\n  }\n});\nexport default withTheme(AnimatedFAB);","map":{"version":3,"mappings":"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","names":["React","color","Animated","View","StyleSheet","Easing","ScrollView","Text","Platform","I18nManager","Surface","Icon","TouchableRipple","withTheme","white","black","AnimatedText","getCombinedStyles","SIZE","BORDER_RADIUS","SCALE","AnimatedFAB","icon","label","accessibilityLabel","accessibilityState","customColor","disabled","onPress","onLongPress","theme","style","visible","uppercase","testID","animateFrom","extended","iconMode","rest","isIOS","OS","isAnimatedFromRight","isIconStatic","isRTL","current","visibility","useRef","Value","animFAB","scale","animation","textWidth","setTextWidth","useState","textHeight","setTextHeight","useEffect","timing","toValue","duration","useNativeDriver","start","disabledColor","dark","alpha","rgb","string","backgroundColor","colors","accent","flatten","foregroundColor","isLight","rippleColor","extendedWidth","distance","easing","linear","onTextLayout","nativeEvent","currentWidth","Math","ceil","lines","width","currentHeight","height","propForDirection","right","reverse","combinedStyles","opacity","transform","elevation","styles","container","scaleY","interpolate","inputRange","outputRange","standard","absoluteFill","shadowWrapper","pointerEvents","shadow","borderRadius","innerWrapper","borderless","accessibilityTraits","accessibilityComponentType","accessibilityRole","touchable","iconWrapper","source","size","numberOfLines","undefined","ellipsizeMode","minWidth","top","translateX","uppercaseLabel","fonts","medium","textPlaceholderContainer","create","position","flexDirection","overflow","alignItems","justifyContent","textTransform"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\node_modules\\react-native-paper\\lib\\module\\components\\FAB\\AnimatedFAB\\AnimatedFAB.tsx"],"sourcesContent":["import * as React from 'react';\nimport color from 'color';\nimport {\n  Animated,\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  Easing,\n  ScrollView,\n  Text,\n  Platform,\n  I18nManager,\n} from 'react-native';\nimport Surface from '../../Surface';\nimport Icon from '../../Icon';\nimport TouchableRipple from '../../TouchableRipple/TouchableRipple';\nimport type { $RemoveChildren } from '../../../types';\nimport type { IconSource } from '../../Icon';\nimport { withTheme } from '../../../core/theming';\nimport type {\n  AccessibilityState,\n  NativeSyntheticEvent,\n  TextLayoutEventData,\n} from 'react-native';\nimport { white, black } from '../../../styles/colors';\nimport AnimatedText from '../../Typography/AnimatedText';\nimport { getCombinedStyles } from './utils';\n\nexport type AnimatedFABIconMode = 'static' | 'dynamic';\nexport type AnimatedFABAnimateFrom = 'left' | 'right';\n\ntype Props = $RemoveChildren<typeof Surface> & {\n  /**\n   * Icon to display for the `FAB`.\n   */\n  icon: IconSource;\n  /**\n   * Label for extended `FAB`.\n   */\n  label: string;\n  /**\n   * Make the label text uppercased.\n   */\n  uppercase?: boolean;\n  /**\n   * Accessibility label for the FAB. This is read by the screen reader when the user taps the FAB.\n   * Uses `label` by default if specified.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility state for the FAB. This is read by the screen reader when the user taps the FAB.\n   */\n  accessibilityState?: AccessibilityState;\n  /**\n   * Custom color for the icon and label of the `FAB`.\n   */\n  color?: string;\n  /**\n   * Whether `FAB` is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Whether `FAB` is currently visible.\n   */\n  visible?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Whether icon should be translated to the end of extended `FAB` or be static and stay in the same place. The default value is `dynamic`.\n   */\n  iconMode?: AnimatedFABIconMode;\n  /**\n   * Indicates from which direction animation should be performed. The default value is `right`.\n   */\n  animateFrom?: AnimatedFABAnimateFrom;\n  /**\n   * Whether `FAB` should start animation to extend.\n   */\n  extended: boolean;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  testID?: string;\n};\n\nconst SIZE = 56;\nconst BORDER_RADIUS = SIZE / 2;\nconst SCALE = 0.9;\n\nconst AnimatedFAB = ({\n  icon,\n  label,\n  accessibilityLabel = label,\n  accessibilityState,\n  color: customColor,\n  disabled,\n  onPress,\n  onLongPress,\n  theme,\n  style,\n  visible = true,\n  uppercase = true,\n  testID,\n  animateFrom = 'right',\n  extended = false,\n  iconMode = 'dynamic',\n  ...rest\n}: Props) => {\n  const isIOS = Platform.OS === 'ios';\n  const isAnimatedFromRight = animateFrom === 'right';\n  const isIconStatic = iconMode === 'static';\n  const { isRTL } = I18nManager;\n  const { current: visibility } = React.useRef<Animated.Value>(\n    new Animated.Value(visible ? 1 : 0)\n  );\n  const { current: animFAB } = React.useRef<Animated.Value>(\n    new Animated.Value(0)\n  );\n  const { scale } = theme.animation;\n\n  const [textWidth, setTextWidth] = React.useState<number>(0);\n  const [textHeight, setTextHeight] = React.useState<number>(0);\n\n  React.useEffect(() => {\n    if (visible) {\n      Animated.timing(visibility, {\n        toValue: 1,\n        duration: 200 * scale,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      Animated.timing(visibility, {\n        toValue: 0,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [visible, scale, visibility]);\n\n  const disabledColor = color(theme.dark ? white : black)\n    .alpha(0.12)\n    .rgb()\n    .string();\n\n  const { backgroundColor = disabled ? disabledColor : theme.colors.accent } =\n    StyleSheet.flatten<ViewStyle>(style) || {};\n\n  let foregroundColor: string;\n\n  if (typeof customColor !== 'undefined') {\n    foregroundColor = customColor;\n  } else if (disabled) {\n    foregroundColor = color(theme.dark ? white : black)\n      .alpha(0.32)\n      .rgb()\n      .string();\n  } else {\n    foregroundColor = !color(backgroundColor as string).isLight()\n      ? white\n      : 'rgba(0, 0, 0, .54)';\n  }\n\n  const rippleColor = color(foregroundColor).alpha(0.32).rgb().string();\n\n  const extendedWidth = textWidth + 1.5 * SIZE;\n\n  const distance = isAnimatedFromRight\n    ? -textWidth - BORDER_RADIUS\n    : textWidth + BORDER_RADIUS;\n\n  React.useEffect(() => {\n    Animated.timing(animFAB, {\n      toValue: !extended ? 0 : distance,\n      duration: 150 * scale,\n      useNativeDriver: true,\n      easing: Easing.linear,\n    }).start();\n  }, [animFAB, scale, distance, extended]);\n\n  const onTextLayout = ({\n    nativeEvent,\n  }: NativeSyntheticEvent<TextLayoutEventData>) => {\n    const currentWidth = Math.ceil(nativeEvent.lines[0].width);\n    const currentHeight = Math.ceil(nativeEvent.lines[0].height);\n\n    if (currentWidth !== textWidth || currentHeight !== textHeight) {\n      setTextHeight(currentHeight);\n\n      if (isIOS) {\n        return setTextWidth(currentWidth - 12);\n      }\n\n      setTextWidth(currentWidth);\n    }\n  };\n\n  const propForDirection = <T,>(right: T[]): T[] => {\n    if (isAnimatedFromRight) {\n      return right;\n    }\n\n    return right.reverse();\n  };\n\n  const combinedStyles = getCombinedStyles({\n    isAnimatedFromRight,\n    isIconStatic,\n    distance,\n    animFAB,\n  });\n\n  return (\n    <Surface\n      {...rest}\n      style={\n        [\n          {\n            opacity: visibility,\n            transform: [\n              {\n                scale: visibility,\n              },\n            ],\n            elevation: isIOS ? 6 : 0,\n          },\n          styles.container,\n          disabled && styles.disabled,\n          style,\n        ] as StyleProp<ViewStyle>\n      }\n    >\n      <Animated.View\n        style={[\n          {\n            transform: [\n              {\n                scaleY: animFAB.interpolate({\n                  inputRange: propForDirection([distance, 0]),\n                  outputRange: propForDirection([SCALE, 1]),\n                }),\n              },\n            ],\n          },\n          styles.standard,\n        ]}\n      >\n        <View style={[StyleSheet.absoluteFill, styles.shadowWrapper]}>\n          <Animated.View\n            pointerEvents=\"none\"\n            style={[\n              StyleSheet.absoluteFill,\n              styles.shadow,\n              {\n                width: extendedWidth,\n                opacity: animFAB.interpolate({\n                  inputRange: propForDirection([distance, 0.9 * distance, 0]),\n                  outputRange: propForDirection([1, 0.15, 0]),\n                }),\n              },\n            ]}\n          />\n          <Animated.View\n            pointerEvents=\"none\"\n            style={[\n              StyleSheet.absoluteFill,\n              styles.shadow,\n              {\n                opacity: animFAB.interpolate({\n                  inputRange: propForDirection([distance, 0.9 * distance, 0]),\n                  outputRange: propForDirection([0, 0.85, 1]),\n                }),\n                width: SIZE,\n                borderRadius: animFAB.interpolate({\n                  inputRange: propForDirection([distance, 0]),\n                  outputRange: propForDirection([\n                    SIZE / (extendedWidth / SIZE),\n                    BORDER_RADIUS,\n                  ]),\n                }),\n              },\n              combinedStyles.absoluteFill,\n            ]}\n          />\n        </View>\n        <Animated.View pointerEvents=\"box-none\" style={[styles.innerWrapper]}>\n          <Animated.View\n            style={[\n              styles.standard,\n              {\n                width: extendedWidth,\n                backgroundColor,\n              },\n              combinedStyles.innerWrapper,\n            ]}\n          >\n            <TouchableRipple\n              borderless\n              onPress={onPress}\n              onLongPress={onLongPress}\n              rippleColor={rippleColor}\n              disabled={disabled}\n              accessibilityLabel={accessibilityLabel}\n              // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n              accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n              accessibilityComponentType=\"button\"\n              accessibilityRole=\"button\"\n              accessibilityState={{ ...accessibilityState, disabled }}\n              testID={testID}\n              style={styles.touchable}\n            >\n              <View\n                style={[\n                  styles.standard,\n                  {\n                    width: extendedWidth,\n                  },\n                ]}\n              />\n            </TouchableRipple>\n          </Animated.View>\n        </Animated.View>\n      </Animated.View>\n\n      <Animated.View\n        style={[styles.iconWrapper, combinedStyles.iconWrapper]}\n        pointerEvents=\"none\"\n      >\n        <Icon source={icon} size={24} color={foregroundColor} />\n      </Animated.View>\n\n      <View pointerEvents=\"none\">\n        <AnimatedText\n          numberOfLines={1}\n          onTextLayout={isIOS ? onTextLayout : undefined}\n          ellipsizeMode={'tail'}\n          style={[\n            {\n              [isAnimatedFromRight || isRTL ? 'right' : 'left']: isIconStatic\n                ? isIOS\n                  ? SIZE - 10\n                  : SIZE - 12\n                : BORDER_RADIUS,\n            },\n            {\n              minWidth: textWidth,\n              top: -BORDER_RADIUS - textHeight / 2,\n              opacity: animFAB.interpolate({\n                inputRange: propForDirection([distance, 0.7 * distance, 0]),\n                outputRange: propForDirection([1, 0, 0]),\n              }),\n              transform: [\n                {\n                  translateX: animFAB.interpolate({\n                    inputRange: propForDirection([distance, 0]),\n                    outputRange: propForDirection([0, SIZE]),\n                  }),\n                },\n              ],\n            },\n            styles.label,\n            uppercase && styles.uppercaseLabel,\n            {\n              color: foregroundColor,\n              ...theme.fonts.medium,\n            },\n          ]}\n        >\n          {label}\n        </AnimatedText>\n      </View>\n\n      {!isIOS && (\n        // Method `onTextLayout` on Android returns sizes of text visible on the screen,\n        // however during render the text in `FAB` isn't fully visible. In order to get\n        // proper text measurements there is a need to additionaly render that text, but\n        // wrapped in absolutely positioned `ScrollView` which height is 0.\n        <ScrollView style={styles.textPlaceholderContainer}>\n          <Text onTextLayout={onTextLayout}>{label}</Text>\n        </ScrollView>\n      )}\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  standard: {\n    height: SIZE,\n    borderRadius: BORDER_RADIUS,\n  },\n  disabled: {\n    elevation: 0,\n  },\n  container: {\n    position: 'absolute',\n    backgroundColor: 'transparent',\n    borderRadius: BORDER_RADIUS,\n  },\n  innerWrapper: {\n    flexDirection: 'row',\n    overflow: 'hidden',\n    borderRadius: BORDER_RADIUS,\n  },\n  shadowWrapper: {\n    elevation: 0,\n  },\n  shadow: {\n    elevation: 6,\n    borderRadius: BORDER_RADIUS,\n  },\n  touchable: {\n    borderRadius: BORDER_RADIUS,\n  },\n  iconWrapper: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    position: 'absolute',\n    height: SIZE,\n    width: SIZE,\n  },\n  label: {\n    position: 'absolute',\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase',\n  },\n  textPlaceholderContainer: {\n    height: 0,\n    position: 'absolute',\n  },\n});\n\nexport default withTheme(AnimatedFAB);\n"]},"metadata":{},"sourceType":"module"}