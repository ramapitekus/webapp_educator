{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\n/**\n * Portal host is the component which actually renders all Portals.\n */\n\nexport default class PortalManager extends React.PureComponent {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"state\", {\n      portals: []\n    });\n\n    _defineProperty(this, \"mount\", (key, children) => {\n      this.setState(state => ({\n        portals: [...state.portals, {\n          key,\n          children\n        }]\n      }));\n    });\n\n    _defineProperty(this, \"update\", (key, children) => this.setState(state => ({\n      portals: state.portals.map(item => {\n        if (item.key === key) {\n          return { ...item,\n            children\n          };\n        }\n\n        return item;\n      })\n    })));\n\n    _defineProperty(this, \"unmount\", key => this.setState(state => ({\n      portals: state.portals.filter(item => item.key !== key)\n    })));\n  }\n\n  render() {\n    return this.state.portals.map(_ref => {\n      let {\n        key,\n        children\n      } = _ref;\n      return /*#__PURE__*/React.createElement(View, {\n        key: key,\n        collapsable: false\n        /* Need collapsable=false here to clip the elevations, otherwise they appear above sibling components */\n        ,\n        pointerEvents: \"box-none\",\n        style: StyleSheet.absoluteFill\n      }, children);\n    });\n  }\n\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,IAAT,EAAeC,UAAf,QAAiC,cAAjC;AASA;AACA;AACA;;AACA,eAAe,MAAMC,aAAN,SAA4BH,KAAK,CAACI,aAAlC,CAA2D;AAAAC;AAAA;;AAAAC,mCACzD;AACbC,aAAO,EAAE;AADI,KADyD;;AAAAD,mCAKhE,CAACE,GAAD,EAAcC,QAAd,KAA4C;AAClD,WAAKC,QAAL,CAAeC,KAAD,KAAY;AACxBJ,eAAO,EAAE,CAAC,GAAGI,KAAK,CAACJ,OAAV,EAAmB;AAAEC,aAAF;AAAOC;AAAP,SAAnB;AADe,OAAZ,CAAd;AANsE;;AAAAH,oCAW/D,CAACE,GAAD,EAAcC,QAAd,KACP,KAAKC,QAAL,CAAeC,KAAD,KAAY;AACxBJ,aAAO,EAAEI,KAAK,CAACJ,OAANI,CAAcC,GAAdD,CAAmBE,IAAD,IAAU;AACnC,YAAIA,IAAI,CAACL,GAALK,KAAaL,GAAjB,EAAsB;AACpB,iBAAO,EAAE,GAAGK,IAAL;AAAWJ;AAAX,WAAP;AACD;;AACD,eAAOI,IAAP;AAJO;AADe,KAAZ,CAAd,CAZsE;;AAAAP,qCAqB7DE,GAAD,IACR,KAAKE,QAAL,CAAeC,KAAD,KAAY;AACxBJ,aAAO,EAAEI,KAAK,CAACJ,OAANI,CAAcG,MAAdH,CAAsBE,IAAD,IAAUA,IAAI,CAACL,GAALK,KAAaL,GAA5CG;AADe,KAAZ,CAAd,CAtBsE;AAAA;;AA0BxEI,QAAM,GAAG;AACP,WAAO,KAAKJ,KAAL,CAAWJ,OAAX,CAAmBK,GAAnB,CAAuB;AAAA,UAAC;AAAEJ,WAAF;AAAOC;AAAP,OAAD;AAAA,0BAC5BT,oBAACC,IAAD;AACEO,WAAG,EAAEA,GADP;AAEEQ,mBAAW,EACT;AAAM;AAHV;AAKEC,qBAAa,EAAC,UALhB;AAMEC,aAAK,EAAEhB,UAAU,CAACiB;AANpB,SAQGV,QARH,CAD4B;AAAA,KAAvB,CAAP;AAYD;;AAvCuE","names":["React","View","StyleSheet","PortalManager","PureComponent","constructor","_defineProperty","portals","key","children","setState","state","map","item","filter","render","collapsable","pointerEvents","style","absoluteFill"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\node_modules\\react-native-paper\\lib\\module\\components\\Portal\\PortalManager.tsx"],"sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\n\ntype State = {\n  portals: Array<{\n    key: number;\n    children: React.ReactNode;\n  }>;\n};\n\n/**\n * Portal host is the component which actually renders all Portals.\n */\nexport default class PortalManager extends React.PureComponent<{}, State> {\n  state: State = {\n    portals: [],\n  };\n\n  mount = (key: number, children: React.ReactNode) => {\n    this.setState((state) => ({\n      portals: [...state.portals, { key, children }],\n    }));\n  };\n\n  update = (key: number, children: React.ReactNode) =>\n    this.setState((state) => ({\n      portals: state.portals.map((item) => {\n        if (item.key === key) {\n          return { ...item, children };\n        }\n        return item;\n      }),\n    }));\n\n  unmount = (key: number) =>\n    this.setState((state) => ({\n      portals: state.portals.filter((item) => item.key !== key),\n    }));\n\n  render() {\n    return this.state.portals.map(({ key, children }) => (\n      <View\n        key={key}\n        collapsable={\n          false /* Need collapsable=false here to clip the elevations, otherwise they appear above sibling components */\n        }\n        pointerEvents=\"box-none\"\n        style={StyleSheet.absoluteFill}\n      >\n        {children}\n      </View>\n    ));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}