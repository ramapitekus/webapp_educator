{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { RestConfigBase, RestMessageAdapter, RestRequestType } from \"../common.browser/Exports\";\nimport { PropertyId, VoiceProfileType } from \"../sdk/Exports\";\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\n/**\r\n * Implements methods for speaker recognition classes, sending requests to endpoint\r\n * and parsing response into expected format\r\n * @class SpeakerIdMessageAdapter\r\n */\n\nexport class SpeakerIdMessageAdapter {\n  constructor(config) {\n    let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\n\n    if (!endpoint) {\n      const region = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"westus\");\n      const hostSuffix = ConnectionFactoryBase.getHostSuffix(region);\n      endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, `https://${region}.api.cognitive${hostSuffix}`);\n    }\n\n    this.privUri = `${endpoint}/speaker-recognition/{mode}/{dependency}/profiles`;\n    const options = RestConfigBase.requestOptions;\n    options.headers[RestConfigBase.configParams.subscriptionKey] = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\n    this.privApiVersion = config.parameters.getProperty(PropertyId.SpeakerRecognition_Api_Version, \"2021-09-05\");\n    this.privRestAdapter = new RestMessageAdapter(options);\n  }\n  /**\r\n   * Sends create profile request to endpoint.\r\n   * @function\r\n   * @param {VoiceProfileType} profileType - type of voice profile to create.\r\n   * @param {string} lang - language/locale of voice profile\r\n   * @public\r\n   * @returns {Promise<IRestResponse>} promised rest response containing id of created profile.\r\n   */\n\n\n  createProfile(profileType, lang) {\n    const uri = this.getOperationUri(profileType);\n    return this.privRestAdapter.request(RestRequestType.Post, uri, this.getQueryParams(), {\n      locale: lang\n    });\n  }\n  /**\r\n   * Sends create enrollment request to endpoint.\r\n   * @function\r\n   * @param {VoiceProfile} profileType - voice profile for which to create new enrollment.\r\n   * @param {IAudioSource} audioSource - audioSource from which to pull data to send\r\n   * @public\r\n   * @returns {Promise<IRestResponse>} rest response to enrollment request.\r\n   */\n\n\n  createEnrollment(profile, audioSource) {\n    const uri = this.getOperationUri(profile.profileType) + \"/\" + profile.profileId + \"/enrollments\";\n    return audioSource.blob.then(result => {\n      return this.privRestAdapter.request(RestRequestType.File, uri, this.getQueryParams({\n        ignoreMinLength: \"true\"\n      }), null, result);\n    });\n  }\n  /**\r\n   * Sends verification request to endpoint.\r\n   * @function\r\n   * @param {SpeakerVerificationModel} model - voice model to verify against.\r\n   * @param {IAudioSource} audioSource - audioSource from which to pull data to send\r\n   * @public\r\n   * @returns {Promise<IRestResponse>} rest response to enrollment request.\r\n   */\n\n\n  verifySpeaker(model, audioSource) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const uri = this.getOperationUri(model.voiceProfile.profileType) + \"/\" + model.voiceProfile.profileId + \":verify\";\n\n      try {\n        const result = yield audioSource.blob;\n        return this.privRestAdapter.request(RestRequestType.File, uri, this.getQueryParams({\n          ignoreMinLength: \"true\"\n        }), null, result);\n      } catch (e) {\n        return Promise.resolve({\n          data: e\n        });\n      }\n    });\n  }\n  /**\r\n   * Sends identification request to endpoint.\r\n   * @function\r\n   * @param {SpeakerIdentificationModel} model - voice profiles against which to identify.\r\n   * @param {IAudioSource} audioSource - audioSource from which to pull data to send\r\n   * @public\r\n   * @returns {Promise<IRestResponse>} rest response to enrollment request.\r\n   */\n\n\n  identifySpeaker(model, audioSource) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const uri = this.getOperationUri(VoiceProfileType.TextIndependentIdentification) + \":identifySingleSpeaker\";\n\n      try {\n        const result = yield audioSource.blob;\n        return this.privRestAdapter.request(RestRequestType.File, uri, this.getQueryParams({\n          profileIds: model.voiceProfileIds,\n          ignoreMinLength: \"true\"\n        }), null, result);\n      } catch (e) {\n        return Promise.resolve({\n          data: e\n        });\n      }\n    });\n  }\n  /**\r\n   * Sends profile status request to endpoint.\r\n   * @function\r\n   * @param {VoiceProfile} profile - voice profile to check.\r\n   * @public\r\n   * @returns {Promise<IRestResponse>} rest response to status request\r\n   */\n\n\n  getProfileStatus(profile) {\n    const uri = `${this.getOperationUri(profile.profileType)}/${profile.profileId}`;\n    return this.privRestAdapter.request(RestRequestType.Get, uri, this.getQueryParams());\n  }\n  /**\r\n   * Sends get all profiles request to endpoint.\r\n   * @function\r\n   * @param {VoiceProfileType} profileType - type of profiles to return list of\r\n   * @public\r\n   * @returns {Promise<IRestResponse>} promised rest response containing all profiles\r\n   */\n\n\n  getProfiles(profileType) {\n    const uri = this.getOperationUri(profileType);\n    return this.privRestAdapter.request(RestRequestType.Get, uri, this.getQueryParams());\n  }\n  /**\r\n   * Sends get activation/auth phrases request to endpoint.\r\n   * @function\r\n   * @param {VoiceProfileType} profileType - type of profiles to return phrases for\r\n   * @param {string} lang - language/locale of voice profile\r\n   * @public\r\n   * @returns {Promise<IRestResponse>} promised rest response containing list of valid phrases\r\n   */\n\n\n  getPhrases(profileType, lang) {\n    const uri = `${this.getOperationUri(profileType)}`.replace(`profiles`, `phrases`) + \"/\" + lang;\n    return this.privRestAdapter.request(RestRequestType.Get, uri, this.getQueryParams());\n  }\n  /**\r\n   * Sends delete profile request to endpoint.\r\n   * @function\r\n   * @param {VoiceProfile} profile - voice profile to delete.\r\n   * @public\r\n   * @returns {Promise<IRestResponse>} rest response to deletion request\r\n   */\n\n\n  deleteProfile(profile) {\n    const uri = this.getOperationUri(profile.profileType) + \"/\" + profile.profileId;\n    return this.privRestAdapter.request(RestRequestType.Delete, uri, this.getQueryParams());\n  }\n  /**\r\n   * Sends reset profile request to endpoint.\r\n   * @function\r\n   * @param {VoiceProfile} profile - voice profile to reset enrollments for.\r\n   * @public\r\n   * @returns {Promise<IRestResponse>} rest response to reset request\r\n   */\n\n\n  resetProfile(profile) {\n    const uri = this.getOperationUri(profile.profileType) + \"/\" + profile.profileId + \":reset\";\n    return this.privRestAdapter.request(RestRequestType.Post, uri, this.getQueryParams());\n  }\n\n  getOperationUri(profileType) {\n    const mode = profileType === VoiceProfileType.TextIndependentIdentification ? \"identification\" : \"verification\";\n    const dependency = profileType === VoiceProfileType.TextDependentVerification ? \"text-dependent\" : \"text-independent\";\n    return this.privUri.replace(\"{mode}\", mode).replace(\"{dependency}\", dependency);\n  }\n\n  getQueryParams() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    params[RestConfigBase.configParams.apiVersion] = this.privApiVersion;\n    return params;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["RestConfigBase","RestMessageAdapter","RestRequestType","PropertyId","VoiceProfileType","ConnectionFactoryBase","SpeakerIdMessageAdapter","constructor","config","endpoint","parameters","getProperty","SpeechServiceConnection_Endpoint","undefined","region","SpeechServiceConnection_Region","hostSuffix","getHostSuffix","SpeechServiceConnection_Host","privUri","options","requestOptions","headers","configParams","subscriptionKey","SpeechServiceConnection_Key","privApiVersion","SpeakerRecognition_Api_Version","privRestAdapter","createProfile","profileType","lang","uri","getOperationUri","request","Post","getQueryParams","locale","createEnrollment","profile","audioSource","profileId","blob","then","result","File","ignoreMinLength","verifySpeaker","model","voiceProfile","e","Promise","resolve","data","identifySpeaker","TextIndependentIdentification","profileIds","voiceProfileIds","getProfileStatus","Get","getProfiles","getPhrases","replace","deleteProfile","Delete","resetProfile","mode","dependency","TextDependentVerification","params","apiVersion"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\node_modules\\microsoft-cognitiveservices-speech-sdk\\distrib\\es2015\\src\\common.speech\\src\\common.speech\\SpeakerIdMessageAdapter.ts"],"sourcesContent":["import {\r\n    IRequestOptions,\r\n    IRestResponse,\r\n    RestConfigBase,\r\n    RestMessageAdapter,\r\n    RestRequestType,\r\n} from \"../common.browser/Exports\";\r\nimport { IAudioSource } from \"../common/Exports\";\r\nimport {\r\n    PropertyId,\r\n    SpeakerIdentificationModel,\r\n    SpeakerVerificationModel,\r\n    VoiceProfile,\r\n    VoiceProfileType,\r\n} from \"../sdk/Exports\";\r\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\r\nimport { SpeakerRecognitionConfig } from \"./Exports\";\r\n\r\n/**\r\n * Implements methods for speaker recognition classes, sending requests to endpoint\r\n * and parsing response into expected format\r\n * @class SpeakerIdMessageAdapter\r\n */\r\nexport class SpeakerIdMessageAdapter {\r\n    private privRestAdapter: RestMessageAdapter;\r\n    private privUri: string;\r\n    private privApiVersion: string;\r\n\r\n    public constructor(config: SpeakerRecognitionConfig) {\r\n\r\n        let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        if (!endpoint) {\r\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"westus\");\r\n            const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n            endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, `https://${region}.api.cognitive${hostSuffix}`);\r\n        }\r\n        this.privUri = `${endpoint}/speaker-recognition/{mode}/{dependency}/profiles`;\r\n\r\n        const options: IRequestOptions = RestConfigBase.requestOptions;\r\n        options.headers[RestConfigBase.configParams.subscriptionKey] = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\r\n        this.privApiVersion = config.parameters.getProperty(PropertyId.SpeakerRecognition_Api_Version, \"2021-09-05\");\r\n\r\n        this.privRestAdapter = new RestMessageAdapter(options);\r\n    }\r\n\r\n    /**\r\n     * Sends create profile request to endpoint.\r\n     * @function\r\n     * @param {VoiceProfileType} profileType - type of voice profile to create.\r\n     * @param {string} lang - language/locale of voice profile\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} promised rest response containing id of created profile.\r\n     */\r\n    public createProfile(profileType: VoiceProfileType, lang: string):\r\n        Promise<IRestResponse> {\r\n\r\n        const uri = this.getOperationUri(profileType);\r\n        return this.privRestAdapter.request(RestRequestType.Post, uri, this.getQueryParams(), { locale: lang });\r\n    }\r\n\r\n    /**\r\n     * Sends create enrollment request to endpoint.\r\n     * @function\r\n     * @param {VoiceProfile} profileType - voice profile for which to create new enrollment.\r\n     * @param {IAudioSource} audioSource - audioSource from which to pull data to send\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} rest response to enrollment request.\r\n     */\r\n    public createEnrollment(profile: VoiceProfile, audioSource: IAudioSource):\r\n        Promise<IRestResponse> {\r\n\r\n        const uri = this.getOperationUri(profile.profileType) + \"/\" + profile.profileId + \"/enrollments\";\r\n        return audioSource.blob.then<IRestResponse>((result: Blob | Buffer): Promise<IRestResponse> => {\r\n            return this.privRestAdapter.request(RestRequestType.File, uri, this.getQueryParams({ ignoreMinLength: \"true\" }), null, result);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sends verification request to endpoint.\r\n     * @function\r\n     * @param {SpeakerVerificationModel} model - voice model to verify against.\r\n     * @param {IAudioSource} audioSource - audioSource from which to pull data to send\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} rest response to enrollment request.\r\n     */\r\n    public async verifySpeaker(model: SpeakerVerificationModel, audioSource: IAudioSource):\r\n        Promise<IRestResponse> {\r\n\r\n        const uri = this.getOperationUri(model.voiceProfile.profileType) + \"/\" + model.voiceProfile.profileId + \":verify\";\r\n        try {\r\n            const result: Blob | Buffer = await audioSource.blob;\r\n            return this.privRestAdapter.request(RestRequestType.File, uri, this.getQueryParams({ ignoreMinLength: \"true\" }), null, result);\r\n        } catch (e) {\r\n            return Promise.resolve({ data: e } as IRestResponse);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends identification request to endpoint.\r\n     * @function\r\n     * @param {SpeakerIdentificationModel} model - voice profiles against which to identify.\r\n     * @param {IAudioSource} audioSource - audioSource from which to pull data to send\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} rest response to enrollment request.\r\n     */\r\n    public async identifySpeaker(model: SpeakerIdentificationModel, audioSource: IAudioSource):\r\n        Promise<IRestResponse> {\r\n\r\n        const uri = this.getOperationUri(VoiceProfileType.TextIndependentIdentification) + \":identifySingleSpeaker\";\r\n        try {\r\n            const result: Blob | Buffer = await audioSource.blob;\r\n            return this.privRestAdapter.request(RestRequestType.File, uri, this.getQueryParams({ profileIds: model.voiceProfileIds, ignoreMinLength: \"true\" }), null, result);\r\n        } catch (e) {\r\n            return Promise.resolve({ data: e } as IRestResponse);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends profile status request to endpoint.\r\n     * @function\r\n     * @param {VoiceProfile} profile - voice profile to check.\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} rest response to status request\r\n     */\r\n    public getProfileStatus(profile: VoiceProfile): Promise<IRestResponse> {\r\n\r\n        const uri = `${this.getOperationUri(profile.profileType)}/${profile.profileId}`;\r\n        return this.privRestAdapter.request(RestRequestType.Get, uri, this.getQueryParams());\r\n    }\r\n\r\n    /**\r\n     * Sends get all profiles request to endpoint.\r\n     * @function\r\n     * @param {VoiceProfileType} profileType - type of profiles to return list of\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} promised rest response containing all profiles\r\n     */\r\n    public getProfiles(profileType: VoiceProfileType): Promise<IRestResponse> {\r\n        const uri = this.getOperationUri(profileType);\r\n        return this.privRestAdapter.request(RestRequestType.Get, uri, this.getQueryParams());\r\n    }\r\n\r\n    /**\r\n     * Sends get activation/auth phrases request to endpoint.\r\n     * @function\r\n     * @param {VoiceProfileType} profileType - type of profiles to return phrases for\r\n     * @param {string} lang - language/locale of voice profile\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} promised rest response containing list of valid phrases\r\n     */\r\n    public getPhrases(profileType: VoiceProfileType, lang: string): Promise<IRestResponse> {\r\n        const uri = `${this.getOperationUri(profileType)}`.replace(`profiles`, `phrases`) + \"/\" + lang;\r\n        return this.privRestAdapter.request(RestRequestType.Get, uri, this.getQueryParams());\r\n    }\r\n\r\n    /**\r\n     * Sends delete profile request to endpoint.\r\n     * @function\r\n     * @param {VoiceProfile} profile - voice profile to delete.\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} rest response to deletion request\r\n     */\r\n    public deleteProfile(profile: VoiceProfile): Promise<IRestResponse> {\r\n\r\n        const uri = this.getOperationUri(profile.profileType) + \"/\" + profile.profileId;\r\n        return this.privRestAdapter.request(RestRequestType.Delete, uri, this.getQueryParams());\r\n    }\r\n\r\n    /**\r\n     * Sends reset profile request to endpoint.\r\n     * @function\r\n     * @param {VoiceProfile} profile - voice profile to reset enrollments for.\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} rest response to reset request\r\n     */\r\n    public resetProfile(profile: VoiceProfile): Promise<IRestResponse> {\r\n\r\n        const uri = this.getOperationUri(profile.profileType) + \"/\" + profile.profileId + \":reset\";\r\n        return this.privRestAdapter.request(RestRequestType.Post, uri, this.getQueryParams());\r\n    }\r\n\r\n    private getOperationUri(profileType: VoiceProfileType): string {\r\n\r\n        const mode = profileType === VoiceProfileType.TextIndependentIdentification ? \"identification\" : \"verification\";\r\n        const dependency = profileType === VoiceProfileType.TextDependentVerification ? \"text-dependent\" : \"text-independent\";\r\n        return this.privUri.replace(\"{mode}\", mode).replace(\"{dependency}\", dependency);\r\n    }\r\n\r\n    private getQueryParams(params: any = {}): any {\r\n\r\n        params[RestConfigBase.configParams.apiVersion] = this.privApiVersion;\r\n        return params;\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}