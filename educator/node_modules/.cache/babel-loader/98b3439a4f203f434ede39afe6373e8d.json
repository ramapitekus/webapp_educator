{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\olesr\\\\OneDrive\\\\Documents\\\\webapp_educ\\\\educator\\\\src\\\\S2t.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst S2t = () => {\n  const sdk = require(\"microsoft-cognitiveservices-speech-sdk\");\n\n  const speechConfig = sdk.SpeechConfig.fromSubscription(\"YourSubscriptionKey\", \"YourServiceRegion\");\n  speechConfig.speechRecognitionLanguage = \"de-CH\";\n\n  function fromFile() {\n    let audioConfig = sdk.AudioConfig.fromWavFileInput();\n    let speechRecognizer = new sdk.SpeechRecognizer(speechConfig, audioConfig);\n    speechRecognizer.recognizeOnceAsync(result => {\n      switch (result.reason) {\n        case sdk.ResultReason.RecognizedSpeech:\n          console.log(`RECOGNIZED: Text=${result.text}`);\n          break;\n\n        case sdk.ResultReason.NoMatch:\n          console.log(\"NOMATCH: Speech could not be recognized.\");\n          break;\n\n        case sdk.ResultReason.Canceled:\n          const cancellation = CancellationDetails.fromResult(result);\n          console.log(`CANCELED: Reason=${cancellation.reason}`);\n\n          if (cancellation.reason == sdk.CancellationReason.Error) {\n            console.log(`CANCELED: ErrorCode=${cancellation.ErrorCode}`);\n            console.log(`CANCELED: ErrorDetails=${cancellation.errorDetails}`);\n            console.log(\"CANCELED: Did you update the key and location/region info?\");\n          }\n\n          break;\n      }\n\n      speechRecognizer.close();\n    });\n  }\n\n  fromFile();\n  return sdk && /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"works\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 17\n  }, this);\n};\n\n_c = S2t;\nexport default S2t;\n\nvar _c;\n\n$RefreshReg$(_c, \"S2t\");","map":{"version":3,"sources":["C:/Users/olesr/OneDrive/Documents/webapp_educ/educator/src/S2t.js"],"names":["S2t","sdk","require","speechConfig","SpeechConfig","fromSubscription","speechRecognitionLanguage","fromFile","audioConfig","AudioConfig","fromWavFileInput","speechRecognizer","SpeechRecognizer","recognizeOnceAsync","result","reason","ResultReason","RecognizedSpeech","console","log","text","NoMatch","Canceled","cancellation","CancellationDetails","fromResult","CancellationReason","Error","ErrorCode","errorDetails","close"],"mappings":";;;AAAA,MAAMA,GAAG,GAAG,MAAM;AAChB,QAAMC,GAAG,GAAGC,OAAO,CAAC,wCAAD,CAAnB;;AACA,QAAMC,YAAY,GAAGF,GAAG,CAACG,YAAJ,CAAiBC,gBAAjB,CACnB,qBADmB,EAEnB,mBAFmB,CAArB;AAIAF,EAAAA,YAAY,CAACG,yBAAb,GAAyC,OAAzC;;AAEA,WAASC,QAAT,GAAoB;AAClB,QAAIC,WAAW,GAAGP,GAAG,CAACQ,WAAJ,CAAgBC,gBAAhB,EAAlB;AACA,QAAIC,gBAAgB,GAAG,IAAIV,GAAG,CAACW,gBAAR,CAAyBT,YAAzB,EAAuCK,WAAvC,CAAvB;AAEAG,IAAAA,gBAAgB,CAACE,kBAAjB,CAAqCC,MAAD,IAAY;AAC9C,cAAQA,MAAM,CAACC,MAAf;AACE,aAAKd,GAAG,CAACe,YAAJ,CAAiBC,gBAAtB;AACEC,UAAAA,OAAO,CAACC,GAAR,CAAa,oBAAmBL,MAAM,CAACM,IAAK,EAA5C;AACA;;AACF,aAAKnB,GAAG,CAACe,YAAJ,CAAiBK,OAAtB;AACEH,UAAAA,OAAO,CAACC,GAAR,CAAY,0CAAZ;AACA;;AACF,aAAKlB,GAAG,CAACe,YAAJ,CAAiBM,QAAtB;AACE,gBAAMC,YAAY,GAAGC,mBAAmB,CAACC,UAApB,CAA+BX,MAA/B,CAArB;AACAI,UAAAA,OAAO,CAACC,GAAR,CAAa,oBAAmBI,YAAY,CAACR,MAAO,EAApD;;AAEA,cAAIQ,YAAY,CAACR,MAAb,IAAuBd,GAAG,CAACyB,kBAAJ,CAAuBC,KAAlD,EAAyD;AACvDT,YAAAA,OAAO,CAACC,GAAR,CAAa,uBAAsBI,YAAY,CAACK,SAAU,EAA1D;AACAV,YAAAA,OAAO,CAACC,GAAR,CAAa,0BAAyBI,YAAY,CAACM,YAAa,EAAhE;AACAX,YAAAA,OAAO,CAACC,GAAR,CACE,4DADF;AAGD;;AACD;AAlBJ;;AAoBAR,MAAAA,gBAAgB,CAACmB,KAAjB;AACD,KAtBD;AAuBD;;AACDvB,EAAAA,QAAQ;AAER,SAAON,GAAG,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAd;AACD,CAvCD;;KAAMD,G;AAyCN,eAAeA,GAAf","sourcesContent":["const S2t = () => {\r\n  const sdk = require(\"microsoft-cognitiveservices-speech-sdk\");\r\n  const speechConfig = sdk.SpeechConfig.fromSubscription(\r\n    \"YourSubscriptionKey\",\r\n    \"YourServiceRegion\"\r\n  );\r\n  speechConfig.speechRecognitionLanguage = \"de-CH\";\r\n\r\n  function fromFile() {\r\n    let audioConfig = sdk.AudioConfig.fromWavFileInput();\r\n    let speechRecognizer = new sdk.SpeechRecognizer(speechConfig, audioConfig);\r\n\r\n    speechRecognizer.recognizeOnceAsync((result) => {\r\n      switch (result.reason) {\r\n        case sdk.ResultReason.RecognizedSpeech:\r\n          console.log(`RECOGNIZED: Text=${result.text}`);\r\n          break;\r\n        case sdk.ResultReason.NoMatch:\r\n          console.log(\"NOMATCH: Speech could not be recognized.\");\r\n          break;\r\n        case sdk.ResultReason.Canceled:\r\n          const cancellation = CancellationDetails.fromResult(result);\r\n          console.log(`CANCELED: Reason=${cancellation.reason}`);\r\n\r\n          if (cancellation.reason == sdk.CancellationReason.Error) {\r\n            console.log(`CANCELED: ErrorCode=${cancellation.ErrorCode}`);\r\n            console.log(`CANCELED: ErrorDetails=${cancellation.errorDetails}`);\r\n            console.log(\r\n              \"CANCELED: Did you update the key and location/region info?\"\r\n            );\r\n          }\r\n          break;\r\n      }\r\n      speechRecognizer.close();\r\n    });\r\n  }\r\n  fromFile();\r\n\r\n  return sdk && <h1>works</h1>;\r\n};\r\n\r\nexport default S2t;\r\n"]},"metadata":{},"sourceType":"module"}