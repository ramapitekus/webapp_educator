{"ast":null,"code":"import { ResultReason } from \"microsoft-cognitiveservices-speech-sdk\";\nimport React from \"react\";\nimport RecordIcon from \"../assets/mic.png\"; // Unused image for button\n\nimport \"./s2t.css\";\n\nasync function sttFromMic() {\n  const sdk = require(\"microsoft-cognitiveservices-speech-sdk\");\n\n  const speechConfig = sdk.SpeechConfig.fromSubscription(\"2ed0fc03d2e441388c4fd35cc91c23b3\", \"eastus\");\n  speechConfig.speechRecognitionLanguage = \"de-CH\";\n  const audioConfig = sdk.AudioConfig.fromDefaultMicrophoneInput();\n  const recognizer = new sdk.SpeechRecognizer(speechConfig, audioConfig);\n  recognizer.startContinuousRecognitionAsync(); // Add error handling\n\n  recognizer.recognized = (_, e) => {\n    var result = e.result;\n    console.log(result.text);\n    sendToAPI(\"http://localhost:5000/api/v1/models\", result.text).then(response => {\n      console.log(\"Answer from the API:\\n\" + response.message);\n    });\n  };\n\n  function startRecording() {\n    recognizer.startContinuousRecognitionAsync(); // Add error handling\n\n    recognizer.recognized = (_, e) => {\n      var result = e.result;\n      console.log(result.text);\n      sendToAPI(\"http://localhost:5000/api/v1/models\", result.text).then(response => {\n        console.log(\"Answer from the API:\\n\" + response.message);\n      });\n    };\n  }\n\n  function stopRecording() {\n    recognizer.stopContinuousRecognitionAsync();\n  }\n\n  return startRecording, stopRecording;\n}\n\nclass stt extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n} // separate functions for start and stop recording\n\n\nasync function sendToAPI(url, message) {\n  // Simple POST request with a JSON body using fetch\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      message: message\n    })\n  };\n  let response = await fetch(url, requestOptions);\n  return response.json();\n}\n\nexport default sttFromMic;","map":{"version":3,"sources":["C:/Users/olesr/OneDrive/Documents/webapp_educ/educator/src/components/S2t.js"],"names":["ResultReason","React","RecordIcon","sttFromMic","sdk","require","speechConfig","SpeechConfig","fromSubscription","speechRecognitionLanguage","audioConfig","AudioConfig","fromDefaultMicrophoneInput","recognizer","SpeechRecognizer","startContinuousRecognitionAsync","recognized","_","e","result","console","log","text","sendToAPI","then","response","message","startRecording","stopRecording","stopContinuousRecognitionAsync","stt","Component","constructor","props","url","requestOptions","method","headers","body","JSON","stringify","fetch","json"],"mappings":"AAAA,SAASA,YAAT,QAA6B,wCAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,mBAAvB,C,CAA4C;;AAC5C,OAAO,WAAP;;AAEA,eAAeC,UAAf,GAA4B;AAC1B,QAAMC,GAAG,GAAGC,OAAO,CAAC,wCAAD,CAAnB;;AACA,QAAMC,YAAY,GAAGF,GAAG,CAACG,YAAJ,CAAiBC,gBAAjB,CACnB,kCADmB,EAEnB,QAFmB,CAArB;AAIAF,EAAAA,YAAY,CAACG,yBAAb,GAAyC,OAAzC;AACA,QAAMC,WAAW,GAAGN,GAAG,CAACO,WAAJ,CAAgBC,0BAAhB,EAApB;AACA,QAAMC,UAAU,GAAG,IAAIT,GAAG,CAACU,gBAAR,CAAyBR,YAAzB,EAAuCI,WAAvC,CAAnB;AACAG,EAAAA,UAAU,CAACE,+BAAX,GAT0B,CAU1B;;AACAF,EAAAA,UAAU,CAACG,UAAX,GAAwB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAChC,QAAIC,MAAM,GAAGD,CAAC,CAACC,MAAf;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACG,IAAnB;AACAC,IAAAA,SAAS,CAAC,qCAAD,EAAwCJ,MAAM,CAACG,IAA/C,CAAT,CAA8DE,IAA9D,CACGC,QAAD,IAAc;AACZL,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAA2BI,QAAQ,CAACC,OAAhD;AACD,KAHH;AAKD,GARD;;AAUA,WAASC,cAAT,GAA0B;AACxBd,IAAAA,UAAU,CAACE,+BAAX,GADwB,CAExB;;AACAF,IAAAA,UAAU,CAACG,UAAX,GAAwB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAChC,UAAIC,MAAM,GAAGD,CAAC,CAACC,MAAf;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACG,IAAnB;AACAC,MAAAA,SAAS,CAAC,qCAAD,EAAwCJ,MAAM,CAACG,IAA/C,CAAT,CAA8DE,IAA9D,CACGC,QAAD,IAAc;AACZL,QAAAA,OAAO,CAACC,GAAR,CAAY,2BAA2BI,QAAQ,CAACC,OAAhD;AACD,OAHH;AAKD,KARD;AASD;;AACD,WAASE,aAAT,GAAyB;AACvBf,IAAAA,UAAU,CAACgB,8BAAX;AACD;;AACD,SAAOF,cAAc,EAAEC,aAAvB;AACD;;AAED,MAAME,GAAN,SAAkB7B,KAAK,CAAC8B,SAAxB,CAAkC;AAChCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACD;;AAH+B,C,CAMlC;;;AAEA,eAAeV,SAAf,CAAyBW,GAAzB,EAA8BR,OAA9B,EAAuC;AACrC;AACA,QAAMS,cAAc,GAAG;AACrBC,IAAAA,MAAM,EAAE,MADa;AAErBC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAFY;AAGrBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEd,MAAAA,OAAO,EAAEA;AAAX,KAAf;AAHe,GAAvB;AAMA,MAAID,QAAQ,GAAG,MAAMgB,KAAK,CAACP,GAAD,EAAMC,cAAN,CAA1B;AACA,SAAOV,QAAQ,CAACiB,IAAT,EAAP;AACD;;AAED,eAAevC,UAAf","sourcesContent":["import { ResultReason } from \"microsoft-cognitiveservices-speech-sdk\";\r\nimport React from \"react\";\r\nimport RecordIcon from \"../assets/mic.png\"; // Unused image for button\r\nimport \"./s2t.css\";\r\n\r\nasync function sttFromMic() {\r\n  const sdk = require(\"microsoft-cognitiveservices-speech-sdk\");\r\n  const speechConfig = sdk.SpeechConfig.fromSubscription(\r\n    \"2ed0fc03d2e441388c4fd35cc91c23b3\",\r\n    \"eastus\"\r\n  );\r\n  speechConfig.speechRecognitionLanguage = \"de-CH\";\r\n  const audioConfig = sdk.AudioConfig.fromDefaultMicrophoneInput();\r\n  const recognizer = new sdk.SpeechRecognizer(speechConfig, audioConfig);\r\n  recognizer.startContinuousRecognitionAsync();\r\n  // Add error handling\r\n  recognizer.recognized = (_, e) => {\r\n    var result = e.result;\r\n    console.log(result.text);\r\n    sendToAPI(\"http://localhost:5000/api/v1/models\", result.text).then(\r\n      (response) => {\r\n        console.log(\"Answer from the API:\\n\" + response.message);\r\n      }\r\n    );\r\n  };\r\n\r\n  function startRecording() {\r\n    recognizer.startContinuousRecognitionAsync();\r\n    // Add error handling\r\n    recognizer.recognized = (_, e) => {\r\n      var result = e.result;\r\n      console.log(result.text);\r\n      sendToAPI(\"http://localhost:5000/api/v1/models\", result.text).then(\r\n        (response) => {\r\n          console.log(\"Answer from the API:\\n\" + response.message);\r\n        }\r\n      );\r\n    };\r\n  }\r\n  function stopRecording() {\r\n    recognizer.stopContinuousRecognitionAsync();\r\n  }\r\n  return startRecording, stopRecording;\r\n}\r\n\r\nclass stt extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n}\r\n\r\n// separate functions for start and stop recording\r\n\r\nasync function sendToAPI(url, message) {\r\n  // Simple POST request with a JSON body using fetch\r\n  const requestOptions = {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({ message: message }),\r\n  };\r\n\r\n  let response = await fetch(url, requestOptions);\r\n  return response.json();\r\n}\r\n\r\nexport default sttFromMic;\r\n"]},"metadata":{},"sourceType":"module"}