{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { View, TextInput as NativeTextInput, StyleSheet, I18nManager, Platform } from 'react-native';\nimport color from 'color';\nimport TextInputAdornment, { getAdornmentConfig, getAdornmentStyleAdjustmentForNativeInput } from './Adornment/TextInputAdornment';\nimport InputLabel from './Label/InputLabel';\nimport LabelBackground from './Label/LabelBackground';\nimport { MAXIMIZED_LABEL_FONT_SIZE, MINIMIZED_LABEL_FONT_SIZE, LABEL_WIGGLE_X_OFFSET, ADORNMENT_SIZE, ADORNMENT_OFFSET } from './constants';\nimport { calculateLabelTopPosition, calculateInputHeight, calculatePadding, adjustPaddingOut, interpolatePlaceholder, calculateOutlinedIconAndAffixTopPosition } from './helpers';\nimport { AdornmentType, AdornmentSide } from './Adornment/enums';\nconst OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -6;\nconst LABEL_PADDING_TOP = 8;\nconst MIN_HEIGHT = 64;\nconst MIN_DENSE_HEIGHT = 48;\nconst INPUT_PADDING_HORIZONTAL = 14;\n\nclass TextInputOutlined extends React.Component {\n  render() {\n    const {\n      disabled,\n      editable,\n      label,\n      error,\n      selectionColor,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      underlineColor,\n      outlineColor: customOutlineColor,\n      activeOutlineColor,\n      dense,\n      style,\n      theme,\n      render,\n      multiline,\n      parentState,\n      innerRef,\n      onFocus,\n      forceFocus,\n      onBlur,\n      onChangeText,\n      onLayoutAnimatedText,\n      onLeftAffixLayoutChange,\n      onRightAffixLayoutChange,\n      left,\n      right,\n      placeholderTextColor,\n      ...rest\n    } = this.props;\n    const adornmentConfig = getAdornmentConfig({\n      left,\n      right\n    });\n    const {\n      colors,\n      fonts\n    } = theme;\n    const font = fonts.regular;\n    const hasActiveOutline = parentState.focused || error;\n    const {\n      fontSize: fontSizeStyle,\n      fontWeight,\n      lineHeight,\n      height,\n      backgroundColor = colors.background,\n      textAlign,\n      ...viewStyle\n    } = StyleSheet.flatten(style) || {};\n    const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n    let inputTextColor, activeColor, outlineColor, placeholderColor, errorColor;\n\n    if (disabled) {\n      const isTransparent = color(customOutlineColor).alpha() === 0;\n      inputTextColor = activeColor = color(colors.text).alpha(0.54).rgb().string();\n      placeholderColor = colors.disabled;\n      outlineColor = isTransparent ? customOutlineColor : colors.disabled;\n    } else {\n      inputTextColor = colors.text;\n      activeColor = error ? colors.error : activeOutlineColor || colors.primary;\n      placeholderColor = colors.placeholder;\n      outlineColor = customOutlineColor || colors.placeholder;\n      errorColor = colors.error;\n    }\n\n    const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n    const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n    const labelWidth = parentState.labelLayout.width;\n    const labelHeight = parentState.labelLayout.height;\n    const labelHalfWidth = labelWidth / 2;\n    const labelHalfHeight = labelHeight / 2;\n    const baseLabelTranslateX = (I18nManager.isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2 - (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n    let labelTranslationXOffset = 0;\n    const isAdornmentLeftIcon = adornmentConfig.some(_ref => {\n      let {\n        side,\n        type\n      } = _ref;\n      return side === AdornmentSide.Left && type === AdornmentType.Icon;\n    });\n\n    if (isAdornmentLeftIcon) {\n      labelTranslationXOffset = (I18nManager.isRTL ? -1 : 1) * (ADORNMENT_SIZE + ADORNMENT_OFFSET - 8);\n    }\n\n    const minInputHeight = (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT) - LABEL_PADDING_TOP;\n    const inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n    const topPosition = calculateLabelTopPosition(labelHeight, inputHeight, LABEL_PADDING_TOP);\n\n    if (height && typeof height !== 'number') {\n      // eslint-disable-next-line\n      console.warn('Currently we support only numbers in height prop');\n    }\n\n    const paddingSettings = {\n      height: height ? +height : null,\n      labelHalfHeight,\n      offset: LABEL_PADDING_TOP,\n      multiline: multiline ? multiline : null,\n      dense: dense ? dense : null,\n      topPosition,\n      fontSize,\n      lineHeight,\n      label,\n      scale: fontScale,\n      isAndroid: Platform.OS === 'android',\n      styles: StyleSheet.flatten(dense ? styles.inputOutlinedDense : styles.inputOutlined)\n    };\n    const pad = calculatePadding(paddingSettings);\n    const paddingOut = adjustPaddingOut({ ...paddingSettings,\n      pad\n    });\n    const baseLabelTranslateY = -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n    const placeholderOpacity = hasActiveOutline ? interpolatePlaceholder(parentState.labeled, hasActiveOutline) : parentState.labelLayout.measured ? 1 : 0;\n    const labelProps = {\n      label,\n      onLayoutAnimatedText,\n      placeholderOpacity,\n      error,\n      placeholderStyle: styles.placeholder,\n      baseLabelTranslateY,\n      baseLabelTranslateX,\n      font,\n      fontSize,\n      fontWeight,\n      labelScale,\n      wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n      topPosition,\n      hasActiveOutline,\n      activeColor,\n      placeholderColor,\n      backgroundColor: backgroundColor,\n      errorColor,\n      labelTranslationXOffset,\n      roundness: theme.roundness\n    };\n    const minHeight = height || (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT);\n    const {\n      leftLayout,\n      rightLayout\n    } = parentState;\n    const leftAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n      height: minHeight,\n      affixHeight: leftLayout.height || 0,\n      labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n    });\n    const rightAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n      height: minHeight,\n      affixHeight: rightLayout.height || 0,\n      labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n    });\n    const iconTopPosition = calculateOutlinedIconAndAffixTopPosition({\n      height: minHeight,\n      affixHeight: ADORNMENT_SIZE,\n      labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n    });\n    const rightAffixWidth = right ? rightLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n    const leftAffixWidth = left ? leftLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n    const adornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput({\n      adornmentConfig,\n      rightAffixWidth,\n      leftAffixWidth,\n      mode: 'outlined'\n    });\n    const affixTopPosition = {\n      [AdornmentSide.Left]: leftAffixTopPosition,\n      [AdornmentSide.Right]: rightAffixTopPosition\n    };\n    const onAffixChange = {\n      [AdornmentSide.Left]: onLeftAffixLayoutChange,\n      [AdornmentSide.Right]: onRightAffixLayoutChange\n    };\n    let adornmentProps = {\n      adornmentConfig,\n      forceFocus,\n      topPosition: {\n        [AdornmentType.Icon]: iconTopPosition,\n        [AdornmentType.Affix]: affixTopPosition\n      },\n      onAffixChange,\n      isTextInputFocused: parentState.focused\n    };\n\n    if (adornmentConfig.length) {\n      adornmentProps = { ...adornmentProps,\n        left,\n        right,\n        textStyle: { ...font,\n          fontSize,\n          fontWeight\n        },\n        visible: this.props.parentState.labeled\n      };\n    }\n\n    return /*#__PURE__*/React.createElement(View, {\n      style: viewStyle\n    }, /*#__PURE__*/React.createElement(Outline, {\n      theme: theme,\n      hasActiveOutline: hasActiveOutline,\n      focused: parentState.focused,\n      activeColor: activeColor,\n      outlineColor: outlineColor,\n      backgroundColor: backgroundColor\n    }), /*#__PURE__*/React.createElement(View, null, /*#__PURE__*/React.createElement(View, {\n      style: [styles.labelContainer, {\n        paddingTop: LABEL_PADDING_TOP,\n        minHeight\n      }]\n    }, /*#__PURE__*/React.createElement(InputLabel, {\n      parentState: parentState,\n      labelProps: labelProps,\n      labelBackground: LabelBackground\n    }), render === null || render === void 0 ? void 0 : render({\n      testID: 'text-input-outlined',\n      ...rest,\n      ref: innerRef,\n      onChangeText,\n      placeholder: label ? parentState.placeholder : this.props.placeholder,\n      placeholderTextColor: placeholderTextColor || placeholderColor,\n      editable: !disabled && editable,\n      selectionColor: typeof selectionColor === 'undefined' ? activeColor : selectionColor,\n      onFocus,\n      onBlur,\n      underlineColorAndroid: 'transparent',\n      multiline,\n      style: [styles.input, !multiline || multiline && height ? {\n        height: inputHeight\n      } : {}, paddingOut, { ...font,\n        fontSize,\n        fontWeight,\n        color: inputTextColor,\n        textAlignVertical: multiline ? 'top' : 'center',\n        textAlign: textAlign ? textAlign : I18nManager.isRTL ? 'right' : 'left'\n      }, Platform.OS === 'web' && {\n        outline: 'none'\n      }, adornmentStyleAdjustmentForNativeInput]\n    })), /*#__PURE__*/React.createElement(TextInputAdornment, adornmentProps)));\n  }\n\n}\n\n_defineProperty(TextInputOutlined, \"defaultProps\", {\n  disabled: false,\n  error: false,\n  multiline: false,\n  editable: true,\n  render: props => /*#__PURE__*/React.createElement(NativeTextInput, props)\n});\n\nexport default TextInputOutlined;\n\nconst Outline = _ref2 => {\n  let {\n    theme,\n    hasActiveOutline,\n    activeColor,\n    outlineColor,\n    focused,\n    backgroundColor\n  } = _ref2;\n  return /*#__PURE__*/React.createElement(View, {\n    testID: \"text-input-outline\",\n    pointerEvents: \"none\",\n    style: [styles.outline, // eslint-disable-next-line react-native/no-inline-styles\n    {\n      backgroundColor,\n      borderRadius: theme.roundness,\n      borderWidth: focused ? 2 : 1,\n      borderColor: hasActiveOutline ? activeColor : outlineColor\n    }]\n  });\n};\n\nconst styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL\n  },\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0\n  },\n  labelContainer: {\n    paddingBottom: 0\n  },\n  input: {\n    flexGrow: 1,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n    margin: 0,\n    zIndex: 1\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4\n  }\n});","map":{"version":3,"mappings":"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","names":["React","View","TextInput","NativeTextInput","StyleSheet","I18nManager","Platform","color","TextInputAdornment","getAdornmentConfig","getAdornmentStyleAdjustmentForNativeInput","InputLabel","LabelBackground","MAXIMIZED_LABEL_FONT_SIZE","MINIMIZED_LABEL_FONT_SIZE","LABEL_WIGGLE_X_OFFSET","ADORNMENT_SIZE","ADORNMENT_OFFSET","calculateLabelTopPosition","calculateInputHeight","calculatePadding","adjustPaddingOut","interpolatePlaceholder","calculateOutlinedIconAndAffixTopPosition","AdornmentType","AdornmentSide","OUTLINE_MINIMIZED_LABEL_Y_OFFSET","LABEL_PADDING_TOP","MIN_HEIGHT","MIN_DENSE_HEIGHT","INPUT_PADDING_HORIZONTAL","TextInputOutlined","Component","render","disabled","editable","label","error","selectionColor","underlineColor","outlineColor","customOutlineColor","activeOutlineColor","dense","style","theme","multiline","parentState","innerRef","onFocus","forceFocus","onBlur","onChangeText","onLayoutAnimatedText","onLeftAffixLayoutChange","onRightAffixLayoutChange","left","right","placeholderTextColor","rest","props","adornmentConfig","colors","fonts","font","regular","hasActiveOutline","focused","fontSize","fontSizeStyle","fontWeight","lineHeight","height","backgroundColor","background","textAlign","viewStyle","flatten","inputTextColor","activeColor","placeholderColor","errorColor","isTransparent","alpha","text","rgb","string","primary","placeholder","labelScale","fontScale","labelWidth","labelLayout","width","labelHeight","labelHalfWidth","labelHalfHeight","baseLabelTranslateX","isRTL","labelTranslationXOffset","isAdornmentLeftIcon","some","side","type","Left","Icon","minInputHeight","inputHeight","topPosition","console","warn","paddingSettings","offset","scale","isAndroid","OS","styles","inputOutlinedDense","inputOutlined","pad","paddingOut","baseLabelTranslateY","placeholderOpacity","labeled","measured","labelProps","placeholderStyle","wiggleOffsetX","roundness","minHeight","leftLayout","rightLayout","leftAffixTopPosition","affixHeight","labelYOffset","rightAffixTopPosition","iconTopPosition","rightAffixWidth","leftAffixWidth","adornmentStyleAdjustmentForNativeInput","mode","affixTopPosition","Right","onAffixChange","adornmentProps","Affix","isTextInputFocused","length","textStyle","visible","Outline","labelContainer","paddingTop","labelBackground","testID","ref","underlineColorAndroid","input","textAlignVertical","outline","pointerEvents","borderRadius","borderWidth","borderColor","create","position","paddingHorizontal","top","bottom","paddingBottom","flexGrow","margin","zIndex"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\node_modules\\react-native-paper\\lib\\module\\components\\TextInput\\TextInputOutlined.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  TextInput as NativeTextInput,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  TextStyle,\n  ColorValue,\n} from 'react-native';\nimport color from 'color';\nimport TextInputAdornment, {\n  getAdornmentConfig,\n  getAdornmentStyleAdjustmentForNativeInput,\n  TextInputAdornmentProps,\n} from './Adornment/TextInputAdornment';\n\nimport InputLabel from './Label/InputLabel';\nimport LabelBackground from './Label/LabelBackground';\nimport type { RenderProps, ChildTextInputProps } from './types';\n\nimport {\n  MAXIMIZED_LABEL_FONT_SIZE,\n  MINIMIZED_LABEL_FONT_SIZE,\n  LABEL_WIGGLE_X_OFFSET,\n  ADORNMENT_SIZE,\n  ADORNMENT_OFFSET,\n} from './constants';\n\nimport {\n  calculateLabelTopPosition,\n  calculateInputHeight,\n  calculatePadding,\n  adjustPaddingOut,\n  Padding,\n  interpolatePlaceholder,\n  calculateOutlinedIconAndAffixTopPosition,\n} from './helpers';\nimport { AdornmentType, AdornmentSide } from './Adornment/enums';\n\nconst OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -6;\nconst LABEL_PADDING_TOP = 8;\nconst MIN_HEIGHT = 64;\nconst MIN_DENSE_HEIGHT = 48;\nconst INPUT_PADDING_HORIZONTAL = 14;\n\nclass TextInputOutlined extends React.Component<ChildTextInputProps> {\n  static defaultProps = {\n    disabled: false,\n    error: false,\n    multiline: false,\n    editable: true,\n    render: (props: RenderProps) => <NativeTextInput {...props} />,\n  };\n\n  render() {\n    const {\n      disabled,\n      editable,\n      label,\n      error,\n      selectionColor,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      underlineColor,\n      outlineColor: customOutlineColor,\n      activeOutlineColor,\n      dense,\n      style,\n      theme,\n      render,\n      multiline,\n      parentState,\n      innerRef,\n      onFocus,\n      forceFocus,\n      onBlur,\n      onChangeText,\n      onLayoutAnimatedText,\n      onLeftAffixLayoutChange,\n      onRightAffixLayoutChange,\n      left,\n      right,\n      placeholderTextColor,\n      ...rest\n    } = this.props;\n\n    const adornmentConfig = getAdornmentConfig({ left, right });\n\n    const { colors, fonts } = theme;\n    const font = fonts.regular;\n    const hasActiveOutline = parentState.focused || error;\n\n    const {\n      fontSize: fontSizeStyle,\n      fontWeight,\n      lineHeight,\n      height,\n      backgroundColor = colors.background,\n      textAlign,\n      ...viewStyle\n    } = (StyleSheet.flatten(style) || {}) as TextStyle;\n    const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n\n    let inputTextColor, activeColor, outlineColor, placeholderColor, errorColor;\n\n    if (disabled) {\n      const isTransparent = color(customOutlineColor).alpha() === 0;\n\n      inputTextColor = activeColor = color(colors.text)\n        .alpha(0.54)\n        .rgb()\n        .string();\n      placeholderColor = colors.disabled;\n      outlineColor = isTransparent ? customOutlineColor : colors.disabled;\n    } else {\n      inputTextColor = colors.text;\n      activeColor = error ? colors.error : activeOutlineColor || colors.primary;\n      placeholderColor = colors.placeholder;\n      outlineColor = customOutlineColor || colors.placeholder;\n      errorColor = colors.error;\n    }\n\n    const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n    const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n\n    const labelWidth = parentState.labelLayout.width;\n    const labelHeight = parentState.labelLayout.height;\n    const labelHalfWidth = labelWidth / 2;\n    const labelHalfHeight = labelHeight / 2;\n\n    const baseLabelTranslateX =\n      (I18nManager.isRTL ? 1 : -1) *\n      (labelHalfWidth -\n        (labelScale * labelWidth) / 2 -\n        (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n\n    let labelTranslationXOffset = 0;\n    const isAdornmentLeftIcon = adornmentConfig.some(\n      ({ side, type }) =>\n        side === AdornmentSide.Left && type === AdornmentType.Icon\n    );\n    if (isAdornmentLeftIcon) {\n      labelTranslationXOffset =\n        (I18nManager.isRTL ? -1 : 1) * (ADORNMENT_SIZE + ADORNMENT_OFFSET - 8);\n    }\n\n    const minInputHeight =\n      (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT) - LABEL_PADDING_TOP;\n\n    const inputHeight = calculateInputHeight(\n      labelHeight,\n      height,\n      minInputHeight\n    );\n\n    const topPosition = calculateLabelTopPosition(\n      labelHeight,\n      inputHeight,\n      LABEL_PADDING_TOP\n    );\n\n    if (height && typeof height !== 'number') {\n      // eslint-disable-next-line\n      console.warn('Currently we support only numbers in height prop');\n    }\n\n    const paddingSettings = {\n      height: height ? +height : null,\n      labelHalfHeight,\n      offset: LABEL_PADDING_TOP,\n      multiline: multiline ? multiline : null,\n      dense: dense ? dense : null,\n      topPosition,\n      fontSize,\n      lineHeight,\n      label,\n      scale: fontScale,\n      isAndroid: Platform.OS === 'android',\n      styles: StyleSheet.flatten(\n        dense ? styles.inputOutlinedDense : styles.inputOutlined\n      ) as Padding,\n    };\n\n    const pad = calculatePadding(paddingSettings);\n\n    const paddingOut = adjustPaddingOut({ ...paddingSettings, pad });\n\n    const baseLabelTranslateY =\n      -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n\n    const placeholderOpacity = hasActiveOutline\n      ? interpolatePlaceholder(parentState.labeled, hasActiveOutline)\n      : parentState.labelLayout.measured\n      ? 1\n      : 0;\n\n    const labelProps = {\n      label,\n      onLayoutAnimatedText,\n      placeholderOpacity,\n      error,\n      placeholderStyle: styles.placeholder,\n      baseLabelTranslateY,\n      baseLabelTranslateX,\n      font,\n      fontSize,\n      fontWeight,\n      labelScale,\n      wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n      topPosition,\n      hasActiveOutline,\n      activeColor,\n      placeholderColor,\n      backgroundColor: backgroundColor as ColorValue,\n      errorColor,\n      labelTranslationXOffset,\n      roundness: theme.roundness,\n    };\n\n    const minHeight = (height ||\n      (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT)) as number;\n\n    const { leftLayout, rightLayout } = parentState;\n\n    const leftAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n      height: minHeight,\n      affixHeight: leftLayout.height || 0,\n      labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n    });\n\n    const rightAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n      height: minHeight,\n      affixHeight: rightLayout.height || 0,\n      labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n    });\n    const iconTopPosition = calculateOutlinedIconAndAffixTopPosition({\n      height: minHeight,\n      affixHeight: ADORNMENT_SIZE,\n      labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n    });\n\n    const rightAffixWidth = right\n      ? rightLayout.width || ADORNMENT_SIZE\n      : ADORNMENT_SIZE;\n\n    const leftAffixWidth = left\n      ? leftLayout.width || ADORNMENT_SIZE\n      : ADORNMENT_SIZE;\n\n    const adornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput(\n      {\n        adornmentConfig,\n        rightAffixWidth,\n        leftAffixWidth,\n        mode: 'outlined',\n      }\n    );\n    const affixTopPosition = {\n      [AdornmentSide.Left]: leftAffixTopPosition,\n      [AdornmentSide.Right]: rightAffixTopPosition,\n    };\n    const onAffixChange = {\n      [AdornmentSide.Left]: onLeftAffixLayoutChange,\n      [AdornmentSide.Right]: onRightAffixLayoutChange,\n    };\n\n    let adornmentProps: TextInputAdornmentProps = {\n      adornmentConfig,\n      forceFocus,\n      topPosition: {\n        [AdornmentType.Icon]: iconTopPosition,\n        [AdornmentType.Affix]: affixTopPosition,\n      },\n      onAffixChange,\n      isTextInputFocused: parentState.focused,\n    };\n    if (adornmentConfig.length) {\n      adornmentProps = {\n        ...adornmentProps,\n        left,\n        right,\n        textStyle: { ...font, fontSize, fontWeight },\n        visible: this.props.parentState.labeled,\n      };\n    }\n\n    return (\n      <View style={viewStyle}>\n        {/*\n          Render the outline separately from the container\n          This is so that the label can overlap the outline\n          Otherwise the border will cut off the label on Android\n          */}\n        <Outline\n          theme={theme}\n          hasActiveOutline={hasActiveOutline}\n          focused={parentState.focused}\n          activeColor={activeColor}\n          outlineColor={outlineColor}\n          backgroundColor={backgroundColor}\n        />\n        <View>\n          <View\n            style={[\n              styles.labelContainer,\n              {\n                paddingTop: LABEL_PADDING_TOP,\n                minHeight,\n              },\n            ]}\n          >\n            <InputLabel\n              parentState={parentState}\n              labelProps={labelProps}\n              labelBackground={LabelBackground}\n            />\n            {render?.({\n              testID: 'text-input-outlined',\n              ...rest,\n              ref: innerRef,\n              onChangeText,\n              placeholder: label\n                ? parentState.placeholder\n                : this.props.placeholder,\n              placeholderTextColor: placeholderTextColor || placeholderColor,\n              editable: !disabled && editable,\n              selectionColor:\n                typeof selectionColor === 'undefined'\n                  ? activeColor\n                  : selectionColor,\n              onFocus,\n              onBlur,\n              underlineColorAndroid: 'transparent',\n              multiline,\n              style: [\n                styles.input,\n                !multiline || (multiline && height)\n                  ? { height: inputHeight }\n                  : {},\n                paddingOut,\n                {\n                  ...font,\n                  fontSize,\n                  fontWeight,\n                  color: inputTextColor,\n                  textAlignVertical: multiline ? 'top' : 'center',\n                  textAlign: textAlign\n                    ? textAlign\n                    : I18nManager.isRTL\n                    ? 'right'\n                    : 'left',\n                },\n                Platform.OS === 'web' && { outline: 'none' },\n                adornmentStyleAdjustmentForNativeInput,\n              ],\n            } as RenderProps)}\n          </View>\n          <TextInputAdornment {...adornmentProps} />\n        </View>\n      </View>\n    );\n  }\n}\n\nexport default TextInputOutlined;\n\ntype OutlineProps = {\n  activeColor: string;\n  hasActiveOutline?: boolean;\n  focused?: boolean;\n  outlineColor?: string;\n  backgroundColor: ColorValue;\n  theme: ReactNativePaper.Theme;\n};\n\nconst Outline = ({\n  theme,\n  hasActiveOutline,\n  activeColor,\n  outlineColor,\n  focused,\n  backgroundColor,\n}: OutlineProps) => (\n  <View\n    testID=\"text-input-outline\"\n    pointerEvents=\"none\"\n    style={[\n      styles.outline,\n      // eslint-disable-next-line react-native/no-inline-styles\n      {\n        backgroundColor,\n        borderRadius: theme.roundness,\n        borderWidth: focused ? 2 : 1,\n        borderColor: hasActiveOutline ? activeColor : outlineColor,\n      },\n    ]}\n  />\n);\n\nconst styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n  },\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0,\n  },\n  labelContainer: {\n    paddingBottom: 0,\n  },\n  input: {\n    flexGrow: 1,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n    margin: 0,\n    zIndex: 1,\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8,\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}