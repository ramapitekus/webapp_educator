{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { OutputFormatPropertyName, RecognitionMode, RecognizerConfig, SpeechConnectionFactory, SpeechServiceRecognizer } from \"../common.speech/Exports\";\nimport { marshalPromiseToCallbacks } from \"../common/Exports\";\nimport { Contracts } from \"./Contracts\";\nimport { OutputFormat, PropertyId, Recognizer } from \"./Exports\";\n/**\r\n * Performs speech recognition from microphone, file, or other audio input streams, and gets transcribed text as result.\r\n * @class SpeechRecognizer\r\n */\n\nexport class SpeechRecognizer extends Recognizer {\n  /**\r\n   * SpeechRecognizer constructor.\r\n   * @constructor\r\n   * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\r\n   * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n   */\n  constructor(speechConfig, audioConfig) {\n    const speechConfigImpl = speechConfig;\n    Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\n    Contracts.throwIfNullOrWhitespace(speechConfigImpl.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage), PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\n    super(audioConfig, speechConfigImpl.properties, new SpeechConnectionFactory());\n    this.privDisposedRecognizer = false;\n  }\n  /**\r\n   * SpeechRecognizer constructor.\r\n   * @constructor\r\n   * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\r\n   * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the recognizer\r\n   * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n   */\n\n\n  static FromConfig(speechConfig, autoDetectSourceLanguageConfig, audioConfig) {\n    const speechConfigImpl = speechConfig;\n    autoDetectSourceLanguageConfig.properties.mergeTo(speechConfigImpl.properties);\n    const recognizer = new SpeechRecognizer(speechConfig, audioConfig);\n    return recognizer;\n  }\n  /**\r\n   * Gets the endpoint id of a customized speech model that is used for speech recognition.\r\n   * @member SpeechRecognizer.prototype.endpointId\r\n   * @function\r\n   * @public\r\n   * @returns {string} the endpoint id of a customized speech model that is used for speech recognition.\r\n   */\n\n\n  get endpointId() {\n    Contracts.throwIfDisposed(this.privDisposedRecognizer);\n    return this.properties.getProperty(PropertyId.SpeechServiceConnection_EndpointId, \"00000000-0000-0000-0000-000000000000\");\n  }\n  /**\r\n   * Gets the authorization token used to communicate with the service.\r\n   * @member SpeechRecognizer.prototype.authorizationToken\r\n   * @function\r\n   * @public\r\n   * @returns {string} Authorization token.\r\n   */\n\n\n  get authorizationToken() {\n    return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n  }\n  /**\r\n   * Gets/Sets the authorization token used to communicate with the service.\r\n   * @member SpeechRecognizer.prototype.authorizationToken\r\n   * @function\r\n   * @public\r\n   * @param {string} token - Authorization token.\r\n   */\n\n\n  set authorizationToken(token) {\n    Contracts.throwIfNullOrWhitespace(token, \"token\");\n    this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\n  }\n  /**\r\n   * Gets the spoken language of recognition.\r\n   * @member SpeechRecognizer.prototype.speechRecognitionLanguage\r\n   * @function\r\n   * @public\r\n   * @returns {string} The spoken language of recognition.\r\n   */\n\n\n  get speechRecognitionLanguage() {\n    Contracts.throwIfDisposed(this.privDisposedRecognizer);\n    return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\n  }\n  /**\r\n   * Gets the output format of recognition.\r\n   * @member SpeechRecognizer.prototype.outputFormat\r\n   * @function\r\n   * @public\r\n   * @returns {OutputFormat} The output format of recognition.\r\n   */\n\n\n  get outputFormat() {\n    Contracts.throwIfDisposed(this.privDisposedRecognizer);\n\n    if (this.properties.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]) === OutputFormat[OutputFormat.Simple]) {\n      return OutputFormat.Simple;\n    } else {\n      return OutputFormat.Detailed;\n    }\n  }\n  /**\r\n   * The collection of properties and their values defined for this SpeechRecognizer.\r\n   * @member SpeechRecognizer.prototype.properties\r\n   * @function\r\n   * @public\r\n   * @returns {PropertyCollection} The collection of properties and their values defined for this SpeechRecognizer.\r\n   */\n\n\n  get properties() {\n    return this.privProperties;\n  }\n  /**\r\n   * Starts speech recognition, and stops after the first utterance is recognized.\r\n   * The task returns the recognition text as result.\r\n   * Note: RecognizeOnceAsync() returns when the first utterance has been recognized,\r\n   *       so it is suitable only for single shot recognition\r\n   *       like command or query. For long-running recognition, use StartContinuousRecognitionAsync() instead.\r\n   * @member SpeechRecognizer.prototype.recognizeOnceAsync\r\n   * @function\r\n   * @public\r\n   * @param cb - Callback that received the SpeechRecognitionResult.\r\n   * @param err - Callback invoked in case of an error.\r\n   */\n\n\n  recognizeOnceAsync(cb, err) {\n    marshalPromiseToCallbacks(this.recognizeOnceAsyncImpl(RecognitionMode.Interactive), cb, err);\n  }\n  /**\r\n   * Starts speech recognition, until stopContinuousRecognitionAsync() is called.\r\n   * User must subscribe to events to receive recognition results.\r\n   * @member SpeechRecognizer.prototype.startContinuousRecognitionAsync\r\n   * @function\r\n   * @public\r\n   * @param cb - Callback invoked once the recognition has started.\r\n   * @param err - Callback invoked in case of an error.\r\n   */\n\n\n  startContinuousRecognitionAsync(cb, err) {\n    marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\n  }\n  /**\r\n   * Stops continuous speech recognition.\r\n   * @member SpeechRecognizer.prototype.stopContinuousRecognitionAsync\r\n   * @function\r\n   * @public\r\n   * @param cb - Callback invoked once the recognition has stopped.\r\n   * @param err - Callback invoked in case of an error.\r\n   */\n\n\n  stopContinuousRecognitionAsync(cb, err) {\n    marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\n  }\n  /**\r\n   * Starts speech recognition with keyword spotting, until\r\n   * stopKeywordRecognitionAsync() is called.\r\n   * User must subscribe to events to receive recognition results.\r\n   * Note: Key word spotting functionality is only available on the\r\n   *      Speech Devices SDK. This functionality is currently not included in the SDK itself.\r\n   * @member SpeechRecognizer.prototype.startKeywordRecognitionAsync\r\n   * @function\r\n   * @public\r\n   * @param {KeywordRecognitionModel} model The keyword recognition model that\r\n   *        specifies the keyword to be recognized.\r\n   * @param cb - Callback invoked once the recognition has started.\r\n   * @param err - Callback invoked in case of an error.\r\n   */\n\n\n  startKeywordRecognitionAsync(model, cb, err) {\n    Contracts.throwIfNull(model, \"model\");\n\n    if (!!err) {\n      err(\"Not yet implemented.\");\n    }\n  }\n  /**\r\n   * Stops continuous speech recognition.\r\n   * Note: Key word spotting functionality is only available on the\r\n   *       Speech Devices SDK. This functionality is currently not included in the SDK itself.\r\n   * @member SpeechRecognizer.prototype.stopKeywordRecognitionAsync\r\n   * @function\r\n   * @public\r\n   * @param cb - Callback invoked once the recognition has stopped.\r\n   * @param err - Callback invoked in case of an error.\r\n   */\n\n\n  stopKeywordRecognitionAsync(cb, err) {\n    if (!!cb) {\n      cb();\n    }\n  }\n  /**\r\n   * closes all external resources held by an instance of this class.\r\n   * @member SpeechRecognizer.prototype.close\r\n   * @function\r\n   * @public\r\n   */\n\n\n  close(cb, errorCb) {\n    Contracts.throwIfDisposed(this.privDisposedRecognizer);\n    marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\n  }\n  /**\r\n   * Disposes any resources held by the object.\r\n   * @member SpeechRecognizer.prototype.dispose\r\n   * @function\r\n   * @public\r\n   * @param {boolean} disposing - true if disposing the object.\r\n   */\n\n\n  dispose(disposing) {\n    const _super = Object.create(null, {\n      dispose: {\n        get: () => super.dispose\n      }\n    });\n\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.privDisposedRecognizer) {\n        return;\n      }\n\n      if (disposing) {\n        this.privDisposedRecognizer = true;\n        yield this.implRecognizerStop();\n      }\n\n      yield _super.dispose.call(this, disposing);\n    });\n  }\n\n  createRecognizerConfig(speechConfig) {\n    return new RecognizerConfig(speechConfig, this.properties);\n  }\n\n  createServiceRecognizer(authentication, connectionFactory, audioConfig, recognizerConfig) {\n    const configImpl = audioConfig;\n    return new SpeechServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\n  }\n\n}","map":{"version":3,"mappings":"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","names":["OutputFormatPropertyName","RecognitionMode","RecognizerConfig","SpeechConnectionFactory","SpeechServiceRecognizer","marshalPromiseToCallbacks","Contracts","OutputFormat","PropertyId","Recognizer","SpeechRecognizer","constructor","speechConfig","audioConfig","speechConfigImpl","throwIfNull","throwIfNullOrWhitespace","properties","getProperty","SpeechServiceConnection_RecoLanguage","privDisposedRecognizer","FromConfig","autoDetectSourceLanguageConfig","mergeTo","recognizer","endpointId","throwIfDisposed","SpeechServiceConnection_EndpointId","authorizationToken","SpeechServiceAuthorization_Token","token","setProperty","speechRecognitionLanguage","outputFormat","Simple","Detailed","privProperties","recognizeOnceAsync","cb","err","recognizeOnceAsyncImpl","Interactive","startContinuousRecognitionAsync","startContinuousRecognitionAsyncImpl","Conversation","stopContinuousRecognitionAsync","stopContinuousRecognitionAsyncImpl","startKeywordRecognitionAsync","model","stopKeywordRecognitionAsync","close","errorCb","dispose","disposing","implRecognizerStop","_super","call","createRecognizerConfig","createServiceRecognizer","authentication","connectionFactory","recognizerConfig","configImpl"],"sources":["C:\\Users\\ozgur\\Documents\\VSCodeProjects\\webapp_educator\\educator\\node_modules\\microsoft-cognitiveservices-speech-sdk\\distrib\\es2015\\src\\sdk\\src\\sdk\\SpeechRecognizer.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    OutputFormatPropertyName,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechConnectionFactory,\r\n    SpeechServiceConfig,\r\n    SpeechServiceRecognizer,\r\n} from \"../common.speech/Exports\";\r\nimport { marshalPromiseToCallbacks } from \"../common/Exports\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    AutoDetectSourceLanguageConfig,\r\n    KeywordRecognitionModel,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"./Exports\";\r\nimport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig\";\r\n\r\n/**\r\n * Performs speech recognition from microphone, file, or other audio input streams, and gets transcribed text as result.\r\n * @class SpeechRecognizer\r\n */\r\nexport class SpeechRecognizer extends Recognizer {\r\n    private privDisposedRecognizer: boolean;\r\n\r\n    /**\r\n     * SpeechRecognizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        Contracts.throwIfNullOrWhitespace(\r\n            speechConfigImpl.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\r\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n        super(audioConfig, speechConfigImpl.properties, new SpeechConnectionFactory());\r\n        this.privDisposedRecognizer = false;\r\n    }\r\n\r\n    /**\r\n     * SpeechRecognizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\r\n     * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public static FromConfig(speechConfig: SpeechConfig, autoDetectSourceLanguageConfig: AutoDetectSourceLanguageConfig, audioConfig?: AudioConfig): SpeechRecognizer {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        autoDetectSourceLanguageConfig.properties.mergeTo(speechConfigImpl.properties);\r\n        const recognizer = new SpeechRecognizer(speechConfig, audioConfig);\r\n        return recognizer;\r\n    }\r\n\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member SpeechRecognizer.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member SpeechRecognizer.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member SpeechRecognizer.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: Recognizer, event: SpeechRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * Gets the endpoint id of a customized speech model that is used for speech recognition.\r\n     * @member SpeechRecognizer.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     * @returns {string} the endpoint id of a customized speech model that is used for speech recognition.\r\n     */\r\n    public get endpointId(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_EndpointId, \"00000000-0000-0000-0000-000000000000\");\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member SpeechRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member SpeechRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * Gets the spoken language of recognition.\r\n     * @member SpeechRecognizer.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} The spoken language of recognition.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets the output format of recognition.\r\n     * @member SpeechRecognizer.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {OutputFormat} The output format of recognition.\r\n     */\r\n    public get outputFormat(): OutputFormat {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        if (this.properties.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]) === OutputFormat[OutputFormat.Simple]) {\r\n            return OutputFormat.Simple;\r\n        } else {\r\n            return OutputFormat.Detailed;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this SpeechRecognizer.\r\n     * @member SpeechRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeechRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition, and stops after the first utterance is recognized.\r\n     * The task returns the recognition text as result.\r\n     * Note: RecognizeOnceAsync() returns when the first utterance has been recognized,\r\n     *       so it is suitable only for single shot recognition\r\n     *       like command or query. For long-running recognition, use StartContinuousRecognitionAsync() instead.\r\n     * @member SpeechRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the SpeechRecognitionResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public recognizeOnceAsync(cb?: (e: SpeechRecognitionResult) => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.recognizeOnceAsyncImpl(RecognitionMode.Interactive), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition, until stopContinuousRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * @member SpeechRecognizer.prototype.startContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stops continuous speech recognition.\r\n     * @member SpeechRecognizer.prototype.stopContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition with keyword spotting, until\r\n     * stopKeywordRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * Note: Key word spotting functionality is only available on the\r\n     *      Speech Devices SDK. This functionality is currently not included in the SDK itself.\r\n     * @member SpeechRecognizer.prototype.startKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param {KeywordRecognitionModel} model The keyword recognition model that\r\n     *        specifies the keyword to be recognized.\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startKeywordRecognitionAsync(model: KeywordRecognitionModel, cb?: () => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        if (!!err) {\r\n            err(\"Not yet implemented.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops continuous speech recognition.\r\n     * Note: Key word spotting functionality is only available on the\r\n     *       Speech Devices SDK. This functionality is currently not included in the SDK itself.\r\n     * @member SpeechRecognizer.prototype.stopKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopKeywordRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        if (!!cb) {\r\n            cb();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member SpeechRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * Disposes any resources held by the object.\r\n     * @member SpeechRecognizer.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - true if disposing the object.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privDisposedRecognizer = true;\r\n            await this.implRecognizerStop();\r\n        }\r\n\r\n        await super.dispose(disposing);\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(\r\n            speechConfig,\r\n            this.properties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new SpeechServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}