{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}; // tslint:disable:max-classes-per-file\n\n\nimport { createNoDashGuid, Stream } from \"../../common/Exports\";\nimport { Contracts } from \"../Contracts\";\nimport { AudioOutputFormatImpl } from \"./AudioOutputFormat\";\n/**\r\n * Represents audio output stream used for custom audio output configurations.\r\n * @class AudioOutputStream\r\n */\n\nexport class AudioOutputStream {\n  /**\r\n   * Creates and initializes an instance.\r\n   * @constructor\r\n   */\n  constructor() {}\n  /**\r\n   * Creates a memory backed PullAudioOutputStream with the specified audio format.\r\n   * @member AudioOutputStream.createPullStream\r\n   * @function\r\n   * @public\r\n   * @returns {PullAudioOutputStream} The audio output stream being created.\r\n   */\n\n\n  static createPullStream() {\n    return PullAudioOutputStream.create();\n  }\n\n}\n/**\r\n * Represents memory backed push audio output stream used for custom audio output configurations.\r\n * @class PullAudioOutputStream\r\n */\n\nexport class PullAudioOutputStream extends AudioOutputStream {\n  /**\r\n   * Creates a memory backed PullAudioOutputStream with the specified audio format.\r\n   * @member PullAudioOutputStream.create\r\n   * @function\r\n   * @public\r\n   * @returns {PullAudioOutputStream} The push audio output stream being created.\r\n   */\n  static create() {\n    return new PullAudioOutputStreamImpl();\n  }\n\n}\n/**\r\n * Represents memory backed push audio output stream used for custom audio output configurations.\r\n * @private\r\n * @class PullAudioOutputStreamImpl\r\n */\n\nexport class PullAudioOutputStreamImpl extends PullAudioOutputStream {\n  /**\r\n   * Creates and initializes an instance with the given values.\r\n   * @constructor\r\n   */\n  constructor() {\n    super();\n    this.privId = createNoDashGuid();\n    this.privStream = new Stream();\n  }\n  /**\r\n   * Sets the format information to the stream. For internal use only.\r\n   * @param {AudioStreamFormat} format - the format to be set.\r\n   */\n\n\n  set format(format) {\n    if (format === undefined || format === null) {\n      this.privFormat = AudioOutputFormatImpl.getDefaultOutputFormat();\n    }\n\n    this.privFormat = format;\n  }\n  /**\r\n   * Format information for the audio\r\n   */\n\n\n  get format() {\n    return this.privFormat;\n  }\n  /**\r\n   * Checks if the stream is closed\r\n   * @member PullAudioOutputStreamImpl.prototype.isClosed\r\n   * @property\r\n   * @public\r\n   */\n\n\n  get isClosed() {\n    return this.privStream.isClosed;\n  }\n  /**\r\n   * Gets the id of the stream\r\n   * @member PullAudioOutputStreamImpl.prototype.id\r\n   * @property\r\n   * @public\r\n   */\n\n\n  id() {\n    return this.privId;\n  }\n  /**\r\n   * Reads audio data from the internal buffer.\r\n   * @member PullAudioOutputStreamImpl.prototype.read\r\n   * @function\r\n   * @public\r\n   * @param {ArrayBuffer} dataBuffer - An ArrayBuffer to store the read data.\r\n   * @returns {Promise<number>} - Audio buffer length has been read.\r\n   */\n\n\n  read(dataBuffer) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const intView = new Int8Array(dataBuffer);\n      let totalBytes = 0;\n\n      if (this.privLastChunkView !== undefined) {\n        if (this.privLastChunkView.length > dataBuffer.byteLength) {\n          intView.set(this.privLastChunkView.slice(0, dataBuffer.byteLength));\n          this.privLastChunkView = this.privLastChunkView.slice(dataBuffer.byteLength);\n          return Promise.resolve(dataBuffer.byteLength);\n        }\n\n        intView.set(this.privLastChunkView);\n        totalBytes = this.privLastChunkView.length;\n        this.privLastChunkView = undefined;\n      } // Until we have the minimum number of bytes to send in a transmission, keep asking for more.\n\n\n      while (totalBytes < dataBuffer.byteLength && !this.privStream.isReadEnded) {\n        const chunk = yield this.privStream.read();\n\n        if (chunk !== undefined && !chunk.isEnd) {\n          let tmpBuffer;\n\n          if (chunk.buffer.byteLength > dataBuffer.byteLength - totalBytes) {\n            tmpBuffer = chunk.buffer.slice(0, dataBuffer.byteLength - totalBytes);\n            this.privLastChunkView = new Int8Array(chunk.buffer.slice(dataBuffer.byteLength - totalBytes));\n          } else {\n            tmpBuffer = chunk.buffer;\n          }\n\n          intView.set(new Int8Array(tmpBuffer), totalBytes);\n          totalBytes += tmpBuffer.byteLength;\n        } else {\n          yield this.privStream.readEnded();\n        }\n      }\n\n      return totalBytes;\n    });\n  }\n  /**\r\n   * Writes the audio data specified by making an internal copy of the data.\r\n   * @member PullAudioOutputStreamImpl.prototype.write\r\n   * @function\r\n   * @public\r\n   * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\r\n   */\n\n\n  write(dataBuffer) {\n    Contracts.throwIfNullOrUndefined(this.privStream, \"must set format before writing\");\n    this.privStream.writeStreamChunk({\n      buffer: dataBuffer,\n      isEnd: false,\n      timeReceived: Date.now()\n    });\n  }\n  /**\r\n   * Closes the stream.\r\n   * @member PullAudioOutputStreamImpl.prototype.close\r\n   * @function\r\n   * @public\r\n   */\n\n\n  close() {\n    this.privStream.close();\n  }\n\n}\n/*\r\n * Represents audio output stream used for custom audio output configurations.\r\n * @class PushAudioOutputStream\r\n */\n\nexport class PushAudioOutputStream extends AudioOutputStream {\n  /**\r\n   * Creates and initializes and instance.\r\n   * @constructor\r\n   */\n  constructor() {\n    super();\n  }\n  /**\r\n   * Creates a PushAudioOutputStream that delegates to the specified callback interface for\r\n   * write() and close() methods.\r\n   * @member PushAudioOutputStream.create\r\n   * @function\r\n   * @public\r\n   * @param {PushAudioOutputStreamCallback} callback - The custom audio output object,\r\n   *        derived from PushAudioOutputStreamCallback\r\n   * @returns {PushAudioOutputStream} The push audio output stream being created.\r\n   */\n\n\n  static create(callback) {\n    return new PushAudioOutputStreamImpl(callback);\n  }\n\n}\n/**\r\n * Represents audio output stream used for custom audio output configurations.\r\n * @private\r\n * @class PushAudioOutputStreamImpl\r\n */\n\nexport class PushAudioOutputStreamImpl extends PushAudioOutputStream {\n  /**\r\n   * Creates a PushAudioOutputStream that delegates to the specified callback interface for\r\n   * read() and close() methods.\r\n   * @constructor\r\n   * @param {PushAudioOutputStreamCallback} callback - The custom audio output object,\r\n   *        derived from PushAudioOutputStreamCallback\r\n   */\n  constructor(callback) {\n    super();\n    this.privId = createNoDashGuid();\n    this.privCallback = callback;\n  } // tslint:disable-next-line:no-empty\n\n\n  set format(format) {}\n\n  write(buffer) {\n    if (!!this.privCallback.write) {\n      this.privCallback.write(buffer);\n    }\n  }\n\n  close() {\n    if (!!this.privCallback.close) {\n      this.privCallback.close();\n    }\n  }\n\n  id() {\n    return this.privId;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["createNoDashGuid","Stream","Contracts","AudioOutputFormatImpl","AudioOutputStream","constructor","createPullStream","PullAudioOutputStream","create","PullAudioOutputStreamImpl","privId","privStream","format","undefined","privFormat","getDefaultOutputFormat","isClosed","id","read","dataBuffer","intView","Int8Array","totalBytes","privLastChunkView","length","byteLength","set","slice","Promise","resolve","isReadEnded","chunk","isEnd","tmpBuffer","buffer","readEnded","write","throwIfNullOrUndefined","writeStreamChunk","timeReceived","Date","now","close","PushAudioOutputStream","callback","PushAudioOutputStreamImpl","privCallback"],"sources":["C:\\Users\\ozgur\\Documents\\VSCodeProjects\\webapp_educator\\educator\\node_modules\\microsoft-cognitiveservices-speech-sdk\\distrib\\es2015\\src\\sdk\\Audio\\src\\sdk\\Audio\\AudioOutputStream.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// tslint:disable:max-classes-per-file\r\n\r\nimport {\r\n    createNoDashGuid,\r\n    Deferred,\r\n    IAudioDestination,\r\n    IStreamChunk,\r\n    Stream,\r\n} from \"../../common/Exports\";\r\nimport { Contracts } from \"../Contracts\";\r\nimport {\r\n    AudioStreamFormat,\r\n    PushAudioOutputStreamCallback\r\n} from \"../Exports\";\r\nimport { AudioOutputFormatImpl } from \"./AudioOutputFormat\";\r\n\r\n/**\r\n * Represents audio output stream used for custom audio output configurations.\r\n * @class AudioOutputStream\r\n */\r\nexport abstract class AudioOutputStream {\r\n\r\n    /**\r\n     * Creates and initializes an instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() { }\r\n\r\n    /**\r\n     * Sets the format of the AudioOutputStream\r\n     * Note: the format is set by the synthesizer before writing. Do not set it before passing it to AudioConfig\r\n     * @member AudioOutputStream.prototype.format\r\n     */\r\n    public abstract set format(format: AudioStreamFormat);\r\n\r\n    /**\r\n     * Creates a memory backed PullAudioOutputStream with the specified audio format.\r\n     * @member AudioOutputStream.createPullStream\r\n     * @function\r\n     * @public\r\n     * @returns {PullAudioOutputStream} The audio output stream being created.\r\n     */\r\n    public static createPullStream(): PullAudioOutputStream {\r\n        return PullAudioOutputStream.create();\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioOutputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio output stream used for custom audio output configurations.\r\n * @class PullAudioOutputStream\r\n */\r\nexport abstract class PullAudioOutputStream extends AudioOutputStream {\r\n\r\n    /**\r\n     * Creates a memory backed PullAudioOutputStream with the specified audio format.\r\n     * @member PullAudioOutputStream.create\r\n     * @function\r\n     * @public\r\n     * @returns {PullAudioOutputStream} The push audio output stream being created.\r\n     */\r\n    public static create(): PullAudioOutputStream {\r\n        return new PullAudioOutputStreamImpl();\r\n    }\r\n\r\n    /**\r\n     * Reads audio data from the internal buffer.\r\n     * @member PullAudioOutputStream.prototype.read\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - An ArrayBuffer to store the read data.\r\n     * @returns {Promise<number>} Audio buffer length has been read.\r\n     */\r\n    public abstract read(dataBuffer: ArrayBuffer): Promise<number>;\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PullAudioOutputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio output stream used for custom audio output configurations.\r\n * @private\r\n * @class PullAudioOutputStreamImpl\r\n */\r\nexport class PullAudioOutputStreamImpl extends PullAudioOutputStream implements IAudioDestination {\r\n    private privFormat: AudioOutputFormatImpl;\r\n    private privId: string;\r\n    private privStream: Stream<ArrayBuffer>;\r\n    private privLastChunkView: Int8Array;\r\n\r\n    /**\r\n     * Creates and initializes an instance with the given values.\r\n     * @constructor\r\n     */\r\n    public constructor() {\r\n        super();\r\n        this.privId = createNoDashGuid();\r\n        this.privStream = new Stream<ArrayBuffer>();\r\n    }\r\n\r\n    /**\r\n     * Sets the format information to the stream. For internal use only.\r\n     * @param {AudioStreamFormat} format - the format to be set.\r\n     */\r\n    public set format(format: AudioStreamFormat) {\r\n        if (format === undefined || format === null) {\r\n            this.privFormat = AudioOutputFormatImpl.getDefaultOutputFormat();\r\n        }\r\n        this.privFormat = format as AudioOutputFormatImpl;\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): AudioStreamFormat {\r\n        return this.privFormat;\r\n    }\r\n\r\n    /**\r\n     * Checks if the stream is closed\r\n     * @member PullAudioOutputStreamImpl.prototype.isClosed\r\n     * @property\r\n     * @public\r\n     */\r\n    public get isClosed(): boolean {\r\n        return this.privStream.isClosed;\r\n    }\r\n\r\n    /**\r\n     * Gets the id of the stream\r\n     * @member PullAudioOutputStreamImpl.prototype.id\r\n     * @property\r\n     * @public\r\n     */\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    /**\r\n     * Reads audio data from the internal buffer.\r\n     * @member PullAudioOutputStreamImpl.prototype.read\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - An ArrayBuffer to store the read data.\r\n     * @returns {Promise<number>} - Audio buffer length has been read.\r\n     */\r\n    public async read(dataBuffer: ArrayBuffer): Promise<number> {\r\n        const intView: Int8Array = new Int8Array(dataBuffer);\r\n        let totalBytes: number = 0;\r\n\r\n        if (this.privLastChunkView !== undefined) {\r\n            if (this.privLastChunkView.length > dataBuffer.byteLength) {\r\n                intView.set(this.privLastChunkView.slice(0, dataBuffer.byteLength));\r\n                this.privLastChunkView = this.privLastChunkView.slice(dataBuffer.byteLength);\r\n                return Promise.resolve(dataBuffer.byteLength);\r\n            }\r\n            intView.set(this.privLastChunkView);\r\n            totalBytes = this.privLastChunkView.length;\r\n            this.privLastChunkView = undefined;\r\n        }\r\n\r\n        // Until we have the minimum number of bytes to send in a transmission, keep asking for more.\r\n        while (totalBytes < dataBuffer.byteLength && !this.privStream.isReadEnded) {\r\n            const chunk: IStreamChunk<ArrayBuffer> = await this.privStream.read();\r\n            if (chunk !== undefined && !chunk.isEnd) {\r\n                let tmpBuffer: ArrayBuffer;\r\n                if (chunk.buffer.byteLength > dataBuffer.byteLength - totalBytes) {\r\n                    tmpBuffer = chunk.buffer.slice(0, dataBuffer.byteLength - totalBytes);\r\n                    this.privLastChunkView = new Int8Array(chunk.buffer.slice(dataBuffer.byteLength - totalBytes));\r\n                } else {\r\n                    tmpBuffer = chunk.buffer;\r\n                }\r\n                intView.set(new Int8Array(tmpBuffer), totalBytes);\r\n                totalBytes += tmpBuffer.byteLength;\r\n            } else {\r\n                await this.privStream.readEnded();\r\n            }\r\n        }\r\n        return totalBytes;\r\n    }\r\n\r\n    /**\r\n     * Writes the audio data specified by making an internal copy of the data.\r\n     * @member PullAudioOutputStreamImpl.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\r\n     */\r\n    public write(dataBuffer: ArrayBuffer): void {\r\n        Contracts.throwIfNullOrUndefined(this.privStream, \"must set format before writing\");\r\n        this.privStream.writeStreamChunk({\r\n            buffer: dataBuffer,\r\n            isEnd: false,\r\n            timeReceived: Date.now()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PullAudioOutputStreamImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.privStream.close();\r\n    }\r\n}\r\n\r\n/*\r\n * Represents audio output stream used for custom audio output configurations.\r\n * @class PushAudioOutputStream\r\n */\r\nexport abstract class PushAudioOutputStream extends AudioOutputStream {\r\n    /**\r\n     * Creates and initializes and instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() { super(); }\r\n\r\n    /**\r\n     * Creates a PushAudioOutputStream that delegates to the specified callback interface for\r\n     * write() and close() methods.\r\n     * @member PushAudioOutputStream.create\r\n     * @function\r\n     * @public\r\n     * @param {PushAudioOutputStreamCallback} callback - The custom audio output object,\r\n     *        derived from PushAudioOutputStreamCallback\r\n     * @returns {PushAudioOutputStream} The push audio output stream being created.\r\n     */\r\n    public static create(callback: PushAudioOutputStreamCallback): PushAudioOutputStream {\r\n        return new PushAudioOutputStreamImpl(callback);\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member PushAudioOutputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n\r\n}\r\n\r\n/**\r\n * Represents audio output stream used for custom audio output configurations.\r\n * @private\r\n * @class PushAudioOutputStreamImpl\r\n */\r\nexport class PushAudioOutputStreamImpl extends PushAudioOutputStream implements IAudioDestination {\r\n    private readonly privId: string;\r\n    private privCallback: PushAudioOutputStreamCallback;\r\n\r\n    /**\r\n     * Creates a PushAudioOutputStream that delegates to the specified callback interface for\r\n     * read() and close() methods.\r\n     * @constructor\r\n     * @param {PushAudioOutputStreamCallback} callback - The custom audio output object,\r\n     *        derived from PushAudioOutputStreamCallback\r\n     */\r\n    public constructor(callback: PushAudioOutputStreamCallback) {\r\n        super();\r\n        this.privId = createNoDashGuid();\r\n        this.privCallback = callback;\r\n    }\r\n\r\n    // tslint:disable-next-line:no-empty\r\n    public set format(format: AudioStreamFormat) { }\r\n\r\n    public write(buffer: ArrayBuffer): void {\r\n        if (!!this.privCallback.write) {\r\n            this.privCallback.write(buffer);\r\n        }\r\n    }\r\n\r\n    public close(): void {\r\n        if (!!this.privCallback.close) {\r\n            this.privCallback.close();\r\n        }\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}