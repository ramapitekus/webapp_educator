{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ProxyInfo, WebsocketConnection } from \"../../common.browser/Exports\";\nimport { createGuid } from \"../../common/Exports\";\nimport { Contracts } from \"../../sdk/Contracts\";\nimport { PropertyId } from \"../../sdk/Exports\";\nimport { ConnectionFactoryBase } from \"../ConnectionFactoryBase\";\nimport { ConversationConnectionConfig } from \"./ConversationConnectionConfig\";\nimport { ConversationWebsocketMessageFormatter } from \"./ConversationWebsocketMessageFormatter\";\n/**\r\n * Create a connection to the Conversation Translator websocket for sending instant messages and commands, and for receiving translated messages.\r\n * The conversation must already have been started or joined.\r\n */\n\nexport class ConversationConnectionFactory extends ConnectionFactoryBase {\n  create(config, authInfo, connectionId) {\n    const endpointHost = config.parameters.getProperty(PropertyId.ConversationTranslator_Host, ConversationConnectionConfig.host);\n    const correlationId = config.parameters.getProperty(PropertyId.ConversationTranslator_CorrelationId, createGuid());\n    const endpoint = `wss://${endpointHost}${ConversationConnectionConfig.webSocketPath}`;\n    const token = config.parameters.getProperty(PropertyId.ConversationTranslator_Token, undefined);\n    Contracts.throwIfNullOrUndefined(token, \"token\");\n    const queryParams = {};\n    queryParams[ConversationConnectionConfig.configParams.apiVersion] = ConversationConnectionConfig.apiVersion;\n    queryParams[ConversationConnectionConfig.configParams.token] = token;\n    queryParams[ConversationConnectionConfig.configParams.correlationId] = correlationId;\n    const enableCompression = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\n    return new WebsocketConnection(endpoint, queryParams, {}, new ConversationWebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\n  }\n\n}","map":{"version":3,"mappings":"AAAA;AACA;AAEA,SAASA,SAAT,EAAoBC,mBAApB,QAA+C,8BAA/C;AACA,SAASC,UAAT,QAA2D,sBAA3D;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,SAASC,qBAAT,QAAsC,0BAAtC;AAEA,SAASC,4BAAT,QAA6C,gCAA7C;AACA,SAASC,qCAAT,QAAsD,yCAAtD;AAEA;;;;;AAIA,OAAM,MAAOC,6BAAP,SAA6CH,qBAA7C,CAAkE;AAE7DI,QAAM,CAACC,MAAD,EAA2BC,QAA3B,EAA+CC,YAA/C,EAAoE;AAE7E,UAAMC,YAAY,GAAWH,MAAM,CAACI,UAAP,CAAkBC,WAAlB,CAA8BX,UAAU,CAACY,2BAAzC,EAAsEV,4BAA4B,CAACW,IAAnG,CAA7B;AACA,UAAMC,aAAa,GAAWR,MAAM,CAACI,UAAP,CAAkBC,WAAlB,CAA8BX,UAAU,CAACe,oCAAzC,EAA+EjB,UAAU,EAAzF,CAA9B;AAEA,UAAMkB,QAAQ,GAAW,SAASP,YAAY,GAAGP,4BAA4B,CAACe,aAAa,EAA3F;AACA,UAAMC,KAAK,GAAWZ,MAAM,CAACI,UAAP,CAAkBC,WAAlB,CAA8BX,UAAU,CAACmB,4BAAzC,EAAuEC,SAAvE,CAAtB;AACArB,aAAS,CAACsB,sBAAV,CAAiCH,KAAjC,EAAwC,OAAxC;AAEA,UAAMI,WAAW,GAA8B,EAA/C;AACAA,eAAW,CAACpB,4BAA4B,CAACqB,YAA7B,CAA0CC,UAA3C,CAAX,GAAoEtB,4BAA4B,CAACsB,UAAjG;AACAF,eAAW,CAACpB,4BAA4B,CAACqB,YAA7B,CAA0CL,KAA3C,CAAX,GAA+DA,KAA/D;AACAI,eAAW,CAACpB,4BAA4B,CAACqB,YAA7B,CAA0CT,aAA3C,CAAX,GAAuEA,aAAvE;AACA,UAAMW,iBAAiB,GAAYnB,MAAM,CAACI,UAAP,CAAkBC,WAAlB,CAA8B,mCAA9B,EAAmE,OAAnE,MAAgF,MAAnH;AACA,WAAO,IAAId,mBAAJ,CAAwBmB,QAAxB,EAAkCM,WAAlC,EAA+C,EAA/C,EAAmD,IAAInB,qCAAJ,EAAnD,EAAgGP,SAAS,CAAC8B,oBAAV,CAA+BpB,MAA/B,CAAhG,EAAwImB,iBAAxI,EAA2JjB,YAA3J,CAAP;AACH;;AAjBmE","names":["ProxyInfo","WebsocketConnection","createGuid","Contracts","PropertyId","ConnectionFactoryBase","ConversationConnectionConfig","ConversationWebsocketMessageFormatter","ConversationConnectionFactory","create","config","authInfo","connectionId","endpointHost","parameters","getProperty","ConversationTranslator_Host","host","correlationId","ConversationTranslator_CorrelationId","endpoint","webSocketPath","token","ConversationTranslator_Token","undefined","throwIfNullOrUndefined","queryParams","configParams","apiVersion","enableCompression","fromRecognizerConfig"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ_2\\educator\\node_modules\\microsoft-cognitiveservices-speech-sdk\\distrib\\es2015\\src\\common.speech\\Transcription\\src\\common.speech\\Transcription\\ConversationConnectionFactory.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ProxyInfo, WebsocketConnection } from \"../../common.browser/Exports\";\r\nimport { createGuid, IConnection, IStringDictionary } from \"../../common/Exports\";\r\nimport { Contracts } from \"../../sdk/Contracts\";\r\nimport { PropertyId } from \"../../sdk/Exports\";\r\nimport { ConnectionFactoryBase } from \"../ConnectionFactoryBase\";\r\nimport { AuthInfo, RecognizerConfig } from \"../Exports\";\r\nimport { ConversationConnectionConfig } from \"./ConversationConnectionConfig\";\r\nimport { ConversationWebsocketMessageFormatter } from \"./ConversationWebsocketMessageFormatter\";\r\n\r\n/**\r\n * Create a connection to the Conversation Translator websocket for sending instant messages and commands, and for receiving translated messages.\r\n * The conversation must already have been started or joined.\r\n */\r\nexport class ConversationConnectionFactory extends ConnectionFactoryBase  {\r\n\r\n    public create(config: RecognizerConfig, authInfo: AuthInfo, connectionId?: string): IConnection {\r\n\r\n        const endpointHost: string = config.parameters.getProperty(PropertyId.ConversationTranslator_Host, ConversationConnectionConfig.host);\r\n        const correlationId: string = config.parameters.getProperty(PropertyId.ConversationTranslator_CorrelationId, createGuid());\r\n\r\n        const endpoint: string = `wss://${endpointHost}${ConversationConnectionConfig.webSocketPath}`;\r\n        const token: string = config.parameters.getProperty(PropertyId.ConversationTranslator_Token, undefined);\r\n        Contracts.throwIfNullOrUndefined(token, \"token\");\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n        queryParams[ConversationConnectionConfig.configParams.apiVersion] = ConversationConnectionConfig.apiVersion;\r\n        queryParams[ConversationConnectionConfig.configParams.token] = token;\r\n        queryParams[ConversationConnectionConfig.configParams.correlationId] = correlationId;\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, {}, new ConversationWebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}