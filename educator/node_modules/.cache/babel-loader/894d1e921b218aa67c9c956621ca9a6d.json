{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\olesr\\\\OneDrive\\\\Documents\\\\webapp_educ\\\\educator\\\\src\\\\components\\\\S2t.js\";\nimport { ResultReason } from \"microsoft-cognitiveservices-speech-sdk\";\nimport RecordIcon from \"../assets/mic.png\"; // Unused image for button\n\nimport \"./s2t.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst S2t = () => {\n  const sdk = require(\"microsoft-cognitiveservices-speech-sdk\");\n\n  async function sttFromMic() {\n    const speechConfig = sdk.SpeechConfig.fromSubscription(\"2ed0fc03d2e441388c4fd35cc91c23b3\", \"eastus\");\n    speechConfig.speechRecognitionLanguage = \"de-CH\";\n    const audioConfig = sdk.AudioConfig.fromDefaultMicrophoneInput();\n    const recognizer = new sdk.SpeechRecognizer(speechConfig, audioConfig);\n    recognizer.recognizeOnceAsync(result => {\n      if (result.reason === ResultReason.RecognizedSpeech) {\n        console.log(result.text + \"\\n Recording stopped. Press the streaming button to start again.\");\n        sendToAPI(\"http://localhost:5000/api/v1/models\", result.text).then(response => {\n          console.log(\"Answer from the API:\\n\" + response.message);\n        });\n      } else {\n        console.log(\"ERROR: Speech was cancelled or could not be recognized. Ensure your microphone is working properly.\");\n      }\n    });\n  }\n\n  return sdk && /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"record-div\",\n      children: sttFromMic()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_c = S2t;\n\nasync function sendToAPI(url, message) {\n  // Simple POST request with a JSON body using fetch\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      message: message\n    })\n  };\n  let response = await fetch(url, requestOptions);\n  return response.json();\n}\n\nexport default S2t;\n\nvar _c;\n\n$RefreshReg$(_c, \"S2t\");","map":{"version":3,"sources":["C:/Users/olesr/OneDrive/Documents/webapp_educ/educator/src/components/S2t.js"],"names":["ResultReason","RecordIcon","S2t","sdk","require","sttFromMic","speechConfig","SpeechConfig","fromSubscription","speechRecognitionLanguage","audioConfig","AudioConfig","fromDefaultMicrophoneInput","recognizer","SpeechRecognizer","recognizeOnceAsync","result","reason","RecognizedSpeech","console","log","text","sendToAPI","then","response","message","url","requestOptions","method","headers","body","JSON","stringify","fetch","json"],"mappings":";AAAA,SAASA,YAAT,QAA6B,wCAA7B;AACA,OAAOC,UAAP,MAAuB,mBAAvB,C,CAA4C;;AAC5C,OAAO,WAAP;;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAChB,QAAMC,GAAG,GAAGC,OAAO,CAAC,wCAAD,CAAnB;;AAEA,iBAAeC,UAAf,GAA4B;AAC1B,UAAMC,YAAY,GAAGH,GAAG,CAACI,YAAJ,CAAiBC,gBAAjB,CACnB,kCADmB,EAEnB,QAFmB,CAArB;AAIAF,IAAAA,YAAY,CAACG,yBAAb,GAAyC,OAAzC;AAEA,UAAMC,WAAW,GAAGP,GAAG,CAACQ,WAAJ,CAAgBC,0BAAhB,EAApB;AACA,UAAMC,UAAU,GAAG,IAAIV,GAAG,CAACW,gBAAR,CAAyBR,YAAzB,EAAuCI,WAAvC,CAAnB;AAEAG,IAAAA,UAAU,CAACE,kBAAX,CAA+BC,MAAD,IAAY;AACxC,UAAIA,MAAM,CAACC,MAAP,KAAkBjB,YAAY,CAACkB,gBAAnC,EAAqD;AACnDC,QAAAA,OAAO,CAACC,GAAR,CACEJ,MAAM,CAACK,IAAP,GACE,kEAFJ;AAIAC,QAAAA,SAAS,CAAC,qCAAD,EAAwCN,MAAM,CAACK,IAA/C,CAAT,CAA8DE,IAA9D,CACGC,QAAD,IAAc;AACZL,UAAAA,OAAO,CAACC,GAAR,CAAY,2BAA2BI,QAAQ,CAACC,OAAhD;AACD,SAHH;AAKD,OAVD,MAUO;AACLN,QAAAA,OAAO,CAACC,GAAR,CACE,qGADF;AAGD;AACF,KAhBD;AAiBD;;AAED,SACEjB,GAAG,iBACD;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,gBAA6BE,UAAU;AAAvC;AAAA;AAAA;AAAA;AAAA;AADF,mBAFJ;AAOD,CAvCD;;KAAMH,G;;AAyCN,eAAeoB,SAAf,CAAyBI,GAAzB,EAA8BD,OAA9B,EAAuC;AACrC;AACA,QAAME,cAAc,GAAG;AACrBC,IAAAA,MAAM,EAAE,MADa;AAErBC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAFY;AAGrBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEP,MAAAA,OAAO,EAAEA;AAAX,KAAf;AAHe,GAAvB;AAMA,MAAID,QAAQ,GAAG,MAAMS,KAAK,CAACP,GAAD,EAAMC,cAAN,CAA1B;AACA,SAAOH,QAAQ,CAACU,IAAT,EAAP;AACD;;AAED,eAAehC,GAAf","sourcesContent":["import { ResultReason } from \"microsoft-cognitiveservices-speech-sdk\";\r\nimport RecordIcon from \"../assets/mic.png\"; // Unused image for button\r\nimport \"./s2t.css\";\r\n\r\nconst S2t = () => {\r\n  const sdk = require(\"microsoft-cognitiveservices-speech-sdk\");\r\n\r\n  async function sttFromMic() {\r\n    const speechConfig = sdk.SpeechConfig.fromSubscription(\r\n      \"2ed0fc03d2e441388c4fd35cc91c23b3\",\r\n      \"eastus\"\r\n    );\r\n    speechConfig.speechRecognitionLanguage = \"de-CH\";\r\n\r\n    const audioConfig = sdk.AudioConfig.fromDefaultMicrophoneInput();\r\n    const recognizer = new sdk.SpeechRecognizer(speechConfig, audioConfig);\r\n\r\n    recognizer.recognizeOnceAsync((result) => {\r\n      if (result.reason === ResultReason.RecognizedSpeech) {\r\n        console.log(\r\n          result.text +\r\n            \"\\n Recording stopped. Press the streaming button to start again.\"\r\n        );\r\n        sendToAPI(\"http://localhost:5000/api/v1/models\", result.text).then(\r\n          (response) => {\r\n            console.log(\"Answer from the API:\\n\" + response.message);\r\n          }\r\n        );\r\n      } else {\r\n        console.log(\r\n          \"ERROR: Speech was cancelled or could not be recognized. Ensure your microphone is working properly.\"\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  return (\r\n    sdk && (\r\n      <>\r\n        <div className=\"record-div\">{sttFromMic()}</div>\r\n      </>\r\n    )\r\n  );\r\n};\r\n\r\nasync function sendToAPI(url, message) {\r\n  // Simple POST request with a JSON body using fetch\r\n  const requestOptions = {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({ message: message }),\r\n  };\r\n\r\n  let response = await fetch(url, requestOptions);\r\n  return response.json();\r\n}\r\n\r\nexport default S2t;\r\n"]},"metadata":{},"sourceType":"module"}