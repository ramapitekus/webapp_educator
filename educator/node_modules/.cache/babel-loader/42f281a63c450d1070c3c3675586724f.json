{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ServicePropertiesPropertyName } from \"../common.speech/Exports\";\nimport { PropertyId } from \"../sdk/Exports\";\nimport { QueryParameterNames } from \"./QueryParameterNames\";\nexport class ConnectionFactoryBase {\n  static getHostSuffix(region) {\n    if (!!region) {\n      if (region.toLowerCase().startsWith(\"china\")) {\n        return \".azure.cn\";\n      }\n\n      if (region.toLowerCase().startsWith(\"usgov\")) {\n        return \".azure.us\";\n      }\n    }\n\n    return \".microsoft.com\";\n  }\n\n  setCommonUrlParams(config, queryParams, endpoint) {\n    this.setUrlParameter(PropertyId.SpeechServiceConnection_EnableAudioLogging, QueryParameterNames.EnableAudioLogging, config, queryParams, endpoint);\n    this.setUrlParameter(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, QueryParameterNames.EnableWordLevelTimestamps, config, queryParams, endpoint);\n    this.setUrlParameter(PropertyId.SpeechServiceResponse_ProfanityOption, QueryParameterNames.Profanity, config, queryParams, endpoint);\n    this.setUrlParameter(PropertyId.SpeechServiceConnection_InitialSilenceTimeoutMs, QueryParameterNames.InitialSilenceTimeoutMs, config, queryParams, endpoint);\n    this.setUrlParameter(PropertyId.SpeechServiceConnection_EndSilenceTimeoutMs, QueryParameterNames.EndSilenceTimeoutMs, config, queryParams, endpoint);\n    this.setUrlParameter(PropertyId.SpeechServiceResponse_StablePartialResultThreshold, QueryParameterNames.StableIntermediateThreshold, config, queryParams, endpoint);\n    const serviceProperties = JSON.parse(config.parameters.getProperty(ServicePropertiesPropertyName, \"{}\"));\n    Object.keys(serviceProperties).forEach((value, num, array) => {\n      queryParams[value] = serviceProperties[value];\n    });\n  }\n\n  setUrlParameter(propId, parameterName, config, queryParams, endpoint) {\n    const value = config.parameters.getProperty(propId, undefined);\n\n    if (value && (!endpoint || endpoint.search(parameterName) === -1)) {\n      queryParams[parameterName] = value.toLocaleLowerCase();\n    }\n  }\n\n}","map":{"version":3,"mappings":"AAAA;AACA;AAEA,SACIA,6BADJ,QAEO,0BAFP;AAIA,SAAuBC,UAAvB,QAAyC,gBAAzC;AAEA,SAASC,mBAAT,QAAoC,uBAApC;AAEA,OAAM,MAAgBC,qBAAhB,CAAqC;AAEZ,SAAbC,aAAa,CAACC,MAAD,EAAe;AACtC,QAAI,CAAC,CAACA,MAAN,EAAc;AACV,UAAIA,MAAM,CAACC,WAAP,GAAqBC,UAArB,CAAgC,OAAhC,CAAJ,EAA8C;AAC1C,eAAO,WAAP;AACH;;AACD,UAAIF,MAAM,CAACC,WAAP,GAAqBC,UAArB,CAAgC,OAAhC,CAAJ,EAA8C;AAC1C,eAAO,WAAP;AACH;AACJ;;AACD,WAAO,gBAAP;AACH;;AAOSC,oBAAkB,CACxBC,MADwB,EAExBC,WAFwB,EAGxBC,QAHwB,EAGR;AAEhB,SAAKC,eAAL,CAAqBX,UAAU,CAACY,0CAAhC,EACIX,mBAAmB,CAACY,kBADxB,EAEIL,MAFJ,EAGIC,WAHJ,EAIIC,QAJJ;AAMA,SAAKC,eAAL,CAAqBX,UAAU,CAACc,gDAAhC,EACIb,mBAAmB,CAACc,yBADxB,EAEIP,MAFJ,EAGIC,WAHJ,EAIIC,QAJJ;AAMA,SAAKC,eAAL,CAAqBX,UAAU,CAACgB,qCAAhC,EACIf,mBAAmB,CAACgB,SADxB,EAEIT,MAFJ,EAGIC,WAHJ,EAIIC,QAJJ;AAMA,SAAKC,eAAL,CAAqBX,UAAU,CAACkB,+CAAhC,EACIjB,mBAAmB,CAACkB,uBADxB,EAEIX,MAFJ,EAGIC,WAHJ,EAIIC,QAJJ;AAMA,SAAKC,eAAL,CAAqBX,UAAU,CAACoB,2CAAhC,EACInB,mBAAmB,CAACoB,mBADxB,EAEIb,MAFJ,EAGIC,WAHJ,EAIIC,QAJJ;AAMA,SAAKC,eAAL,CAAqBX,UAAU,CAACsB,kDAAhC,EACIrB,mBAAmB,CAACsB,2BADxB,EAEIf,MAFJ,EAGIC,WAHJ,EAIIC,QAJJ;AAMA,UAAMc,iBAAiB,GAA8BC,IAAI,CAACC,KAAL,CAAWlB,MAAM,CAACmB,UAAP,CAAkBC,WAAlB,CAA8B7B,6BAA9B,EAA6D,IAA7D,CAAX,CAArD;AAEA8B,UAAM,CAACC,IAAP,CAAYN,iBAAZ,EAA+BO,OAA/B,CAAuC,CAACC,KAAD,EAAgBC,GAAhB,EAA6BC,KAA7B,KAAgD;AACnFzB,iBAAW,CAACuB,KAAD,CAAX,GAAqBR,iBAAiB,CAACQ,KAAD,CAAtC;AACH,KAFD;AAGH;;AAESrB,iBAAe,CACrBwB,MADqB,EAErBC,aAFqB,EAGrB5B,MAHqB,EAIrBC,WAJqB,EAKrBC,QALqB,EAKL;AAEhB,UAAMsB,KAAK,GAAWxB,MAAM,CAACmB,UAAP,CAAkBC,WAAlB,CAA8BO,MAA9B,EAAsCE,SAAtC,CAAtB;;AAEA,QAAIL,KAAK,KAAK,CAACtB,QAAD,IAAaA,QAAQ,CAAC4B,MAAT,CAAgBF,aAAhB,MAAmC,CAAC,CAAtD,CAAT,EAAmE;AAC/D3B,iBAAW,CAAC2B,aAAD,CAAX,GAA6BJ,KAAK,CAACO,iBAAN,EAA7B;AACH;AACJ;;AA/EsC","names":["ServicePropertiesPropertyName","PropertyId","QueryParameterNames","ConnectionFactoryBase","getHostSuffix","region","toLowerCase","startsWith","setCommonUrlParams","config","queryParams","endpoint","setUrlParameter","SpeechServiceConnection_EnableAudioLogging","EnableAudioLogging","SpeechServiceResponse_RequestWordLevelTimestamps","EnableWordLevelTimestamps","SpeechServiceResponse_ProfanityOption","Profanity","SpeechServiceConnection_InitialSilenceTimeoutMs","InitialSilenceTimeoutMs","SpeechServiceConnection_EndSilenceTimeoutMs","EndSilenceTimeoutMs","SpeechServiceResponse_StablePartialResultThreshold","StableIntermediateThreshold","serviceProperties","JSON","parse","parameters","getProperty","Object","keys","forEach","value","num","array","propId","parameterName","undefined","search","toLocaleLowerCase"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ_2\\educator\\node_modules\\microsoft-cognitiveservices-speech-sdk\\distrib\\es2015\\src\\common.speech\\src\\common.speech\\ConnectionFactoryBase.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ServicePropertiesPropertyName,\r\n} from \"../common.speech/Exports\";\r\nimport { IConnection, IStringDictionary } from \"../common/Exports\";\r\nimport { OutputFormat, PropertyId } from \"../sdk/Exports\";\r\nimport { AuthInfo, IConnectionFactory, RecognitionMode, RecognizerConfig, WebsocketMessageFormatter } from \"./Exports\";\r\nimport { QueryParameterNames } from \"./QueryParameterNames\";\r\n\r\nexport abstract class ConnectionFactoryBase implements IConnectionFactory {\r\n\r\n    public static getHostSuffix(region: string): string {\r\n        if (!!region) {\r\n            if (region.toLowerCase().startsWith(\"china\")) {\r\n                return \".azure.cn\";\r\n            }\r\n            if (region.toLowerCase().startsWith(\"usgov\")) {\r\n                return \".azure.us\";\r\n            }\r\n        }\r\n        return \".microsoft.com\";\r\n    }\r\n\r\n    public abstract create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection;\r\n\r\n    protected setCommonUrlParams(\r\n        config: RecognizerConfig,\r\n        queryParams: IStringDictionary<string>,\r\n        endpoint: string): void {\r\n\r\n        this.setUrlParameter(PropertyId.SpeechServiceConnection_EnableAudioLogging,\r\n            QueryParameterNames.EnableAudioLogging,\r\n            config,\r\n            queryParams,\r\n            endpoint);\r\n\r\n        this.setUrlParameter(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps,\r\n            QueryParameterNames.EnableWordLevelTimestamps,\r\n            config,\r\n            queryParams,\r\n            endpoint);\r\n\r\n        this.setUrlParameter(PropertyId.SpeechServiceResponse_ProfanityOption,\r\n            QueryParameterNames.Profanity,\r\n            config,\r\n            queryParams,\r\n            endpoint);\r\n\r\n        this.setUrlParameter(PropertyId.SpeechServiceConnection_InitialSilenceTimeoutMs,\r\n            QueryParameterNames.InitialSilenceTimeoutMs,\r\n            config,\r\n            queryParams,\r\n            endpoint);\r\n\r\n        this.setUrlParameter(PropertyId.SpeechServiceConnection_EndSilenceTimeoutMs,\r\n            QueryParameterNames.EndSilenceTimeoutMs,\r\n            config,\r\n            queryParams,\r\n            endpoint);\r\n\r\n        this.setUrlParameter(PropertyId.SpeechServiceResponse_StablePartialResultThreshold,\r\n            QueryParameterNames.StableIntermediateThreshold,\r\n            config,\r\n            queryParams,\r\n            endpoint);\r\n\r\n        const serviceProperties: IStringDictionary<string> = JSON.parse(config.parameters.getProperty(ServicePropertiesPropertyName, \"{}\"));\r\n\r\n        Object.keys(serviceProperties).forEach((value: string, num: number, array: string[]) => {\r\n            queryParams[value] = serviceProperties[value];\r\n        });\r\n    }\r\n\r\n    protected setUrlParameter(\r\n        propId: PropertyId,\r\n        parameterName: string,\r\n        config: RecognizerConfig,\r\n        queryParams: IStringDictionary<string>,\r\n        endpoint: string): void {\r\n\r\n        const value: string = config.parameters.getProperty(propId, undefined);\r\n\r\n        if (value && (!endpoint || endpoint.search(parameterName) === -1)) {\r\n            queryParams[parameterName] = value.toLocaleLowerCase();\r\n        }\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}