{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n// tslint:disable:max-classes-per-file\nimport { AudioSourceErrorEvent, AudioStreamNodeAttachedEvent, AudioStreamNodeAttachingEvent, AudioStreamNodeDetachedEvent, AudioStreamNodeErrorEvent, ConnectionEstablishedEvent, ConnectionEstablishErrorEvent, ConnectionMessageReceivedEvent, ConnectionStartEvent } from \"../common/Exports\";\nimport { ConnectingToServiceEvent, RecognitionTriggeredEvent } from \"./RecognitionEvents\";\nexport class ServiceTelemetryListener {\n  constructor(requestId, audioSourceId, audioNodeId) {\n    this.privIsDisposed = false;\n    this.privListeningTriggerMetric = null;\n    this.privMicMetric = null;\n    this.privConnectionEstablishMetric = null;\n\n    this.onEvent = e => {\n      if (this.privIsDisposed) {\n        return;\n      }\n\n      if (e instanceof RecognitionTriggeredEvent && e.requestId === this.privRequestId) {\n        this.privListeningTriggerMetric = {\n          End: e.eventTime,\n          Name: \"ListeningTrigger\",\n          Start: e.eventTime\n        };\n      }\n\n      if (e instanceof AudioStreamNodeAttachingEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\n        this.privMicStartTime = e.eventTime;\n      }\n\n      if (e instanceof AudioStreamNodeAttachedEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\n        this.privMicStartTime = e.eventTime;\n      }\n\n      if (e instanceof AudioSourceErrorEvent && e.audioSourceId === this.privAudioSourceId) {\n        if (!this.privMicMetric) {\n          this.privMicMetric = {\n            End: e.eventTime,\n            Error: e.error,\n            Name: \"Microphone\",\n            Start: this.privMicStartTime\n          };\n        }\n      }\n\n      if (e instanceof AudioStreamNodeErrorEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\n        if (!this.privMicMetric) {\n          this.privMicMetric = {\n            End: e.eventTime,\n            Error: e.error,\n            Name: \"Microphone\",\n            Start: this.privMicStartTime\n          };\n        }\n      }\n\n      if (e instanceof AudioStreamNodeDetachedEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\n        if (!this.privMicMetric) {\n          this.privMicMetric = {\n            End: e.eventTime,\n            Name: \"Microphone\",\n            Start: this.privMicStartTime\n          };\n        }\n      }\n\n      if (e instanceof ConnectingToServiceEvent && e.requestId === this.privRequestId) {\n        this.privConnectionId = e.sessionId;\n      }\n\n      if (e instanceof ConnectionStartEvent && e.connectionId === this.privConnectionId) {\n        this.privConnectionStartTime = e.eventTime;\n      }\n\n      if (e instanceof ConnectionEstablishedEvent && e.connectionId === this.privConnectionId) {\n        if (!this.privConnectionEstablishMetric) {\n          this.privConnectionEstablishMetric = {\n            End: e.eventTime,\n            Id: this.privConnectionId,\n            Name: \"Connection\",\n            Start: this.privConnectionStartTime\n          };\n        }\n      }\n\n      if (e instanceof ConnectionEstablishErrorEvent && e.connectionId === this.privConnectionId) {\n        if (!this.privConnectionEstablishMetric) {\n          this.privConnectionEstablishMetric = {\n            End: e.eventTime,\n            Error: this.getConnectionError(e.statusCode),\n            Id: this.privConnectionId,\n            Name: \"Connection\",\n            Start: this.privConnectionStartTime\n          };\n        }\n      }\n\n      if (e instanceof ConnectionMessageReceivedEvent && e.connectionId === this.privConnectionId) {\n        if (e.message && e.message.headers && e.message.headers.path) {\n          if (!this.privReceivedMessages[e.message.headers.path]) {\n            this.privReceivedMessages[e.message.headers.path] = new Array();\n          }\n\n          const maxMessagesToSend = 50;\n\n          if (this.privReceivedMessages[e.message.headers.path].length < maxMessagesToSend) {\n            this.privReceivedMessages[e.message.headers.path].push(e.networkReceivedTime);\n          }\n        }\n      }\n    };\n\n    this.getTelemetry = () => {\n      const metrics = new Array();\n\n      if (this.privListeningTriggerMetric) {\n        metrics.push(this.privListeningTriggerMetric);\n      }\n\n      if (this.privMicMetric) {\n        metrics.push(this.privMicMetric);\n      }\n\n      if (this.privConnectionEstablishMetric) {\n        metrics.push(this.privConnectionEstablishMetric);\n      }\n\n      if (this.privPhraseLatencies.length > 0) {\n        metrics.push({\n          PhraseLatencyMs: this.privPhraseLatencies\n        });\n      }\n\n      if (this.privHypothesisLatencies.length > 0) {\n        metrics.push({\n          FirstHypothesisLatencyMs: this.privHypothesisLatencies\n        });\n      }\n\n      const telemetry = {\n        Metrics: metrics,\n        ReceivedMessages: this.privReceivedMessages\n      };\n      const json = JSON.stringify(telemetry); // We dont want to send the same telemetry again. So clean those out.\n\n      this.privReceivedMessages = {};\n      this.privListeningTriggerMetric = null;\n      this.privMicMetric = null;\n      this.privConnectionEstablishMetric = null;\n      this.privPhraseLatencies = [];\n      this.privHypothesisLatencies = [];\n      return json;\n    };\n\n    this.dispose = () => {\n      this.privIsDisposed = true;\n    };\n\n    this.getConnectionError = statusCode => {\n      /*\n      -- Websocket status codes --\n      NormalClosure = 1000,\n      EndpointUnavailable = 1001,\n      ProtocolError = 1002,\n      InvalidMessageType = 1003,\n      Empty = 1005,\n      InvalidPayloadData = 1007,\n      PolicyViolation = 1008,\n      MessageTooBig = 1009,\n      MandatoryExtension = 1010,\n      InternalServerError = 1011\n      */\n      switch (statusCode) {\n        case 400:\n        case 1002:\n        case 1003:\n        case 1005:\n        case 1007:\n        case 1008:\n        case 1009:\n          return \"BadRequest\";\n\n        case 401:\n          return \"Unauthorized\";\n\n        case 403:\n          return \"Forbidden\";\n\n        case 503:\n        case 1001:\n          return \"ServerUnavailable\";\n\n        case 500:\n        case 1011:\n          return \"ServerError\";\n\n        case 408:\n        case 504:\n          return \"Timeout\";\n\n        default:\n          return \"statuscode:\" + statusCode.toString();\n      }\n    };\n\n    this.privRequestId = requestId;\n    this.privAudioSourceId = audioSourceId;\n    this.privAudioNodeId = audioNodeId;\n    this.privReceivedMessages = {};\n    this.privPhraseLatencies = [];\n    this.privHypothesisLatencies = [];\n  }\n\n  phraseReceived(audioReceivedTime) {\n    if (audioReceivedTime > 0) {\n      // 0 indicates the time is unknown. Drop it.\n      this.privPhraseLatencies.push(Date.now() - audioReceivedTime);\n    }\n  }\n\n  hypothesisReceived(audioReceivedTime) {\n    if (audioReceivedTime > 0) {\n      // 0 indicates the time is unknown. Drop it.\n      this.privHypothesisLatencies.push(Date.now() - audioReceivedTime);\n    }\n  } // Determines if there are any telemetry events to send to the service.\n\n\n  get hasTelemetry() {\n    return Object.keys(this.privReceivedMessages).length !== 0 || this.privListeningTriggerMetric !== null || this.privMicMetric !== null || this.privConnectionEstablishMetric !== null || this.privPhraseLatencies.length !== 0 || this.privHypothesisLatencies.length !== 0;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["AudioSourceErrorEvent","AudioStreamNodeAttachedEvent","AudioStreamNodeAttachingEvent","AudioStreamNodeDetachedEvent","AudioStreamNodeErrorEvent","ConnectionEstablishedEvent","ConnectionEstablishErrorEvent","ConnectionMessageReceivedEvent","ConnectionStartEvent","ConnectingToServiceEvent","RecognitionTriggeredEvent","ServiceTelemetryListener","constructor","requestId","audioSourceId","audioNodeId","e","privIsDisposed","privRequestId","privListeningTriggerMetric","End","eventTime","Name","Start","privAudioSourceId","privAudioNodeId","privMicStartTime","privMicMetric","Error","error","privConnectionId","sessionId","connectionId","privConnectionStartTime","privConnectionEstablishMetric","Id","getConnectionError","statusCode","message","headers","path","privReceivedMessages","Array","maxMessagesToSend","length","push","networkReceivedTime","metrics","privPhraseLatencies","PhraseLatencyMs","privHypothesisLatencies","FirstHypothesisLatencyMs","telemetry","Metrics","ReceivedMessages","json","JSON","stringify","toString","phraseReceived","audioReceivedTime","Date","now","hypothesisReceived","hasTelemetry","Object","keys"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\node_modules\\microsoft-cognitiveservices-speech-sdk\\distrib\\es2015\\src\\common.speech\\src\\common.speech\\ServiceTelemetryListener.Internal.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// tslint:disable:max-classes-per-file\r\n\r\nimport {\r\n    AudioSourceErrorEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    AudioStreamNodeErrorEvent,\r\n    ConnectionEstablishedEvent,\r\n    ConnectionEstablishErrorEvent,\r\n    ConnectionMessageReceivedEvent,\r\n    ConnectionStartEvent,\r\n    IEventListener,\r\n    IStringDictionary,\r\n    PlatformEvent,\r\n} from \"../common/Exports\";\r\nimport { ConnectingToServiceEvent, RecognitionTriggeredEvent } from \"./RecognitionEvents\";\r\n\r\nexport interface ITelemetry {\r\n    Metrics: IMetric[];\r\n    ReceivedMessages: IStringDictionary<string[]>;\r\n}\r\n\r\nexport interface IMetric {\r\n    End?: string;\r\n    Error?: string;\r\n    Id?: string;\r\n    Name?: string;\r\n    Start?: string;\r\n    PhraseLatencyMs?: number[];\r\n    FirstHypothesisLatencyMs?: number[];\r\n}\r\n\r\nexport class ServiceTelemetryListener implements IEventListener<PlatformEvent> {\r\n    private privIsDisposed: boolean = false;\r\n\r\n    private privRequestId: string;\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n\r\n    private privListeningTriggerMetric: IMetric = null;\r\n    private privMicMetric: IMetric = null;\r\n    private privConnectionEstablishMetric: IMetric = null;\r\n\r\n    private privMicStartTime: string;\r\n\r\n    private privConnectionId: string;\r\n    private privConnectionStartTime: string;\r\n\r\n    private privReceivedMessages: IStringDictionary<string[]>;\r\n    private privPhraseLatencies: number[];\r\n    private privHypothesisLatencies: number[];\r\n\r\n    constructor(requestId: string, audioSourceId: string, audioNodeId: string) {\r\n        this.privRequestId = requestId;\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n\r\n        this.privReceivedMessages = {};\r\n        this.privPhraseLatencies = [];\r\n        this.privHypothesisLatencies = [];\r\n    }\r\n\r\n    public phraseReceived(audioReceivedTime: number): void {\r\n        if (audioReceivedTime > 0) { // 0 indicates the time is unknown. Drop it.\r\n            this.privPhraseLatencies.push(Date.now() - audioReceivedTime);\r\n        }\r\n    }\r\n\r\n    public hypothesisReceived(audioReceivedTime: number): void {\r\n        if (audioReceivedTime > 0) { // 0 indicates the time is unknown. Drop it.\r\n            this.privHypothesisLatencies.push(Date.now() - audioReceivedTime);\r\n        }\r\n    }\r\n\r\n    public onEvent = (e: PlatformEvent): void => {\r\n        if (this.privIsDisposed) {\r\n            return;\r\n        }\r\n\r\n        if (e instanceof RecognitionTriggeredEvent && e.requestId === this.privRequestId) {\r\n            this.privListeningTriggerMetric = {\r\n                End: e.eventTime,\r\n                Name: \"ListeningTrigger\",\r\n                Start: e.eventTime,\r\n            };\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeAttachingEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            this.privMicStartTime = e.eventTime;\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeAttachedEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            this.privMicStartTime = e.eventTime;\r\n        }\r\n\r\n        if (e instanceof AudioSourceErrorEvent && e.audioSourceId === this.privAudioSourceId) {\r\n            if (!this.privMicMetric) {\r\n                this.privMicMetric = {\r\n                    End: e.eventTime,\r\n                    Error: e.error,\r\n                    Name: \"Microphone\",\r\n                    Start: this.privMicStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeErrorEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            if (!this.privMicMetric) {\r\n                this.privMicMetric = {\r\n                    End: e.eventTime,\r\n                    Error: e.error,\r\n                    Name: \"Microphone\",\r\n                    Start: this.privMicStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeDetachedEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            if (!this.privMicMetric) {\r\n                this.privMicMetric = {\r\n                    End: e.eventTime,\r\n                    Name: \"Microphone\",\r\n                    Start: this.privMicStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof ConnectingToServiceEvent && e.requestId === this.privRequestId) {\r\n            this.privConnectionId = e.sessionId;\r\n        }\r\n\r\n        if (e instanceof ConnectionStartEvent && e.connectionId === this.privConnectionId) {\r\n            this.privConnectionStartTime = e.eventTime;\r\n        }\r\n\r\n        if (e instanceof ConnectionEstablishedEvent && e.connectionId === this.privConnectionId) {\r\n            if (!this.privConnectionEstablishMetric) {\r\n                this.privConnectionEstablishMetric = {\r\n                    End: e.eventTime,\r\n                    Id: this.privConnectionId,\r\n                    Name: \"Connection\",\r\n                    Start: this.privConnectionStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof ConnectionEstablishErrorEvent && e.connectionId === this.privConnectionId) {\r\n            if (!this.privConnectionEstablishMetric) {\r\n                this.privConnectionEstablishMetric = {\r\n                    End: e.eventTime,\r\n                    Error: this.getConnectionError(e.statusCode),\r\n                    Id: this.privConnectionId,\r\n                    Name: \"Connection\",\r\n                    Start: this.privConnectionStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof ConnectionMessageReceivedEvent && e.connectionId === this.privConnectionId) {\r\n            if (e.message && e.message.headers && e.message.headers.path) {\r\n                if (!this.privReceivedMessages[e.message.headers.path]) {\r\n                    this.privReceivedMessages[e.message.headers.path] = new Array<string>();\r\n                }\r\n                const maxMessagesToSend = 50;\r\n                if (this.privReceivedMessages[e.message.headers.path].length < maxMessagesToSend) {\r\n                    this.privReceivedMessages[e.message.headers.path].push(e.networkReceivedTime);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public getTelemetry = (): string => {\r\n        const metrics = new Array<IMetric>();\r\n\r\n        if (this.privListeningTriggerMetric) {\r\n            metrics.push(this.privListeningTriggerMetric);\r\n        }\r\n\r\n        if (this.privMicMetric) {\r\n            metrics.push(this.privMicMetric);\r\n        }\r\n\r\n        if (this.privConnectionEstablishMetric) {\r\n            metrics.push(this.privConnectionEstablishMetric);\r\n        }\r\n\r\n        if (this.privPhraseLatencies.length > 0) {\r\n            metrics.push({\r\n                PhraseLatencyMs: this.privPhraseLatencies,\r\n            });\r\n        }\r\n\r\n        if (this.privHypothesisLatencies.length > 0) {\r\n            metrics.push({\r\n                FirstHypothesisLatencyMs: this.privHypothesisLatencies,\r\n            });\r\n        }\r\n\r\n        const telemetry: ITelemetry = {\r\n            Metrics: metrics,\r\n            ReceivedMessages: this.privReceivedMessages,\r\n        };\r\n\r\n        const json = JSON.stringify(telemetry);\r\n\r\n        // We dont want to send the same telemetry again. So clean those out.\r\n        this.privReceivedMessages = {};\r\n        this.privListeningTriggerMetric = null;\r\n        this.privMicMetric = null;\r\n        this.privConnectionEstablishMetric = null;\r\n        this.privPhraseLatencies = [];\r\n        this.privHypothesisLatencies = [];\r\n        return json;\r\n    }\r\n\r\n    // Determines if there are any telemetry events to send to the service.\r\n    public get hasTelemetry(): boolean {\r\n        return (Object.keys(this.privReceivedMessages).length !== 0 ||\r\n            this.privListeningTriggerMetric !== null ||\r\n            this.privMicMetric !== null ||\r\n            this.privConnectionEstablishMetric !== null ||\r\n            this.privPhraseLatencies.length !== 0 ||\r\n            this.privHypothesisLatencies.length !== 0);\r\n    }\r\n\r\n    public dispose = (): void => {\r\n        this.privIsDisposed = true;\r\n    }\r\n\r\n    private getConnectionError = (statusCode: number): string => {\r\n        /*\r\n        -- Websocket status codes --\r\n        NormalClosure = 1000,\r\n        EndpointUnavailable = 1001,\r\n        ProtocolError = 1002,\r\n        InvalidMessageType = 1003,\r\n        Empty = 1005,\r\n        InvalidPayloadData = 1007,\r\n        PolicyViolation = 1008,\r\n        MessageTooBig = 1009,\r\n        MandatoryExtension = 1010,\r\n        InternalServerError = 1011\r\n        */\r\n\r\n        switch (statusCode) {\r\n            case 400:\r\n            case 1002:\r\n            case 1003:\r\n            case 1005:\r\n            case 1007:\r\n            case 1008:\r\n            case 1009: return \"BadRequest\";\r\n            case 401: return \"Unauthorized\";\r\n            case 403: return \"Forbidden\";\r\n            case 503:\r\n            case 1001: return \"ServerUnavailable\";\r\n            case 500:\r\n            case 1011: return \"ServerError\";\r\n            case 408:\r\n            case 504: return \"Timeout\";\r\n            default: return \"statuscode:\" + statusCode.toString();\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}