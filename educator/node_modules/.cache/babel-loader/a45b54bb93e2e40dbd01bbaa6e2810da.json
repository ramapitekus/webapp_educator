{"ast":null,"code":"'use strict';\n\nconst encodings = new Set(['json', 'buffer', 'string']);\n\nmodule.exports = mkrequest => function () {\n  const statusCodes = new Set();\n  let method;\n  let encoding;\n  let headers;\n  let baseurl = '';\n\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  args.forEach(arg => {\n    if (typeof arg === 'string') {\n      if (arg.toUpperCase() === arg) {\n        if (method) {\n          const msg = `Can't set method to ${arg}, already set to ${method}.`;\n          throw new Error(msg);\n        } else {\n          method = arg;\n        }\n      } else if (arg.startsWith('http:') || arg.startsWith('https:')) {\n        baseurl = arg;\n      } else {\n        if (encodings.has(arg)) {\n          encoding = arg;\n        } else {\n          throw new Error(`Unknown encoding, ${arg}`);\n        }\n      }\n    } else if (typeof arg === 'number') {\n      statusCodes.add(arg);\n    } else if (typeof arg === 'object') {\n      if (Array.isArray(arg) || arg instanceof Set) {\n        arg.forEach(code => statusCodes.add(code));\n      } else {\n        if (headers) {\n          throw new Error('Cannot set headers twice.');\n        }\n\n        headers = arg;\n      }\n    } else {\n      throw new Error(`Unknown type: ${typeof arg}`);\n    }\n  });\n  if (!method) method = 'GET';\n\n  if (statusCodes.size === 0) {\n    statusCodes.add(200);\n  }\n\n  return mkrequest(statusCodes, method, encoding, headers, baseurl);\n};","map":{"version":3,"sources":["C:/Users/ozgur/Documents/VSCodeProjects/webapp_educator/educator/node_modules/bent/src/core.js"],"names":["encodings","Set","module","exports","mkrequest","statusCodes","method","encoding","headers","baseurl","args","forEach","arg","toUpperCase","msg","Error","startsWith","has","add","Array","isArray","code","size"],"mappings":"AAAA;;AACA,MAAMA,SAAS,GAAG,IAAIC,GAAJ,CAAQ,CAAC,MAAD,EAAS,QAAT,EAAmB,QAAnB,CAAR,CAAlB;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,SAAS,IAAI,YAAa;AACzC,QAAMC,WAAW,GAAG,IAAIJ,GAAJ,EAApB;AACA,MAAIK,MAAJ;AACA,MAAIC,QAAJ;AACA,MAAIC,OAAJ;AACA,MAAIC,OAAO,GAAG,EAAd;;AALyC,oCAATC,IAAS;AAATA,IAAAA,IAAS;AAAA;;AAOzCA,EAAAA,IAAI,CAACC,OAAL,CAAaC,GAAG,IAAI;AAClB,QAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAC3B,UAAIA,GAAG,CAACC,WAAJ,OAAsBD,GAA1B,EAA+B;AAC7B,YAAIN,MAAJ,EAAY;AACV,gBAAMQ,GAAG,GAAI,uBAAsBF,GAAI,oBAAmBN,MAAO,GAAjE;AACA,gBAAM,IAAIS,KAAJ,CAAUD,GAAV,CAAN;AACD,SAHD,MAGO;AACLR,UAAAA,MAAM,GAAGM,GAAT;AACD;AACF,OAPD,MAOO,IAAIA,GAAG,CAACI,UAAJ,CAAe,OAAf,KAA2BJ,GAAG,CAACI,UAAJ,CAAe,QAAf,CAA/B,EAAyD;AAC9DP,QAAAA,OAAO,GAAGG,GAAV;AACD,OAFM,MAEA;AACL,YAAIZ,SAAS,CAACiB,GAAV,CAAcL,GAAd,CAAJ,EAAwB;AACtBL,UAAAA,QAAQ,GAAGK,GAAX;AACD,SAFD,MAEO;AACL,gBAAM,IAAIG,KAAJ,CAAW,qBAAoBH,GAAI,EAAnC,CAAN;AACD;AACF;AACF,KAjBD,MAiBO,IAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAClCP,MAAAA,WAAW,CAACa,GAAZ,CAAgBN,GAAhB;AACD,KAFM,MAEA,IAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAClC,UAAIO,KAAK,CAACC,OAAN,CAAcR,GAAd,KAAsBA,GAAG,YAAYX,GAAzC,EAA8C;AAC5CW,QAAAA,GAAG,CAACD,OAAJ,CAAYU,IAAI,IAAIhB,WAAW,CAACa,GAAZ,CAAgBG,IAAhB,CAApB;AACD,OAFD,MAEO;AACL,YAAIb,OAAJ,EAAa;AACX,gBAAM,IAAIO,KAAJ,CAAU,2BAAV,CAAN;AACD;;AACDP,QAAAA,OAAO,GAAGI,GAAV;AACD;AACF,KATM,MASA;AACL,YAAM,IAAIG,KAAJ,CAAW,iBAAgB,OAAOH,GAAI,EAAtC,CAAN;AACD;AACF,GAhCD;AAkCA,MAAI,CAACN,MAAL,EAAaA,MAAM,GAAG,KAAT;;AACb,MAAID,WAAW,CAACiB,IAAZ,KAAqB,CAAzB,EAA4B;AAC1BjB,IAAAA,WAAW,CAACa,GAAZ,CAAgB,GAAhB;AACD;;AAED,SAAOd,SAAS,CAACC,WAAD,EAAcC,MAAd,EAAsBC,QAAtB,EAAgCC,OAAhC,EAAyCC,OAAzC,CAAhB;AACD,CA/CD","sourcesContent":["'use strict'\r\nconst encodings = new Set(['json', 'buffer', 'string'])\r\n\r\nmodule.exports = mkrequest => (...args) => {\r\n  const statusCodes = new Set()\r\n  let method\r\n  let encoding\r\n  let headers\r\n  let baseurl = ''\r\n\r\n  args.forEach(arg => {\r\n    if (typeof arg === 'string') {\r\n      if (arg.toUpperCase() === arg) {\r\n        if (method) {\r\n          const msg = `Can't set method to ${arg}, already set to ${method}.`\r\n          throw new Error(msg)\r\n        } else {\r\n          method = arg\r\n        }\r\n      } else if (arg.startsWith('http:') || arg.startsWith('https:')) {\r\n        baseurl = arg\r\n      } else {\r\n        if (encodings.has(arg)) {\r\n          encoding = arg\r\n        } else {\r\n          throw new Error(`Unknown encoding, ${arg}`)\r\n        }\r\n      }\r\n    } else if (typeof arg === 'number') {\r\n      statusCodes.add(arg)\r\n    } else if (typeof arg === 'object') {\r\n      if (Array.isArray(arg) || arg instanceof Set) {\r\n        arg.forEach(code => statusCodes.add(code))\r\n      } else {\r\n        if (headers) {\r\n          throw new Error('Cannot set headers twice.')\r\n        }\r\n        headers = arg\r\n      }\r\n    } else {\r\n      throw new Error(`Unknown type: ${typeof arg}`)\r\n    }\r\n  })\r\n\r\n  if (!method) method = 'GET'\r\n  if (statusCodes.size === 0) {\r\n    statusCodes.add(200)\r\n  }\r\n\r\n  return mkrequest(statusCodes, method, encoding, headers, baseurl)\r\n}\r\n"]},"metadata":{},"sourceType":"script"}