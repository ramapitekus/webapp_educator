{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { Contracts } from \"./Contracts\";\nimport { VoiceProfileType } from \"./Exports\";\n/**\n * Defines SpeakerIdentificationModel class for Speaker Recognition\n * Model contains a set of profiles against which to identify speaker(s)\n * @class SpeakerIdentificationModel\n */\n\nexport class SpeakerIdentificationModel {\n  constructor(profiles) {\n    this.privVoiceProfiles = [];\n    Contracts.throwIfNullOrUndefined(profiles, \"VoiceProfiles\");\n\n    if (profiles.length === 0) {\n      throw new Error(\"Empty Voice Profiles array\");\n    }\n\n    profiles.forEach(profile => {\n      if (profile.profileType !== VoiceProfileType.TextIndependentIdentification) {\n        throw new Error(\"Identification model can only be created from Identification profile: \" + profile.profileId);\n      }\n\n      this.privVoiceProfiles.push(profile);\n    });\n  }\n\n  static fromProfiles(profiles) {\n    return new SpeakerIdentificationModel(profiles);\n  }\n\n  get voiceProfileIds() {\n    return this.privVoiceProfiles.map(profile => profile.profileId).join(\",\");\n  }\n\n}","map":{"version":3,"mappings":"AAAA;AACA;AAEA,SAASA,SAAT,QAA0B,aAA1B;AACA,SAEIC,gBAFJ,QAGO,WAHP;AAKA;;;;;;AAKA,OAAM,MAAOC,0BAAP,CAAiC;AAGnCC,cAAoBC,QAApB,EAA4C;AAFpC,6BAAoC,EAApC;AAGJJ,aAAS,CAACK,sBAAV,CAAiCD,QAAjC,EAA2C,eAA3C;;AACA,QAAIA,QAAQ,CAACE,MAAT,KAAoB,CAAxB,EAA2B;AACvB,YAAM,IAAIC,KAAJ,CAAU,4BAAV,CAAN;AACH;;AACDH,YAAQ,CAACI,OAAT,CAAkBC,OAAD,IAA0B;AACvC,UAAIA,OAAO,CAACC,WAAR,KAAwBT,gBAAgB,CAACU,6BAA7C,EAA4E;AACxE,cAAM,IAAIJ,KAAJ,CAAU,2EAA2EE,OAAO,CAACG,SAA7F,CAAN;AACH;;AACD,WAAKC,iBAAL,CAAuBC,IAAvB,CAA4BL,OAA5B;AACH,KALD;AAMH;;AACyB,SAAZM,YAAY,CAACX,QAAD,EAAyB;AAC/C,WAAO,IAAIF,0BAAJ,CAA+BE,QAA/B,CAAP;AACH;;AAEyB,MAAfY,eAAe;AACtB,WAAO,KAAKH,iBAAL,CAAuBI,GAAvB,CAA4BR,OAAD,IAA2BA,OAAO,CAACG,SAA9D,EAAyEM,IAAzE,CAA8E,GAA9E,CAAP;AACH;;AArBkC","names":["Contracts","VoiceProfileType","SpeakerIdentificationModel","constructor","profiles","throwIfNullOrUndefined","length","Error","forEach","profile","profileType","TextIndependentIdentification","profileId","privVoiceProfiles","push","fromProfiles","voiceProfileIds","map","join"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\node_modules\\microsoft-cognitiveservices-speech-sdk\\distrib\\es2015\\src\\sdk\\src\\sdk\\SpeakerIdentificationModel.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    VoiceProfile,\r\n    VoiceProfileType,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Defines SpeakerIdentificationModel class for Speaker Recognition\r\n * Model contains a set of profiles against which to identify speaker(s)\r\n * @class SpeakerIdentificationModel\r\n */\r\nexport class SpeakerIdentificationModel {\r\n    private privVoiceProfiles: VoiceProfile[] = [];\r\n\r\n    private constructor(profiles: VoiceProfile[]) {\r\n        Contracts.throwIfNullOrUndefined(profiles, \"VoiceProfiles\");\r\n        if (profiles.length === 0) {\r\n            throw new Error(\"Empty Voice Profiles array\");\r\n        }\r\n        profiles.forEach((profile: VoiceProfile) => {\r\n            if (profile.profileType !== VoiceProfileType.TextIndependentIdentification) {\r\n                throw new Error(\"Identification model can only be created from Identification profile: \" + profile.profileId);\r\n            }\r\n            this.privVoiceProfiles.push(profile);\r\n        });\r\n    }\r\n    public static fromProfiles(profiles: VoiceProfile[]): SpeakerIdentificationModel {\r\n        return new SpeakerIdentificationModel(profiles);\r\n    }\r\n\r\n    public get voiceProfileIds(): string {\r\n        return this.privVoiceProfiles.map((profile: VoiceProfile) => profile.profileId).join(\",\");\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}