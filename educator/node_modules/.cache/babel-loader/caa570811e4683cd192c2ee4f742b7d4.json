{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming'; // From https://material.io/design/motion/speed.html#duration\n\nconst ANIMATION_DURATION = 100;\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for Android, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\n\nconst CheckboxAndroid = _ref => {\n  let {\n    status,\n    theme,\n    disabled,\n    onPress,\n    testID,\n    ...rest\n  } = _ref;\n  const {\n    current: scaleAnim\n  } = React.useRef(new Animated.Value(1));\n  const isFirstRendering = React.useRef(true);\n  const {\n    animation: {\n      scale\n    }\n  } = theme;\n  React.useEffect(() => {\n    // Do not run animation on very first rendering\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n\n    const checked = status === 'checked';\n    Animated.sequence([Animated.timing(scaleAnim, {\n      toValue: 0.85,\n      duration: checked ? ANIMATION_DURATION * scale : 0,\n      useNativeDriver: false\n    }), Animated.timing(scaleAnim, {\n      toValue: 1,\n      duration: checked ? ANIMATION_DURATION * scale : ANIMATION_DURATION * scale * 1.75,\n      useNativeDriver: false\n    })]).start();\n  }, [status, scaleAnim, scale]);\n  const checked = status === 'checked';\n  const indeterminate = status === 'indeterminate';\n  const checkedColor = rest.color || theme.colors.accent;\n  const uncheckedColor = rest.uncheckedColor || color(theme.colors.text).alpha(theme.dark ? 0.7 : 0.54).rgb().string();\n  let rippleColor, checkboxColor;\n\n  if (disabled) {\n    rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n    checkboxColor = theme.colors.disabled;\n  } else {\n    rippleColor = color(checkedColor).fade(0.32).rgb().string();\n    checkboxColor = checked ? checkedColor : uncheckedColor;\n  }\n\n  const borderWidth = scaleAnim.interpolate({\n    inputRange: [0.8, 1],\n    outputRange: [7, 0]\n  });\n  const icon = indeterminate ? 'minus-box' : checked ? 'checkbox-marked' : 'checkbox-blank-outline';\n  return /*#__PURE__*/React.createElement(TouchableRipple, _extends({}, rest, {\n    borderless: true,\n    rippleColor: rippleColor,\n    onPress: onPress,\n    disabled: disabled // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n    ,\n    accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"checkbox\",\n    accessibilityState: {\n      disabled,\n      checked\n    },\n    accessibilityLiveRegion: \"polite\",\n    style: styles.container,\n    testID: testID\n  }), /*#__PURE__*/React.createElement(Animated.View, {\n    style: {\n      transform: [{\n        scale: scaleAnim\n      }]\n    }\n  }, /*#__PURE__*/React.createElement(MaterialCommunityIcon, {\n    allowFontScaling: false,\n    name: icon,\n    size: 24,\n    color: checkboxColor,\n    direction: \"ltr\"\n  }), /*#__PURE__*/React.createElement(View, {\n    style: [StyleSheet.absoluteFill, styles.fillContainer]\n  }, /*#__PURE__*/React.createElement(Animated.View, {\n    style: [styles.fill, {\n      borderColor: checkboxColor\n    }, {\n      borderWidth\n    }]\n  }))));\n};\n\nCheckboxAndroid.displayName = 'Checkbox.Android';\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    width: 36,\n    height: 36,\n    padding: 6\n  },\n  fillContainer: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  fill: {\n    height: 14,\n    width: 14\n  }\n});\nexport default withTheme(CheckboxAndroid); // @component-docs ignore-next-line\n\nconst CheckboxAndroidWithTheme = withTheme(CheckboxAndroid); // @component-docs ignore-next-line\n\nexport { CheckboxAndroidWithTheme as CheckboxAndroid };","map":{"version":3,"mappings":"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","names":["React","Animated","View","StyleSheet","color","MaterialCommunityIcon","TouchableRipple","withTheme","ANIMATION_DURATION","CheckboxAndroid","status","theme","disabled","onPress","testID","rest","current","scaleAnim","useRef","Value","isFirstRendering","animation","scale","useEffect","checked","sequence","timing","toValue","duration","useNativeDriver","start","indeterminate","checkedColor","colors","accent","uncheckedColor","text","alpha","dark","rgb","string","rippleColor","checkboxColor","fade","borderWidth","interpolate","inputRange","outputRange","icon","borderless","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","accessibilityLiveRegion","style","styles","container","transform","allowFontScaling","name","size","direction","absoluteFill","fillContainer","fill","borderColor","displayName","create","borderRadius","width","height","padding","alignItems","justifyContent","CheckboxAndroidWithTheme"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\node_modules\\react-native-paper\\lib\\module\\components\\Checkbox\\CheckboxAndroid.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n// From https://material.io/design/motion/speed.html#duration\nconst ANIMATION_DURATION = 100;\n\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for Android, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst CheckboxAndroid = ({\n  status,\n  theme,\n  disabled,\n  onPress,\n  testID,\n  ...rest\n}: Props) => {\n  const { current: scaleAnim } = React.useRef<Animated.Value>(\n    new Animated.Value(1)\n  );\n  const isFirstRendering = React.useRef<boolean>(true);\n\n  const {\n    animation: { scale },\n  } = theme;\n\n  React.useEffect(() => {\n    // Do not run animation on very first rendering\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n\n    const checked = status === 'checked';\n\n    Animated.sequence([\n      Animated.timing(scaleAnim, {\n        toValue: 0.85,\n        duration: checked ? ANIMATION_DURATION * scale : 0,\n        useNativeDriver: false,\n      }),\n      Animated.timing(scaleAnim, {\n        toValue: 1,\n        duration: checked\n          ? ANIMATION_DURATION * scale\n          : ANIMATION_DURATION * scale * 1.75,\n        useNativeDriver: false,\n      }),\n    ]).start();\n  }, [status, scaleAnim, scale]);\n\n  const checked = status === 'checked';\n  const indeterminate = status === 'indeterminate';\n  const checkedColor = rest.color || theme.colors.accent;\n  const uncheckedColor =\n    rest.uncheckedColor ||\n    color(theme.colors.text)\n      .alpha(theme.dark ? 0.7 : 0.54)\n      .rgb()\n      .string();\n\n  let rippleColor, checkboxColor;\n\n  if (disabled) {\n    rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n    checkboxColor = theme.colors.disabled;\n  } else {\n    rippleColor = color(checkedColor).fade(0.32).rgb().string();\n    checkboxColor = checked ? checkedColor : uncheckedColor;\n  }\n\n  const borderWidth = scaleAnim.interpolate({\n    inputRange: [0.8, 1],\n    outputRange: [7, 0],\n  });\n\n  const icon = indeterminate\n    ? 'minus-box'\n    : checked\n    ? 'checkbox-marked'\n    : 'checkbox-blank-outline';\n\n  return (\n    <TouchableRipple\n      {...rest}\n      borderless\n      rippleColor={rippleColor}\n      onPress={onPress}\n      disabled={disabled}\n      // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n      accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n      accessibilityComponentType=\"button\"\n      accessibilityRole=\"checkbox\"\n      accessibilityState={{ disabled, checked }}\n      accessibilityLiveRegion=\"polite\"\n      style={styles.container}\n      testID={testID}\n    >\n      <Animated.View style={{ transform: [{ scale: scaleAnim }] }}>\n        <MaterialCommunityIcon\n          allowFontScaling={false}\n          name={icon}\n          size={24}\n          color={checkboxColor}\n          direction=\"ltr\"\n        />\n        <View style={[StyleSheet.absoluteFill, styles.fillContainer]}>\n          <Animated.View\n            style={[\n              styles.fill,\n              { borderColor: checkboxColor },\n              { borderWidth },\n            ]}\n          />\n        </View>\n      </Animated.View>\n    </TouchableRipple>\n  );\n};\n\nCheckboxAndroid.displayName = 'Checkbox.Android';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    width: 36,\n    height: 36,\n    padding: 6,\n  },\n  fillContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  fill: {\n    height: 14,\n    width: 14,\n  },\n});\n\nexport default withTheme(CheckboxAndroid);\n\n// @component-docs ignore-next-line\nconst CheckboxAndroidWithTheme = withTheme(CheckboxAndroid);\n// @component-docs ignore-next-line\nexport { CheckboxAndroidWithTheme as CheckboxAndroid };\n"]},"metadata":{},"sourceType":"module"}