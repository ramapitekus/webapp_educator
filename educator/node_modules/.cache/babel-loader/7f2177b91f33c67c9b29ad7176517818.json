{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport { Animated, Platform, StyleSheet, TouchableWithoutFeedback, View } from 'react-native';\nimport color from 'color';\nimport Icon from './Icon';\nimport MaterialCommunityIcon from './MaterialCommunityIcon';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport TouchableRipple from './TouchableRipple/TouchableRipple';\nimport { withTheme } from '../core/theming';\nimport { black, white } from '../styles/colors';\n/**\n * Chips can be used to display entities in small blocks.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/chip-1.png\" />\n *     <figcaption>Flat chip</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/chip-2.png\" />\n *     <figcaption>Outlined chip</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Chip } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Chip icon=\"information\" onPress={() => console.log('Pressed')}>Example Chip</Chip>\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nconst Chip = _ref => {\n  let {\n    mode = 'flat',\n    children,\n    icon,\n    avatar,\n    selected = false,\n    disabled = false,\n    accessibilityLabel,\n    closeIconAccessibilityLabel = 'Close',\n    onPress,\n    onLongPress,\n    onClose,\n    closeIcon,\n    textStyle,\n    style,\n    theme,\n    testID,\n    selectedColor,\n    ellipsizeMode,\n    ...rest\n  } = _ref;\n  const {\n    current: elevation\n  } = React.useRef(new Animated.Value(0));\n\n  const handlePressIn = () => {\n    const {\n      scale\n    } = theme.animation;\n    Animated.timing(elevation, {\n      toValue: 4,\n      duration: 200 * scale,\n      useNativeDriver: true\n    }).start();\n  };\n\n  const handlePressOut = () => {\n    const {\n      scale\n    } = theme.animation;\n    Animated.timing(elevation, {\n      toValue: 0,\n      duration: 150 * scale,\n      useNativeDriver: true\n    }).start();\n  };\n\n  const {\n    dark,\n    colors\n  } = theme;\n  const defaultBackgroundColor = mode === 'outlined' ? colors.surface : dark ? '#383838' : '#ebebeb';\n  const {\n    backgroundColor = defaultBackgroundColor,\n    borderRadius = 16\n  } = StyleSheet.flatten(style) || {};\n  const borderColor = mode === 'outlined' ? color(selectedColor !== undefined ? selectedColor : color(dark ? white : black)).alpha(0.29).rgb().string() : backgroundColor;\n  const textColor = disabled ? colors.disabled : color(selectedColor !== undefined ? selectedColor : colors.text).alpha(0.87).rgb().string();\n  const iconColor = disabled ? colors.disabled : color(selectedColor !== undefined ? selectedColor : colors.text).alpha(0.54).rgb().string();\n  const backgroundColorString = typeof backgroundColor === 'string' ? backgroundColor : defaultBackgroundColor;\n  const selectedBackgroundColor = (dark ? color(backgroundColorString).lighten(mode === 'outlined' ? 0.2 : 0.4) : color(backgroundColorString).darken(mode === 'outlined' ? 0.08 : 0.2)).rgb().string();\n  const underlayColor = selectedColor ? color(selectedColor).fade(0.5).rgb().string() : selectedBackgroundColor;\n  const accessibilityTraits = ['button'];\n  const accessibilityState = {\n    selected,\n    disabled\n  };\n\n  if (selected) {\n    accessibilityTraits.push('selected');\n  }\n\n  if (disabled) {\n    accessibilityTraits.push('disabled');\n  }\n\n  return /*#__PURE__*/React.createElement(Surface, _extends({\n    style: [styles.container, {\n      elevation: Platform.OS === 'android' ? elevation : 0,\n      backgroundColor: selected ? selectedBackgroundColor : backgroundColor,\n      borderColor,\n      borderRadius\n    }, style]\n  }, rest), /*#__PURE__*/React.createElement(TouchableRipple, {\n    borderless: true,\n    delayPressIn: 0,\n    style: [{\n      borderRadius\n    }, styles.touchable],\n    onPress: onPress,\n    onLongPress: onLongPress,\n    onPressIn: handlePressIn,\n    onPressOut: handlePressOut,\n    underlayColor: underlayColor,\n    disabled: disabled,\n    accessibilityLabel: accessibilityLabel // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n    ,\n    accessibilityTraits: accessibilityTraits,\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: accessibilityState,\n    testID: testID\n  }, /*#__PURE__*/React.createElement(View, {\n    style: [styles.content, {\n      paddingRight: onClose ? 32 : 4\n    }]\n  }, avatar && !icon ? /*#__PURE__*/React.createElement(View, {\n    style: [styles.avatarWrapper, disabled && {\n      opacity: 0.26\n    }]\n  }, /*#__PURE__*/React.isValidElement(avatar) ? /*#__PURE__*/React.cloneElement(avatar, {\n    style: [styles.avatar, avatar.props.style]\n  }) : avatar) : null, icon || selected ? /*#__PURE__*/React.createElement(View, {\n    style: [styles.icon, avatar ? [styles.avatar, styles.avatarSelected] : null]\n  }, icon ? /*#__PURE__*/React.createElement(Icon, {\n    source: icon,\n    color: avatar ? white : iconColor,\n    size: 18\n  }) : /*#__PURE__*/React.createElement(MaterialCommunityIcon, {\n    name: \"check\",\n    color: avatar ? white : iconColor,\n    size: 18,\n    direction: \"ltr\"\n  })) : null, /*#__PURE__*/React.createElement(Text, {\n    selectable: false,\n    numberOfLines: 1,\n    style: [styles.text, { ...theme.fonts.regular,\n      color: textColor,\n      marginRight: onClose ? 0 : 8,\n      marginLeft: avatar || icon || selected ? 4 : 8\n    }, textStyle],\n    ellipsizeMode: ellipsizeMode\n  }, children))), onClose ? /*#__PURE__*/React.createElement(View, {\n    style: styles.closeButtonStyle\n  }, /*#__PURE__*/React.createElement(TouchableWithoutFeedback, {\n    onPress: onClose // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n    ,\n    accessibilityTraits: \"button\",\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityLabel: closeIconAccessibilityLabel\n  }, /*#__PURE__*/React.createElement(View, {\n    style: [styles.icon, styles.closeIcon]\n  }, closeIcon ? /*#__PURE__*/React.createElement(Icon, {\n    source: closeIcon,\n    color: iconColor,\n    size: 16\n  }) : /*#__PURE__*/React.createElement(MaterialCommunityIcon, {\n    name: \"close-circle\",\n    size: 16,\n    color: iconColor,\n    direction: \"ltr\"\n  })))) : null);\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    borderWidth: StyleSheet.hairlineWidth,\n    borderStyle: 'solid',\n    flexDirection: Platform.select({\n      default: 'column',\n      web: 'row'\n    })\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingLeft: 4,\n    position: 'relative',\n    flexGrow: 1\n  },\n  icon: {\n    padding: 4,\n    alignSelf: 'center'\n  },\n  closeIcon: {\n    marginRight: 4\n  },\n  text: {\n    minHeight: 24,\n    lineHeight: 24,\n    textAlignVertical: 'center',\n    marginVertical: 4\n  },\n  avatar: {\n    width: 24,\n    height: 24,\n    borderRadius: 12\n  },\n  avatarWrapper: {\n    marginRight: 4\n  },\n  avatarSelected: {\n    position: 'absolute',\n    top: 4,\n    left: 4,\n    backgroundColor: 'rgba(0, 0, 0, .29)'\n  },\n  closeButtonStyle: {\n    position: 'absolute',\n    right: 0,\n    height: '100%',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  touchable: {\n    flexGrow: 1\n  }\n});\nexport default withTheme(Chip);","map":{"version":3,"mappings":"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","names":["React","Animated","Platform","StyleSheet","TouchableWithoutFeedback","View","color","Icon","MaterialCommunityIcon","Surface","Text","TouchableRipple","withTheme","black","white","Chip","mode","children","icon","avatar","selected","disabled","accessibilityLabel","closeIconAccessibilityLabel","onPress","onLongPress","onClose","closeIcon","textStyle","style","theme","testID","selectedColor","ellipsizeMode","rest","current","elevation","useRef","Value","handlePressIn","scale","animation","timing","toValue","duration","useNativeDriver","start","handlePressOut","dark","colors","defaultBackgroundColor","surface","backgroundColor","borderRadius","flatten","borderColor","undefined","alpha","rgb","string","textColor","text","iconColor","backgroundColorString","selectedBackgroundColor","lighten","darken","underlayColor","fade","accessibilityTraits","accessibilityState","push","styles","container","OS","borderless","delayPressIn","touchable","onPressIn","onPressOut","accessibilityComponentType","accessibilityRole","content","paddingRight","avatarWrapper","opacity","isValidElement","cloneElement","props","avatarSelected","source","size","name","direction","selectable","numberOfLines","fonts","regular","marginRight","marginLeft","closeButtonStyle","create","borderWidth","hairlineWidth","borderStyle","flexDirection","select","default","web","alignItems","paddingLeft","position","flexGrow","padding","alignSelf","minHeight","lineHeight","textAlignVertical","marginVertical","width","height","top","left","right","justifyContent"],"sources":["C:\\Users\\olesr\\OneDrive\\Documents\\webapp_educ\\educator\\node_modules\\react-native-paper\\lib\\module\\components\\Chip.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  AccessibilityState,\n  Animated,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport color from 'color';\nimport type { IconSource } from './Icon';\nimport Icon from './Icon';\nimport MaterialCommunityIcon from './MaterialCommunityIcon';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport TouchableRipple from './TouchableRipple/TouchableRipple';\nimport { withTheme } from '../core/theming';\nimport { black, white } from '../styles/colors';\nimport type { EllipsizeProp } from '../types';\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Mode of the chip.\n   * - `flat` - flat chip without outline.\n   * - `outlined` - chip with an outline.\n   */\n  mode?: 'flat' | 'outlined';\n  /**\n   * Text content of the `Chip`.\n   */\n  children: React.ReactNode;\n  /**\n   * Icon to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  icon?: IconSource;\n  /**\n   * Avatar to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  avatar?: React.ReactNode;\n  /**\n   * Icon to display as the close button for the `Chip`. The icon appears only when the onClose prop is specified.\n   */\n  closeIcon?: IconSource;\n  /**\n   * Whether chip is selected.\n   */\n  selected?: boolean;\n  /**\n   * Whether to style the chip color as selected.\n   */\n  selectedColor?: string;\n  /**\n   * Whether the chip is disabled. A disabled chip is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the chip. This is read by the screen reader when the user taps the chip.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility label for the close icon. This is read by the screen reader when the user taps the close icon.\n   */\n  closeIconAccessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Function to execute on close button press. The close button appears only when this prop is specified.\n   */\n  onClose?: () => void;\n  /**\n   * Style of chip's text\n   */\n  textStyle?: StyleProp<TextStyle>;\n  style?: StyleProp<ViewStyle>;\n\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Pass down testID from chip props to touchable for Detox tests.\n   */\n  testID?: string;\n  /**\n   * Ellipsize Mode for the children text\n   */\n  ellipsizeMode?: EllipsizeProp;\n};\n\n/**\n * Chips can be used to display entities in small blocks.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/chip-1.png\" />\n *     <figcaption>Flat chip</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/chip-2.png\" />\n *     <figcaption>Outlined chip</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Chip } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Chip icon=\"information\" onPress={() => console.log('Pressed')}>Example Chip</Chip>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Chip = ({\n  mode = 'flat',\n  children,\n  icon,\n  avatar,\n  selected = false,\n  disabled = false,\n  accessibilityLabel,\n  closeIconAccessibilityLabel = 'Close',\n  onPress,\n  onLongPress,\n  onClose,\n  closeIcon,\n  textStyle,\n  style,\n  theme,\n  testID,\n  selectedColor,\n  ellipsizeMode,\n  ...rest\n}: Props) => {\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(0)\n  );\n\n  const handlePressIn = () => {\n    const { scale } = theme.animation;\n    Animated.timing(elevation, {\n      toValue: 4,\n      duration: 200 * scale,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const handlePressOut = () => {\n    const { scale } = theme.animation;\n    Animated.timing(elevation, {\n      toValue: 0,\n      duration: 150 * scale,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const { dark, colors } = theme;\n  const defaultBackgroundColor =\n    mode === 'outlined' ? colors.surface : dark ? '#383838' : '#ebebeb';\n\n  const {\n    backgroundColor = defaultBackgroundColor,\n    borderRadius = 16,\n  } = (StyleSheet.flatten(style) || {}) as ViewStyle;\n\n  const borderColor =\n    mode === 'outlined'\n      ? color(\n          selectedColor !== undefined\n            ? selectedColor\n            : color(dark ? white : black)\n        )\n          .alpha(0.29)\n          .rgb()\n          .string()\n      : backgroundColor;\n  const textColor = disabled\n    ? colors.disabled\n    : color(selectedColor !== undefined ? selectedColor : colors.text)\n        .alpha(0.87)\n        .rgb()\n        .string();\n  const iconColor = disabled\n    ? colors.disabled\n    : color(selectedColor !== undefined ? selectedColor : colors.text)\n        .alpha(0.54)\n        .rgb()\n        .string();\n\n  const backgroundColorString =\n    typeof backgroundColor === 'string'\n      ? backgroundColor\n      : defaultBackgroundColor;\n  const selectedBackgroundColor = (dark\n    ? color(backgroundColorString).lighten(mode === 'outlined' ? 0.2 : 0.4)\n    : color(backgroundColorString).darken(mode === 'outlined' ? 0.08 : 0.2)\n  )\n    .rgb()\n    .string();\n\n  const underlayColor = selectedColor\n    ? color(selectedColor).fade(0.5).rgb().string()\n    : selectedBackgroundColor;\n\n  const accessibilityTraits = ['button'];\n  const accessibilityState: AccessibilityState = {\n    selected,\n    disabled,\n  };\n\n  if (selected) {\n    accessibilityTraits.push('selected');\n  }\n\n  if (disabled) {\n    accessibilityTraits.push('disabled');\n  }\n\n  return (\n    <Surface\n      style={\n        [\n          styles.container,\n          {\n            elevation: Platform.OS === 'android' ? elevation : 0,\n            backgroundColor: selected\n              ? selectedBackgroundColor\n              : backgroundColor,\n            borderColor,\n            borderRadius,\n          },\n          style,\n        ] as StyleProp<ViewStyle>\n      }\n      {...rest}\n    >\n      <TouchableRipple\n        borderless\n        delayPressIn={0}\n        style={[{ borderRadius }, styles.touchable]}\n        onPress={onPress}\n        onLongPress={onLongPress}\n        onPressIn={handlePressIn}\n        onPressOut={handlePressOut}\n        underlayColor={underlayColor}\n        disabled={disabled}\n        accessibilityLabel={accessibilityLabel}\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        accessibilityTraits={accessibilityTraits}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={accessibilityState}\n        testID={testID}\n      >\n        <View style={[styles.content, { paddingRight: onClose ? 32 : 4 }]}>\n          {avatar && !icon ? (\n            <View style={[styles.avatarWrapper, disabled && { opacity: 0.26 }]}>\n              {React.isValidElement(avatar)\n                ? React.cloneElement(avatar, {\n                    style: [styles.avatar, avatar.props.style],\n                  })\n                : avatar}\n            </View>\n          ) : null}\n          {icon || selected ? (\n            <View\n              style={[\n                styles.icon,\n                avatar ? [styles.avatar, styles.avatarSelected] : null,\n              ]}\n            >\n              {icon ? (\n                <Icon\n                  source={icon}\n                  color={avatar ? white : iconColor}\n                  size={18}\n                />\n              ) : (\n                <MaterialCommunityIcon\n                  name=\"check\"\n                  color={avatar ? white : iconColor}\n                  size={18}\n                  direction=\"ltr\"\n                />\n              )}\n            </View>\n          ) : null}\n          <Text\n            selectable={false}\n            numberOfLines={1}\n            style={[\n              styles.text,\n              {\n                ...theme.fonts.regular,\n                color: textColor,\n                marginRight: onClose ? 0 : 8,\n                marginLeft: avatar || icon || selected ? 4 : 8,\n              },\n              textStyle,\n            ]}\n            ellipsizeMode={ellipsizeMode}\n          >\n            {children}\n          </Text>\n        </View>\n      </TouchableRipple>\n      {onClose ? (\n        <View style={styles.closeButtonStyle}>\n          <TouchableWithoutFeedback\n            onPress={onClose}\n            // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n            accessibilityTraits=\"button\"\n            accessibilityComponentType=\"button\"\n            accessibilityRole=\"button\"\n            accessibilityLabel={closeIconAccessibilityLabel}\n          >\n            <View style={[styles.icon, styles.closeIcon]}>\n              {closeIcon ? (\n                <Icon source={closeIcon} color={iconColor} size={16} />\n              ) : (\n                <MaterialCommunityIcon\n                  name=\"close-circle\"\n                  size={16}\n                  color={iconColor}\n                  direction=\"ltr\"\n                />\n              )}\n            </View>\n          </TouchableWithoutFeedback>\n        </View>\n      ) : null}\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    borderWidth: StyleSheet.hairlineWidth,\n    borderStyle: 'solid',\n    flexDirection: Platform.select({ default: 'column', web: 'row' }),\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingLeft: 4,\n    position: 'relative',\n    flexGrow: 1,\n  },\n  icon: {\n    padding: 4,\n    alignSelf: 'center',\n  },\n  closeIcon: {\n    marginRight: 4,\n  },\n  text: {\n    minHeight: 24,\n    lineHeight: 24,\n    textAlignVertical: 'center',\n    marginVertical: 4,\n  },\n  avatar: {\n    width: 24,\n    height: 24,\n    borderRadius: 12,\n  },\n  avatarWrapper: {\n    marginRight: 4,\n  },\n  avatarSelected: {\n    position: 'absolute',\n    top: 4,\n    left: 4,\n    backgroundColor: 'rgba(0, 0, 0, .29)',\n  },\n  closeButtonStyle: {\n    position: 'absolute',\n    right: 0,\n    height: '100%',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  touchable: {\n    flexGrow: 1,\n  },\n});\n\nexport default withTheme(Chip);\n"]},"metadata":{},"sourceType":"module"}